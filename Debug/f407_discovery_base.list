
f407_discovery_base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090fc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009284  08009284  0000a284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092a0  080092a0  0000b07c  2**0
                  CONTENTS
  4 .ARM          00000008  080092a0  080092a0  0000a2a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092a8  080092a8  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092a8  080092a8  0000a2a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080092ac  080092ac  0000a2ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  080092b0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          00000a64  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ae0  20000ae0  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000190ae  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000434d  00000000  00000000  0002415a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013e0  00000000  00000000  000284a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f36  00000000  00000000  00029888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000244c4  00000000  00000000  0002a7be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d810  00000000  00000000  0004ec82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdffb  00000000  00000000  0006c492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013a48d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000054f4  00000000  00000000  0013a4d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  0013f9c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800926c 	.word	0x0800926c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800926c 	.word	0x0800926c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b08c      	sub	sp, #48	@ 0x30
 80004bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004be:	f107 031c 	add.w	r3, r7, #28
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
 80004cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004ce:	2300      	movs	r3, #0
 80004d0:	61bb      	str	r3, [r7, #24]
 80004d2:	4b71      	ldr	r3, [pc, #452]	@ (8000698 <MX_GPIO_Init+0x1e0>)
 80004d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d6:	4a70      	ldr	r2, [pc, #448]	@ (8000698 <MX_GPIO_Init+0x1e0>)
 80004d8:	f043 0310 	orr.w	r3, r3, #16
 80004dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80004de:	4b6e      	ldr	r3, [pc, #440]	@ (8000698 <MX_GPIO_Init+0x1e0>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e2:	f003 0310 	and.w	r3, r3, #16
 80004e6:	61bb      	str	r3, [r7, #24]
 80004e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ea:	2300      	movs	r3, #0
 80004ec:	617b      	str	r3, [r7, #20]
 80004ee:	4b6a      	ldr	r3, [pc, #424]	@ (8000698 <MX_GPIO_Init+0x1e0>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f2:	4a69      	ldr	r2, [pc, #420]	@ (8000698 <MX_GPIO_Init+0x1e0>)
 80004f4:	f043 0304 	orr.w	r3, r3, #4
 80004f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80004fa:	4b67      	ldr	r3, [pc, #412]	@ (8000698 <MX_GPIO_Init+0x1e0>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fe:	f003 0304 	and.w	r3, r3, #4
 8000502:	617b      	str	r3, [r7, #20]
 8000504:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000506:	2300      	movs	r3, #0
 8000508:	613b      	str	r3, [r7, #16]
 800050a:	4b63      	ldr	r3, [pc, #396]	@ (8000698 <MX_GPIO_Init+0x1e0>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050e:	4a62      	ldr	r2, [pc, #392]	@ (8000698 <MX_GPIO_Init+0x1e0>)
 8000510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000514:	6313      	str	r3, [r2, #48]	@ 0x30
 8000516:	4b60      	ldr	r3, [pc, #384]	@ (8000698 <MX_GPIO_Init+0x1e0>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800051e:	613b      	str	r3, [r7, #16]
 8000520:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	4b5c      	ldr	r3, [pc, #368]	@ (8000698 <MX_GPIO_Init+0x1e0>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	4a5b      	ldr	r2, [pc, #364]	@ (8000698 <MX_GPIO_Init+0x1e0>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	6313      	str	r3, [r2, #48]	@ 0x30
 8000532:	4b59      	ldr	r3, [pc, #356]	@ (8000698 <MX_GPIO_Init+0x1e0>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053e:	2300      	movs	r3, #0
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	4b55      	ldr	r3, [pc, #340]	@ (8000698 <MX_GPIO_Init+0x1e0>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000546:	4a54      	ldr	r2, [pc, #336]	@ (8000698 <MX_GPIO_Init+0x1e0>)
 8000548:	f043 0302 	orr.w	r3, r3, #2
 800054c:	6313      	str	r3, [r2, #48]	@ 0x30
 800054e:	4b52      	ldr	r3, [pc, #328]	@ (8000698 <MX_GPIO_Init+0x1e0>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000552:	f003 0302 	and.w	r3, r3, #2
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	4b4e      	ldr	r3, [pc, #312]	@ (8000698 <MX_GPIO_Init+0x1e0>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000562:	4a4d      	ldr	r2, [pc, #308]	@ (8000698 <MX_GPIO_Init+0x1e0>)
 8000564:	f043 0308 	orr.w	r3, r3, #8
 8000568:	6313      	str	r3, [r2, #48]	@ 0x30
 800056a:	4b4b      	ldr	r3, [pc, #300]	@ (8000698 <MX_GPIO_Init+0x1e0>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056e:	f003 0308 	and.w	r3, r3, #8
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	2108      	movs	r1, #8
 800057a:	4848      	ldr	r0, [pc, #288]	@ (800069c <MX_GPIO_Init+0x1e4>)
 800057c:	f000 ffb2 	bl	80014e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000580:	2201      	movs	r2, #1
 8000582:	2101      	movs	r1, #1
 8000584:	4846      	ldr	r0, [pc, #280]	@ (80006a0 <MX_GPIO_Init+0x1e8>)
 8000586:	f000 ffad 	bl	80014e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800058a:	2200      	movs	r2, #0
 800058c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000590:	4844      	ldr	r0, [pc, #272]	@ (80006a4 <MX_GPIO_Init+0x1ec>)
 8000592:	f000 ffa7 	bl	80014e4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000596:	2308      	movs	r3, #8
 8000598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059a:	2301      	movs	r3, #1
 800059c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	2300      	movs	r3, #0
 80005a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a2:	2300      	movs	r3, #0
 80005a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005a6:	f107 031c 	add.w	r3, r7, #28
 80005aa:	4619      	mov	r1, r3
 80005ac:	483b      	ldr	r0, [pc, #236]	@ (800069c <MX_GPIO_Init+0x1e4>)
 80005ae:	f000 fde5 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80005b2:	2301      	movs	r3, #1
 80005b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b6:	2301      	movs	r3, #1
 80005b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005be:	2300      	movs	r3, #0
 80005c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005c2:	f107 031c 	add.w	r3, r7, #28
 80005c6:	4619      	mov	r1, r3
 80005c8:	4835      	ldr	r0, [pc, #212]	@ (80006a0 <MX_GPIO_Init+0x1e8>)
 80005ca:	f000 fdd7 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80005ce:	2308      	movs	r3, #8
 80005d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d2:	2302      	movs	r3, #2
 80005d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005da:	2300      	movs	r3, #0
 80005dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005de:	2305      	movs	r3, #5
 80005e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80005e2:	f107 031c 	add.w	r3, r7, #28
 80005e6:	4619      	mov	r1, r3
 80005e8:	482d      	ldr	r0, [pc, #180]	@ (80006a0 <MX_GPIO_Init+0x1e8>)
 80005ea:	f000 fdc7 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005ee:	2301      	movs	r3, #1
 80005f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f2:	2300      	movs	r3, #0
 80005f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	4619      	mov	r1, r3
 8000600:	4829      	ldr	r0, [pc, #164]	@ (80006a8 <MX_GPIO_Init+0x1f0>)
 8000602:	f000 fdbb 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000606:	2304      	movs	r3, #4
 8000608:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800060a:	2300      	movs	r3, #0
 800060c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000612:	f107 031c 	add.w	r3, r7, #28
 8000616:	4619      	mov	r1, r3
 8000618:	4824      	ldr	r0, [pc, #144]	@ (80006ac <MX_GPIO_Init+0x1f4>)
 800061a:	f000 fdaf 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800061e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000624:	2302      	movs	r3, #2
 8000626:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	2300      	movs	r3, #0
 800062a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062c:	2300      	movs	r3, #0
 800062e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000630:	2305      	movs	r3, #5
 8000632:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000634:	f107 031c 	add.w	r3, r7, #28
 8000638:	4619      	mov	r1, r3
 800063a:	481c      	ldr	r0, [pc, #112]	@ (80006ac <MX_GPIO_Init+0x1f4>)
 800063c:	f000 fd9e 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000640:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000644:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000646:	2301      	movs	r3, #1
 8000648:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064e:	2300      	movs	r3, #0
 8000650:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000652:	f107 031c 	add.w	r3, r7, #28
 8000656:	4619      	mov	r1, r3
 8000658:	4812      	ldr	r0, [pc, #72]	@ (80006a4 <MX_GPIO_Init+0x1ec>)
 800065a:	f000 fd8f 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800065e:	2320      	movs	r3, #32
 8000660:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000662:	2300      	movs	r3, #0
 8000664:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800066a:	f107 031c 	add.w	r3, r7, #28
 800066e:	4619      	mov	r1, r3
 8000670:	480c      	ldr	r0, [pc, #48]	@ (80006a4 <MX_GPIO_Init+0x1ec>)
 8000672:	f000 fd83 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000676:	2302      	movs	r3, #2
 8000678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800067a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800067e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000684:	f107 031c 	add.w	r3, r7, #28
 8000688:	4619      	mov	r1, r3
 800068a:	4804      	ldr	r0, [pc, #16]	@ (800069c <MX_GPIO_Init+0x1e4>)
 800068c:	f000 fd76 	bl	800117c <HAL_GPIO_Init>

}
 8000690:	bf00      	nop
 8000692:	3730      	adds	r7, #48	@ 0x30
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40023800 	.word	0x40023800
 800069c:	40021000 	.word	0x40021000
 80006a0:	40020800 	.word	0x40020800
 80006a4:	40020c00 	.word	0x40020c00
 80006a8:	40020000 	.word	0x40020000
 80006ac:	40020400 	.word	0x40020400

080006b0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006b4:	4b12      	ldr	r3, [pc, #72]	@ (8000700 <MX_I2C1_Init+0x50>)
 80006b6:	4a13      	ldr	r2, [pc, #76]	@ (8000704 <MX_I2C1_Init+0x54>)
 80006b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006ba:	4b11      	ldr	r3, [pc, #68]	@ (8000700 <MX_I2C1_Init+0x50>)
 80006bc:	4a12      	ldr	r2, [pc, #72]	@ (8000708 <MX_I2C1_Init+0x58>)
 80006be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000700 <MX_I2C1_Init+0x50>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000700 <MX_I2C1_Init+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000700 <MX_I2C1_Init+0x50>)
 80006ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000700 <MX_I2C1_Init+0x50>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006da:	4b09      	ldr	r3, [pc, #36]	@ (8000700 <MX_I2C1_Init+0x50>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e0:	4b07      	ldr	r3, [pc, #28]	@ (8000700 <MX_I2C1_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e6:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <MX_I2C1_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006ec:	4804      	ldr	r0, [pc, #16]	@ (8000700 <MX_I2C1_Init+0x50>)
 80006ee:	f003 f861 	bl	80037b4 <HAL_I2C_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006f8:	f000 f9ce 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000098 	.word	0x20000098
 8000704:	40005400 	.word	0x40005400
 8000708:	000186a0 	.word	0x000186a0

0800070c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	@ 0x28
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a19      	ldr	r2, [pc, #100]	@ (8000790 <HAL_I2C_MspInit+0x84>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d12c      	bne.n	8000788 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
 8000732:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <HAL_I2C_MspInit+0x88>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	4a17      	ldr	r2, [pc, #92]	@ (8000794 <HAL_I2C_MspInit+0x88>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	6313      	str	r3, [r2, #48]	@ 0x30
 800073e:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <HAL_I2C_MspInit+0x88>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800074a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800074e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000750:	2312      	movs	r3, #18
 8000752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000754:	2301      	movs	r3, #1
 8000756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000758:	2300      	movs	r3, #0
 800075a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800075c:	2304      	movs	r3, #4
 800075e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	4619      	mov	r1, r3
 8000766:	480c      	ldr	r0, [pc, #48]	@ (8000798 <HAL_I2C_MspInit+0x8c>)
 8000768:	f000 fd08 	bl	800117c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800076c:	2300      	movs	r3, #0
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	4b08      	ldr	r3, [pc, #32]	@ (8000794 <HAL_I2C_MspInit+0x88>)
 8000772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000774:	4a07      	ldr	r2, [pc, #28]	@ (8000794 <HAL_I2C_MspInit+0x88>)
 8000776:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800077a:	6413      	str	r3, [r2, #64]	@ 0x40
 800077c:	4b05      	ldr	r3, [pc, #20]	@ (8000794 <HAL_I2C_MspInit+0x88>)
 800077e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000780:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000788:	bf00      	nop
 800078a:	3728      	adds	r7, #40	@ 0x28
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40005400 	.word	0x40005400
 8000794:	40023800 	.word	0x40023800
 8000798:	40020400 	.word	0x40020400

0800079c <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007a0:	4b13      	ldr	r3, [pc, #76]	@ (80007f0 <MX_I2S3_Init+0x54>)
 80007a2:	4a14      	ldr	r2, [pc, #80]	@ (80007f4 <MX_I2S3_Init+0x58>)
 80007a4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007a6:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <MX_I2S3_Init+0x54>)
 80007a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007ac:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007ae:	4b10      	ldr	r3, [pc, #64]	@ (80007f0 <MX_I2S3_Init+0x54>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007b4:	4b0e      	ldr	r3, [pc, #56]	@ (80007f0 <MX_I2S3_Init+0x54>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007ba:	4b0d      	ldr	r3, [pc, #52]	@ (80007f0 <MX_I2S3_Init+0x54>)
 80007bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007c0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	@ (80007f0 <MX_I2S3_Init+0x54>)
 80007c4:	4a0c      	ldr	r2, [pc, #48]	@ (80007f8 <MX_I2S3_Init+0x5c>)
 80007c6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007c8:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <MX_I2S3_Init+0x54>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007ce:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <MX_I2S3_Init+0x54>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007d4:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <MX_I2S3_Init+0x54>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007da:	4805      	ldr	r0, [pc, #20]	@ (80007f0 <MX_I2S3_Init+0x54>)
 80007dc:	f003 f92e 	bl	8003a3c <HAL_I2S_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007e6:	f000 f957 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200000ec 	.word	0x200000ec
 80007f4:	40003c00 	.word	0x40003c00
 80007f8:	00017700 	.word	0x00017700

080007fc <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08e      	sub	sp, #56	@ 0x38
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a31      	ldr	r2, [pc, #196]	@ (80008ec <HAL_I2S_MspInit+0xf0>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d15a      	bne.n	80008e2 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800082c:	2301      	movs	r3, #1
 800082e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000830:	23c0      	movs	r3, #192	@ 0xc0
 8000832:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000834:	2302      	movs	r3, #2
 8000836:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	4618      	mov	r0, r3
 800083e:	f004 fa35 	bl	8004cac <HAL_RCCEx_PeriphCLKConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000848:	f000 f926 	bl	8000a98 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800084c:	2300      	movs	r3, #0
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	4b27      	ldr	r3, [pc, #156]	@ (80008f0 <HAL_I2S_MspInit+0xf4>)
 8000852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000854:	4a26      	ldr	r2, [pc, #152]	@ (80008f0 <HAL_I2S_MspInit+0xf4>)
 8000856:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800085a:	6413      	str	r3, [r2, #64]	@ 0x40
 800085c:	4b24      	ldr	r3, [pc, #144]	@ (80008f0 <HAL_I2S_MspInit+0xf4>)
 800085e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000860:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000868:	2300      	movs	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	4b20      	ldr	r3, [pc, #128]	@ (80008f0 <HAL_I2S_MspInit+0xf4>)
 800086e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000870:	4a1f      	ldr	r2, [pc, #124]	@ (80008f0 <HAL_I2S_MspInit+0xf4>)
 8000872:	f043 0301 	orr.w	r3, r3, #1
 8000876:	6313      	str	r3, [r2, #48]	@ 0x30
 8000878:	4b1d      	ldr	r3, [pc, #116]	@ (80008f0 <HAL_I2S_MspInit+0xf4>)
 800087a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087c:	f003 0301 	and.w	r3, r3, #1
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	4b19      	ldr	r3, [pc, #100]	@ (80008f0 <HAL_I2S_MspInit+0xf4>)
 800088a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088c:	4a18      	ldr	r2, [pc, #96]	@ (80008f0 <HAL_I2S_MspInit+0xf4>)
 800088e:	f043 0304 	orr.w	r3, r3, #4
 8000892:	6313      	str	r3, [r2, #48]	@ 0x30
 8000894:	4b16      	ldr	r3, [pc, #88]	@ (80008f0 <HAL_I2S_MspInit+0xf4>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000898:	f003 0304 	and.w	r3, r3, #4
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008a0:	2310      	movs	r3, #16
 80008a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008b0:	2306      	movs	r3, #6
 80008b2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b8:	4619      	mov	r1, r3
 80008ba:	480e      	ldr	r0, [pc, #56]	@ (80008f4 <HAL_I2S_MspInit+0xf8>)
 80008bc:	f000 fc5e 	bl	800117c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008c0:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80008c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008d2:	2306      	movs	r3, #6
 80008d4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008da:	4619      	mov	r1, r3
 80008dc:	4806      	ldr	r0, [pc, #24]	@ (80008f8 <HAL_I2S_MspInit+0xfc>)
 80008de:	f000 fc4d 	bl	800117c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80008e2:	bf00      	nop
 80008e4:	3738      	adds	r7, #56	@ 0x38
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40003c00 	.word	0x40003c00
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40020000 	.word	0x40020000
 80008f8:	40020800 	.word	0x40020800

080008fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000902:	f000 fa93 	bl	8000e2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000906:	f000 f85d 	bl	80009c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800090a:	f7ff fdd5 	bl	80004b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800090e:	f7ff fecf 	bl	80006b0 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000912:	f7ff ff43 	bl	800079c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000916:	f000 f8c5 	bl	8000aa4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800091a:	f008 f851 	bl	80089c0 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 800091e:	f000 f9e9 	bl	8000cf4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t btnState = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	71bb      	strb	r3, [r7, #6]
  uint8_t prevBtnState = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	73fb      	strb	r3, [r7, #15]

  uint32_t pressedTime = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	60bb      	str	r3, [r7, #8]
  uint8_t blinking = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	71fb      	strb	r3, [r7, #7]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000932:	f008 f86b 	bl	8008a0c <MX_USB_HOST_Process>

//    printf("Hello World-! \r\n");
//    HAL_Delay(1000);

    btnState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000936:	2101      	movs	r1, #1
 8000938:	4820      	ldr	r0, [pc, #128]	@ (80009bc <main+0xc0>)
 800093a:	f000 fdbb 	bl	80014b4 <HAL_GPIO_ReadPin>
 800093e:	4603      	mov	r3, r0
 8000940:	71bb      	strb	r3, [r7, #6]

    if (btnState == GPIO_PIN_SET && prevBtnState == GPIO_PIN_RESET)
 8000942:	79bb      	ldrb	r3, [r7, #6]
 8000944:	2b01      	cmp	r3, #1
 8000946:	d105      	bne.n	8000954 <main+0x58>
 8000948:	7bfb      	ldrb	r3, [r7, #15]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d102      	bne.n	8000954 <main+0x58>
        {
          pressedTime = HAL_GetTick();
 800094e:	f000 fad3 	bl	8000ef8 <HAL_GetTick>
 8000952:	60b8      	str	r0, [r7, #8]
        }

    if (btnState == GPIO_PIN_SET && (HAL_GetTick() - pressedTime >= 2000))
 8000954:	79bb      	ldrb	r3, [r7, #6]
 8000956:	2b01      	cmp	r3, #1
 8000958:	d109      	bne.n	800096e <main+0x72>
 800095a:	f000 facd 	bl	8000ef8 <HAL_GetTick>
 800095e:	4602      	mov	r2, r0
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	1ad3      	subs	r3, r2, r3
 8000964:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000968:	d301      	bcc.n	800096e <main+0x72>
    {
      blinking = 1;
 800096a:	2301      	movs	r3, #1
 800096c:	71fb      	strb	r3, [r7, #7]
    }

    if (btnState == GPIO_PIN_RESET && prevBtnState == GPIO_PIN_SET)
 800096e:	79bb      	ldrb	r3, [r7, #6]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d111      	bne.n	8000998 <main+0x9c>
 8000974:	7bfb      	ldrb	r3, [r7, #15]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d10e      	bne.n	8000998 <main+0x9c>
    {
      if (HAL_GetTick() - pressedTime < 2000)
 800097a:	f000 fabd 	bl	8000ef8 <HAL_GetTick>
 800097e:	4602      	mov	r2, r0
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000988:	d204      	bcs.n	8000994 <main+0x98>
      {
        HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);   // Green
 800098a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800098e:	480c      	ldr	r0, [pc, #48]	@ (80009c0 <main+0xc4>)
 8000990:	f000 fdc1 	bl	8001516 <HAL_GPIO_TogglePin>
      }
      blinking = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	71fb      	strb	r3, [r7, #7]
    }

    if (blinking)
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d008      	beq.n	80009b0 <main+0xb4>
    {
      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);    // Blue
 800099e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009a2:	4807      	ldr	r0, [pc, #28]	@ (80009c0 <main+0xc4>)
 80009a4:	f000 fdb7 	bl	8001516 <HAL_GPIO_TogglePin>
      HAL_Delay(50);
 80009a8:	2032      	movs	r0, #50	@ 0x32
 80009aa:	f000 fab1 	bl	8000f10 <HAL_Delay>
 80009ae:	e002      	b.n	80009b6 <main+0xba>
    }
    else
    {
      HAL_Delay(10);
 80009b0:	200a      	movs	r0, #10
 80009b2:	f000 faad 	bl	8000f10 <HAL_Delay>
    }

    /* USER CODE BEGIN 3 */
    prevBtnState = btnState;
 80009b6:	79bb      	ldrb	r3, [r7, #6]
 80009b8:	73fb      	strb	r3, [r7, #15]
    MX_USB_HOST_Process();
 80009ba:	e7ba      	b.n	8000932 <main+0x36>
 80009bc:	40020000 	.word	0x40020000
 80009c0:	40020c00 	.word	0x40020c00

080009c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b094      	sub	sp, #80	@ 0x50
 80009c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ca:	f107 0320 	add.w	r3, r7, #32
 80009ce:	2230      	movs	r2, #48	@ 0x30
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f008 fbbc 	bl	8009150 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e8:	2300      	movs	r3, #0
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	4b28      	ldr	r3, [pc, #160]	@ (8000a90 <SystemClock_Config+0xcc>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f0:	4a27      	ldr	r2, [pc, #156]	@ (8000a90 <SystemClock_Config+0xcc>)
 80009f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f8:	4b25      	ldr	r3, [pc, #148]	@ (8000a90 <SystemClock_Config+0xcc>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a04:	2300      	movs	r3, #0
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	4b22      	ldr	r3, [pc, #136]	@ (8000a94 <SystemClock_Config+0xd0>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a21      	ldr	r2, [pc, #132]	@ (8000a94 <SystemClock_Config+0xd0>)
 8000a0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a12:	6013      	str	r3, [r2, #0]
 8000a14:	4b1f      	ldr	r3, [pc, #124]	@ (8000a94 <SystemClock_Config+0xd0>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a20:	2301      	movs	r3, #1
 8000a22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a24:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a28:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a2e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a34:	2308      	movs	r3, #8
 8000a36:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a38:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a3c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a42:	2307      	movs	r3, #7
 8000a44:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a46:	f107 0320 	add.w	r3, r7, #32
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f003 fc96 	bl	800437c <HAL_RCC_OscConfig>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a56:	f000 f81f 	bl	8000a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5a:	230f      	movs	r3, #15
 8000a5c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a66:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a70:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a72:	f107 030c 	add.w	r3, r7, #12
 8000a76:	2105      	movs	r1, #5
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f003 fef7 	bl	800486c <HAL_RCC_ClockConfig>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a84:	f000 f808 	bl	8000a98 <Error_Handler>
  }
}
 8000a88:	bf00      	nop
 8000a8a:	3750      	adds	r7, #80	@ 0x50
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40007000 	.word	0x40007000

08000a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9c:	b672      	cpsid	i
}
 8000a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <Error_Handler+0x8>

08000aa4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000aa8:	4b17      	ldr	r3, [pc, #92]	@ (8000b08 <MX_SPI1_Init+0x64>)
 8000aaa:	4a18      	ldr	r2, [pc, #96]	@ (8000b0c <MX_SPI1_Init+0x68>)
 8000aac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aae:	4b16      	ldr	r3, [pc, #88]	@ (8000b08 <MX_SPI1_Init+0x64>)
 8000ab0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ab4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ab6:	4b14      	ldr	r3, [pc, #80]	@ (8000b08 <MX_SPI1_Init+0x64>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000abc:	4b12      	ldr	r3, [pc, #72]	@ (8000b08 <MX_SPI1_Init+0x64>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ac2:	4b11      	ldr	r3, [pc, #68]	@ (8000b08 <MX_SPI1_Init+0x64>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b08 <MX_SPI1_Init+0x64>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	@ (8000b08 <MX_SPI1_Init+0x64>)
 8000ad0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ad4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b08 <MX_SPI1_Init+0x64>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000adc:	4b0a      	ldr	r3, [pc, #40]	@ (8000b08 <MX_SPI1_Init+0x64>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ae2:	4b09      	ldr	r3, [pc, #36]	@ (8000b08 <MX_SPI1_Init+0x64>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ae8:	4b07      	ldr	r3, [pc, #28]	@ (8000b08 <MX_SPI1_Init+0x64>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000aee:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <MX_SPI1_Init+0x64>)
 8000af0:	220a      	movs	r2, #10
 8000af2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000af4:	4804      	ldr	r0, [pc, #16]	@ (8000b08 <MX_SPI1_Init+0x64>)
 8000af6:	f004 fa1b 	bl	8004f30 <HAL_SPI_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b00:	f7ff ffca 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000134 	.word	0x20000134
 8000b0c:	40013000 	.word	0x40013000

08000b10 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	@ 0x28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a19      	ldr	r2, [pc, #100]	@ (8000b94 <HAL_SPI_MspInit+0x84>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d12b      	bne.n	8000b8a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	4b18      	ldr	r3, [pc, #96]	@ (8000b98 <HAL_SPI_MspInit+0x88>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b3a:	4a17      	ldr	r2, [pc, #92]	@ (8000b98 <HAL_SPI_MspInit+0x88>)
 8000b3c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b40:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b42:	4b15      	ldr	r3, [pc, #84]	@ (8000b98 <HAL_SPI_MspInit+0x88>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	4b11      	ldr	r3, [pc, #68]	@ (8000b98 <HAL_SPI_MspInit+0x88>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	4a10      	ldr	r2, [pc, #64]	@ (8000b98 <HAL_SPI_MspInit+0x88>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b98 <HAL_SPI_MspInit+0x88>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b6a:	23e0      	movs	r3, #224	@ 0xe0
 8000b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b7a:	2305      	movs	r3, #5
 8000b7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	4619      	mov	r1, r3
 8000b84:	4805      	ldr	r0, [pc, #20]	@ (8000b9c <HAL_SPI_MspInit+0x8c>)
 8000b86:	f000 faf9 	bl	800117c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	3728      	adds	r7, #40	@ 0x28
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40013000 	.word	0x40013000
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40020000 	.word	0x40020000

08000ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	607b      	str	r3, [r7, #4]
 8000baa:	4b10      	ldr	r3, [pc, #64]	@ (8000bec <HAL_MspInit+0x4c>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bae:	4a0f      	ldr	r2, [pc, #60]	@ (8000bec <HAL_MspInit+0x4c>)
 8000bb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bec <HAL_MspInit+0x4c>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	603b      	str	r3, [r7, #0]
 8000bc6:	4b09      	ldr	r3, [pc, #36]	@ (8000bec <HAL_MspInit+0x4c>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bca:	4a08      	ldr	r2, [pc, #32]	@ (8000bec <HAL_MspInit+0x4c>)
 8000bcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bd2:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <HAL_MspInit+0x4c>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bde:	2007      	movs	r0, #7
 8000be0:	f000 fa8a 	bl	80010f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40023800 	.word	0x40023800

08000bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <NMI_Handler+0x4>

08000bf8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <HardFault_Handler+0x4>

08000c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <MemManage_Handler+0x4>

08000c08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <BusFault_Handler+0x4>

08000c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <UsageFault_Handler+0x4>

08000c18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c46:	f000 f943 	bl	8000ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c54:	4802      	ldr	r0, [pc, #8]	@ (8000c60 <OTG_FS_IRQHandler+0x10>)
 8000c56:	f000 ff59 	bl	8001b0c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	200005b8 	.word	0x200005b8

08000c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c6c:	4a14      	ldr	r2, [pc, #80]	@ (8000cc0 <_sbrk+0x5c>)
 8000c6e:	4b15      	ldr	r3, [pc, #84]	@ (8000cc4 <_sbrk+0x60>)
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c78:	4b13      	ldr	r3, [pc, #76]	@ (8000cc8 <_sbrk+0x64>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d102      	bne.n	8000c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c80:	4b11      	ldr	r3, [pc, #68]	@ (8000cc8 <_sbrk+0x64>)
 8000c82:	4a12      	ldr	r2, [pc, #72]	@ (8000ccc <_sbrk+0x68>)
 8000c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c86:	4b10      	ldr	r3, [pc, #64]	@ (8000cc8 <_sbrk+0x64>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d207      	bcs.n	8000ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c94:	f008 fa74 	bl	8009180 <__errno>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca2:	e009      	b.n	8000cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca4:	4b08      	ldr	r3, [pc, #32]	@ (8000cc8 <_sbrk+0x64>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000caa:	4b07      	ldr	r3, [pc, #28]	@ (8000cc8 <_sbrk+0x64>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	4a05      	ldr	r2, [pc, #20]	@ (8000cc8 <_sbrk+0x64>)
 8000cb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3718      	adds	r7, #24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20020000 	.word	0x20020000
 8000cc4:	00000400 	.word	0x00000400
 8000cc8:	2000018c 	.word	0x2000018c
 8000ccc:	20000ae0 	.word	0x20000ae0

08000cd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cd4:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <SystemInit+0x20>)
 8000cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cda:	4a05      	ldr	r2, [pc, #20]	@ (8000cf0 <SystemInit+0x20>)
 8000cdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ce0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	@ (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000cfa:	4a12      	ldr	r2, [pc, #72]	@ (8000d44 <MX_USART2_UART_Init+0x50>)
 8000cfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cfe:	4b10      	ldr	r3, [pc, #64]	@ (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	@ (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d12:	4b0b      	ldr	r3, [pc, #44]	@ (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d18:	4b09      	ldr	r3, [pc, #36]	@ (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1e:	4b08      	ldr	r3, [pc, #32]	@ (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d24:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d2a:	4805      	ldr	r0, [pc, #20]	@ (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d2c:	f004 f989 	bl	8005042 <HAL_UART_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d36:	f7ff feaf 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000190 	.word	0x20000190
 8000d44:	40004400 	.word	0x40004400

08000d48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08a      	sub	sp, #40	@ 0x28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a19      	ldr	r2, [pc, #100]	@ (8000dcc <HAL_UART_MspInit+0x84>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d12b      	bne.n	8000dc2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	4b18      	ldr	r3, [pc, #96]	@ (8000dd0 <HAL_UART_MspInit+0x88>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d72:	4a17      	ldr	r2, [pc, #92]	@ (8000dd0 <HAL_UART_MspInit+0x88>)
 8000d74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d7a:	4b15      	ldr	r3, [pc, #84]	@ (8000dd0 <HAL_UART_MspInit+0x88>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	4b11      	ldr	r3, [pc, #68]	@ (8000dd0 <HAL_UART_MspInit+0x88>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	4a10      	ldr	r2, [pc, #64]	@ (8000dd0 <HAL_UART_MspInit+0x88>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d96:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd0 <HAL_UART_MspInit+0x88>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000da2:	230c      	movs	r3, #12
 8000da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dae:	2303      	movs	r3, #3
 8000db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000db2:	2307      	movs	r3, #7
 8000db4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4805      	ldr	r0, [pc, #20]	@ (8000dd4 <HAL_UART_MspInit+0x8c>)
 8000dbe:	f000 f9dd 	bl	800117c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000dc2:	bf00      	nop
 8000dc4:	3728      	adds	r7, #40	@ 0x28
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40004400 	.word	0x40004400
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40020000 	.word	0x40020000

08000dd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dd8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e10 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ddc:	f7ff ff78 	bl	8000cd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de0:	480c      	ldr	r0, [pc, #48]	@ (8000e14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000de2:	490d      	ldr	r1, [pc, #52]	@ (8000e18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000de4:	4a0d      	ldr	r2, [pc, #52]	@ (8000e1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de8:	e002      	b.n	8000df0 <LoopCopyDataInit>

08000dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dee:	3304      	adds	r3, #4

08000df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df4:	d3f9      	bcc.n	8000dea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df6:	4a0a      	ldr	r2, [pc, #40]	@ (8000e20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000df8:	4c0a      	ldr	r4, [pc, #40]	@ (8000e24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dfc:	e001      	b.n	8000e02 <LoopFillZerobss>

08000dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e00:	3204      	adds	r2, #4

08000e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e04:	d3fb      	bcc.n	8000dfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e06:	f008 f9c1 	bl	800918c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e0a:	f7ff fd77 	bl	80008fc <main>
  bx  lr    
 8000e0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e18:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000e1c:	080092b0 	.word	0x080092b0
  ldr r2, =_sbss
 8000e20:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000e24:	20000ae0 	.word	0x20000ae0

08000e28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e28:	e7fe      	b.n	8000e28 <ADC_IRQHandler>
	...

08000e2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e30:	4b0e      	ldr	r3, [pc, #56]	@ (8000e6c <HAL_Init+0x40>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a0d      	ldr	r2, [pc, #52]	@ (8000e6c <HAL_Init+0x40>)
 8000e36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e6c <HAL_Init+0x40>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a0a      	ldr	r2, [pc, #40]	@ (8000e6c <HAL_Init+0x40>)
 8000e42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e48:	4b08      	ldr	r3, [pc, #32]	@ (8000e6c <HAL_Init+0x40>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a07      	ldr	r2, [pc, #28]	@ (8000e6c <HAL_Init+0x40>)
 8000e4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e54:	2003      	movs	r0, #3
 8000e56:	f000 f94f 	bl	80010f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f000 f808 	bl	8000e70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e60:	f7ff fe9e 	bl	8000ba0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40023c00 	.word	0x40023c00

08000e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e78:	4b12      	ldr	r3, [pc, #72]	@ (8000ec4 <HAL_InitTick+0x54>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4b12      	ldr	r3, [pc, #72]	@ (8000ec8 <HAL_InitTick+0x58>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	4619      	mov	r1, r3
 8000e82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 f967 	bl	8001162 <HAL_SYSTICK_Config>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e00e      	b.n	8000ebc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b0f      	cmp	r3, #15
 8000ea2:	d80a      	bhi.n	8000eba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eac:	f000 f92f 	bl	800110e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb0:	4a06      	ldr	r2, [pc, #24]	@ (8000ecc <HAL_InitTick+0x5c>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	e000      	b.n	8000ebc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000000 	.word	0x20000000
 8000ec8:	20000008 	.word	0x20000008
 8000ecc:	20000004 	.word	0x20000004

08000ed0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <HAL_IncTick+0x20>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <HAL_IncTick+0x24>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4413      	add	r3, r2
 8000ee0:	4a04      	ldr	r2, [pc, #16]	@ (8000ef4 <HAL_IncTick+0x24>)
 8000ee2:	6013      	str	r3, [r2, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	200001d8 	.word	0x200001d8

08000ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return uwTick;
 8000efc:	4b03      	ldr	r3, [pc, #12]	@ (8000f0c <HAL_GetTick+0x14>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	200001d8 	.word	0x200001d8

08000f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f18:	f7ff ffee 	bl	8000ef8 <HAL_GetTick>
 8000f1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f28:	d005      	beq.n	8000f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f54 <HAL_Delay+0x44>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	4413      	add	r3, r2
 8000f34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f36:	bf00      	nop
 8000f38:	f7ff ffde 	bl	8000ef8 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d8f7      	bhi.n	8000f38 <HAL_Delay+0x28>
  {
  }
}
 8000f48:	bf00      	nop
 8000f4a:	bf00      	nop
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000008 	.word	0x20000008

08000f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f68:	4b0c      	ldr	r3, [pc, #48]	@ (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f74:	4013      	ands	r3, r2
 8000f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f8a:	4a04      	ldr	r2, [pc, #16]	@ (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	60d3      	str	r3, [r2, #12]
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa4:	4b04      	ldr	r3, [pc, #16]	@ (8000fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	0a1b      	lsrs	r3, r3, #8
 8000faa:	f003 0307 	and.w	r3, r3, #7
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	db0b      	blt.n	8000fe6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	f003 021f 	and.w	r2, r3, #31
 8000fd4:	4907      	ldr	r1, [pc, #28]	@ (8000ff4 <__NVIC_EnableIRQ+0x38>)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	095b      	lsrs	r3, r3, #5
 8000fdc:	2001      	movs	r0, #1
 8000fde:	fa00 f202 	lsl.w	r2, r0, r2
 8000fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000e100 	.word	0xe000e100

08000ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	6039      	str	r1, [r7, #0]
 8001002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001008:	2b00      	cmp	r3, #0
 800100a:	db0a      	blt.n	8001022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	b2da      	uxtb	r2, r3
 8001010:	490c      	ldr	r1, [pc, #48]	@ (8001044 <__NVIC_SetPriority+0x4c>)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	0112      	lsls	r2, r2, #4
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	440b      	add	r3, r1
 800101c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001020:	e00a      	b.n	8001038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4908      	ldr	r1, [pc, #32]	@ (8001048 <__NVIC_SetPriority+0x50>)
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	f003 030f 	and.w	r3, r3, #15
 800102e:	3b04      	subs	r3, #4
 8001030:	0112      	lsls	r2, r2, #4
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	440b      	add	r3, r1
 8001036:	761a      	strb	r2, [r3, #24]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000e100 	.word	0xe000e100
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800104c:	b480      	push	{r7}
 800104e:	b089      	sub	sp, #36	@ 0x24
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f1c3 0307 	rsb	r3, r3, #7
 8001066:	2b04      	cmp	r3, #4
 8001068:	bf28      	it	cs
 800106a:	2304      	movcs	r3, #4
 800106c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3304      	adds	r3, #4
 8001072:	2b06      	cmp	r3, #6
 8001074:	d902      	bls.n	800107c <NVIC_EncodePriority+0x30>
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3b03      	subs	r3, #3
 800107a:	e000      	b.n	800107e <NVIC_EncodePriority+0x32>
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	f04f 32ff 	mov.w	r2, #4294967295
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43da      	mvns	r2, r3
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	401a      	ands	r2, r3
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001094:	f04f 31ff 	mov.w	r1, #4294967295
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	fa01 f303 	lsl.w	r3, r1, r3
 800109e:	43d9      	mvns	r1, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	4313      	orrs	r3, r2
         );
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3724      	adds	r7, #36	@ 0x24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
	...

080010b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3b01      	subs	r3, #1
 80010c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010c4:	d301      	bcc.n	80010ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010c6:	2301      	movs	r3, #1
 80010c8:	e00f      	b.n	80010ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ca:	4a0a      	ldr	r2, [pc, #40]	@ (80010f4 <SysTick_Config+0x40>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010d2:	210f      	movs	r1, #15
 80010d4:	f04f 30ff 	mov.w	r0, #4294967295
 80010d8:	f7ff ff8e 	bl	8000ff8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010dc:	4b05      	ldr	r3, [pc, #20]	@ (80010f4 <SysTick_Config+0x40>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010e2:	4b04      	ldr	r3, [pc, #16]	@ (80010f4 <SysTick_Config+0x40>)
 80010e4:	2207      	movs	r2, #7
 80010e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	e000e010 	.word	0xe000e010

080010f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff ff29 	bl	8000f58 <__NVIC_SetPriorityGrouping>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800110e:	b580      	push	{r7, lr}
 8001110:	b086      	sub	sp, #24
 8001112:	af00      	add	r7, sp, #0
 8001114:	4603      	mov	r3, r0
 8001116:	60b9      	str	r1, [r7, #8]
 8001118:	607a      	str	r2, [r7, #4]
 800111a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001120:	f7ff ff3e 	bl	8000fa0 <__NVIC_GetPriorityGrouping>
 8001124:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	68b9      	ldr	r1, [r7, #8]
 800112a:	6978      	ldr	r0, [r7, #20]
 800112c:	f7ff ff8e 	bl	800104c <NVIC_EncodePriority>
 8001130:	4602      	mov	r2, r0
 8001132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001136:	4611      	mov	r1, r2
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff5d 	bl	8000ff8 <__NVIC_SetPriority>
}
 800113e:	bf00      	nop
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	4603      	mov	r3, r0
 800114e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff31 	bl	8000fbc <__NVIC_EnableIRQ>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff ffa2 	bl	80010b4 <SysTick_Config>
 8001170:	4603      	mov	r3, r0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800117c:	b480      	push	{r7}
 800117e:	b089      	sub	sp, #36	@ 0x24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800118e:	2300      	movs	r3, #0
 8001190:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
 8001196:	e16b      	b.n	8001470 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001198:	2201      	movs	r2, #1
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	697a      	ldr	r2, [r7, #20]
 80011a8:	4013      	ands	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	f040 815a 	bne.w	800146a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 0303 	and.w	r3, r3, #3
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d005      	beq.n	80011ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d130      	bne.n	8001230 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	2203      	movs	r2, #3
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43db      	mvns	r3, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4013      	ands	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	68da      	ldr	r2, [r3, #12]
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001204:	2201      	movs	r2, #1
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	091b      	lsrs	r3, r3, #4
 800121a:	f003 0201 	and.w	r2, r3, #1
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	2b03      	cmp	r3, #3
 800123a:	d017      	beq.n	800126c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	2203      	movs	r2, #3
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 0303 	and.w	r3, r3, #3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d123      	bne.n	80012c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	08da      	lsrs	r2, r3, #3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3208      	adds	r2, #8
 8001280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001284:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	f003 0307 	and.w	r3, r3, #7
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	220f      	movs	r2, #15
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	691a      	ldr	r2, [r3, #16]
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	08da      	lsrs	r2, r3, #3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	3208      	adds	r2, #8
 80012ba:	69b9      	ldr	r1, [r7, #24]
 80012bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	2203      	movs	r2, #3
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 0203 	and.w	r2, r3, #3
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f000 80b4 	beq.w	800146a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	4b60      	ldr	r3, [pc, #384]	@ (8001488 <HAL_GPIO_Init+0x30c>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130a:	4a5f      	ldr	r2, [pc, #380]	@ (8001488 <HAL_GPIO_Init+0x30c>)
 800130c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001310:	6453      	str	r3, [r2, #68]	@ 0x44
 8001312:	4b5d      	ldr	r3, [pc, #372]	@ (8001488 <HAL_GPIO_Init+0x30c>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001316:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800131e:	4a5b      	ldr	r2, [pc, #364]	@ (800148c <HAL_GPIO_Init+0x310>)
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	089b      	lsrs	r3, r3, #2
 8001324:	3302      	adds	r3, #2
 8001326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	220f      	movs	r2, #15
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a52      	ldr	r2, [pc, #328]	@ (8001490 <HAL_GPIO_Init+0x314>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d02b      	beq.n	80013a2 <HAL_GPIO_Init+0x226>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a51      	ldr	r2, [pc, #324]	@ (8001494 <HAL_GPIO_Init+0x318>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d025      	beq.n	800139e <HAL_GPIO_Init+0x222>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a50      	ldr	r2, [pc, #320]	@ (8001498 <HAL_GPIO_Init+0x31c>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d01f      	beq.n	800139a <HAL_GPIO_Init+0x21e>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a4f      	ldr	r2, [pc, #316]	@ (800149c <HAL_GPIO_Init+0x320>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d019      	beq.n	8001396 <HAL_GPIO_Init+0x21a>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a4e      	ldr	r2, [pc, #312]	@ (80014a0 <HAL_GPIO_Init+0x324>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d013      	beq.n	8001392 <HAL_GPIO_Init+0x216>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a4d      	ldr	r2, [pc, #308]	@ (80014a4 <HAL_GPIO_Init+0x328>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d00d      	beq.n	800138e <HAL_GPIO_Init+0x212>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a4c      	ldr	r2, [pc, #304]	@ (80014a8 <HAL_GPIO_Init+0x32c>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d007      	beq.n	800138a <HAL_GPIO_Init+0x20e>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a4b      	ldr	r2, [pc, #300]	@ (80014ac <HAL_GPIO_Init+0x330>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d101      	bne.n	8001386 <HAL_GPIO_Init+0x20a>
 8001382:	2307      	movs	r3, #7
 8001384:	e00e      	b.n	80013a4 <HAL_GPIO_Init+0x228>
 8001386:	2308      	movs	r3, #8
 8001388:	e00c      	b.n	80013a4 <HAL_GPIO_Init+0x228>
 800138a:	2306      	movs	r3, #6
 800138c:	e00a      	b.n	80013a4 <HAL_GPIO_Init+0x228>
 800138e:	2305      	movs	r3, #5
 8001390:	e008      	b.n	80013a4 <HAL_GPIO_Init+0x228>
 8001392:	2304      	movs	r3, #4
 8001394:	e006      	b.n	80013a4 <HAL_GPIO_Init+0x228>
 8001396:	2303      	movs	r3, #3
 8001398:	e004      	b.n	80013a4 <HAL_GPIO_Init+0x228>
 800139a:	2302      	movs	r3, #2
 800139c:	e002      	b.n	80013a4 <HAL_GPIO_Init+0x228>
 800139e:	2301      	movs	r3, #1
 80013a0:	e000      	b.n	80013a4 <HAL_GPIO_Init+0x228>
 80013a2:	2300      	movs	r3, #0
 80013a4:	69fa      	ldr	r2, [r7, #28]
 80013a6:	f002 0203 	and.w	r2, r2, #3
 80013aa:	0092      	lsls	r2, r2, #2
 80013ac:	4093      	lsls	r3, r2
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013b4:	4935      	ldr	r1, [pc, #212]	@ (800148c <HAL_GPIO_Init+0x310>)
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	089b      	lsrs	r3, r3, #2
 80013ba:	3302      	adds	r3, #2
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013c2:	4b3b      	ldr	r3, [pc, #236]	@ (80014b0 <HAL_GPIO_Init+0x334>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	43db      	mvns	r3, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4013      	ands	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013e6:	4a32      	ldr	r2, [pc, #200]	@ (80014b0 <HAL_GPIO_Init+0x334>)
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013ec:	4b30      	ldr	r3, [pc, #192]	@ (80014b0 <HAL_GPIO_Init+0x334>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d003      	beq.n	8001410 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	4313      	orrs	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001410:	4a27      	ldr	r2, [pc, #156]	@ (80014b0 <HAL_GPIO_Init+0x334>)
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001416:	4b26      	ldr	r3, [pc, #152]	@ (80014b0 <HAL_GPIO_Init+0x334>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	43db      	mvns	r3, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4013      	ands	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800143a:	4a1d      	ldr	r2, [pc, #116]	@ (80014b0 <HAL_GPIO_Init+0x334>)
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001440:	4b1b      	ldr	r3, [pc, #108]	@ (80014b0 <HAL_GPIO_Init+0x334>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	43db      	mvns	r3, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d003      	beq.n	8001464 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	4313      	orrs	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001464:	4a12      	ldr	r2, [pc, #72]	@ (80014b0 <HAL_GPIO_Init+0x334>)
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3301      	adds	r3, #1
 800146e:	61fb      	str	r3, [r7, #28]
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	2b0f      	cmp	r3, #15
 8001474:	f67f ae90 	bls.w	8001198 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001478:	bf00      	nop
 800147a:	bf00      	nop
 800147c:	3724      	adds	r7, #36	@ 0x24
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	40023800 	.word	0x40023800
 800148c:	40013800 	.word	0x40013800
 8001490:	40020000 	.word	0x40020000
 8001494:	40020400 	.word	0x40020400
 8001498:	40020800 	.word	0x40020800
 800149c:	40020c00 	.word	0x40020c00
 80014a0:	40021000 	.word	0x40021000
 80014a4:	40021400 	.word	0x40021400
 80014a8:	40021800 	.word	0x40021800
 80014ac:	40021c00 	.word	0x40021c00
 80014b0:	40013c00 	.word	0x40013c00

080014b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	691a      	ldr	r2, [r3, #16]
 80014c4:	887b      	ldrh	r3, [r7, #2]
 80014c6:	4013      	ands	r3, r2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d002      	beq.n	80014d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014cc:	2301      	movs	r3, #1
 80014ce:	73fb      	strb	r3, [r7, #15]
 80014d0:	e001      	b.n	80014d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014d2:	2300      	movs	r3, #0
 80014d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	807b      	strh	r3, [r7, #2]
 80014f0:	4613      	mov	r3, r2
 80014f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014f4:	787b      	ldrb	r3, [r7, #1]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014fa:	887a      	ldrh	r2, [r7, #2]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001500:	e003      	b.n	800150a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001502:	887b      	ldrh	r3, [r7, #2]
 8001504:	041a      	lsls	r2, r3, #16
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	619a      	str	r2, [r3, #24]
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001516:	b480      	push	{r7}
 8001518:	b085      	sub	sp, #20
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
 800151e:	460b      	mov	r3, r1
 8001520:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001528:	887a      	ldrh	r2, [r7, #2]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	4013      	ands	r3, r2
 800152e:	041a      	lsls	r2, r3, #16
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	43d9      	mvns	r1, r3
 8001534:	887b      	ldrh	r3, [r7, #2]
 8001536:	400b      	ands	r3, r1
 8001538:	431a      	orrs	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	619a      	str	r2, [r3, #24]
}
 800153e:	bf00      	nop
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b086      	sub	sp, #24
 800154e:	af02      	add	r7, sp, #8
 8001550:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d101      	bne.n	800155c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e059      	b.n	8001610 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d106      	bne.n	800157c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f007 fa80 	bl	8008a7c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2203      	movs	r2, #3
 8001580:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800158a:	d102      	bne.n	8001592 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f004 f88d 	bl	80056b6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6818      	ldr	r0, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	7c1a      	ldrb	r2, [r3, #16]
 80015a4:	f88d 2000 	strb.w	r2, [sp]
 80015a8:	3304      	adds	r3, #4
 80015aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015ac:	f004 f80e 	bl	80055cc <USB_CoreInit>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d005      	beq.n	80015c2 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2202      	movs	r2, #2
 80015ba:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e026      	b.n	8001610 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2101      	movs	r1, #1
 80015c8:	4618      	mov	r0, r3
 80015ca:	f004 f885 	bl	80056d8 <USB_SetCurrentMode>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d005      	beq.n	80015e0 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2202      	movs	r2, #2
 80015d8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e017      	b.n	8001610 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6818      	ldr	r0, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	7c1a      	ldrb	r2, [r3, #16]
 80015e8:	f88d 2000 	strb.w	r2, [sp]
 80015ec:	3304      	adds	r3, #4
 80015ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015f0:	f004 fa2e 	bl	8005a50 <USB_HostInit>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d005      	beq.n	8001606 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2202      	movs	r2, #2
 80015fe:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e004      	b.n	8001610 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2201      	movs	r2, #1
 800160a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b08b      	sub	sp, #44	@ 0x2c
 800161c:	af04      	add	r7, sp, #16
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	4608      	mov	r0, r1
 8001622:	4611      	mov	r1, r2
 8001624:	461a      	mov	r2, r3
 8001626:	4603      	mov	r3, r0
 8001628:	70fb      	strb	r3, [r7, #3]
 800162a:	460b      	mov	r3, r1
 800162c:	70bb      	strb	r3, [r7, #2]
 800162e:	4613      	mov	r3, r2
 8001630:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001632:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001634:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800163c:	2b01      	cmp	r3, #1
 800163e:	d101      	bne.n	8001644 <HAL_HCD_HC_Init+0x2c>
 8001640:	2302      	movs	r3, #2
 8001642:	e09d      	b.n	8001780 <HAL_HCD_HC_Init+0x168>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800164c:	78fa      	ldrb	r2, [r7, #3]
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	4613      	mov	r3, r2
 8001652:	011b      	lsls	r3, r3, #4
 8001654:	1a9b      	subs	r3, r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	440b      	add	r3, r1
 800165a:	3319      	adds	r3, #25
 800165c:	2200      	movs	r2, #0
 800165e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001660:	78fa      	ldrb	r2, [r7, #3]
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	4613      	mov	r3, r2
 8001666:	011b      	lsls	r3, r3, #4
 8001668:	1a9b      	subs	r3, r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	440b      	add	r3, r1
 800166e:	3314      	adds	r3, #20
 8001670:	787a      	ldrb	r2, [r7, #1]
 8001672:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001674:	78fa      	ldrb	r2, [r7, #3]
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	4613      	mov	r3, r2
 800167a:	011b      	lsls	r3, r3, #4
 800167c:	1a9b      	subs	r3, r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	440b      	add	r3, r1
 8001682:	3315      	adds	r3, #21
 8001684:	78fa      	ldrb	r2, [r7, #3]
 8001686:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001688:	78fa      	ldrb	r2, [r7, #3]
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	4613      	mov	r3, r2
 800168e:	011b      	lsls	r3, r3, #4
 8001690:	1a9b      	subs	r3, r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	440b      	add	r3, r1
 8001696:	3326      	adds	r3, #38	@ 0x26
 8001698:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800169c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800169e:	78fa      	ldrb	r2, [r7, #3]
 80016a0:	78bb      	ldrb	r3, [r7, #2]
 80016a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80016a6:	b2d8      	uxtb	r0, r3
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	011b      	lsls	r3, r3, #4
 80016ae:	1a9b      	subs	r3, r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	440b      	add	r3, r1
 80016b4:	3316      	adds	r3, #22
 80016b6:	4602      	mov	r2, r0
 80016b8:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80016ba:	78fb      	ldrb	r3, [r7, #3]
 80016bc:	4619      	mov	r1, r3
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f000 fbc8 	bl	8001e54 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80016c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	da0a      	bge.n	80016e2 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80016cc:	78fa      	ldrb	r2, [r7, #3]
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	4613      	mov	r3, r2
 80016d2:	011b      	lsls	r3, r3, #4
 80016d4:	1a9b      	subs	r3, r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	440b      	add	r3, r1
 80016da:	3317      	adds	r3, #23
 80016dc:	2201      	movs	r2, #1
 80016de:	701a      	strb	r2, [r3, #0]
 80016e0:	e009      	b.n	80016f6 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80016e2:	78fa      	ldrb	r2, [r7, #3]
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	4613      	mov	r3, r2
 80016e8:	011b      	lsls	r3, r3, #4
 80016ea:	1a9b      	subs	r3, r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	440b      	add	r3, r1
 80016f0:	3317      	adds	r3, #23
 80016f2:	2200      	movs	r2, #0
 80016f4:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f004 fb0c 	bl	8005d18 <USB_GetHostSpeed>
 8001700:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001702:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001706:	2b01      	cmp	r3, #1
 8001708:	d10b      	bne.n	8001722 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800170a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800170e:	2b01      	cmp	r3, #1
 8001710:	d107      	bne.n	8001722 <HAL_HCD_HC_Init+0x10a>
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d104      	bne.n	8001722 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	2bbc      	cmp	r3, #188	@ 0xbc
 800171c:	d901      	bls.n	8001722 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800171e:	23bc      	movs	r3, #188	@ 0xbc
 8001720:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001722:	78fa      	ldrb	r2, [r7, #3]
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	4613      	mov	r3, r2
 8001728:	011b      	lsls	r3, r3, #4
 800172a:	1a9b      	subs	r3, r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	440b      	add	r3, r1
 8001730:	3318      	adds	r3, #24
 8001732:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001736:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001738:	78fa      	ldrb	r2, [r7, #3]
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	b298      	uxth	r0, r3
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	4613      	mov	r3, r2
 8001742:	011b      	lsls	r3, r3, #4
 8001744:	1a9b      	subs	r3, r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	440b      	add	r3, r1
 800174a:	3328      	adds	r3, #40	@ 0x28
 800174c:	4602      	mov	r2, r0
 800174e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6818      	ldr	r0, [r3, #0]
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	b29b      	uxth	r3, r3
 8001758:	787c      	ldrb	r4, [r7, #1]
 800175a:	78ba      	ldrb	r2, [r7, #2]
 800175c:	78f9      	ldrb	r1, [r7, #3]
 800175e:	9302      	str	r3, [sp, #8]
 8001760:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	4623      	mov	r3, r4
 800176e:	f004 fafb 	bl	8005d68 <USB_HC_Init>
 8001772:	4603      	mov	r3, r0
 8001774:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800177e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001780:	4618      	mov	r0, r3
 8001782:	371c      	adds	r7, #28
 8001784:	46bd      	mov	sp, r7
 8001786:	bd90      	pop	{r4, r7, pc}

08001788 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001794:	2300      	movs	r3, #0
 8001796:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d101      	bne.n	80017a6 <HAL_HCD_HC_Halt+0x1e>
 80017a2:	2302      	movs	r3, #2
 80017a4:	e00f      	b.n	80017c6 <HAL_HCD_HC_Halt+0x3e>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2201      	movs	r2, #1
 80017aa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	78fa      	ldrb	r2, [r7, #3]
 80017b4:	4611      	mov	r1, r2
 80017b6:	4618      	mov	r0, r3
 80017b8:	f004 fe8d 	bl	80064d6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	4608      	mov	r0, r1
 80017da:	4611      	mov	r1, r2
 80017dc:	461a      	mov	r2, r3
 80017de:	4603      	mov	r3, r0
 80017e0:	70fb      	strb	r3, [r7, #3]
 80017e2:	460b      	mov	r3, r1
 80017e4:	70bb      	strb	r3, [r7, #2]
 80017e6:	4613      	mov	r3, r2
 80017e8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80017ea:	78fa      	ldrb	r2, [r7, #3]
 80017ec:	6879      	ldr	r1, [r7, #4]
 80017ee:	4613      	mov	r3, r2
 80017f0:	011b      	lsls	r3, r3, #4
 80017f2:	1a9b      	subs	r3, r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	440b      	add	r3, r1
 80017f8:	3317      	adds	r3, #23
 80017fa:	78ba      	ldrb	r2, [r7, #2]
 80017fc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80017fe:	78fa      	ldrb	r2, [r7, #3]
 8001800:	6879      	ldr	r1, [r7, #4]
 8001802:	4613      	mov	r3, r2
 8001804:	011b      	lsls	r3, r3, #4
 8001806:	1a9b      	subs	r3, r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	440b      	add	r3, r1
 800180c:	3326      	adds	r3, #38	@ 0x26
 800180e:	787a      	ldrb	r2, [r7, #1]
 8001810:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001812:	7c3b      	ldrb	r3, [r7, #16]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d114      	bne.n	8001842 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001818:	78fa      	ldrb	r2, [r7, #3]
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	4613      	mov	r3, r2
 800181e:	011b      	lsls	r3, r3, #4
 8001820:	1a9b      	subs	r3, r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	440b      	add	r3, r1
 8001826:	332a      	adds	r3, #42	@ 0x2a
 8001828:	2203      	movs	r2, #3
 800182a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800182c:	78fa      	ldrb	r2, [r7, #3]
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	4613      	mov	r3, r2
 8001832:	011b      	lsls	r3, r3, #4
 8001834:	1a9b      	subs	r3, r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	440b      	add	r3, r1
 800183a:	3319      	adds	r3, #25
 800183c:	7f3a      	ldrb	r2, [r7, #28]
 800183e:	701a      	strb	r2, [r3, #0]
 8001840:	e009      	b.n	8001856 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001842:	78fa      	ldrb	r2, [r7, #3]
 8001844:	6879      	ldr	r1, [r7, #4]
 8001846:	4613      	mov	r3, r2
 8001848:	011b      	lsls	r3, r3, #4
 800184a:	1a9b      	subs	r3, r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	440b      	add	r3, r1
 8001850:	332a      	adds	r3, #42	@ 0x2a
 8001852:	2202      	movs	r2, #2
 8001854:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001856:	787b      	ldrb	r3, [r7, #1]
 8001858:	2b03      	cmp	r3, #3
 800185a:	f200 8102 	bhi.w	8001a62 <HAL_HCD_HC_SubmitRequest+0x292>
 800185e:	a201      	add	r2, pc, #4	@ (adr r2, 8001864 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001864:	08001875 	.word	0x08001875
 8001868:	08001a4d 	.word	0x08001a4d
 800186c:	08001939 	.word	0x08001939
 8001870:	080019c3 	.word	0x080019c3
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001874:	7c3b      	ldrb	r3, [r7, #16]
 8001876:	2b01      	cmp	r3, #1
 8001878:	f040 80f5 	bne.w	8001a66 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800187c:	78bb      	ldrb	r3, [r7, #2]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d12d      	bne.n	80018de <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001882:	8b3b      	ldrh	r3, [r7, #24]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d109      	bne.n	800189c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001888:	78fa      	ldrb	r2, [r7, #3]
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	4613      	mov	r3, r2
 800188e:	011b      	lsls	r3, r3, #4
 8001890:	1a9b      	subs	r3, r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	440b      	add	r3, r1
 8001896:	333d      	adds	r3, #61	@ 0x3d
 8001898:	2201      	movs	r2, #1
 800189a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 800189c:	78fa      	ldrb	r2, [r7, #3]
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	4613      	mov	r3, r2
 80018a2:	011b      	lsls	r3, r3, #4
 80018a4:	1a9b      	subs	r3, r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	440b      	add	r3, r1
 80018aa:	333d      	adds	r3, #61	@ 0x3d
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10a      	bne.n	80018c8 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018b2:	78fa      	ldrb	r2, [r7, #3]
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	4613      	mov	r3, r2
 80018b8:	011b      	lsls	r3, r3, #4
 80018ba:	1a9b      	subs	r3, r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	440b      	add	r3, r1
 80018c0:	332a      	adds	r3, #42	@ 0x2a
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80018c6:	e0ce      	b.n	8001a66 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018c8:	78fa      	ldrb	r2, [r7, #3]
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	4613      	mov	r3, r2
 80018ce:	011b      	lsls	r3, r3, #4
 80018d0:	1a9b      	subs	r3, r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	332a      	adds	r3, #42	@ 0x2a
 80018d8:	2202      	movs	r2, #2
 80018da:	701a      	strb	r2, [r3, #0]
      break;
 80018dc:	e0c3      	b.n	8001a66 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80018de:	78fa      	ldrb	r2, [r7, #3]
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	011b      	lsls	r3, r3, #4
 80018e6:	1a9b      	subs	r3, r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	440b      	add	r3, r1
 80018ec:	331a      	adds	r3, #26
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	f040 80b8 	bne.w	8001a66 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80018f6:	78fa      	ldrb	r2, [r7, #3]
 80018f8:	6879      	ldr	r1, [r7, #4]
 80018fa:	4613      	mov	r3, r2
 80018fc:	011b      	lsls	r3, r3, #4
 80018fe:	1a9b      	subs	r3, r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	440b      	add	r3, r1
 8001904:	333c      	adds	r3, #60	@ 0x3c
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d10a      	bne.n	8001922 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800190c:	78fa      	ldrb	r2, [r7, #3]
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	4613      	mov	r3, r2
 8001912:	011b      	lsls	r3, r3, #4
 8001914:	1a9b      	subs	r3, r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	440b      	add	r3, r1
 800191a:	332a      	adds	r3, #42	@ 0x2a
 800191c:	2200      	movs	r2, #0
 800191e:	701a      	strb	r2, [r3, #0]
      break;
 8001920:	e0a1      	b.n	8001a66 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001922:	78fa      	ldrb	r2, [r7, #3]
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	4613      	mov	r3, r2
 8001928:	011b      	lsls	r3, r3, #4
 800192a:	1a9b      	subs	r3, r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	440b      	add	r3, r1
 8001930:	332a      	adds	r3, #42	@ 0x2a
 8001932:	2202      	movs	r2, #2
 8001934:	701a      	strb	r2, [r3, #0]
      break;
 8001936:	e096      	b.n	8001a66 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001938:	78bb      	ldrb	r3, [r7, #2]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d120      	bne.n	8001980 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800193e:	78fa      	ldrb	r2, [r7, #3]
 8001940:	6879      	ldr	r1, [r7, #4]
 8001942:	4613      	mov	r3, r2
 8001944:	011b      	lsls	r3, r3, #4
 8001946:	1a9b      	subs	r3, r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	440b      	add	r3, r1
 800194c:	333d      	adds	r3, #61	@ 0x3d
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d10a      	bne.n	800196a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001954:	78fa      	ldrb	r2, [r7, #3]
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	4613      	mov	r3, r2
 800195a:	011b      	lsls	r3, r3, #4
 800195c:	1a9b      	subs	r3, r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	440b      	add	r3, r1
 8001962:	332a      	adds	r3, #42	@ 0x2a
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001968:	e07e      	b.n	8001a68 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800196a:	78fa      	ldrb	r2, [r7, #3]
 800196c:	6879      	ldr	r1, [r7, #4]
 800196e:	4613      	mov	r3, r2
 8001970:	011b      	lsls	r3, r3, #4
 8001972:	1a9b      	subs	r3, r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	440b      	add	r3, r1
 8001978:	332a      	adds	r3, #42	@ 0x2a
 800197a:	2202      	movs	r2, #2
 800197c:	701a      	strb	r2, [r3, #0]
      break;
 800197e:	e073      	b.n	8001a68 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001980:	78fa      	ldrb	r2, [r7, #3]
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	4613      	mov	r3, r2
 8001986:	011b      	lsls	r3, r3, #4
 8001988:	1a9b      	subs	r3, r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	440b      	add	r3, r1
 800198e:	333c      	adds	r3, #60	@ 0x3c
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10a      	bne.n	80019ac <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001996:	78fa      	ldrb	r2, [r7, #3]
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	4613      	mov	r3, r2
 800199c:	011b      	lsls	r3, r3, #4
 800199e:	1a9b      	subs	r3, r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	440b      	add	r3, r1
 80019a4:	332a      	adds	r3, #42	@ 0x2a
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]
      break;
 80019aa:	e05d      	b.n	8001a68 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019ac:	78fa      	ldrb	r2, [r7, #3]
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	4613      	mov	r3, r2
 80019b2:	011b      	lsls	r3, r3, #4
 80019b4:	1a9b      	subs	r3, r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	440b      	add	r3, r1
 80019ba:	332a      	adds	r3, #42	@ 0x2a
 80019bc:	2202      	movs	r2, #2
 80019be:	701a      	strb	r2, [r3, #0]
      break;
 80019c0:	e052      	b.n	8001a68 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80019c2:	78bb      	ldrb	r3, [r7, #2]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d120      	bne.n	8001a0a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019c8:	78fa      	ldrb	r2, [r7, #3]
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	4613      	mov	r3, r2
 80019ce:	011b      	lsls	r3, r3, #4
 80019d0:	1a9b      	subs	r3, r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	440b      	add	r3, r1
 80019d6:	333d      	adds	r3, #61	@ 0x3d
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10a      	bne.n	80019f4 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019de:	78fa      	ldrb	r2, [r7, #3]
 80019e0:	6879      	ldr	r1, [r7, #4]
 80019e2:	4613      	mov	r3, r2
 80019e4:	011b      	lsls	r3, r3, #4
 80019e6:	1a9b      	subs	r3, r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	440b      	add	r3, r1
 80019ec:	332a      	adds	r3, #42	@ 0x2a
 80019ee:	2200      	movs	r2, #0
 80019f0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019f2:	e039      	b.n	8001a68 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019f4:	78fa      	ldrb	r2, [r7, #3]
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	4613      	mov	r3, r2
 80019fa:	011b      	lsls	r3, r3, #4
 80019fc:	1a9b      	subs	r3, r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	440b      	add	r3, r1
 8001a02:	332a      	adds	r3, #42	@ 0x2a
 8001a04:	2202      	movs	r2, #2
 8001a06:	701a      	strb	r2, [r3, #0]
      break;
 8001a08:	e02e      	b.n	8001a68 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a0a:	78fa      	ldrb	r2, [r7, #3]
 8001a0c:	6879      	ldr	r1, [r7, #4]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	011b      	lsls	r3, r3, #4
 8001a12:	1a9b      	subs	r3, r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	440b      	add	r3, r1
 8001a18:	333c      	adds	r3, #60	@ 0x3c
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d10a      	bne.n	8001a36 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a20:	78fa      	ldrb	r2, [r7, #3]
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	4613      	mov	r3, r2
 8001a26:	011b      	lsls	r3, r3, #4
 8001a28:	1a9b      	subs	r3, r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	332a      	adds	r3, #42	@ 0x2a
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
      break;
 8001a34:	e018      	b.n	8001a68 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a36:	78fa      	ldrb	r2, [r7, #3]
 8001a38:	6879      	ldr	r1, [r7, #4]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	011b      	lsls	r3, r3, #4
 8001a3e:	1a9b      	subs	r3, r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	440b      	add	r3, r1
 8001a44:	332a      	adds	r3, #42	@ 0x2a
 8001a46:	2202      	movs	r2, #2
 8001a48:	701a      	strb	r2, [r3, #0]
      break;
 8001a4a:	e00d      	b.n	8001a68 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a4c:	78fa      	ldrb	r2, [r7, #3]
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	4613      	mov	r3, r2
 8001a52:	011b      	lsls	r3, r3, #4
 8001a54:	1a9b      	subs	r3, r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	440b      	add	r3, r1
 8001a5a:	332a      	adds	r3, #42	@ 0x2a
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	701a      	strb	r2, [r3, #0]
      break;
 8001a60:	e002      	b.n	8001a68 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001a62:	bf00      	nop
 8001a64:	e000      	b.n	8001a68 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001a66:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a68:	78fa      	ldrb	r2, [r7, #3]
 8001a6a:	6879      	ldr	r1, [r7, #4]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	011b      	lsls	r3, r3, #4
 8001a70:	1a9b      	subs	r3, r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	440b      	add	r3, r1
 8001a76:	332c      	adds	r3, #44	@ 0x2c
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a7c:	78fa      	ldrb	r2, [r7, #3]
 8001a7e:	8b39      	ldrh	r1, [r7, #24]
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	4613      	mov	r3, r2
 8001a84:	011b      	lsls	r3, r3, #4
 8001a86:	1a9b      	subs	r3, r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4403      	add	r3, r0
 8001a8c:	3334      	adds	r3, #52	@ 0x34
 8001a8e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a90:	78fa      	ldrb	r2, [r7, #3]
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	4613      	mov	r3, r2
 8001a96:	011b      	lsls	r3, r3, #4
 8001a98:	1a9b      	subs	r3, r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	334c      	adds	r3, #76	@ 0x4c
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001aa4:	78fa      	ldrb	r2, [r7, #3]
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	011b      	lsls	r3, r3, #4
 8001aac:	1a9b      	subs	r3, r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	3338      	adds	r3, #56	@ 0x38
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001ab8:	78fa      	ldrb	r2, [r7, #3]
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	4613      	mov	r3, r2
 8001abe:	011b      	lsls	r3, r3, #4
 8001ac0:	1a9b      	subs	r3, r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	3315      	adds	r3, #21
 8001ac8:	78fa      	ldrb	r2, [r7, #3]
 8001aca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001acc:	78fa      	ldrb	r2, [r7, #3]
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	011b      	lsls	r3, r3, #4
 8001ad4:	1a9b      	subs	r3, r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	440b      	add	r3, r1
 8001ada:	334d      	adds	r3, #77	@ 0x4d
 8001adc:	2200      	movs	r2, #0
 8001ade:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6818      	ldr	r0, [r3, #0]
 8001ae4:	78fa      	ldrb	r2, [r7, #3]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	011b      	lsls	r3, r3, #4
 8001aea:	1a9b      	subs	r3, r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	3310      	adds	r3, #16
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	4413      	add	r3, r2
 8001af4:	1d19      	adds	r1, r3, #4
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	799b      	ldrb	r3, [r3, #6]
 8001afa:	461a      	mov	r2, r3
 8001afc:	f004 fa60 	bl	8005fc0 <USB_HC_StartXfer>
 8001b00:	4603      	mov	r3, r0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop

08001b0c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f003 ff4e 	bl	80059c4 <USB_GetMode>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	f040 80fb 	bne.w	8001d26 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f003 ff11 	bl	800595c <USB_ReadInterrupts>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 80f1 	beq.w	8001d24 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f003 ff08 	bl	800595c <USB_ReadInterrupts>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001b56:	d104      	bne.n	8001b62 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001b60:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f003 fef8 	bl	800595c <USB_ReadInterrupts>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001b76:	d104      	bne.n	8001b82 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001b80:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f003 fee8 	bl	800595c <USB_ReadInterrupts>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b92:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001b96:	d104      	bne.n	8001ba2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001ba0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f003 fed8 	bl	800595c <USB_ReadInterrupts>
 8001bac:	4603      	mov	r3, r0
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d103      	bne.n	8001bbe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2202      	movs	r2, #2
 8001bbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f003 feca 	bl	800595c <USB_ReadInterrupts>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001bce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001bd2:	d120      	bne.n	8001c16 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001bdc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d113      	bne.n	8001c16 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001bee:	2110      	movs	r1, #16
 8001bf0:	6938      	ldr	r0, [r7, #16]
 8001bf2:	f003 fdbd 	bl	8005770 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001bf6:	6938      	ldr	r0, [r7, #16]
 8001bf8:	f003 fdec 	bl	80057d4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	7a5b      	ldrb	r3, [r3, #9]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d105      	bne.n	8001c10 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2101      	movs	r1, #1
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f003 ffe4 	bl	8005bd8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f006 ffb1 	bl	8008b78 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f003 fe9e 	bl	800595c <USB_ReadInterrupts>
 8001c20:	4603      	mov	r3, r0
 8001c22:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c2a:	d102      	bne.n	8001c32 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f001 fd4d 	bl	80036cc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f003 fe90 	bl	800595c <USB_ReadInterrupts>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	2b08      	cmp	r3, #8
 8001c44:	d106      	bne.n	8001c54 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f006 ff7a 	bl	8008b40 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2208      	movs	r2, #8
 8001c52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f003 fe7f 	bl	800595c <USB_ReadInterrupts>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001c68:	d139      	bne.n	8001cde <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f004 fc20 	bl	80064b4 <USB_HC_ReadInterrupt>
 8001c74:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
 8001c7a:	e025      	b.n	8001cc8 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	68ba      	ldr	r2, [r7, #8]
 8001c84:	fa22 f303 	lsr.w	r3, r2, r3
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d018      	beq.n	8001cc2 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	015a      	lsls	r2, r3, #5
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4413      	add	r3, r2
 8001c98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ca2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ca6:	d106      	bne.n	8001cb6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	4619      	mov	r1, r3
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f905 	bl	8001ebe <HCD_HC_IN_IRQHandler>
 8001cb4:	e005      	b.n	8001cc2 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	4619      	mov	r1, r3
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 ff67 	bl	8002b90 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	617b      	str	r3, [r7, #20]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	795b      	ldrb	r3, [r3, #5]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d3d3      	bcc.n	8001c7c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f003 fe3a 	bl	800595c <USB_ReadInterrupts>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	f003 0310 	and.w	r3, r3, #16
 8001cee:	2b10      	cmp	r3, #16
 8001cf0:	d101      	bne.n	8001cf6 <HAL_HCD_IRQHandler+0x1ea>
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e000      	b.n	8001cf8 <HAL_HCD_IRQHandler+0x1ec>
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d014      	beq.n	8001d26 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	699a      	ldr	r2, [r3, #24]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 0210 	bic.w	r2, r2, #16
 8001d0a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f001 fbfe 	bl	800350e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	699a      	ldr	r2, [r3, #24]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f042 0210 	orr.w	r2, r2, #16
 8001d20:	619a      	str	r2, [r3, #24]
 8001d22:	e000      	b.n	8001d26 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001d24:	bf00      	nop
    }
  }
}
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d101      	bne.n	8001d42 <HAL_HCD_Start+0x16>
 8001d3e:	2302      	movs	r3, #2
 8001d40:	e013      	b.n	8001d6a <HAL_HCD_Start+0x3e>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2101      	movs	r1, #1
 8001d50:	4618      	mov	r0, r3
 8001d52:	f003 ffa8 	bl	8005ca6 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f003 fc9a 	bl	8005694 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d101      	bne.n	8001d88 <HAL_HCD_Stop+0x16>
 8001d84:	2302      	movs	r3, #2
 8001d86:	e00d      	b.n	8001da4 <HAL_HCD_Stop+0x32>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f004 fcfb 	bl	8006790 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f003 ff4a 	bl	8005c52 <USB_ResetPort>
 8001dbe:	4603      	mov	r3, r0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001dd4:	78fa      	ldrb	r2, [r7, #3]
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	011b      	lsls	r3, r3, #4
 8001ddc:	1a9b      	subs	r3, r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	440b      	add	r3, r1
 8001de2:	334c      	adds	r3, #76	@ 0x4c
 8001de4:	781b      	ldrb	r3, [r3, #0]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001dfe:	78fa      	ldrb	r2, [r7, #3]
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	011b      	lsls	r3, r3, #4
 8001e06:	1a9b      	subs	r3, r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	440b      	add	r3, r1
 8001e0c:	3338      	adds	r3, #56	@ 0x38
 8001e0e:	681b      	ldr	r3, [r3, #0]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f003 ff8c 	bl	8005d46 <USB_GetCurrentFrame>
 8001e2e:	4603      	mov	r3, r0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f003 ff67 	bl	8005d18 <USB_GetHostSpeed>
 8001e4a:	4603      	mov	r3, r0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001e60:	78fa      	ldrb	r2, [r7, #3]
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	4613      	mov	r3, r2
 8001e66:	011b      	lsls	r3, r3, #4
 8001e68:	1a9b      	subs	r3, r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	331a      	adds	r3, #26
 8001e70:	2200      	movs	r2, #0
 8001e72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001e74:	78fa      	ldrb	r2, [r7, #3]
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	011b      	lsls	r3, r3, #4
 8001e7c:	1a9b      	subs	r3, r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	440b      	add	r3, r1
 8001e82:	331b      	adds	r3, #27
 8001e84:	2200      	movs	r2, #0
 8001e86:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001e88:	78fa      	ldrb	r2, [r7, #3]
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	011b      	lsls	r3, r3, #4
 8001e90:	1a9b      	subs	r3, r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	3325      	adds	r3, #37	@ 0x25
 8001e98:	2200      	movs	r2, #0
 8001e9a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001e9c:	78fa      	ldrb	r2, [r7, #3]
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	011b      	lsls	r3, r3, #4
 8001ea4:	1a9b      	subs	r3, r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	3324      	adds	r3, #36	@ 0x24
 8001eac:	2200      	movs	r2, #0
 8001eae:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b086      	sub	sp, #24
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	78fa      	ldrb	r2, [r7, #3]
 8001eda:	4611      	mov	r1, r2
 8001edc:	4618      	mov	r0, r3
 8001ede:	f003 fd50 	bl	8005982 <USB_ReadChInterrupts>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	d11a      	bne.n	8001f22 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001eec:	78fb      	ldrb	r3, [r7, #3]
 8001eee:	015a      	lsls	r2, r3, #5
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ef8:	461a      	mov	r2, r3
 8001efa:	2304      	movs	r3, #4
 8001efc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001efe:	78fa      	ldrb	r2, [r7, #3]
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	011b      	lsls	r3, r3, #4
 8001f06:	1a9b      	subs	r3, r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	334d      	adds	r3, #77	@ 0x4d
 8001f0e:	2207      	movs	r2, #7
 8001f10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	78fa      	ldrb	r2, [r7, #3]
 8001f18:	4611      	mov	r1, r2
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f004 fadb 	bl	80064d6 <USB_HC_Halt>
 8001f20:	e09e      	b.n	8002060 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	78fa      	ldrb	r2, [r7, #3]
 8001f28:	4611      	mov	r1, r2
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f003 fd29 	bl	8005982 <USB_ReadChInterrupts>
 8001f30:	4603      	mov	r3, r0
 8001f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f3a:	d11b      	bne.n	8001f74 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001f3c:	78fb      	ldrb	r3, [r7, #3]
 8001f3e:	015a      	lsls	r2, r3, #5
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	4413      	add	r3, r2
 8001f44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f48:	461a      	mov	r2, r3
 8001f4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f4e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001f50:	78fa      	ldrb	r2, [r7, #3]
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	011b      	lsls	r3, r3, #4
 8001f58:	1a9b      	subs	r3, r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	334d      	adds	r3, #77	@ 0x4d
 8001f60:	2208      	movs	r2, #8
 8001f62:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	78fa      	ldrb	r2, [r7, #3]
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f004 fab2 	bl	80064d6 <USB_HC_Halt>
 8001f72:	e075      	b.n	8002060 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	78fa      	ldrb	r2, [r7, #3]
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f003 fd00 	bl	8005982 <USB_ReadChInterrupts>
 8001f82:	4603      	mov	r3, r0
 8001f84:	f003 0308 	and.w	r3, r3, #8
 8001f88:	2b08      	cmp	r3, #8
 8001f8a:	d11a      	bne.n	8001fc2 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	015a      	lsls	r2, r3, #5
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4413      	add	r3, r2
 8001f94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f98:	461a      	mov	r2, r3
 8001f9a:	2308      	movs	r3, #8
 8001f9c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001f9e:	78fa      	ldrb	r2, [r7, #3]
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	011b      	lsls	r3, r3, #4
 8001fa6:	1a9b      	subs	r3, r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	440b      	add	r3, r1
 8001fac:	334d      	adds	r3, #77	@ 0x4d
 8001fae:	2206      	movs	r2, #6
 8001fb0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	78fa      	ldrb	r2, [r7, #3]
 8001fb8:	4611      	mov	r1, r2
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f004 fa8b 	bl	80064d6 <USB_HC_Halt>
 8001fc0:	e04e      	b.n	8002060 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	78fa      	ldrb	r2, [r7, #3]
 8001fc8:	4611      	mov	r1, r2
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f003 fcd9 	bl	8005982 <USB_ReadChInterrupts>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fda:	d11b      	bne.n	8002014 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001fdc:	78fb      	ldrb	r3, [r7, #3]
 8001fde:	015a      	lsls	r2, r3, #5
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fe8:	461a      	mov	r2, r3
 8001fea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fee:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001ff0:	78fa      	ldrb	r2, [r7, #3]
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	011b      	lsls	r3, r3, #4
 8001ff8:	1a9b      	subs	r3, r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	334d      	adds	r3, #77	@ 0x4d
 8002000:	2209      	movs	r2, #9
 8002002:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	78fa      	ldrb	r2, [r7, #3]
 800200a:	4611      	mov	r1, r2
 800200c:	4618      	mov	r0, r3
 800200e:	f004 fa62 	bl	80064d6 <USB_HC_Halt>
 8002012:	e025      	b.n	8002060 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	78fa      	ldrb	r2, [r7, #3]
 800201a:	4611      	mov	r1, r2
 800201c:	4618      	mov	r0, r3
 800201e:	f003 fcb0 	bl	8005982 <USB_ReadChInterrupts>
 8002022:	4603      	mov	r3, r0
 8002024:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002028:	2b80      	cmp	r3, #128	@ 0x80
 800202a:	d119      	bne.n	8002060 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	015a      	lsls	r2, r3, #5
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4413      	add	r3, r2
 8002034:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002038:	461a      	mov	r2, r3
 800203a:	2380      	movs	r3, #128	@ 0x80
 800203c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800203e:	78fa      	ldrb	r2, [r7, #3]
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	4613      	mov	r3, r2
 8002044:	011b      	lsls	r3, r3, #4
 8002046:	1a9b      	subs	r3, r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	440b      	add	r3, r1
 800204c:	334d      	adds	r3, #77	@ 0x4d
 800204e:	2207      	movs	r2, #7
 8002050:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	78fa      	ldrb	r2, [r7, #3]
 8002058:	4611      	mov	r1, r2
 800205a:	4618      	mov	r0, r3
 800205c:	f004 fa3b 	bl	80064d6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	78fa      	ldrb	r2, [r7, #3]
 8002066:	4611      	mov	r1, r2
 8002068:	4618      	mov	r0, r3
 800206a:	f003 fc8a 	bl	8005982 <USB_ReadChInterrupts>
 800206e:	4603      	mov	r3, r0
 8002070:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002074:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002078:	d112      	bne.n	80020a0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	78fa      	ldrb	r2, [r7, #3]
 8002080:	4611      	mov	r1, r2
 8002082:	4618      	mov	r0, r3
 8002084:	f004 fa27 	bl	80064d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002088:	78fb      	ldrb	r3, [r7, #3]
 800208a:	015a      	lsls	r2, r3, #5
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	4413      	add	r3, r2
 8002090:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002094:	461a      	mov	r2, r3
 8002096:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800209a:	6093      	str	r3, [r2, #8]
 800209c:	f000 bd75 	b.w	8002b8a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	78fa      	ldrb	r2, [r7, #3]
 80020a6:	4611      	mov	r1, r2
 80020a8:	4618      	mov	r0, r3
 80020aa:	f003 fc6a 	bl	8005982 <USB_ReadChInterrupts>
 80020ae:	4603      	mov	r3, r0
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	f040 8128 	bne.w	800230a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80020ba:	78fb      	ldrb	r3, [r7, #3]
 80020bc:	015a      	lsls	r2, r3, #5
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	4413      	add	r3, r2
 80020c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020c6:	461a      	mov	r2, r3
 80020c8:	2320      	movs	r3, #32
 80020ca:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80020cc:	78fa      	ldrb	r2, [r7, #3]
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	011b      	lsls	r3, r3, #4
 80020d4:	1a9b      	subs	r3, r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	331b      	adds	r3, #27
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d119      	bne.n	8002116 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80020e2:	78fa      	ldrb	r2, [r7, #3]
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	011b      	lsls	r3, r3, #4
 80020ea:	1a9b      	subs	r3, r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	440b      	add	r3, r1
 80020f0:	331b      	adds	r3, #27
 80020f2:	2200      	movs	r2, #0
 80020f4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80020f6:	78fb      	ldrb	r3, [r7, #3]
 80020f8:	015a      	lsls	r2, r3, #5
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4413      	add	r3, r2
 80020fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	78fa      	ldrb	r2, [r7, #3]
 8002106:	0151      	lsls	r1, r2, #5
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	440a      	add	r2, r1
 800210c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002110:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002114:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	799b      	ldrb	r3, [r3, #6]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d01b      	beq.n	8002156 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800211e:	78fa      	ldrb	r2, [r7, #3]
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	011b      	lsls	r3, r3, #4
 8002126:	1a9b      	subs	r3, r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	440b      	add	r3, r1
 800212c:	3330      	adds	r3, #48	@ 0x30
 800212e:	6819      	ldr	r1, [r3, #0]
 8002130:	78fb      	ldrb	r3, [r7, #3]
 8002132:	015a      	lsls	r2, r3, #5
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	4413      	add	r3, r2
 8002138:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002142:	78fa      	ldrb	r2, [r7, #3]
 8002144:	1ac9      	subs	r1, r1, r3
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	4613      	mov	r3, r2
 800214a:	011b      	lsls	r3, r3, #4
 800214c:	1a9b      	subs	r3, r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4403      	add	r3, r0
 8002152:	3338      	adds	r3, #56	@ 0x38
 8002154:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002156:	78fa      	ldrb	r2, [r7, #3]
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	011b      	lsls	r3, r3, #4
 800215e:	1a9b      	subs	r3, r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	440b      	add	r3, r1
 8002164:	334d      	adds	r3, #77	@ 0x4d
 8002166:	2201      	movs	r2, #1
 8002168:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800216a:	78fa      	ldrb	r2, [r7, #3]
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	1a9b      	subs	r3, r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	440b      	add	r3, r1
 8002178:	3344      	adds	r3, #68	@ 0x44
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800217e:	78fb      	ldrb	r3, [r7, #3]
 8002180:	015a      	lsls	r2, r3, #5
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	4413      	add	r3, r2
 8002186:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800218a:	461a      	mov	r2, r3
 800218c:	2301      	movs	r3, #1
 800218e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002190:	78fa      	ldrb	r2, [r7, #3]
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	4613      	mov	r3, r2
 8002196:	011b      	lsls	r3, r3, #4
 8002198:	1a9b      	subs	r3, r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	440b      	add	r3, r1
 800219e:	3326      	adds	r3, #38	@ 0x26
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00a      	beq.n	80021bc <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80021a6:	78fa      	ldrb	r2, [r7, #3]
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	4613      	mov	r3, r2
 80021ac:	011b      	lsls	r3, r3, #4
 80021ae:	1a9b      	subs	r3, r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	440b      	add	r3, r1
 80021b4:	3326      	adds	r3, #38	@ 0x26
 80021b6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d110      	bne.n	80021de <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	78fa      	ldrb	r2, [r7, #3]
 80021c2:	4611      	mov	r1, r2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f004 f986 	bl	80064d6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80021ca:	78fb      	ldrb	r3, [r7, #3]
 80021cc:	015a      	lsls	r2, r3, #5
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4413      	add	r3, r2
 80021d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021d6:	461a      	mov	r2, r3
 80021d8:	2310      	movs	r3, #16
 80021da:	6093      	str	r3, [r2, #8]
 80021dc:	e03d      	b.n	800225a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80021de:	78fa      	ldrb	r2, [r7, #3]
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	4613      	mov	r3, r2
 80021e4:	011b      	lsls	r3, r3, #4
 80021e6:	1a9b      	subs	r3, r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	440b      	add	r3, r1
 80021ec:	3326      	adds	r3, #38	@ 0x26
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	d00a      	beq.n	800220a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80021f4:	78fa      	ldrb	r2, [r7, #3]
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	4613      	mov	r3, r2
 80021fa:	011b      	lsls	r3, r3, #4
 80021fc:	1a9b      	subs	r3, r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	3326      	adds	r3, #38	@ 0x26
 8002204:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002206:	2b01      	cmp	r3, #1
 8002208:	d127      	bne.n	800225a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	015a      	lsls	r2, r3, #5
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	4413      	add	r3, r2
 8002212:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	78fa      	ldrb	r2, [r7, #3]
 800221a:	0151      	lsls	r1, r2, #5
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	440a      	add	r2, r1
 8002220:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002224:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002228:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800222a:	78fa      	ldrb	r2, [r7, #3]
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	4613      	mov	r3, r2
 8002230:	011b      	lsls	r3, r3, #4
 8002232:	1a9b      	subs	r3, r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	440b      	add	r3, r1
 8002238:	334c      	adds	r3, #76	@ 0x4c
 800223a:	2201      	movs	r2, #1
 800223c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800223e:	78fa      	ldrb	r2, [r7, #3]
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	011b      	lsls	r3, r3, #4
 8002246:	1a9b      	subs	r3, r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	440b      	add	r3, r1
 800224c:	334c      	adds	r3, #76	@ 0x4c
 800224e:	781a      	ldrb	r2, [r3, #0]
 8002250:	78fb      	ldrb	r3, [r7, #3]
 8002252:	4619      	mov	r1, r3
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f006 fc9d 	bl	8008b94 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	799b      	ldrb	r3, [r3, #6]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d13b      	bne.n	80022da <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002262:	78fa      	ldrb	r2, [r7, #3]
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	011b      	lsls	r3, r3, #4
 800226a:	1a9b      	subs	r3, r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	440b      	add	r3, r1
 8002270:	3338      	adds	r3, #56	@ 0x38
 8002272:	6819      	ldr	r1, [r3, #0]
 8002274:	78fa      	ldrb	r2, [r7, #3]
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	4613      	mov	r3, r2
 800227a:	011b      	lsls	r3, r3, #4
 800227c:	1a9b      	subs	r3, r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4403      	add	r3, r0
 8002282:	3328      	adds	r3, #40	@ 0x28
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	440b      	add	r3, r1
 8002288:	1e59      	subs	r1, r3, #1
 800228a:	78fa      	ldrb	r2, [r7, #3]
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	011b      	lsls	r3, r3, #4
 8002292:	1a9b      	subs	r3, r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4403      	add	r3, r0
 8002298:	3328      	adds	r3, #40	@ 0x28
 800229a:	881b      	ldrh	r3, [r3, #0]
 800229c:	fbb1 f3f3 	udiv	r3, r1, r3
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f000 8470 	beq.w	8002b8a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80022aa:	78fa      	ldrb	r2, [r7, #3]
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	4613      	mov	r3, r2
 80022b0:	011b      	lsls	r3, r3, #4
 80022b2:	1a9b      	subs	r3, r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	440b      	add	r3, r1
 80022b8:	333c      	adds	r3, #60	@ 0x3c
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	78fa      	ldrb	r2, [r7, #3]
 80022be:	f083 0301 	eor.w	r3, r3, #1
 80022c2:	b2d8      	uxtb	r0, r3
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	4613      	mov	r3, r2
 80022c8:	011b      	lsls	r3, r3, #4
 80022ca:	1a9b      	subs	r3, r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	440b      	add	r3, r1
 80022d0:	333c      	adds	r3, #60	@ 0x3c
 80022d2:	4602      	mov	r2, r0
 80022d4:	701a      	strb	r2, [r3, #0]
 80022d6:	f000 bc58 	b.w	8002b8a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80022da:	78fa      	ldrb	r2, [r7, #3]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	1a9b      	subs	r3, r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	440b      	add	r3, r1
 80022e8:	333c      	adds	r3, #60	@ 0x3c
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	78fa      	ldrb	r2, [r7, #3]
 80022ee:	f083 0301 	eor.w	r3, r3, #1
 80022f2:	b2d8      	uxtb	r0, r3
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	011b      	lsls	r3, r3, #4
 80022fa:	1a9b      	subs	r3, r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	333c      	adds	r3, #60	@ 0x3c
 8002302:	4602      	mov	r2, r0
 8002304:	701a      	strb	r2, [r3, #0]
 8002306:	f000 bc40 	b.w	8002b8a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	78fa      	ldrb	r2, [r7, #3]
 8002310:	4611      	mov	r1, r2
 8002312:	4618      	mov	r0, r3
 8002314:	f003 fb35 	bl	8005982 <USB_ReadChInterrupts>
 8002318:	4603      	mov	r3, r0
 800231a:	f003 0320 	and.w	r3, r3, #32
 800231e:	2b20      	cmp	r3, #32
 8002320:	d131      	bne.n	8002386 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002322:	78fb      	ldrb	r3, [r7, #3]
 8002324:	015a      	lsls	r2, r3, #5
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	4413      	add	r3, r2
 800232a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800232e:	461a      	mov	r2, r3
 8002330:	2320      	movs	r3, #32
 8002332:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002334:	78fa      	ldrb	r2, [r7, #3]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	011b      	lsls	r3, r3, #4
 800233c:	1a9b      	subs	r3, r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	331a      	adds	r3, #26
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	2b01      	cmp	r3, #1
 8002348:	f040 841f 	bne.w	8002b8a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800234c:	78fa      	ldrb	r2, [r7, #3]
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	1a9b      	subs	r3, r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	331b      	adds	r3, #27
 800235c:	2201      	movs	r2, #1
 800235e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002360:	78fa      	ldrb	r2, [r7, #3]
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	011b      	lsls	r3, r3, #4
 8002368:	1a9b      	subs	r3, r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	334d      	adds	r3, #77	@ 0x4d
 8002370:	2203      	movs	r2, #3
 8002372:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	78fa      	ldrb	r2, [r7, #3]
 800237a:	4611      	mov	r1, r2
 800237c:	4618      	mov	r0, r3
 800237e:	f004 f8aa 	bl	80064d6 <USB_HC_Halt>
 8002382:	f000 bc02 	b.w	8002b8a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	78fa      	ldrb	r2, [r7, #3]
 800238c:	4611      	mov	r1, r2
 800238e:	4618      	mov	r0, r3
 8002390:	f003 faf7 	bl	8005982 <USB_ReadChInterrupts>
 8002394:	4603      	mov	r3, r0
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b02      	cmp	r3, #2
 800239c:	f040 8305 	bne.w	80029aa <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80023a0:	78fb      	ldrb	r3, [r7, #3]
 80023a2:	015a      	lsls	r2, r3, #5
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4413      	add	r3, r2
 80023a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023ac:	461a      	mov	r2, r3
 80023ae:	2302      	movs	r3, #2
 80023b0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80023b2:	78fa      	ldrb	r2, [r7, #3]
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	1a9b      	subs	r3, r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	334d      	adds	r3, #77	@ 0x4d
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d114      	bne.n	80023f2 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023c8:	78fa      	ldrb	r2, [r7, #3]
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	1a9b      	subs	r3, r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	334d      	adds	r3, #77	@ 0x4d
 80023d8:	2202      	movs	r2, #2
 80023da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80023dc:	78fa      	ldrb	r2, [r7, #3]
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	1a9b      	subs	r3, r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	334c      	adds	r3, #76	@ 0x4c
 80023ec:	2201      	movs	r2, #1
 80023ee:	701a      	strb	r2, [r3, #0]
 80023f0:	e2cc      	b.n	800298c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80023f2:	78fa      	ldrb	r2, [r7, #3]
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	011b      	lsls	r3, r3, #4
 80023fa:	1a9b      	subs	r3, r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	440b      	add	r3, r1
 8002400:	334d      	adds	r3, #77	@ 0x4d
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b06      	cmp	r3, #6
 8002406:	d114      	bne.n	8002432 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002408:	78fa      	ldrb	r2, [r7, #3]
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	4613      	mov	r3, r2
 800240e:	011b      	lsls	r3, r3, #4
 8002410:	1a9b      	subs	r3, r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	440b      	add	r3, r1
 8002416:	334d      	adds	r3, #77	@ 0x4d
 8002418:	2202      	movs	r2, #2
 800241a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800241c:	78fa      	ldrb	r2, [r7, #3]
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	4613      	mov	r3, r2
 8002422:	011b      	lsls	r3, r3, #4
 8002424:	1a9b      	subs	r3, r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	334c      	adds	r3, #76	@ 0x4c
 800242c:	2205      	movs	r2, #5
 800242e:	701a      	strb	r2, [r3, #0]
 8002430:	e2ac      	b.n	800298c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002432:	78fa      	ldrb	r2, [r7, #3]
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	4613      	mov	r3, r2
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	1a9b      	subs	r3, r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	440b      	add	r3, r1
 8002440:	334d      	adds	r3, #77	@ 0x4d
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b07      	cmp	r3, #7
 8002446:	d00b      	beq.n	8002460 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002448:	78fa      	ldrb	r2, [r7, #3]
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	4613      	mov	r3, r2
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	1a9b      	subs	r3, r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	334d      	adds	r3, #77	@ 0x4d
 8002458:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800245a:	2b09      	cmp	r3, #9
 800245c:	f040 80a6 	bne.w	80025ac <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002460:	78fa      	ldrb	r2, [r7, #3]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	1a9b      	subs	r3, r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	334d      	adds	r3, #77	@ 0x4d
 8002470:	2202      	movs	r2, #2
 8002472:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002474:	78fa      	ldrb	r2, [r7, #3]
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	4613      	mov	r3, r2
 800247a:	011b      	lsls	r3, r3, #4
 800247c:	1a9b      	subs	r3, r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	3344      	adds	r3, #68	@ 0x44
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	1c59      	adds	r1, r3, #1
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	4613      	mov	r3, r2
 800248c:	011b      	lsls	r3, r3, #4
 800248e:	1a9b      	subs	r3, r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4403      	add	r3, r0
 8002494:	3344      	adds	r3, #68	@ 0x44
 8002496:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002498:	78fa      	ldrb	r2, [r7, #3]
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	011b      	lsls	r3, r3, #4
 80024a0:	1a9b      	subs	r3, r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	440b      	add	r3, r1
 80024a6:	3344      	adds	r3, #68	@ 0x44
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d943      	bls.n	8002536 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80024ae:	78fa      	ldrb	r2, [r7, #3]
 80024b0:	6879      	ldr	r1, [r7, #4]
 80024b2:	4613      	mov	r3, r2
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	1a9b      	subs	r3, r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	440b      	add	r3, r1
 80024bc:	3344      	adds	r3, #68	@ 0x44
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80024c2:	78fa      	ldrb	r2, [r7, #3]
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	1a9b      	subs	r3, r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	440b      	add	r3, r1
 80024d0:	331a      	adds	r3, #26
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d123      	bne.n	8002520 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80024d8:	78fa      	ldrb	r2, [r7, #3]
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	011b      	lsls	r3, r3, #4
 80024e0:	1a9b      	subs	r3, r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	331b      	adds	r3, #27
 80024e8:	2200      	movs	r2, #0
 80024ea:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80024ec:	78fa      	ldrb	r2, [r7, #3]
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	011b      	lsls	r3, r3, #4
 80024f4:	1a9b      	subs	r3, r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	331c      	adds	r3, #28
 80024fc:	2200      	movs	r2, #0
 80024fe:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002500:	78fb      	ldrb	r3, [r7, #3]
 8002502:	015a      	lsls	r2, r3, #5
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	4413      	add	r3, r2
 8002508:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	78fa      	ldrb	r2, [r7, #3]
 8002510:	0151      	lsls	r1, r2, #5
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	440a      	add	r2, r1
 8002516:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800251a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800251e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002520:	78fa      	ldrb	r2, [r7, #3]
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	011b      	lsls	r3, r3, #4
 8002528:	1a9b      	subs	r3, r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	334c      	adds	r3, #76	@ 0x4c
 8002530:	2204      	movs	r2, #4
 8002532:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002534:	e229      	b.n	800298a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002536:	78fa      	ldrb	r2, [r7, #3]
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	4613      	mov	r3, r2
 800253c:	011b      	lsls	r3, r3, #4
 800253e:	1a9b      	subs	r3, r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	440b      	add	r3, r1
 8002544:	334c      	adds	r3, #76	@ 0x4c
 8002546:	2202      	movs	r2, #2
 8002548:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800254a:	78fa      	ldrb	r2, [r7, #3]
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	4613      	mov	r3, r2
 8002550:	011b      	lsls	r3, r3, #4
 8002552:	1a9b      	subs	r3, r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	440b      	add	r3, r1
 8002558:	3326      	adds	r3, #38	@ 0x26
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00b      	beq.n	8002578 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002560:	78fa      	ldrb	r2, [r7, #3]
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	1a9b      	subs	r3, r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	3326      	adds	r3, #38	@ 0x26
 8002570:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002572:	2b02      	cmp	r3, #2
 8002574:	f040 8209 	bne.w	800298a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002578:	78fb      	ldrb	r3, [r7, #3]
 800257a:	015a      	lsls	r2, r3, #5
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	4413      	add	r3, r2
 8002580:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800258e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002596:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002598:	78fb      	ldrb	r3, [r7, #3]
 800259a:	015a      	lsls	r2, r3, #5
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	4413      	add	r3, r2
 80025a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025a4:	461a      	mov	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80025aa:	e1ee      	b.n	800298a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80025ac:	78fa      	ldrb	r2, [r7, #3]
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	011b      	lsls	r3, r3, #4
 80025b4:	1a9b      	subs	r3, r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	334d      	adds	r3, #77	@ 0x4d
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b05      	cmp	r3, #5
 80025c0:	f040 80c8 	bne.w	8002754 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80025c4:	78fa      	ldrb	r2, [r7, #3]
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	011b      	lsls	r3, r3, #4
 80025cc:	1a9b      	subs	r3, r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	440b      	add	r3, r1
 80025d2:	334d      	adds	r3, #77	@ 0x4d
 80025d4:	2202      	movs	r2, #2
 80025d6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80025d8:	78fa      	ldrb	r2, [r7, #3]
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	4613      	mov	r3, r2
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	1a9b      	subs	r3, r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	331b      	adds	r3, #27
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	f040 81ce 	bne.w	800298c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80025f0:	78fa      	ldrb	r2, [r7, #3]
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	4613      	mov	r3, r2
 80025f6:	011b      	lsls	r3, r3, #4
 80025f8:	1a9b      	subs	r3, r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	3326      	adds	r3, #38	@ 0x26
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b03      	cmp	r3, #3
 8002604:	d16b      	bne.n	80026de <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002606:	78fa      	ldrb	r2, [r7, #3]
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	4613      	mov	r3, r2
 800260c:	011b      	lsls	r3, r3, #4
 800260e:	1a9b      	subs	r3, r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	440b      	add	r3, r1
 8002614:	3348      	adds	r3, #72	@ 0x48
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	1c59      	adds	r1, r3, #1
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	1a9b      	subs	r3, r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4403      	add	r3, r0
 8002626:	3348      	adds	r3, #72	@ 0x48
 8002628:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800262a:	78fa      	ldrb	r2, [r7, #3]
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	4613      	mov	r3, r2
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	1a9b      	subs	r3, r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	3348      	adds	r3, #72	@ 0x48
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b02      	cmp	r3, #2
 800263e:	d943      	bls.n	80026c8 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002640:	78fa      	ldrb	r2, [r7, #3]
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	011b      	lsls	r3, r3, #4
 8002648:	1a9b      	subs	r3, r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	3348      	adds	r3, #72	@ 0x48
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002654:	78fa      	ldrb	r2, [r7, #3]
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	011b      	lsls	r3, r3, #4
 800265c:	1a9b      	subs	r3, r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	331b      	adds	r3, #27
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002668:	78fa      	ldrb	r2, [r7, #3]
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	4613      	mov	r3, r2
 800266e:	011b      	lsls	r3, r3, #4
 8002670:	1a9b      	subs	r3, r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	3344      	adds	r3, #68	@ 0x44
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2b02      	cmp	r3, #2
 800267c:	d809      	bhi.n	8002692 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800267e:	78fa      	ldrb	r2, [r7, #3]
 8002680:	6879      	ldr	r1, [r7, #4]
 8002682:	4613      	mov	r3, r2
 8002684:	011b      	lsls	r3, r3, #4
 8002686:	1a9b      	subs	r3, r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	440b      	add	r3, r1
 800268c:	331c      	adds	r3, #28
 800268e:	2201      	movs	r2, #1
 8002690:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002692:	78fb      	ldrb	r3, [r7, #3]
 8002694:	015a      	lsls	r2, r3, #5
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4413      	add	r3, r2
 800269a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	78fa      	ldrb	r2, [r7, #3]
 80026a2:	0151      	lsls	r1, r2, #5
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	440a      	add	r2, r1
 80026a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026b0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80026b2:	78fa      	ldrb	r2, [r7, #3]
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	011b      	lsls	r3, r3, #4
 80026ba:	1a9b      	subs	r3, r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	440b      	add	r3, r1
 80026c0:	334c      	adds	r3, #76	@ 0x4c
 80026c2:	2204      	movs	r2, #4
 80026c4:	701a      	strb	r2, [r3, #0]
 80026c6:	e014      	b.n	80026f2 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026c8:	78fa      	ldrb	r2, [r7, #3]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	1a9b      	subs	r3, r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	334c      	adds	r3, #76	@ 0x4c
 80026d8:	2202      	movs	r2, #2
 80026da:	701a      	strb	r2, [r3, #0]
 80026dc:	e009      	b.n	80026f2 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026de:	78fa      	ldrb	r2, [r7, #3]
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	4613      	mov	r3, r2
 80026e4:	011b      	lsls	r3, r3, #4
 80026e6:	1a9b      	subs	r3, r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	440b      	add	r3, r1
 80026ec:	334c      	adds	r3, #76	@ 0x4c
 80026ee:	2202      	movs	r2, #2
 80026f0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026f2:	78fa      	ldrb	r2, [r7, #3]
 80026f4:	6879      	ldr	r1, [r7, #4]
 80026f6:	4613      	mov	r3, r2
 80026f8:	011b      	lsls	r3, r3, #4
 80026fa:	1a9b      	subs	r3, r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	440b      	add	r3, r1
 8002700:	3326      	adds	r3, #38	@ 0x26
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00b      	beq.n	8002720 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002708:	78fa      	ldrb	r2, [r7, #3]
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	4613      	mov	r3, r2
 800270e:	011b      	lsls	r3, r3, #4
 8002710:	1a9b      	subs	r3, r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	3326      	adds	r3, #38	@ 0x26
 8002718:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800271a:	2b02      	cmp	r3, #2
 800271c:	f040 8136 	bne.w	800298c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002720:	78fb      	ldrb	r3, [r7, #3]
 8002722:	015a      	lsls	r2, r3, #5
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	4413      	add	r3, r2
 8002728:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002736:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800273e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002740:	78fb      	ldrb	r3, [r7, #3]
 8002742:	015a      	lsls	r2, r3, #5
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	4413      	add	r3, r2
 8002748:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800274c:	461a      	mov	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	e11b      	b.n	800298c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002754:	78fa      	ldrb	r2, [r7, #3]
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	4613      	mov	r3, r2
 800275a:	011b      	lsls	r3, r3, #4
 800275c:	1a9b      	subs	r3, r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	440b      	add	r3, r1
 8002762:	334d      	adds	r3, #77	@ 0x4d
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	2b03      	cmp	r3, #3
 8002768:	f040 8081 	bne.w	800286e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800276c:	78fa      	ldrb	r2, [r7, #3]
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	4613      	mov	r3, r2
 8002772:	011b      	lsls	r3, r3, #4
 8002774:	1a9b      	subs	r3, r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	334d      	adds	r3, #77	@ 0x4d
 800277c:	2202      	movs	r2, #2
 800277e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002780:	78fa      	ldrb	r2, [r7, #3]
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	1a9b      	subs	r3, r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	440b      	add	r3, r1
 800278e:	331b      	adds	r3, #27
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b01      	cmp	r3, #1
 8002794:	f040 80fa 	bne.w	800298c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002798:	78fa      	ldrb	r2, [r7, #3]
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	4613      	mov	r3, r2
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	1a9b      	subs	r3, r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	440b      	add	r3, r1
 80027a6:	334c      	adds	r3, #76	@ 0x4c
 80027a8:	2202      	movs	r2, #2
 80027aa:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80027ac:	78fb      	ldrb	r3, [r7, #3]
 80027ae:	015a      	lsls	r2, r3, #5
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	78fa      	ldrb	r2, [r7, #3]
 80027bc:	0151      	lsls	r1, r2, #5
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	440a      	add	r2, r1
 80027c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027ca:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80027cc:	78fb      	ldrb	r3, [r7, #3]
 80027ce:	015a      	lsls	r2, r3, #5
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	4413      	add	r3, r2
 80027d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	78fa      	ldrb	r2, [r7, #3]
 80027dc:	0151      	lsls	r1, r2, #5
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	440a      	add	r2, r1
 80027e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027ea:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80027ec:	78fb      	ldrb	r3, [r7, #3]
 80027ee:	015a      	lsls	r2, r3, #5
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	4413      	add	r3, r2
 80027f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	78fa      	ldrb	r2, [r7, #3]
 80027fc:	0151      	lsls	r1, r2, #5
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	440a      	add	r2, r1
 8002802:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002806:	f023 0320 	bic.w	r3, r3, #32
 800280a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800280c:	78fa      	ldrb	r2, [r7, #3]
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	1a9b      	subs	r3, r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	3326      	adds	r3, #38	@ 0x26
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00b      	beq.n	800283a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002822:	78fa      	ldrb	r2, [r7, #3]
 8002824:	6879      	ldr	r1, [r7, #4]
 8002826:	4613      	mov	r3, r2
 8002828:	011b      	lsls	r3, r3, #4
 800282a:	1a9b      	subs	r3, r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	440b      	add	r3, r1
 8002830:	3326      	adds	r3, #38	@ 0x26
 8002832:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002834:	2b02      	cmp	r3, #2
 8002836:	f040 80a9 	bne.w	800298c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800283a:	78fb      	ldrb	r3, [r7, #3]
 800283c:	015a      	lsls	r2, r3, #5
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	4413      	add	r3, r2
 8002842:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002850:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002858:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800285a:	78fb      	ldrb	r3, [r7, #3]
 800285c:	015a      	lsls	r2, r3, #5
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	4413      	add	r3, r2
 8002862:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002866:	461a      	mov	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6013      	str	r3, [r2, #0]
 800286c:	e08e      	b.n	800298c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800286e:	78fa      	ldrb	r2, [r7, #3]
 8002870:	6879      	ldr	r1, [r7, #4]
 8002872:	4613      	mov	r3, r2
 8002874:	011b      	lsls	r3, r3, #4
 8002876:	1a9b      	subs	r3, r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	440b      	add	r3, r1
 800287c:	334d      	adds	r3, #77	@ 0x4d
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b04      	cmp	r3, #4
 8002882:	d143      	bne.n	800290c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002884:	78fa      	ldrb	r2, [r7, #3]
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	1a9b      	subs	r3, r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	334d      	adds	r3, #77	@ 0x4d
 8002894:	2202      	movs	r2, #2
 8002896:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002898:	78fa      	ldrb	r2, [r7, #3]
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	4613      	mov	r3, r2
 800289e:	011b      	lsls	r3, r3, #4
 80028a0:	1a9b      	subs	r3, r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	334c      	adds	r3, #76	@ 0x4c
 80028a8:	2202      	movs	r2, #2
 80028aa:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028ac:	78fa      	ldrb	r2, [r7, #3]
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	4613      	mov	r3, r2
 80028b2:	011b      	lsls	r3, r3, #4
 80028b4:	1a9b      	subs	r3, r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	3326      	adds	r3, #38	@ 0x26
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00a      	beq.n	80028d8 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80028c2:	78fa      	ldrb	r2, [r7, #3]
 80028c4:	6879      	ldr	r1, [r7, #4]
 80028c6:	4613      	mov	r3, r2
 80028c8:	011b      	lsls	r3, r3, #4
 80028ca:	1a9b      	subs	r3, r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	440b      	add	r3, r1
 80028d0:	3326      	adds	r3, #38	@ 0x26
 80028d2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d159      	bne.n	800298c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80028d8:	78fb      	ldrb	r3, [r7, #3]
 80028da:	015a      	lsls	r2, r3, #5
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	4413      	add	r3, r2
 80028e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80028ee:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80028f6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80028f8:	78fb      	ldrb	r3, [r7, #3]
 80028fa:	015a      	lsls	r2, r3, #5
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002904:	461a      	mov	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	e03f      	b.n	800298c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800290c:	78fa      	ldrb	r2, [r7, #3]
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	4613      	mov	r3, r2
 8002912:	011b      	lsls	r3, r3, #4
 8002914:	1a9b      	subs	r3, r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	440b      	add	r3, r1
 800291a:	334d      	adds	r3, #77	@ 0x4d
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2b08      	cmp	r3, #8
 8002920:	d126      	bne.n	8002970 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002922:	78fa      	ldrb	r2, [r7, #3]
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	4613      	mov	r3, r2
 8002928:	011b      	lsls	r3, r3, #4
 800292a:	1a9b      	subs	r3, r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	440b      	add	r3, r1
 8002930:	334d      	adds	r3, #77	@ 0x4d
 8002932:	2202      	movs	r2, #2
 8002934:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002936:	78fa      	ldrb	r2, [r7, #3]
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	4613      	mov	r3, r2
 800293c:	011b      	lsls	r3, r3, #4
 800293e:	1a9b      	subs	r3, r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	440b      	add	r3, r1
 8002944:	3344      	adds	r3, #68	@ 0x44
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	1c59      	adds	r1, r3, #1
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	4613      	mov	r3, r2
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	1a9b      	subs	r3, r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4403      	add	r3, r0
 8002956:	3344      	adds	r3, #68	@ 0x44
 8002958:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800295a:	78fa      	ldrb	r2, [r7, #3]
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	4613      	mov	r3, r2
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	1a9b      	subs	r3, r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	440b      	add	r3, r1
 8002968:	334c      	adds	r3, #76	@ 0x4c
 800296a:	2204      	movs	r2, #4
 800296c:	701a      	strb	r2, [r3, #0]
 800296e:	e00d      	b.n	800298c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002970:	78fa      	ldrb	r2, [r7, #3]
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	4613      	mov	r3, r2
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	1a9b      	subs	r3, r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	440b      	add	r3, r1
 800297e:	334d      	adds	r3, #77	@ 0x4d
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b02      	cmp	r3, #2
 8002984:	f000 8100 	beq.w	8002b88 <HCD_HC_IN_IRQHandler+0xcca>
 8002988:	e000      	b.n	800298c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800298a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800298c:	78fa      	ldrb	r2, [r7, #3]
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	011b      	lsls	r3, r3, #4
 8002994:	1a9b      	subs	r3, r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	334c      	adds	r3, #76	@ 0x4c
 800299c:	781a      	ldrb	r2, [r3, #0]
 800299e:	78fb      	ldrb	r3, [r7, #3]
 80029a0:	4619      	mov	r1, r3
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f006 f8f6 	bl	8008b94 <HAL_HCD_HC_NotifyURBChange_Callback>
 80029a8:	e0ef      	b.n	8002b8a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	78fa      	ldrb	r2, [r7, #3]
 80029b0:	4611      	mov	r1, r2
 80029b2:	4618      	mov	r0, r3
 80029b4:	f002 ffe5 	bl	8005982 <USB_ReadChInterrupts>
 80029b8:	4603      	mov	r3, r0
 80029ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029be:	2b40      	cmp	r3, #64	@ 0x40
 80029c0:	d12f      	bne.n	8002a22 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80029c2:	78fb      	ldrb	r3, [r7, #3]
 80029c4:	015a      	lsls	r2, r3, #5
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	4413      	add	r3, r2
 80029ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029ce:	461a      	mov	r2, r3
 80029d0:	2340      	movs	r3, #64	@ 0x40
 80029d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80029d4:	78fa      	ldrb	r2, [r7, #3]
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	1a9b      	subs	r3, r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	334d      	adds	r3, #77	@ 0x4d
 80029e4:	2205      	movs	r2, #5
 80029e6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80029e8:	78fa      	ldrb	r2, [r7, #3]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	1a9b      	subs	r3, r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	331a      	adds	r3, #26
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d109      	bne.n	8002a12 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80029fe:	78fa      	ldrb	r2, [r7, #3]
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	1a9b      	subs	r3, r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	3344      	adds	r3, #68	@ 0x44
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	78fa      	ldrb	r2, [r7, #3]
 8002a18:	4611      	mov	r1, r2
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f003 fd5b 	bl	80064d6 <USB_HC_Halt>
 8002a20:	e0b3      	b.n	8002b8a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	78fa      	ldrb	r2, [r7, #3]
 8002a28:	4611      	mov	r1, r2
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f002 ffa9 	bl	8005982 <USB_ReadChInterrupts>
 8002a30:	4603      	mov	r3, r0
 8002a32:	f003 0310 	and.w	r3, r3, #16
 8002a36:	2b10      	cmp	r3, #16
 8002a38:	f040 80a7 	bne.w	8002b8a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002a3c:	78fa      	ldrb	r2, [r7, #3]
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	4613      	mov	r3, r2
 8002a42:	011b      	lsls	r3, r3, #4
 8002a44:	1a9b      	subs	r3, r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	3326      	adds	r3, #38	@ 0x26
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	d11b      	bne.n	8002a8a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a52:	78fa      	ldrb	r2, [r7, #3]
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	4613      	mov	r3, r2
 8002a58:	011b      	lsls	r3, r3, #4
 8002a5a:	1a9b      	subs	r3, r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	440b      	add	r3, r1
 8002a60:	3344      	adds	r3, #68	@ 0x44
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002a66:	78fa      	ldrb	r2, [r7, #3]
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	011b      	lsls	r3, r3, #4
 8002a6e:	1a9b      	subs	r3, r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	440b      	add	r3, r1
 8002a74:	334d      	adds	r3, #77	@ 0x4d
 8002a76:	2204      	movs	r2, #4
 8002a78:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	78fa      	ldrb	r2, [r7, #3]
 8002a80:	4611      	mov	r1, r2
 8002a82:	4618      	mov	r0, r3
 8002a84:	f003 fd27 	bl	80064d6 <USB_HC_Halt>
 8002a88:	e03f      	b.n	8002b0a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a8a:	78fa      	ldrb	r2, [r7, #3]
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	011b      	lsls	r3, r3, #4
 8002a92:	1a9b      	subs	r3, r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	440b      	add	r3, r1
 8002a98:	3326      	adds	r3, #38	@ 0x26
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00a      	beq.n	8002ab6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002aa0:	78fa      	ldrb	r2, [r7, #3]
 8002aa2:	6879      	ldr	r1, [r7, #4]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	011b      	lsls	r3, r3, #4
 8002aa8:	1a9b      	subs	r3, r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	440b      	add	r3, r1
 8002aae:	3326      	adds	r3, #38	@ 0x26
 8002ab0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d129      	bne.n	8002b0a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002ab6:	78fa      	ldrb	r2, [r7, #3]
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	4613      	mov	r3, r2
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	1a9b      	subs	r3, r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	440b      	add	r3, r1
 8002ac4:	3344      	adds	r3, #68	@ 0x44
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	799b      	ldrb	r3, [r3, #6]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00a      	beq.n	8002ae8 <HCD_HC_IN_IRQHandler+0xc2a>
 8002ad2:	78fa      	ldrb	r2, [r7, #3]
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	011b      	lsls	r3, r3, #4
 8002ada:	1a9b      	subs	r3, r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	440b      	add	r3, r1
 8002ae0:	331b      	adds	r3, #27
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d110      	bne.n	8002b0a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002ae8:	78fa      	ldrb	r2, [r7, #3]
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	4613      	mov	r3, r2
 8002aee:	011b      	lsls	r3, r3, #4
 8002af0:	1a9b      	subs	r3, r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	334d      	adds	r3, #77	@ 0x4d
 8002af8:	2204      	movs	r2, #4
 8002afa:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	78fa      	ldrb	r2, [r7, #3]
 8002b02:	4611      	mov	r1, r2
 8002b04:	4618      	mov	r0, r3
 8002b06:	f003 fce6 	bl	80064d6 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002b0a:	78fa      	ldrb	r2, [r7, #3]
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	1a9b      	subs	r3, r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	440b      	add	r3, r1
 8002b18:	331b      	adds	r3, #27
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d129      	bne.n	8002b74 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002b20:	78fa      	ldrb	r2, [r7, #3]
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	4613      	mov	r3, r2
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	1a9b      	subs	r3, r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	331b      	adds	r3, #27
 8002b30:	2200      	movs	r2, #0
 8002b32:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002b34:	78fb      	ldrb	r3, [r7, #3]
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	78fa      	ldrb	r2, [r7, #3]
 8002b44:	0151      	lsls	r1, r2, #5
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	440a      	add	r2, r1
 8002b4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b52:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002b54:	78fb      	ldrb	r3, [r7, #3]
 8002b56:	015a      	lsls	r2, r3, #5
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	78fa      	ldrb	r2, [r7, #3]
 8002b64:	0151      	lsls	r1, r2, #5
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	440a      	add	r2, r1
 8002b6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b6e:	f043 0320 	orr.w	r3, r3, #32
 8002b72:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002b74:	78fb      	ldrb	r3, [r7, #3]
 8002b76:	015a      	lsls	r2, r3, #5
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b80:	461a      	mov	r2, r3
 8002b82:	2310      	movs	r3, #16
 8002b84:	6093      	str	r3, [r2, #8]
 8002b86:	e000      	b.n	8002b8a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002b88:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	78fa      	ldrb	r2, [r7, #3]
 8002bac:	4611      	mov	r1, r2
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f002 fee7 	bl	8005982 <USB_ReadChInterrupts>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	f003 0304 	and.w	r3, r3, #4
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d11b      	bne.n	8002bf6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002bbe:	78fb      	ldrb	r3, [r7, #3]
 8002bc0:	015a      	lsls	r2, r3, #5
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bca:	461a      	mov	r2, r3
 8002bcc:	2304      	movs	r3, #4
 8002bce:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002bd0:	78fa      	ldrb	r2, [r7, #3]
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	1a9b      	subs	r3, r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	334d      	adds	r3, #77	@ 0x4d
 8002be0:	2207      	movs	r2, #7
 8002be2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	78fa      	ldrb	r2, [r7, #3]
 8002bea:	4611      	mov	r1, r2
 8002bec:	4618      	mov	r0, r3
 8002bee:	f003 fc72 	bl	80064d6 <USB_HC_Halt>
 8002bf2:	f000 bc89 	b.w	8003508 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	78fa      	ldrb	r2, [r7, #3]
 8002bfc:	4611      	mov	r1, r2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f002 febf 	bl	8005982 <USB_ReadChInterrupts>
 8002c04:	4603      	mov	r3, r0
 8002c06:	f003 0320 	and.w	r3, r3, #32
 8002c0a:	2b20      	cmp	r3, #32
 8002c0c:	f040 8082 	bne.w	8002d14 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002c10:	78fb      	ldrb	r3, [r7, #3]
 8002c12:	015a      	lsls	r2, r3, #5
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4413      	add	r3, r2
 8002c18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	2320      	movs	r3, #32
 8002c20:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002c22:	78fa      	ldrb	r2, [r7, #3]
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	4613      	mov	r3, r2
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	1a9b      	subs	r3, r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	440b      	add	r3, r1
 8002c30:	3319      	adds	r3, #25
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d124      	bne.n	8002c82 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002c38:	78fa      	ldrb	r2, [r7, #3]
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	011b      	lsls	r3, r3, #4
 8002c40:	1a9b      	subs	r3, r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	3319      	adds	r3, #25
 8002c48:	2200      	movs	r2, #0
 8002c4a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c4c:	78fa      	ldrb	r2, [r7, #3]
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	4613      	mov	r3, r2
 8002c52:	011b      	lsls	r3, r3, #4
 8002c54:	1a9b      	subs	r3, r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	334c      	adds	r3, #76	@ 0x4c
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002c60:	78fa      	ldrb	r2, [r7, #3]
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	4613      	mov	r3, r2
 8002c66:	011b      	lsls	r3, r3, #4
 8002c68:	1a9b      	subs	r3, r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	334d      	adds	r3, #77	@ 0x4d
 8002c70:	2203      	movs	r2, #3
 8002c72:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	78fa      	ldrb	r2, [r7, #3]
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f003 fc2a 	bl	80064d6 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002c82:	78fa      	ldrb	r2, [r7, #3]
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	1a9b      	subs	r3, r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	440b      	add	r3, r1
 8002c90:	331a      	adds	r3, #26
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	f040 8437 	bne.w	8003508 <HCD_HC_OUT_IRQHandler+0x978>
 8002c9a:	78fa      	ldrb	r2, [r7, #3]
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	011b      	lsls	r3, r3, #4
 8002ca2:	1a9b      	subs	r3, r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	440b      	add	r3, r1
 8002ca8:	331b      	adds	r3, #27
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f040 842b 	bne.w	8003508 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002cb2:	78fa      	ldrb	r2, [r7, #3]
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	011b      	lsls	r3, r3, #4
 8002cba:	1a9b      	subs	r3, r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	440b      	add	r3, r1
 8002cc0:	3326      	adds	r3, #38	@ 0x26
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d009      	beq.n	8002cdc <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002cc8:	78fa      	ldrb	r2, [r7, #3]
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	011b      	lsls	r3, r3, #4
 8002cd0:	1a9b      	subs	r3, r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	331b      	adds	r3, #27
 8002cd8:	2201      	movs	r2, #1
 8002cda:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002cdc:	78fa      	ldrb	r2, [r7, #3]
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	011b      	lsls	r3, r3, #4
 8002ce4:	1a9b      	subs	r3, r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	440b      	add	r3, r1
 8002cea:	334d      	adds	r3, #77	@ 0x4d
 8002cec:	2203      	movs	r2, #3
 8002cee:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	78fa      	ldrb	r2, [r7, #3]
 8002cf6:	4611      	mov	r1, r2
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f003 fbec 	bl	80064d6 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002cfe:	78fa      	ldrb	r2, [r7, #3]
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	4613      	mov	r3, r2
 8002d04:	011b      	lsls	r3, r3, #4
 8002d06:	1a9b      	subs	r3, r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	440b      	add	r3, r1
 8002d0c:	3344      	adds	r3, #68	@ 0x44
 8002d0e:	2200      	movs	r2, #0
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	e3f9      	b.n	8003508 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	78fa      	ldrb	r2, [r7, #3]
 8002d1a:	4611      	mov	r1, r2
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f002 fe30 	bl	8005982 <USB_ReadChInterrupts>
 8002d22:	4603      	mov	r3, r0
 8002d24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d2c:	d111      	bne.n	8002d52 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002d2e:	78fb      	ldrb	r3, [r7, #3]
 8002d30:	015a      	lsls	r2, r3, #5
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	4413      	add	r3, r2
 8002d36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d40:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	78fa      	ldrb	r2, [r7, #3]
 8002d48:	4611      	mov	r1, r2
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f003 fbc3 	bl	80064d6 <USB_HC_Halt>
 8002d50:	e3da      	b.n	8003508 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	78fa      	ldrb	r2, [r7, #3]
 8002d58:	4611      	mov	r1, r2
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f002 fe11 	bl	8005982 <USB_ReadChInterrupts>
 8002d60:	4603      	mov	r3, r0
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d168      	bne.n	8002e3c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002d6a:	78fa      	ldrb	r2, [r7, #3]
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	1a9b      	subs	r3, r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	440b      	add	r3, r1
 8002d78:	3344      	adds	r3, #68	@ 0x44
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	78fa      	ldrb	r2, [r7, #3]
 8002d84:	4611      	mov	r1, r2
 8002d86:	4618      	mov	r0, r3
 8002d88:	f002 fdfb 	bl	8005982 <USB_ReadChInterrupts>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d92:	2b40      	cmp	r3, #64	@ 0x40
 8002d94:	d112      	bne.n	8002dbc <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002d96:	78fa      	ldrb	r2, [r7, #3]
 8002d98:	6879      	ldr	r1, [r7, #4]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	011b      	lsls	r3, r3, #4
 8002d9e:	1a9b      	subs	r3, r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	440b      	add	r3, r1
 8002da4:	3319      	adds	r3, #25
 8002da6:	2201      	movs	r2, #1
 8002da8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002daa:	78fb      	ldrb	r3, [r7, #3]
 8002dac:	015a      	lsls	r2, r3, #5
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4413      	add	r3, r2
 8002db2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002db6:	461a      	mov	r2, r3
 8002db8:	2340      	movs	r3, #64	@ 0x40
 8002dba:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002dbc:	78fa      	ldrb	r2, [r7, #3]
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	1a9b      	subs	r3, r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	331b      	adds	r3, #27
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d019      	beq.n	8002e06 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002dd2:	78fa      	ldrb	r2, [r7, #3]
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	011b      	lsls	r3, r3, #4
 8002dda:	1a9b      	subs	r3, r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	440b      	add	r3, r1
 8002de0:	331b      	adds	r3, #27
 8002de2:	2200      	movs	r2, #0
 8002de4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002de6:	78fb      	ldrb	r3, [r7, #3]
 8002de8:	015a      	lsls	r2, r3, #5
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	4413      	add	r3, r2
 8002dee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	78fa      	ldrb	r2, [r7, #3]
 8002df6:	0151      	lsls	r1, r2, #5
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	440a      	add	r2, r1
 8002dfc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e04:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002e06:	78fb      	ldrb	r3, [r7, #3]
 8002e08:	015a      	lsls	r2, r3, #5
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e12:	461a      	mov	r2, r3
 8002e14:	2301      	movs	r3, #1
 8002e16:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002e18:	78fa      	ldrb	r2, [r7, #3]
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	1a9b      	subs	r3, r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	334d      	adds	r3, #77	@ 0x4d
 8002e28:	2201      	movs	r2, #1
 8002e2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	78fa      	ldrb	r2, [r7, #3]
 8002e32:	4611      	mov	r1, r2
 8002e34:	4618      	mov	r0, r3
 8002e36:	f003 fb4e 	bl	80064d6 <USB_HC_Halt>
 8002e3a:	e365      	b.n	8003508 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	78fa      	ldrb	r2, [r7, #3]
 8002e42:	4611      	mov	r1, r2
 8002e44:	4618      	mov	r0, r3
 8002e46:	f002 fd9c 	bl	8005982 <USB_ReadChInterrupts>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e50:	2b40      	cmp	r3, #64	@ 0x40
 8002e52:	d139      	bne.n	8002ec8 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002e54:	78fa      	ldrb	r2, [r7, #3]
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	011b      	lsls	r3, r3, #4
 8002e5c:	1a9b      	subs	r3, r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	440b      	add	r3, r1
 8002e62:	334d      	adds	r3, #77	@ 0x4d
 8002e64:	2205      	movs	r2, #5
 8002e66:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002e68:	78fa      	ldrb	r2, [r7, #3]
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	011b      	lsls	r3, r3, #4
 8002e70:	1a9b      	subs	r3, r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	440b      	add	r3, r1
 8002e76:	331a      	adds	r3, #26
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d109      	bne.n	8002e92 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002e7e:	78fa      	ldrb	r2, [r7, #3]
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	4613      	mov	r3, r2
 8002e84:	011b      	lsls	r3, r3, #4
 8002e86:	1a9b      	subs	r3, r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	3319      	adds	r3, #25
 8002e8e:	2201      	movs	r2, #1
 8002e90:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002e92:	78fa      	ldrb	r2, [r7, #3]
 8002e94:	6879      	ldr	r1, [r7, #4]
 8002e96:	4613      	mov	r3, r2
 8002e98:	011b      	lsls	r3, r3, #4
 8002e9a:	1a9b      	subs	r3, r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	440b      	add	r3, r1
 8002ea0:	3344      	adds	r3, #68	@ 0x44
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	78fa      	ldrb	r2, [r7, #3]
 8002eac:	4611      	mov	r1, r2
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f003 fb11 	bl	80064d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002eb4:	78fb      	ldrb	r3, [r7, #3]
 8002eb6:	015a      	lsls	r2, r3, #5
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	4413      	add	r3, r2
 8002ebc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	2340      	movs	r3, #64	@ 0x40
 8002ec4:	6093      	str	r3, [r2, #8]
 8002ec6:	e31f      	b.n	8003508 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	78fa      	ldrb	r2, [r7, #3]
 8002ece:	4611      	mov	r1, r2
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f002 fd56 	bl	8005982 <USB_ReadChInterrupts>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	f003 0308 	and.w	r3, r3, #8
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d11a      	bne.n	8002f16 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002ee0:	78fb      	ldrb	r3, [r7, #3]
 8002ee2:	015a      	lsls	r2, r3, #5
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eec:	461a      	mov	r2, r3
 8002eee:	2308      	movs	r3, #8
 8002ef0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002ef2:	78fa      	ldrb	r2, [r7, #3]
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	011b      	lsls	r3, r3, #4
 8002efa:	1a9b      	subs	r3, r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	440b      	add	r3, r1
 8002f00:	334d      	adds	r3, #77	@ 0x4d
 8002f02:	2206      	movs	r2, #6
 8002f04:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	78fa      	ldrb	r2, [r7, #3]
 8002f0c:	4611      	mov	r1, r2
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f003 fae1 	bl	80064d6 <USB_HC_Halt>
 8002f14:	e2f8      	b.n	8003508 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	78fa      	ldrb	r2, [r7, #3]
 8002f1c:	4611      	mov	r1, r2
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f002 fd2f 	bl	8005982 <USB_ReadChInterrupts>
 8002f24:	4603      	mov	r3, r0
 8002f26:	f003 0310 	and.w	r3, r3, #16
 8002f2a:	2b10      	cmp	r3, #16
 8002f2c:	d144      	bne.n	8002fb8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002f2e:	78fa      	ldrb	r2, [r7, #3]
 8002f30:	6879      	ldr	r1, [r7, #4]
 8002f32:	4613      	mov	r3, r2
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	1a9b      	subs	r3, r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	3344      	adds	r3, #68	@ 0x44
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002f42:	78fa      	ldrb	r2, [r7, #3]
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	4613      	mov	r3, r2
 8002f48:	011b      	lsls	r3, r3, #4
 8002f4a:	1a9b      	subs	r3, r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	440b      	add	r3, r1
 8002f50:	334d      	adds	r3, #77	@ 0x4d
 8002f52:	2204      	movs	r2, #4
 8002f54:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002f56:	78fa      	ldrb	r2, [r7, #3]
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	1a9b      	subs	r3, r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	3319      	adds	r3, #25
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d114      	bne.n	8002f96 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002f6c:	78fa      	ldrb	r2, [r7, #3]
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	011b      	lsls	r3, r3, #4
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	3318      	adds	r3, #24
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d109      	bne.n	8002f96 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002f82:	78fa      	ldrb	r2, [r7, #3]
 8002f84:	6879      	ldr	r1, [r7, #4]
 8002f86:	4613      	mov	r3, r2
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	1a9b      	subs	r3, r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	440b      	add	r3, r1
 8002f90:	3319      	adds	r3, #25
 8002f92:	2201      	movs	r2, #1
 8002f94:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	78fa      	ldrb	r2, [r7, #3]
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f003 fa99 	bl	80064d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002fa4:	78fb      	ldrb	r3, [r7, #3]
 8002fa6:	015a      	lsls	r2, r3, #5
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	4413      	add	r3, r2
 8002fac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	2310      	movs	r3, #16
 8002fb4:	6093      	str	r3, [r2, #8]
 8002fb6:	e2a7      	b.n	8003508 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	78fa      	ldrb	r2, [r7, #3]
 8002fbe:	4611      	mov	r1, r2
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f002 fcde 	bl	8005982 <USB_ReadChInterrupts>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fcc:	2b80      	cmp	r3, #128	@ 0x80
 8002fce:	f040 8083 	bne.w	80030d8 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	799b      	ldrb	r3, [r3, #6]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d111      	bne.n	8002ffe <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002fda:	78fa      	ldrb	r2, [r7, #3]
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	1a9b      	subs	r3, r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	334d      	adds	r3, #77	@ 0x4d
 8002fea:	2207      	movs	r2, #7
 8002fec:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	78fa      	ldrb	r2, [r7, #3]
 8002ff4:	4611      	mov	r1, r2
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f003 fa6d 	bl	80064d6 <USB_HC_Halt>
 8002ffc:	e062      	b.n	80030c4 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002ffe:	78fa      	ldrb	r2, [r7, #3]
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	4613      	mov	r3, r2
 8003004:	011b      	lsls	r3, r3, #4
 8003006:	1a9b      	subs	r3, r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	440b      	add	r3, r1
 800300c:	3344      	adds	r3, #68	@ 0x44
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	1c59      	adds	r1, r3, #1
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	4613      	mov	r3, r2
 8003016:	011b      	lsls	r3, r3, #4
 8003018:	1a9b      	subs	r3, r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4403      	add	r3, r0
 800301e:	3344      	adds	r3, #68	@ 0x44
 8003020:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003022:	78fa      	ldrb	r2, [r7, #3]
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	4613      	mov	r3, r2
 8003028:	011b      	lsls	r3, r3, #4
 800302a:	1a9b      	subs	r3, r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	440b      	add	r3, r1
 8003030:	3344      	adds	r3, #68	@ 0x44
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b02      	cmp	r3, #2
 8003036:	d922      	bls.n	800307e <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003038:	78fa      	ldrb	r2, [r7, #3]
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	4613      	mov	r3, r2
 800303e:	011b      	lsls	r3, r3, #4
 8003040:	1a9b      	subs	r3, r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	3344      	adds	r3, #68	@ 0x44
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800304c:	78fa      	ldrb	r2, [r7, #3]
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	4613      	mov	r3, r2
 8003052:	011b      	lsls	r3, r3, #4
 8003054:	1a9b      	subs	r3, r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	334c      	adds	r3, #76	@ 0x4c
 800305c:	2204      	movs	r2, #4
 800305e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003060:	78fa      	ldrb	r2, [r7, #3]
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	4613      	mov	r3, r2
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	1a9b      	subs	r3, r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	334c      	adds	r3, #76	@ 0x4c
 8003070:	781a      	ldrb	r2, [r3, #0]
 8003072:	78fb      	ldrb	r3, [r7, #3]
 8003074:	4619      	mov	r1, r3
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f005 fd8c 	bl	8008b94 <HAL_HCD_HC_NotifyURBChange_Callback>
 800307c:	e022      	b.n	80030c4 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800307e:	78fa      	ldrb	r2, [r7, #3]
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	4613      	mov	r3, r2
 8003084:	011b      	lsls	r3, r3, #4
 8003086:	1a9b      	subs	r3, r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	440b      	add	r3, r1
 800308c:	334c      	adds	r3, #76	@ 0x4c
 800308e:	2202      	movs	r2, #2
 8003090:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003092:	78fb      	ldrb	r3, [r7, #3]
 8003094:	015a      	lsls	r2, r3, #5
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	4413      	add	r3, r2
 800309a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80030a8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80030b0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80030b2:	78fb      	ldrb	r3, [r7, #3]
 80030b4:	015a      	lsls	r2, r3, #5
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	4413      	add	r3, r2
 80030ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030be:	461a      	mov	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80030c4:	78fb      	ldrb	r3, [r7, #3]
 80030c6:	015a      	lsls	r2, r3, #5
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	4413      	add	r3, r2
 80030cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030d0:	461a      	mov	r2, r3
 80030d2:	2380      	movs	r3, #128	@ 0x80
 80030d4:	6093      	str	r3, [r2, #8]
 80030d6:	e217      	b.n	8003508 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	78fa      	ldrb	r2, [r7, #3]
 80030de:	4611      	mov	r1, r2
 80030e0:	4618      	mov	r0, r3
 80030e2:	f002 fc4e 	bl	8005982 <USB_ReadChInterrupts>
 80030e6:	4603      	mov	r3, r0
 80030e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030f0:	d11b      	bne.n	800312a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80030f2:	78fa      	ldrb	r2, [r7, #3]
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	4613      	mov	r3, r2
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	1a9b      	subs	r3, r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	334d      	adds	r3, #77	@ 0x4d
 8003102:	2209      	movs	r2, #9
 8003104:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	78fa      	ldrb	r2, [r7, #3]
 800310c:	4611      	mov	r1, r2
 800310e:	4618      	mov	r0, r3
 8003110:	f003 f9e1 	bl	80064d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003114:	78fb      	ldrb	r3, [r7, #3]
 8003116:	015a      	lsls	r2, r3, #5
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	4413      	add	r3, r2
 800311c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003120:	461a      	mov	r2, r3
 8003122:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003126:	6093      	str	r3, [r2, #8]
 8003128:	e1ee      	b.n	8003508 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	78fa      	ldrb	r2, [r7, #3]
 8003130:	4611      	mov	r1, r2
 8003132:	4618      	mov	r0, r3
 8003134:	f002 fc25 	bl	8005982 <USB_ReadChInterrupts>
 8003138:	4603      	mov	r3, r0
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b02      	cmp	r3, #2
 8003140:	f040 81df 	bne.w	8003502 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003144:	78fb      	ldrb	r3, [r7, #3]
 8003146:	015a      	lsls	r2, r3, #5
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	4413      	add	r3, r2
 800314c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003150:	461a      	mov	r2, r3
 8003152:	2302      	movs	r3, #2
 8003154:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003156:	78fa      	ldrb	r2, [r7, #3]
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	4613      	mov	r3, r2
 800315c:	011b      	lsls	r3, r3, #4
 800315e:	1a9b      	subs	r3, r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	440b      	add	r3, r1
 8003164:	334d      	adds	r3, #77	@ 0x4d
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b01      	cmp	r3, #1
 800316a:	f040 8093 	bne.w	8003294 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800316e:	78fa      	ldrb	r2, [r7, #3]
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	4613      	mov	r3, r2
 8003174:	011b      	lsls	r3, r3, #4
 8003176:	1a9b      	subs	r3, r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	334d      	adds	r3, #77	@ 0x4d
 800317e:	2202      	movs	r2, #2
 8003180:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003182:	78fa      	ldrb	r2, [r7, #3]
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	4613      	mov	r3, r2
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	1a9b      	subs	r3, r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	440b      	add	r3, r1
 8003190:	334c      	adds	r3, #76	@ 0x4c
 8003192:	2201      	movs	r2, #1
 8003194:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003196:	78fa      	ldrb	r2, [r7, #3]
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	4613      	mov	r3, r2
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	1a9b      	subs	r3, r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	3326      	adds	r3, #38	@ 0x26
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d00b      	beq.n	80031c4 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80031ac:	78fa      	ldrb	r2, [r7, #3]
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	011b      	lsls	r3, r3, #4
 80031b4:	1a9b      	subs	r3, r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	3326      	adds	r3, #38	@ 0x26
 80031bc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80031be:	2b03      	cmp	r3, #3
 80031c0:	f040 8190 	bne.w	80034e4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	799b      	ldrb	r3, [r3, #6]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d115      	bne.n	80031f8 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80031cc:	78fa      	ldrb	r2, [r7, #3]
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	4613      	mov	r3, r2
 80031d2:	011b      	lsls	r3, r3, #4
 80031d4:	1a9b      	subs	r3, r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	333d      	adds	r3, #61	@ 0x3d
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	78fa      	ldrb	r2, [r7, #3]
 80031e0:	f083 0301 	eor.w	r3, r3, #1
 80031e4:	b2d8      	uxtb	r0, r3
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	1a9b      	subs	r3, r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	333d      	adds	r3, #61	@ 0x3d
 80031f4:	4602      	mov	r2, r0
 80031f6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	799b      	ldrb	r3, [r3, #6]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	f040 8171 	bne.w	80034e4 <HCD_HC_OUT_IRQHandler+0x954>
 8003202:	78fa      	ldrb	r2, [r7, #3]
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	1a9b      	subs	r3, r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	3334      	adds	r3, #52	@ 0x34
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 8165 	beq.w	80034e4 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800321a:	78fa      	ldrb	r2, [r7, #3]
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	4613      	mov	r3, r2
 8003220:	011b      	lsls	r3, r3, #4
 8003222:	1a9b      	subs	r3, r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	440b      	add	r3, r1
 8003228:	3334      	adds	r3, #52	@ 0x34
 800322a:	6819      	ldr	r1, [r3, #0]
 800322c:	78fa      	ldrb	r2, [r7, #3]
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	4613      	mov	r3, r2
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	1a9b      	subs	r3, r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4403      	add	r3, r0
 800323a:	3328      	adds	r3, #40	@ 0x28
 800323c:	881b      	ldrh	r3, [r3, #0]
 800323e:	440b      	add	r3, r1
 8003240:	1e59      	subs	r1, r3, #1
 8003242:	78fa      	ldrb	r2, [r7, #3]
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4403      	add	r3, r0
 8003250:	3328      	adds	r3, #40	@ 0x28
 8003252:	881b      	ldrh	r3, [r3, #0]
 8003254:	fbb1 f3f3 	udiv	r3, r1, r3
 8003258:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 813f 	beq.w	80034e4 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003266:	78fa      	ldrb	r2, [r7, #3]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	1a9b      	subs	r3, r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	333d      	adds	r3, #61	@ 0x3d
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	78fa      	ldrb	r2, [r7, #3]
 800327a:	f083 0301 	eor.w	r3, r3, #1
 800327e:	b2d8      	uxtb	r0, r3
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	011b      	lsls	r3, r3, #4
 8003286:	1a9b      	subs	r3, r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	440b      	add	r3, r1
 800328c:	333d      	adds	r3, #61	@ 0x3d
 800328e:	4602      	mov	r2, r0
 8003290:	701a      	strb	r2, [r3, #0]
 8003292:	e127      	b.n	80034e4 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003294:	78fa      	ldrb	r2, [r7, #3]
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	4613      	mov	r3, r2
 800329a:	011b      	lsls	r3, r3, #4
 800329c:	1a9b      	subs	r3, r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	440b      	add	r3, r1
 80032a2:	334d      	adds	r3, #77	@ 0x4d
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b03      	cmp	r3, #3
 80032a8:	d120      	bne.n	80032ec <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032aa:	78fa      	ldrb	r2, [r7, #3]
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	4613      	mov	r3, r2
 80032b0:	011b      	lsls	r3, r3, #4
 80032b2:	1a9b      	subs	r3, r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	440b      	add	r3, r1
 80032b8:	334d      	adds	r3, #77	@ 0x4d
 80032ba:	2202      	movs	r2, #2
 80032bc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80032be:	78fa      	ldrb	r2, [r7, #3]
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	4613      	mov	r3, r2
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	1a9b      	subs	r3, r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	440b      	add	r3, r1
 80032cc:	331b      	adds	r3, #27
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	f040 8107 	bne.w	80034e4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032d6:	78fa      	ldrb	r2, [r7, #3]
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	1a9b      	subs	r3, r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	440b      	add	r3, r1
 80032e4:	334c      	adds	r3, #76	@ 0x4c
 80032e6:	2202      	movs	r2, #2
 80032e8:	701a      	strb	r2, [r3, #0]
 80032ea:	e0fb      	b.n	80034e4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80032ec:	78fa      	ldrb	r2, [r7, #3]
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	1a9b      	subs	r3, r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	334d      	adds	r3, #77	@ 0x4d
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d13a      	bne.n	8003378 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003302:	78fa      	ldrb	r2, [r7, #3]
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	1a9b      	subs	r3, r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	440b      	add	r3, r1
 8003310:	334d      	adds	r3, #77	@ 0x4d
 8003312:	2202      	movs	r2, #2
 8003314:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003316:	78fa      	ldrb	r2, [r7, #3]
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	1a9b      	subs	r3, r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	334c      	adds	r3, #76	@ 0x4c
 8003326:	2202      	movs	r2, #2
 8003328:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800332a:	78fa      	ldrb	r2, [r7, #3]
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	4613      	mov	r3, r2
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	1a9b      	subs	r3, r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	331b      	adds	r3, #27
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2b01      	cmp	r3, #1
 800333e:	f040 80d1 	bne.w	80034e4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003342:	78fa      	ldrb	r2, [r7, #3]
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	4613      	mov	r3, r2
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	1a9b      	subs	r3, r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	440b      	add	r3, r1
 8003350:	331b      	adds	r3, #27
 8003352:	2200      	movs	r2, #0
 8003354:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003356:	78fb      	ldrb	r3, [r7, #3]
 8003358:	015a      	lsls	r2, r3, #5
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	4413      	add	r3, r2
 800335e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	78fa      	ldrb	r2, [r7, #3]
 8003366:	0151      	lsls	r1, r2, #5
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	440a      	add	r2, r1
 800336c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003370:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003374:	6053      	str	r3, [r2, #4]
 8003376:	e0b5      	b.n	80034e4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003378:	78fa      	ldrb	r2, [r7, #3]
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	1a9b      	subs	r3, r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	334d      	adds	r3, #77	@ 0x4d
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b05      	cmp	r3, #5
 800338c:	d114      	bne.n	80033b8 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800338e:	78fa      	ldrb	r2, [r7, #3]
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	440b      	add	r3, r1
 800339c:	334d      	adds	r3, #77	@ 0x4d
 800339e:	2202      	movs	r2, #2
 80033a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80033a2:	78fa      	ldrb	r2, [r7, #3]
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	4613      	mov	r3, r2
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	1a9b      	subs	r3, r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	440b      	add	r3, r1
 80033b0:	334c      	adds	r3, #76	@ 0x4c
 80033b2:	2202      	movs	r2, #2
 80033b4:	701a      	strb	r2, [r3, #0]
 80033b6:	e095      	b.n	80034e4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80033b8:	78fa      	ldrb	r2, [r7, #3]
 80033ba:	6879      	ldr	r1, [r7, #4]
 80033bc:	4613      	mov	r3, r2
 80033be:	011b      	lsls	r3, r3, #4
 80033c0:	1a9b      	subs	r3, r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	334d      	adds	r3, #77	@ 0x4d
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	2b06      	cmp	r3, #6
 80033cc:	d114      	bne.n	80033f8 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033ce:	78fa      	ldrb	r2, [r7, #3]
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	4613      	mov	r3, r2
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	1a9b      	subs	r3, r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	334d      	adds	r3, #77	@ 0x4d
 80033de:	2202      	movs	r2, #2
 80033e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80033e2:	78fa      	ldrb	r2, [r7, #3]
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	4613      	mov	r3, r2
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	1a9b      	subs	r3, r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	440b      	add	r3, r1
 80033f0:	334c      	adds	r3, #76	@ 0x4c
 80033f2:	2205      	movs	r2, #5
 80033f4:	701a      	strb	r2, [r3, #0]
 80033f6:	e075      	b.n	80034e4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80033f8:	78fa      	ldrb	r2, [r7, #3]
 80033fa:	6879      	ldr	r1, [r7, #4]
 80033fc:	4613      	mov	r3, r2
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	1a9b      	subs	r3, r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	440b      	add	r3, r1
 8003406:	334d      	adds	r3, #77	@ 0x4d
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	2b07      	cmp	r3, #7
 800340c:	d00a      	beq.n	8003424 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800340e:	78fa      	ldrb	r2, [r7, #3]
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	4613      	mov	r3, r2
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	1a9b      	subs	r3, r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	440b      	add	r3, r1
 800341c:	334d      	adds	r3, #77	@ 0x4d
 800341e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003420:	2b09      	cmp	r3, #9
 8003422:	d170      	bne.n	8003506 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003424:	78fa      	ldrb	r2, [r7, #3]
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	4613      	mov	r3, r2
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	1a9b      	subs	r3, r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	334d      	adds	r3, #77	@ 0x4d
 8003434:	2202      	movs	r2, #2
 8003436:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003438:	78fa      	ldrb	r2, [r7, #3]
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	4613      	mov	r3, r2
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	1a9b      	subs	r3, r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	3344      	adds	r3, #68	@ 0x44
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	1c59      	adds	r1, r3, #1
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	4613      	mov	r3, r2
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	1a9b      	subs	r3, r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4403      	add	r3, r0
 8003458:	3344      	adds	r3, #68	@ 0x44
 800345a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800345c:	78fa      	ldrb	r2, [r7, #3]
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	4613      	mov	r3, r2
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	1a9b      	subs	r3, r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	3344      	adds	r3, #68	@ 0x44
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2b02      	cmp	r3, #2
 8003470:	d914      	bls.n	800349c <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003472:	78fa      	ldrb	r2, [r7, #3]
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	4613      	mov	r3, r2
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	1a9b      	subs	r3, r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	440b      	add	r3, r1
 8003480:	3344      	adds	r3, #68	@ 0x44
 8003482:	2200      	movs	r2, #0
 8003484:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003486:	78fa      	ldrb	r2, [r7, #3]
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	4613      	mov	r3, r2
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	1a9b      	subs	r3, r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	440b      	add	r3, r1
 8003494:	334c      	adds	r3, #76	@ 0x4c
 8003496:	2204      	movs	r2, #4
 8003498:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800349a:	e022      	b.n	80034e2 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800349c:	78fa      	ldrb	r2, [r7, #3]
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	4613      	mov	r3, r2
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	1a9b      	subs	r3, r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	334c      	adds	r3, #76	@ 0x4c
 80034ac:	2202      	movs	r2, #2
 80034ae:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80034b0:	78fb      	ldrb	r3, [r7, #3]
 80034b2:	015a      	lsls	r2, r3, #5
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	4413      	add	r3, r2
 80034b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80034c6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80034ce:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80034d0:	78fb      	ldrb	r3, [r7, #3]
 80034d2:	015a      	lsls	r2, r3, #5
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	4413      	add	r3, r2
 80034d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034dc:	461a      	mov	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034e2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80034e4:	78fa      	ldrb	r2, [r7, #3]
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	4613      	mov	r3, r2
 80034ea:	011b      	lsls	r3, r3, #4
 80034ec:	1a9b      	subs	r3, r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	334c      	adds	r3, #76	@ 0x4c
 80034f4:	781a      	ldrb	r2, [r3, #0]
 80034f6:	78fb      	ldrb	r3, [r7, #3]
 80034f8:	4619      	mov	r1, r3
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f005 fb4a 	bl	8008b94 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003500:	e002      	b.n	8003508 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003502:	bf00      	nop
 8003504:	e000      	b.n	8003508 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003506:	bf00      	nop
  }
}
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b08a      	sub	sp, #40	@ 0x28
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800351c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	0c5b      	lsrs	r3, r3, #17
 8003534:	f003 030f 	and.w	r3, r3, #15
 8003538:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	091b      	lsrs	r3, r3, #4
 800353e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003542:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	2b02      	cmp	r3, #2
 8003548:	d004      	beq.n	8003554 <HCD_RXQLVL_IRQHandler+0x46>
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	2b05      	cmp	r3, #5
 800354e:	f000 80b6 	beq.w	80036be <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003552:	e0b7      	b.n	80036c4 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 80b3 	beq.w	80036c2 <HCD_RXQLVL_IRQHandler+0x1b4>
 800355c:	6879      	ldr	r1, [r7, #4]
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	4613      	mov	r3, r2
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	1a9b      	subs	r3, r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	332c      	adds	r3, #44	@ 0x2c
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 80a7 	beq.w	80036c2 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	4613      	mov	r3, r2
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	1a9b      	subs	r3, r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	3338      	adds	r3, #56	@ 0x38
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	18d1      	adds	r1, r2, r3
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	4613      	mov	r3, r2
 8003590:	011b      	lsls	r3, r3, #4
 8003592:	1a9b      	subs	r3, r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4403      	add	r3, r0
 8003598:	3334      	adds	r3, #52	@ 0x34
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4299      	cmp	r1, r3
 800359e:	f200 8083 	bhi.w	80036a8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6818      	ldr	r0, [r3, #0]
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	4613      	mov	r3, r2
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	1a9b      	subs	r3, r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	332c      	adds	r3, #44	@ 0x2c
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	b292      	uxth	r2, r2
 80035bc:	4619      	mov	r1, r3
 80035be:	f002 f975 	bl	80058ac <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	4613      	mov	r3, r2
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	1a9b      	subs	r3, r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	332c      	adds	r3, #44	@ 0x2c
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	18d1      	adds	r1, r2, r3
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	4613      	mov	r3, r2
 80035de:	011b      	lsls	r3, r3, #4
 80035e0:	1a9b      	subs	r3, r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4403      	add	r3, r0
 80035e6:	332c      	adds	r3, #44	@ 0x2c
 80035e8:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	4613      	mov	r3, r2
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	1a9b      	subs	r3, r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	3338      	adds	r3, #56	@ 0x38
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	18d1      	adds	r1, r2, r3
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	4613      	mov	r3, r2
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	1a9b      	subs	r3, r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4403      	add	r3, r0
 800360e:	3338      	adds	r3, #56	@ 0x38
 8003610:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	015a      	lsls	r2, r3, #5
 8003616:	6a3b      	ldr	r3, [r7, #32]
 8003618:	4413      	add	r3, r2
 800361a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	0cdb      	lsrs	r3, r3, #19
 8003622:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003626:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	4613      	mov	r3, r2
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	1a9b      	subs	r3, r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	3328      	adds	r3, #40	@ 0x28
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	461a      	mov	r2, r3
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	4293      	cmp	r3, r2
 8003640:	d13f      	bne.n	80036c2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d03c      	beq.n	80036c2 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	015a      	lsls	r2, r3, #5
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	4413      	add	r3, r2
 8003650:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800365e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003666:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	015a      	lsls	r2, r3, #5
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	4413      	add	r3, r2
 8003670:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003674:	461a      	mov	r2, r3
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	4613      	mov	r3, r2
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	1a9b      	subs	r3, r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	440b      	add	r3, r1
 8003688:	333c      	adds	r3, #60	@ 0x3c
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	f083 0301 	eor.w	r3, r3, #1
 8003690:	b2d8      	uxtb	r0, r3
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	4613      	mov	r3, r2
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	1a9b      	subs	r3, r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	440b      	add	r3, r1
 80036a0:	333c      	adds	r3, #60	@ 0x3c
 80036a2:	4602      	mov	r2, r0
 80036a4:	701a      	strb	r2, [r3, #0]
      break;
 80036a6:	e00c      	b.n	80036c2 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	4613      	mov	r3, r2
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	1a9b      	subs	r3, r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	334c      	adds	r3, #76	@ 0x4c
 80036b8:	2204      	movs	r2, #4
 80036ba:	701a      	strb	r2, [r3, #0]
      break;
 80036bc:	e001      	b.n	80036c2 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80036be:	bf00      	nop
 80036c0:	e000      	b.n	80036c4 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80036c2:	bf00      	nop
  }
}
 80036c4:	bf00      	nop
 80036c6:	3728      	adds	r7, #40	@ 0x28
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80036f8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b02      	cmp	r3, #2
 8003702:	d10b      	bne.n	800371c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b01      	cmp	r3, #1
 800370c:	d102      	bne.n	8003714 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f005 fa24 	bl	8008b5c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	f043 0302 	orr.w	r3, r3, #2
 800371a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	2b08      	cmp	r3, #8
 8003724:	d132      	bne.n	800378c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	f043 0308 	orr.w	r3, r3, #8
 800372c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b04      	cmp	r3, #4
 8003736:	d126      	bne.n	8003786 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	7a5b      	ldrb	r3, [r3, #9]
 800373c:	2b02      	cmp	r3, #2
 800373e:	d113      	bne.n	8003768 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003746:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800374a:	d106      	bne.n	800375a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2102      	movs	r1, #2
 8003752:	4618      	mov	r0, r3
 8003754:	f002 fa40 	bl	8005bd8 <USB_InitFSLSPClkSel>
 8003758:	e011      	b.n	800377e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2101      	movs	r1, #1
 8003760:	4618      	mov	r0, r3
 8003762:	f002 fa39 	bl	8005bd8 <USB_InitFSLSPClkSel>
 8003766:	e00a      	b.n	800377e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	79db      	ldrb	r3, [r3, #7]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d106      	bne.n	800377e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003776:	461a      	mov	r2, r3
 8003778:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800377c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f005 fa16 	bl	8008bb0 <HAL_HCD_PortEnabled_Callback>
 8003784:	e002      	b.n	800378c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f005 fa20 	bl	8008bcc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	2b20      	cmp	r3, #32
 8003794:	d103      	bne.n	800379e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	f043 0320 	orr.w	r3, r3, #32
 800379c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80037a4:	461a      	mov	r2, r3
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	6013      	str	r3, [r2, #0]
}
 80037aa:	bf00      	nop
 80037ac:	3718      	adds	r7, #24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
	...

080037b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e12b      	b.n	8003a1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d106      	bne.n	80037e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7fc ff96 	bl	800070c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2224      	movs	r2, #36	@ 0x24
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 0201 	bic.w	r2, r2, #1
 80037f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003806:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003816:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003818:	f001 fa20 	bl	8004c5c <HAL_RCC_GetPCLK1Freq>
 800381c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	4a81      	ldr	r2, [pc, #516]	@ (8003a28 <HAL_I2C_Init+0x274>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d807      	bhi.n	8003838 <HAL_I2C_Init+0x84>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	4a80      	ldr	r2, [pc, #512]	@ (8003a2c <HAL_I2C_Init+0x278>)
 800382c:	4293      	cmp	r3, r2
 800382e:	bf94      	ite	ls
 8003830:	2301      	movls	r3, #1
 8003832:	2300      	movhi	r3, #0
 8003834:	b2db      	uxtb	r3, r3
 8003836:	e006      	b.n	8003846 <HAL_I2C_Init+0x92>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	4a7d      	ldr	r2, [pc, #500]	@ (8003a30 <HAL_I2C_Init+0x27c>)
 800383c:	4293      	cmp	r3, r2
 800383e:	bf94      	ite	ls
 8003840:	2301      	movls	r3, #1
 8003842:	2300      	movhi	r3, #0
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e0e7      	b.n	8003a1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4a78      	ldr	r2, [pc, #480]	@ (8003a34 <HAL_I2C_Init+0x280>)
 8003852:	fba2 2303 	umull	r2, r3, r2, r3
 8003856:	0c9b      	lsrs	r3, r3, #18
 8003858:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	430a      	orrs	r2, r1
 800386c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	4a6a      	ldr	r2, [pc, #424]	@ (8003a28 <HAL_I2C_Init+0x274>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d802      	bhi.n	8003888 <HAL_I2C_Init+0xd4>
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	3301      	adds	r3, #1
 8003886:	e009      	b.n	800389c <HAL_I2C_Init+0xe8>
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800388e:	fb02 f303 	mul.w	r3, r2, r3
 8003892:	4a69      	ldr	r2, [pc, #420]	@ (8003a38 <HAL_I2C_Init+0x284>)
 8003894:	fba2 2303 	umull	r2, r3, r2, r3
 8003898:	099b      	lsrs	r3, r3, #6
 800389a:	3301      	adds	r3, #1
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	6812      	ldr	r2, [r2, #0]
 80038a0:	430b      	orrs	r3, r1
 80038a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80038ae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	495c      	ldr	r1, [pc, #368]	@ (8003a28 <HAL_I2C_Init+0x274>)
 80038b8:	428b      	cmp	r3, r1
 80038ba:	d819      	bhi.n	80038f0 <HAL_I2C_Init+0x13c>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	1e59      	subs	r1, r3, #1
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80038ca:	1c59      	adds	r1, r3, #1
 80038cc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80038d0:	400b      	ands	r3, r1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00a      	beq.n	80038ec <HAL_I2C_Init+0x138>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	1e59      	subs	r1, r3, #1
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80038e4:	3301      	adds	r3, #1
 80038e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ea:	e051      	b.n	8003990 <HAL_I2C_Init+0x1dc>
 80038ec:	2304      	movs	r3, #4
 80038ee:	e04f      	b.n	8003990 <HAL_I2C_Init+0x1dc>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d111      	bne.n	800391c <HAL_I2C_Init+0x168>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	1e58      	subs	r0, r3, #1
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6859      	ldr	r1, [r3, #4]
 8003900:	460b      	mov	r3, r1
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	440b      	add	r3, r1
 8003906:	fbb0 f3f3 	udiv	r3, r0, r3
 800390a:	3301      	adds	r3, #1
 800390c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003910:	2b00      	cmp	r3, #0
 8003912:	bf0c      	ite	eq
 8003914:	2301      	moveq	r3, #1
 8003916:	2300      	movne	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	e012      	b.n	8003942 <HAL_I2C_Init+0x18e>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	1e58      	subs	r0, r3, #1
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6859      	ldr	r1, [r3, #4]
 8003924:	460b      	mov	r3, r1
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	0099      	lsls	r1, r3, #2
 800392c:	440b      	add	r3, r1
 800392e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003932:	3301      	adds	r3, #1
 8003934:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003938:	2b00      	cmp	r3, #0
 800393a:	bf0c      	ite	eq
 800393c:	2301      	moveq	r3, #1
 800393e:	2300      	movne	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <HAL_I2C_Init+0x196>
 8003946:	2301      	movs	r3, #1
 8003948:	e022      	b.n	8003990 <HAL_I2C_Init+0x1dc>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10e      	bne.n	8003970 <HAL_I2C_Init+0x1bc>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	1e58      	subs	r0, r3, #1
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6859      	ldr	r1, [r3, #4]
 800395a:	460b      	mov	r3, r1
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	440b      	add	r3, r1
 8003960:	fbb0 f3f3 	udiv	r3, r0, r3
 8003964:	3301      	adds	r3, #1
 8003966:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800396a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800396e:	e00f      	b.n	8003990 <HAL_I2C_Init+0x1dc>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	1e58      	subs	r0, r3, #1
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6859      	ldr	r1, [r3, #4]
 8003978:	460b      	mov	r3, r1
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	440b      	add	r3, r1
 800397e:	0099      	lsls	r1, r3, #2
 8003980:	440b      	add	r3, r1
 8003982:	fbb0 f3f3 	udiv	r3, r0, r3
 8003986:	3301      	adds	r3, #1
 8003988:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800398c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003990:	6879      	ldr	r1, [r7, #4]
 8003992:	6809      	ldr	r1, [r1, #0]
 8003994:	4313      	orrs	r3, r2
 8003996:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	69da      	ldr	r2, [r3, #28]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	431a      	orrs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	430a      	orrs	r2, r1
 80039b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80039be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	6911      	ldr	r1, [r2, #16]
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	68d2      	ldr	r2, [r2, #12]
 80039ca:	4311      	orrs	r1, r2
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6812      	ldr	r2, [r2, #0]
 80039d0:	430b      	orrs	r3, r1
 80039d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	695a      	ldr	r2, [r3, #20]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	431a      	orrs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f042 0201 	orr.w	r2, r2, #1
 80039fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	000186a0 	.word	0x000186a0
 8003a2c:	001e847f 	.word	0x001e847f
 8003a30:	003d08ff 	.word	0x003d08ff
 8003a34:	431bde83 	.word	0x431bde83
 8003a38:	10624dd3 	.word	0x10624dd3

08003a3c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b088      	sub	sp, #32
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e128      	b.n	8003ca0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d109      	bne.n	8003a6e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a90      	ldr	r2, [pc, #576]	@ (8003ca8 <HAL_I2S_Init+0x26c>)
 8003a66:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7fc fec7 	bl	80007fc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2202      	movs	r2, #2
 8003a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6812      	ldr	r2, [r2, #0]
 8003a80:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003a84:	f023 030f 	bic.w	r3, r3, #15
 8003a88:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2202      	movs	r2, #2
 8003a90:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d060      	beq.n	8003b5c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d102      	bne.n	8003aa8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003aa2:	2310      	movs	r3, #16
 8003aa4:	617b      	str	r3, [r7, #20]
 8003aa6:	e001      	b.n	8003aac <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003aa8:	2320      	movs	r3, #32
 8003aaa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	2b20      	cmp	r3, #32
 8003ab2:	d802      	bhi.n	8003aba <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003aba:	2001      	movs	r0, #1
 8003abc:	f001 f9d8 	bl	8004e70 <HAL_RCCEx_GetPeriphCLKFreq>
 8003ac0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003aca:	d125      	bne.n	8003b18 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d010      	beq.n	8003af6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ade:	4613      	mov	r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	4413      	add	r3, r2
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af0:	3305      	adds	r3, #5
 8003af2:	613b      	str	r3, [r7, #16]
 8003af4:	e01f      	b.n	8003b36 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b00:	4613      	mov	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4413      	add	r3, r2
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	461a      	mov	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b12:	3305      	adds	r3, #5
 8003b14:	613b      	str	r3, [r7, #16]
 8003b16:	e00e      	b.n	8003b36 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b20:	4613      	mov	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4413      	add	r3, r2
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	461a      	mov	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b32:	3305      	adds	r3, #5
 8003b34:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	4a5c      	ldr	r2, [pc, #368]	@ (8003cac <HAL_I2S_Init+0x270>)
 8003b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3e:	08db      	lsrs	r3, r3, #3
 8003b40:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	085b      	lsrs	r3, r3, #1
 8003b52:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	021b      	lsls	r3, r3, #8
 8003b58:	61bb      	str	r3, [r7, #24]
 8003b5a:	e003      	b.n	8003b64 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d902      	bls.n	8003b70 <HAL_I2S_Init+0x134>
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	2bff      	cmp	r3, #255	@ 0xff
 8003b6e:	d907      	bls.n	8003b80 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b74:	f043 0210 	orr.w	r2, r3, #16
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e08f      	b.n	8003ca0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	691a      	ldr	r2, [r3, #16]
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	ea42 0103 	orr.w	r1, r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	69fa      	ldr	r2, [r7, #28]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003b9e:	f023 030f 	bic.w	r3, r3, #15
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	6851      	ldr	r1, [r2, #4]
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	6892      	ldr	r2, [r2, #8]
 8003baa:	4311      	orrs	r1, r2
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	68d2      	ldr	r2, [r2, #12]
 8003bb0:	4311      	orrs	r1, r2
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6992      	ldr	r2, [r2, #24]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bc2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d161      	bne.n	8003c90 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a38      	ldr	r2, [pc, #224]	@ (8003cb0 <HAL_I2S_Init+0x274>)
 8003bd0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a37      	ldr	r2, [pc, #220]	@ (8003cb4 <HAL_I2S_Init+0x278>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d101      	bne.n	8003be0 <HAL_I2S_Init+0x1a4>
 8003bdc:	4b36      	ldr	r3, [pc, #216]	@ (8003cb8 <HAL_I2S_Init+0x27c>)
 8003bde:	e001      	b.n	8003be4 <HAL_I2S_Init+0x1a8>
 8003be0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	6812      	ldr	r2, [r2, #0]
 8003bea:	4932      	ldr	r1, [pc, #200]	@ (8003cb4 <HAL_I2S_Init+0x278>)
 8003bec:	428a      	cmp	r2, r1
 8003bee:	d101      	bne.n	8003bf4 <HAL_I2S_Init+0x1b8>
 8003bf0:	4a31      	ldr	r2, [pc, #196]	@ (8003cb8 <HAL_I2S_Init+0x27c>)
 8003bf2:	e001      	b.n	8003bf8 <HAL_I2S_Init+0x1bc>
 8003bf4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003bf8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003bfc:	f023 030f 	bic.w	r3, r3, #15
 8003c00:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a2b      	ldr	r2, [pc, #172]	@ (8003cb4 <HAL_I2S_Init+0x278>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d101      	bne.n	8003c10 <HAL_I2S_Init+0x1d4>
 8003c0c:	4b2a      	ldr	r3, [pc, #168]	@ (8003cb8 <HAL_I2S_Init+0x27c>)
 8003c0e:	e001      	b.n	8003c14 <HAL_I2S_Init+0x1d8>
 8003c10:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c14:	2202      	movs	r2, #2
 8003c16:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a25      	ldr	r2, [pc, #148]	@ (8003cb4 <HAL_I2S_Init+0x278>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d101      	bne.n	8003c26 <HAL_I2S_Init+0x1ea>
 8003c22:	4b25      	ldr	r3, [pc, #148]	@ (8003cb8 <HAL_I2S_Init+0x27c>)
 8003c24:	e001      	b.n	8003c2a <HAL_I2S_Init+0x1ee>
 8003c26:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c2a:	69db      	ldr	r3, [r3, #28]
 8003c2c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c36:	d003      	beq.n	8003c40 <HAL_I2S_Init+0x204>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d103      	bne.n	8003c48 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003c40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c44:	613b      	str	r3, [r7, #16]
 8003c46:	e001      	b.n	8003c4c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c56:	4313      	orrs	r3, r2
 8003c58:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c60:	4313      	orrs	r3, r2
 8003c62:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	897b      	ldrh	r3, [r7, #10]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003c78:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a0d      	ldr	r2, [pc, #52]	@ (8003cb4 <HAL_I2S_Init+0x278>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d101      	bne.n	8003c88 <HAL_I2S_Init+0x24c>
 8003c84:	4b0c      	ldr	r3, [pc, #48]	@ (8003cb8 <HAL_I2S_Init+0x27c>)
 8003c86:	e001      	b.n	8003c8c <HAL_I2S_Init+0x250>
 8003c88:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c8c:	897a      	ldrh	r2, [r7, #10]
 8003c8e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3720      	adds	r7, #32
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	08003db3 	.word	0x08003db3
 8003cac:	cccccccd 	.word	0xcccccccd
 8003cb0:	08003ec9 	.word	0x08003ec9
 8003cb4:	40003800 	.word	0x40003800
 8003cb8:	40003400 	.word	0x40003400

08003cbc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d04:	881a      	ldrh	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d10:	1c9a      	adds	r2, r3, #2
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10e      	bne.n	8003d4c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	685a      	ldr	r2, [r3, #4]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003d3c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7ff ffb8 	bl	8003cbc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d4c:	bf00      	nop
 8003d4e:	3708      	adds	r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d66:	b292      	uxth	r2, r2
 8003d68:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d6e:	1c9a      	adds	r2, r3, #2
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10e      	bne.n	8003daa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d9a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7ff ff93 	bl	8003cd0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003daa:	bf00      	nop
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b086      	sub	sp, #24
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	d13a      	bne.n	8003e44 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d109      	bne.n	8003dec <I2S_IRQHandler+0x3a>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003de2:	2b40      	cmp	r3, #64	@ 0x40
 8003de4:	d102      	bne.n	8003dec <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7ff ffb4 	bl	8003d54 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003df2:	2b40      	cmp	r3, #64	@ 0x40
 8003df4:	d126      	bne.n	8003e44 <I2S_IRQHandler+0x92>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f003 0320 	and.w	r3, r3, #32
 8003e00:	2b20      	cmp	r3, #32
 8003e02:	d11f      	bne.n	8003e44 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e12:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e14:	2300      	movs	r3, #0
 8003e16:	613b      	str	r3, [r7, #16]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	613b      	str	r3, [r7, #16]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	613b      	str	r3, [r7, #16]
 8003e28:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e36:	f043 0202 	orr.w	r2, r3, #2
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7ff ff50 	bl	8003ce4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b03      	cmp	r3, #3
 8003e4e:	d136      	bne.n	8003ebe <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d109      	bne.n	8003e6e <I2S_IRQHandler+0xbc>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e64:	2b80      	cmp	r3, #128	@ 0x80
 8003e66:	d102      	bne.n	8003e6e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f7ff ff45 	bl	8003cf8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f003 0308 	and.w	r3, r3, #8
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d122      	bne.n	8003ebe <I2S_IRQHandler+0x10c>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f003 0320 	and.w	r3, r3, #32
 8003e82:	2b20      	cmp	r3, #32
 8003e84:	d11b      	bne.n	8003ebe <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e94:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e96:	2300      	movs	r3, #0
 8003e98:	60fb      	str	r3, [r7, #12]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	60fb      	str	r3, [r7, #12]
 8003ea2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb0:	f043 0204 	orr.w	r2, r3, #4
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f7ff ff13 	bl	8003ce4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ebe:	bf00      	nop
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
	...

08003ec8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b088      	sub	sp, #32
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a92      	ldr	r2, [pc, #584]	@ (8004128 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d101      	bne.n	8003ee6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003ee2:	4b92      	ldr	r3, [pc, #584]	@ (800412c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ee4:	e001      	b.n	8003eea <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003ee6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a8b      	ldr	r2, [pc, #556]	@ (8004128 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d101      	bne.n	8003f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003f00:	4b8a      	ldr	r3, [pc, #552]	@ (800412c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f02:	e001      	b.n	8003f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003f04:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f14:	d004      	beq.n	8003f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f040 8099 	bne.w	8004052 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d107      	bne.n	8003f3a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d002      	beq.n	8003f3a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 f925 	bl	8004184 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d107      	bne.n	8003f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d002      	beq.n	8003f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f9c8 	bl	80042e4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f5a:	2b40      	cmp	r3, #64	@ 0x40
 8003f5c:	d13a      	bne.n	8003fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	f003 0320 	and.w	r3, r3, #32
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d035      	beq.n	8003fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a6e      	ldr	r2, [pc, #440]	@ (8004128 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d101      	bne.n	8003f76 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003f72:	4b6e      	ldr	r3, [pc, #440]	@ (800412c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f74:	e001      	b.n	8003f7a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003f76:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4969      	ldr	r1, [pc, #420]	@ (8004128 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f82:	428b      	cmp	r3, r1
 8003f84:	d101      	bne.n	8003f8a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003f86:	4b69      	ldr	r3, [pc, #420]	@ (800412c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f88:	e001      	b.n	8003f8e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003f8a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f8e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f92:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003fa2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc6:	f043 0202 	orr.w	r2, r3, #2
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7ff fe88 	bl	8003ce4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	f003 0308 	and.w	r3, r3, #8
 8003fda:	2b08      	cmp	r3, #8
 8003fdc:	f040 80c3 	bne.w	8004166 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	f003 0320 	and.w	r3, r3, #32
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f000 80bd 	beq.w	8004166 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003ffa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a49      	ldr	r2, [pc, #292]	@ (8004128 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d101      	bne.n	800400a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004006:	4b49      	ldr	r3, [pc, #292]	@ (800412c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004008:	e001      	b.n	800400e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800400a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4944      	ldr	r1, [pc, #272]	@ (8004128 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004016:	428b      	cmp	r3, r1
 8004018:	d101      	bne.n	800401e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800401a:	4b44      	ldr	r3, [pc, #272]	@ (800412c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800401c:	e001      	b.n	8004022 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800401e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004022:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004026:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004028:	2300      	movs	r3, #0
 800402a:	60bb      	str	r3, [r7, #8]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	60bb      	str	r3, [r7, #8]
 8004034:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004042:	f043 0204 	orr.w	r2, r3, #4
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7ff fe4a 	bl	8003ce4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004050:	e089      	b.n	8004166 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b02      	cmp	r3, #2
 800405a:	d107      	bne.n	800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f8be 	bl	80041e8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b01      	cmp	r3, #1
 8004074:	d107      	bne.n	8004086 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f8fd 	bl	8004280 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800408c:	2b40      	cmp	r3, #64	@ 0x40
 800408e:	d12f      	bne.n	80040f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f003 0320 	and.w	r3, r3, #32
 8004096:	2b00      	cmp	r3, #0
 8004098:	d02a      	beq.n	80040f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80040a8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a1e      	ldr	r2, [pc, #120]	@ (8004128 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d101      	bne.n	80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80040b4:	4b1d      	ldr	r3, [pc, #116]	@ (800412c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040b6:	e001      	b.n	80040bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80040b8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4919      	ldr	r1, [pc, #100]	@ (8004128 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040c4:	428b      	cmp	r3, r1
 80040c6:	d101      	bne.n	80040cc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80040c8:	4b18      	ldr	r3, [pc, #96]	@ (800412c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040ca:	e001      	b.n	80040d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80040cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040d0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040d4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040e2:	f043 0202 	orr.w	r2, r3, #2
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7ff fdfa 	bl	8003ce4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	f003 0308 	and.w	r3, r3, #8
 80040f6:	2b08      	cmp	r3, #8
 80040f8:	d136      	bne.n	8004168 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	f003 0320 	and.w	r3, r3, #32
 8004100:	2b00      	cmp	r3, #0
 8004102:	d031      	beq.n	8004168 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a07      	ldr	r2, [pc, #28]	@ (8004128 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d101      	bne.n	8004112 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800410e:	4b07      	ldr	r3, [pc, #28]	@ (800412c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004110:	e001      	b.n	8004116 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004112:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4902      	ldr	r1, [pc, #8]	@ (8004128 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800411e:	428b      	cmp	r3, r1
 8004120:	d106      	bne.n	8004130 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004122:	4b02      	ldr	r3, [pc, #8]	@ (800412c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004124:	e006      	b.n	8004134 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004126:	bf00      	nop
 8004128:	40003800 	.word	0x40003800
 800412c:	40003400 	.word	0x40003400
 8004130:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004134:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004138:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004148:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004156:	f043 0204 	orr.w	r2, r3, #4
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7ff fdc0 	bl	8003ce4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004164:	e000      	b.n	8004168 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004166:	bf00      	nop
}
 8004168:	bf00      	nop
 800416a:	3720      	adds	r7, #32
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004190:	1c99      	adds	r1, r3, #2
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6251      	str	r1, [r2, #36]	@ 0x24
 8004196:	881a      	ldrh	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d113      	bne.n	80041de <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041c4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d106      	bne.n	80041de <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f7ff ffc9 	bl	8004170 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041de:	bf00      	nop
 80041e0:	3708      	adds	r7, #8
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
	...

080041e8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f4:	1c99      	adds	r1, r3, #2
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	6251      	str	r1, [r2, #36]	@ 0x24
 80041fa:	8819      	ldrh	r1, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a1d      	ldr	r2, [pc, #116]	@ (8004278 <I2SEx_TxISR_I2SExt+0x90>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d101      	bne.n	800420a <I2SEx_TxISR_I2SExt+0x22>
 8004206:	4b1d      	ldr	r3, [pc, #116]	@ (800427c <I2SEx_TxISR_I2SExt+0x94>)
 8004208:	e001      	b.n	800420e <I2SEx_TxISR_I2SExt+0x26>
 800420a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800420e:	460a      	mov	r2, r1
 8004210:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004216:	b29b      	uxth	r3, r3
 8004218:	3b01      	subs	r3, #1
 800421a:	b29a      	uxth	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004224:	b29b      	uxth	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d121      	bne.n	800426e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a12      	ldr	r2, [pc, #72]	@ (8004278 <I2SEx_TxISR_I2SExt+0x90>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d101      	bne.n	8004238 <I2SEx_TxISR_I2SExt+0x50>
 8004234:	4b11      	ldr	r3, [pc, #68]	@ (800427c <I2SEx_TxISR_I2SExt+0x94>)
 8004236:	e001      	b.n	800423c <I2SEx_TxISR_I2SExt+0x54>
 8004238:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	490d      	ldr	r1, [pc, #52]	@ (8004278 <I2SEx_TxISR_I2SExt+0x90>)
 8004244:	428b      	cmp	r3, r1
 8004246:	d101      	bne.n	800424c <I2SEx_TxISR_I2SExt+0x64>
 8004248:	4b0c      	ldr	r3, [pc, #48]	@ (800427c <I2SEx_TxISR_I2SExt+0x94>)
 800424a:	e001      	b.n	8004250 <I2SEx_TxISR_I2SExt+0x68>
 800424c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004250:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004254:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800425a:	b29b      	uxth	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d106      	bne.n	800426e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f7ff ff81 	bl	8004170 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800426e:	bf00      	nop
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	40003800 	.word	0x40003800
 800427c:	40003400 	.word	0x40003400

08004280 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68d8      	ldr	r0, [r3, #12]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004292:	1c99      	adds	r1, r3, #2
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004298:	b282      	uxth	r2, r0
 800429a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	3b01      	subs	r3, #1
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d113      	bne.n	80042dc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80042c2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d106      	bne.n	80042dc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7ff ff4a 	bl	8004170 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042dc:	bf00      	nop
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a20      	ldr	r2, [pc, #128]	@ (8004374 <I2SEx_RxISR_I2SExt+0x90>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d101      	bne.n	80042fa <I2SEx_RxISR_I2SExt+0x16>
 80042f6:	4b20      	ldr	r3, [pc, #128]	@ (8004378 <I2SEx_RxISR_I2SExt+0x94>)
 80042f8:	e001      	b.n	80042fe <I2SEx_RxISR_I2SExt+0x1a>
 80042fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042fe:	68d8      	ldr	r0, [r3, #12]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004304:	1c99      	adds	r1, r3, #2
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800430a:	b282      	uxth	r2, r0
 800430c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004312:	b29b      	uxth	r3, r3
 8004314:	3b01      	subs	r3, #1
 8004316:	b29a      	uxth	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004320:	b29b      	uxth	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d121      	bne.n	800436a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a12      	ldr	r2, [pc, #72]	@ (8004374 <I2SEx_RxISR_I2SExt+0x90>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d101      	bne.n	8004334 <I2SEx_RxISR_I2SExt+0x50>
 8004330:	4b11      	ldr	r3, [pc, #68]	@ (8004378 <I2SEx_RxISR_I2SExt+0x94>)
 8004332:	e001      	b.n	8004338 <I2SEx_RxISR_I2SExt+0x54>
 8004334:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004338:	685a      	ldr	r2, [r3, #4]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	490d      	ldr	r1, [pc, #52]	@ (8004374 <I2SEx_RxISR_I2SExt+0x90>)
 8004340:	428b      	cmp	r3, r1
 8004342:	d101      	bne.n	8004348 <I2SEx_RxISR_I2SExt+0x64>
 8004344:	4b0c      	ldr	r3, [pc, #48]	@ (8004378 <I2SEx_RxISR_I2SExt+0x94>)
 8004346:	e001      	b.n	800434c <I2SEx_RxISR_I2SExt+0x68>
 8004348:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800434c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004350:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004356:	b29b      	uxth	r3, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	d106      	bne.n	800436a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f7ff ff03 	bl	8004170 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800436a:	bf00      	nop
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	40003800 	.word	0x40003800
 8004378:	40003400 	.word	0x40003400

0800437c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e267      	b.n	800485e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	d075      	beq.n	8004486 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800439a:	4b88      	ldr	r3, [pc, #544]	@ (80045bc <HAL_RCC_OscConfig+0x240>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 030c 	and.w	r3, r3, #12
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d00c      	beq.n	80043c0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043a6:	4b85      	ldr	r3, [pc, #532]	@ (80045bc <HAL_RCC_OscConfig+0x240>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80043ae:	2b08      	cmp	r3, #8
 80043b0:	d112      	bne.n	80043d8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043b2:	4b82      	ldr	r3, [pc, #520]	@ (80045bc <HAL_RCC_OscConfig+0x240>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043be:	d10b      	bne.n	80043d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c0:	4b7e      	ldr	r3, [pc, #504]	@ (80045bc <HAL_RCC_OscConfig+0x240>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d05b      	beq.n	8004484 <HAL_RCC_OscConfig+0x108>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d157      	bne.n	8004484 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e242      	b.n	800485e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043e0:	d106      	bne.n	80043f0 <HAL_RCC_OscConfig+0x74>
 80043e2:	4b76      	ldr	r3, [pc, #472]	@ (80045bc <HAL_RCC_OscConfig+0x240>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a75      	ldr	r2, [pc, #468]	@ (80045bc <HAL_RCC_OscConfig+0x240>)
 80043e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043ec:	6013      	str	r3, [r2, #0]
 80043ee:	e01d      	b.n	800442c <HAL_RCC_OscConfig+0xb0>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043f8:	d10c      	bne.n	8004414 <HAL_RCC_OscConfig+0x98>
 80043fa:	4b70      	ldr	r3, [pc, #448]	@ (80045bc <HAL_RCC_OscConfig+0x240>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a6f      	ldr	r2, [pc, #444]	@ (80045bc <HAL_RCC_OscConfig+0x240>)
 8004400:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	4b6d      	ldr	r3, [pc, #436]	@ (80045bc <HAL_RCC_OscConfig+0x240>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a6c      	ldr	r2, [pc, #432]	@ (80045bc <HAL_RCC_OscConfig+0x240>)
 800440c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004410:	6013      	str	r3, [r2, #0]
 8004412:	e00b      	b.n	800442c <HAL_RCC_OscConfig+0xb0>
 8004414:	4b69      	ldr	r3, [pc, #420]	@ (80045bc <HAL_RCC_OscConfig+0x240>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a68      	ldr	r2, [pc, #416]	@ (80045bc <HAL_RCC_OscConfig+0x240>)
 800441a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800441e:	6013      	str	r3, [r2, #0]
 8004420:	4b66      	ldr	r3, [pc, #408]	@ (80045bc <HAL_RCC_OscConfig+0x240>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a65      	ldr	r2, [pc, #404]	@ (80045bc <HAL_RCC_OscConfig+0x240>)
 8004426:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800442a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d013      	beq.n	800445c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004434:	f7fc fd60 	bl	8000ef8 <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800443c:	f7fc fd5c 	bl	8000ef8 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b64      	cmp	r3, #100	@ 0x64
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e207      	b.n	800485e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800444e:	4b5b      	ldr	r3, [pc, #364]	@ (80045bc <HAL_RCC_OscConfig+0x240>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0f0      	beq.n	800443c <HAL_RCC_OscConfig+0xc0>
 800445a:	e014      	b.n	8004486 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800445c:	f7fc fd4c 	bl	8000ef8 <HAL_GetTick>
 8004460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004464:	f7fc fd48 	bl	8000ef8 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b64      	cmp	r3, #100	@ 0x64
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e1f3      	b.n	800485e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004476:	4b51      	ldr	r3, [pc, #324]	@ (80045bc <HAL_RCC_OscConfig+0x240>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1f0      	bne.n	8004464 <HAL_RCC_OscConfig+0xe8>
 8004482:	e000      	b.n	8004486 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d063      	beq.n	800455a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004492:	4b4a      	ldr	r3, [pc, #296]	@ (80045bc <HAL_RCC_OscConfig+0x240>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 030c 	and.w	r3, r3, #12
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00b      	beq.n	80044b6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800449e:	4b47      	ldr	r3, [pc, #284]	@ (80045bc <HAL_RCC_OscConfig+0x240>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80044a6:	2b08      	cmp	r3, #8
 80044a8:	d11c      	bne.n	80044e4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044aa:	4b44      	ldr	r3, [pc, #272]	@ (80045bc <HAL_RCC_OscConfig+0x240>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d116      	bne.n	80044e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044b6:	4b41      	ldr	r3, [pc, #260]	@ (80045bc <HAL_RCC_OscConfig+0x240>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d005      	beq.n	80044ce <HAL_RCC_OscConfig+0x152>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d001      	beq.n	80044ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e1c7      	b.n	800485e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ce:	4b3b      	ldr	r3, [pc, #236]	@ (80045bc <HAL_RCC_OscConfig+0x240>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	4937      	ldr	r1, [pc, #220]	@ (80045bc <HAL_RCC_OscConfig+0x240>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044e2:	e03a      	b.n	800455a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d020      	beq.n	800452e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044ec:	4b34      	ldr	r3, [pc, #208]	@ (80045c0 <HAL_RCC_OscConfig+0x244>)
 80044ee:	2201      	movs	r2, #1
 80044f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f2:	f7fc fd01 	bl	8000ef8 <HAL_GetTick>
 80044f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044f8:	e008      	b.n	800450c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044fa:	f7fc fcfd 	bl	8000ef8 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d901      	bls.n	800450c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e1a8      	b.n	800485e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800450c:	4b2b      	ldr	r3, [pc, #172]	@ (80045bc <HAL_RCC_OscConfig+0x240>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d0f0      	beq.n	80044fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004518:	4b28      	ldr	r3, [pc, #160]	@ (80045bc <HAL_RCC_OscConfig+0x240>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	00db      	lsls	r3, r3, #3
 8004526:	4925      	ldr	r1, [pc, #148]	@ (80045bc <HAL_RCC_OscConfig+0x240>)
 8004528:	4313      	orrs	r3, r2
 800452a:	600b      	str	r3, [r1, #0]
 800452c:	e015      	b.n	800455a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800452e:	4b24      	ldr	r3, [pc, #144]	@ (80045c0 <HAL_RCC_OscConfig+0x244>)
 8004530:	2200      	movs	r2, #0
 8004532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004534:	f7fc fce0 	bl	8000ef8 <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800453c:	f7fc fcdc 	bl	8000ef8 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e187      	b.n	800485e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800454e:	4b1b      	ldr	r3, [pc, #108]	@ (80045bc <HAL_RCC_OscConfig+0x240>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1f0      	bne.n	800453c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0308 	and.w	r3, r3, #8
 8004562:	2b00      	cmp	r3, #0
 8004564:	d036      	beq.n	80045d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d016      	beq.n	800459c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800456e:	4b15      	ldr	r3, [pc, #84]	@ (80045c4 <HAL_RCC_OscConfig+0x248>)
 8004570:	2201      	movs	r2, #1
 8004572:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004574:	f7fc fcc0 	bl	8000ef8 <HAL_GetTick>
 8004578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800457c:	f7fc fcbc 	bl	8000ef8 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b02      	cmp	r3, #2
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e167      	b.n	800485e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800458e:	4b0b      	ldr	r3, [pc, #44]	@ (80045bc <HAL_RCC_OscConfig+0x240>)
 8004590:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0f0      	beq.n	800457c <HAL_RCC_OscConfig+0x200>
 800459a:	e01b      	b.n	80045d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800459c:	4b09      	ldr	r3, [pc, #36]	@ (80045c4 <HAL_RCC_OscConfig+0x248>)
 800459e:	2200      	movs	r2, #0
 80045a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045a2:	f7fc fca9 	bl	8000ef8 <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045a8:	e00e      	b.n	80045c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045aa:	f7fc fca5 	bl	8000ef8 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d907      	bls.n	80045c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e150      	b.n	800485e <HAL_RCC_OscConfig+0x4e2>
 80045bc:	40023800 	.word	0x40023800
 80045c0:	42470000 	.word	0x42470000
 80045c4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045c8:	4b88      	ldr	r3, [pc, #544]	@ (80047ec <HAL_RCC_OscConfig+0x470>)
 80045ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1ea      	bne.n	80045aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 8097 	beq.w	8004710 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045e2:	2300      	movs	r3, #0
 80045e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045e6:	4b81      	ldr	r3, [pc, #516]	@ (80047ec <HAL_RCC_OscConfig+0x470>)
 80045e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10f      	bne.n	8004612 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045f2:	2300      	movs	r3, #0
 80045f4:	60bb      	str	r3, [r7, #8]
 80045f6:	4b7d      	ldr	r3, [pc, #500]	@ (80047ec <HAL_RCC_OscConfig+0x470>)
 80045f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fa:	4a7c      	ldr	r2, [pc, #496]	@ (80047ec <HAL_RCC_OscConfig+0x470>)
 80045fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004600:	6413      	str	r3, [r2, #64]	@ 0x40
 8004602:	4b7a      	ldr	r3, [pc, #488]	@ (80047ec <HAL_RCC_OscConfig+0x470>)
 8004604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800460a:	60bb      	str	r3, [r7, #8]
 800460c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800460e:	2301      	movs	r3, #1
 8004610:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004612:	4b77      	ldr	r3, [pc, #476]	@ (80047f0 <HAL_RCC_OscConfig+0x474>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800461a:	2b00      	cmp	r3, #0
 800461c:	d118      	bne.n	8004650 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800461e:	4b74      	ldr	r3, [pc, #464]	@ (80047f0 <HAL_RCC_OscConfig+0x474>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a73      	ldr	r2, [pc, #460]	@ (80047f0 <HAL_RCC_OscConfig+0x474>)
 8004624:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004628:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800462a:	f7fc fc65 	bl	8000ef8 <HAL_GetTick>
 800462e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004630:	e008      	b.n	8004644 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004632:	f7fc fc61 	bl	8000ef8 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b02      	cmp	r3, #2
 800463e:	d901      	bls.n	8004644 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e10c      	b.n	800485e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004644:	4b6a      	ldr	r3, [pc, #424]	@ (80047f0 <HAL_RCC_OscConfig+0x474>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800464c:	2b00      	cmp	r3, #0
 800464e:	d0f0      	beq.n	8004632 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d106      	bne.n	8004666 <HAL_RCC_OscConfig+0x2ea>
 8004658:	4b64      	ldr	r3, [pc, #400]	@ (80047ec <HAL_RCC_OscConfig+0x470>)
 800465a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800465c:	4a63      	ldr	r2, [pc, #396]	@ (80047ec <HAL_RCC_OscConfig+0x470>)
 800465e:	f043 0301 	orr.w	r3, r3, #1
 8004662:	6713      	str	r3, [r2, #112]	@ 0x70
 8004664:	e01c      	b.n	80046a0 <HAL_RCC_OscConfig+0x324>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	2b05      	cmp	r3, #5
 800466c:	d10c      	bne.n	8004688 <HAL_RCC_OscConfig+0x30c>
 800466e:	4b5f      	ldr	r3, [pc, #380]	@ (80047ec <HAL_RCC_OscConfig+0x470>)
 8004670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004672:	4a5e      	ldr	r2, [pc, #376]	@ (80047ec <HAL_RCC_OscConfig+0x470>)
 8004674:	f043 0304 	orr.w	r3, r3, #4
 8004678:	6713      	str	r3, [r2, #112]	@ 0x70
 800467a:	4b5c      	ldr	r3, [pc, #368]	@ (80047ec <HAL_RCC_OscConfig+0x470>)
 800467c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800467e:	4a5b      	ldr	r2, [pc, #364]	@ (80047ec <HAL_RCC_OscConfig+0x470>)
 8004680:	f043 0301 	orr.w	r3, r3, #1
 8004684:	6713      	str	r3, [r2, #112]	@ 0x70
 8004686:	e00b      	b.n	80046a0 <HAL_RCC_OscConfig+0x324>
 8004688:	4b58      	ldr	r3, [pc, #352]	@ (80047ec <HAL_RCC_OscConfig+0x470>)
 800468a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800468c:	4a57      	ldr	r2, [pc, #348]	@ (80047ec <HAL_RCC_OscConfig+0x470>)
 800468e:	f023 0301 	bic.w	r3, r3, #1
 8004692:	6713      	str	r3, [r2, #112]	@ 0x70
 8004694:	4b55      	ldr	r3, [pc, #340]	@ (80047ec <HAL_RCC_OscConfig+0x470>)
 8004696:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004698:	4a54      	ldr	r2, [pc, #336]	@ (80047ec <HAL_RCC_OscConfig+0x470>)
 800469a:	f023 0304 	bic.w	r3, r3, #4
 800469e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d015      	beq.n	80046d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a8:	f7fc fc26 	bl	8000ef8 <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ae:	e00a      	b.n	80046c6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046b0:	f7fc fc22 	bl	8000ef8 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046be:	4293      	cmp	r3, r2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e0cb      	b.n	800485e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046c6:	4b49      	ldr	r3, [pc, #292]	@ (80047ec <HAL_RCC_OscConfig+0x470>)
 80046c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d0ee      	beq.n	80046b0 <HAL_RCC_OscConfig+0x334>
 80046d2:	e014      	b.n	80046fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046d4:	f7fc fc10 	bl	8000ef8 <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046da:	e00a      	b.n	80046f2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046dc:	f7fc fc0c 	bl	8000ef8 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e0b5      	b.n	800485e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046f2:	4b3e      	ldr	r3, [pc, #248]	@ (80047ec <HAL_RCC_OscConfig+0x470>)
 80046f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1ee      	bne.n	80046dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046fe:	7dfb      	ldrb	r3, [r7, #23]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d105      	bne.n	8004710 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004704:	4b39      	ldr	r3, [pc, #228]	@ (80047ec <HAL_RCC_OscConfig+0x470>)
 8004706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004708:	4a38      	ldr	r2, [pc, #224]	@ (80047ec <HAL_RCC_OscConfig+0x470>)
 800470a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800470e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	2b00      	cmp	r3, #0
 8004716:	f000 80a1 	beq.w	800485c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800471a:	4b34      	ldr	r3, [pc, #208]	@ (80047ec <HAL_RCC_OscConfig+0x470>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 030c 	and.w	r3, r3, #12
 8004722:	2b08      	cmp	r3, #8
 8004724:	d05c      	beq.n	80047e0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	2b02      	cmp	r3, #2
 800472c:	d141      	bne.n	80047b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800472e:	4b31      	ldr	r3, [pc, #196]	@ (80047f4 <HAL_RCC_OscConfig+0x478>)
 8004730:	2200      	movs	r2, #0
 8004732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004734:	f7fc fbe0 	bl	8000ef8 <HAL_GetTick>
 8004738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800473a:	e008      	b.n	800474e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800473c:	f7fc fbdc 	bl	8000ef8 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b02      	cmp	r3, #2
 8004748:	d901      	bls.n	800474e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e087      	b.n	800485e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800474e:	4b27      	ldr	r3, [pc, #156]	@ (80047ec <HAL_RCC_OscConfig+0x470>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1f0      	bne.n	800473c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	69da      	ldr	r2, [r3, #28]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004768:	019b      	lsls	r3, r3, #6
 800476a:	431a      	orrs	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004770:	085b      	lsrs	r3, r3, #1
 8004772:	3b01      	subs	r3, #1
 8004774:	041b      	lsls	r3, r3, #16
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800477c:	061b      	lsls	r3, r3, #24
 800477e:	491b      	ldr	r1, [pc, #108]	@ (80047ec <HAL_RCC_OscConfig+0x470>)
 8004780:	4313      	orrs	r3, r2
 8004782:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004784:	4b1b      	ldr	r3, [pc, #108]	@ (80047f4 <HAL_RCC_OscConfig+0x478>)
 8004786:	2201      	movs	r2, #1
 8004788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478a:	f7fc fbb5 	bl	8000ef8 <HAL_GetTick>
 800478e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004792:	f7fc fbb1 	bl	8000ef8 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e05c      	b.n	800485e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047a4:	4b11      	ldr	r3, [pc, #68]	@ (80047ec <HAL_RCC_OscConfig+0x470>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d0f0      	beq.n	8004792 <HAL_RCC_OscConfig+0x416>
 80047b0:	e054      	b.n	800485c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047b2:	4b10      	ldr	r3, [pc, #64]	@ (80047f4 <HAL_RCC_OscConfig+0x478>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b8:	f7fc fb9e 	bl	8000ef8 <HAL_GetTick>
 80047bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047be:	e008      	b.n	80047d2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047c0:	f7fc fb9a 	bl	8000ef8 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e045      	b.n	800485e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047d2:	4b06      	ldr	r3, [pc, #24]	@ (80047ec <HAL_RCC_OscConfig+0x470>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1f0      	bne.n	80047c0 <HAL_RCC_OscConfig+0x444>
 80047de:	e03d      	b.n	800485c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d107      	bne.n	80047f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e038      	b.n	800485e <HAL_RCC_OscConfig+0x4e2>
 80047ec:	40023800 	.word	0x40023800
 80047f0:	40007000 	.word	0x40007000
 80047f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004868 <HAL_RCC_OscConfig+0x4ec>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d028      	beq.n	8004858 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004810:	429a      	cmp	r2, r3
 8004812:	d121      	bne.n	8004858 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800481e:	429a      	cmp	r2, r3
 8004820:	d11a      	bne.n	8004858 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004828:	4013      	ands	r3, r2
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800482e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004830:	4293      	cmp	r3, r2
 8004832:	d111      	bne.n	8004858 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800483e:	085b      	lsrs	r3, r3, #1
 8004840:	3b01      	subs	r3, #1
 8004842:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004844:	429a      	cmp	r2, r3
 8004846:	d107      	bne.n	8004858 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004852:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004854:	429a      	cmp	r2, r3
 8004856:	d001      	beq.n	800485c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e000      	b.n	800485e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3718      	adds	r7, #24
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	40023800 	.word	0x40023800

0800486c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d101      	bne.n	8004880 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e0cc      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004880:	4b68      	ldr	r3, [pc, #416]	@ (8004a24 <HAL_RCC_ClockConfig+0x1b8>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0307 	and.w	r3, r3, #7
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	429a      	cmp	r2, r3
 800488c:	d90c      	bls.n	80048a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800488e:	4b65      	ldr	r3, [pc, #404]	@ (8004a24 <HAL_RCC_ClockConfig+0x1b8>)
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	b2d2      	uxtb	r2, r2
 8004894:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004896:	4b63      	ldr	r3, [pc, #396]	@ (8004a24 <HAL_RCC_ClockConfig+0x1b8>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0307 	and.w	r3, r3, #7
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d001      	beq.n	80048a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e0b8      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d020      	beq.n	80048f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d005      	beq.n	80048cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048c0:	4b59      	ldr	r3, [pc, #356]	@ (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	4a58      	ldr	r2, [pc, #352]	@ (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 80048c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80048ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0308 	and.w	r3, r3, #8
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d005      	beq.n	80048e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048d8:	4b53      	ldr	r3, [pc, #332]	@ (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	4a52      	ldr	r2, [pc, #328]	@ (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 80048de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80048e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048e4:	4b50      	ldr	r3, [pc, #320]	@ (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	494d      	ldr	r1, [pc, #308]	@ (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d044      	beq.n	800498c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d107      	bne.n	800491a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800490a:	4b47      	ldr	r3, [pc, #284]	@ (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d119      	bne.n	800494a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e07f      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	2b02      	cmp	r3, #2
 8004920:	d003      	beq.n	800492a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004926:	2b03      	cmp	r3, #3
 8004928:	d107      	bne.n	800493a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800492a:	4b3f      	ldr	r3, [pc, #252]	@ (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d109      	bne.n	800494a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e06f      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800493a:	4b3b      	ldr	r3, [pc, #236]	@ (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e067      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800494a:	4b37      	ldr	r3, [pc, #220]	@ (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f023 0203 	bic.w	r2, r3, #3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	4934      	ldr	r1, [pc, #208]	@ (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 8004958:	4313      	orrs	r3, r2
 800495a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800495c:	f7fc facc 	bl	8000ef8 <HAL_GetTick>
 8004960:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004962:	e00a      	b.n	800497a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004964:	f7fc fac8 	bl	8000ef8 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004972:	4293      	cmp	r3, r2
 8004974:	d901      	bls.n	800497a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e04f      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800497a:	4b2b      	ldr	r3, [pc, #172]	@ (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f003 020c 	and.w	r2, r3, #12
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	429a      	cmp	r2, r3
 800498a:	d1eb      	bne.n	8004964 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800498c:	4b25      	ldr	r3, [pc, #148]	@ (8004a24 <HAL_RCC_ClockConfig+0x1b8>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0307 	and.w	r3, r3, #7
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	429a      	cmp	r2, r3
 8004998:	d20c      	bcs.n	80049b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800499a:	4b22      	ldr	r3, [pc, #136]	@ (8004a24 <HAL_RCC_ClockConfig+0x1b8>)
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	b2d2      	uxtb	r2, r2
 80049a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049a2:	4b20      	ldr	r3, [pc, #128]	@ (8004a24 <HAL_RCC_ClockConfig+0x1b8>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d001      	beq.n	80049b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e032      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d008      	beq.n	80049d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049c0:	4b19      	ldr	r3, [pc, #100]	@ (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	4916      	ldr	r1, [pc, #88]	@ (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0308 	and.w	r3, r3, #8
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d009      	beq.n	80049f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049de:	4b12      	ldr	r3, [pc, #72]	@ (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	490e      	ldr	r1, [pc, #56]	@ (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049f2:	f000 f821 	bl	8004a38 <HAL_RCC_GetSysClockFreq>
 80049f6:	4602      	mov	r2, r0
 80049f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	091b      	lsrs	r3, r3, #4
 80049fe:	f003 030f 	and.w	r3, r3, #15
 8004a02:	490a      	ldr	r1, [pc, #40]	@ (8004a2c <HAL_RCC_ClockConfig+0x1c0>)
 8004a04:	5ccb      	ldrb	r3, [r1, r3]
 8004a06:	fa22 f303 	lsr.w	r3, r2, r3
 8004a0a:	4a09      	ldr	r2, [pc, #36]	@ (8004a30 <HAL_RCC_ClockConfig+0x1c4>)
 8004a0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004a0e:	4b09      	ldr	r3, [pc, #36]	@ (8004a34 <HAL_RCC_ClockConfig+0x1c8>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fc fa2c 	bl	8000e70 <HAL_InitTick>

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	40023c00 	.word	0x40023c00
 8004a28:	40023800 	.word	0x40023800
 8004a2c:	08009288 	.word	0x08009288
 8004a30:	20000000 	.word	0x20000000
 8004a34:	20000004 	.word	0x20000004

08004a38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a3c:	b094      	sub	sp, #80	@ 0x50
 8004a3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004a44:	2300      	movs	r3, #0
 8004a46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a50:	4b79      	ldr	r3, [pc, #484]	@ (8004c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f003 030c 	and.w	r3, r3, #12
 8004a58:	2b08      	cmp	r3, #8
 8004a5a:	d00d      	beq.n	8004a78 <HAL_RCC_GetSysClockFreq+0x40>
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	f200 80e1 	bhi.w	8004c24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d002      	beq.n	8004a6c <HAL_RCC_GetSysClockFreq+0x34>
 8004a66:	2b04      	cmp	r3, #4
 8004a68:	d003      	beq.n	8004a72 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a6a:	e0db      	b.n	8004c24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a6c:	4b73      	ldr	r3, [pc, #460]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x204>)
 8004a6e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a70:	e0db      	b.n	8004c2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a72:	4b73      	ldr	r3, [pc, #460]	@ (8004c40 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a74:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a76:	e0d8      	b.n	8004c2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a78:	4b6f      	ldr	r3, [pc, #444]	@ (8004c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a80:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a82:	4b6d      	ldr	r3, [pc, #436]	@ (8004c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d063      	beq.n	8004b56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a8e:	4b6a      	ldr	r3, [pc, #424]	@ (8004c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	099b      	lsrs	r3, r3, #6
 8004a94:	2200      	movs	r2, #0
 8004a96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a98:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aa0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004aa6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004aaa:	4622      	mov	r2, r4
 8004aac:	462b      	mov	r3, r5
 8004aae:	f04f 0000 	mov.w	r0, #0
 8004ab2:	f04f 0100 	mov.w	r1, #0
 8004ab6:	0159      	lsls	r1, r3, #5
 8004ab8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004abc:	0150      	lsls	r0, r2, #5
 8004abe:	4602      	mov	r2, r0
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	4621      	mov	r1, r4
 8004ac4:	1a51      	subs	r1, r2, r1
 8004ac6:	6139      	str	r1, [r7, #16]
 8004ac8:	4629      	mov	r1, r5
 8004aca:	eb63 0301 	sbc.w	r3, r3, r1
 8004ace:	617b      	str	r3, [r7, #20]
 8004ad0:	f04f 0200 	mov.w	r2, #0
 8004ad4:	f04f 0300 	mov.w	r3, #0
 8004ad8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004adc:	4659      	mov	r1, fp
 8004ade:	018b      	lsls	r3, r1, #6
 8004ae0:	4651      	mov	r1, sl
 8004ae2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ae6:	4651      	mov	r1, sl
 8004ae8:	018a      	lsls	r2, r1, #6
 8004aea:	4651      	mov	r1, sl
 8004aec:	ebb2 0801 	subs.w	r8, r2, r1
 8004af0:	4659      	mov	r1, fp
 8004af2:	eb63 0901 	sbc.w	r9, r3, r1
 8004af6:	f04f 0200 	mov.w	r2, #0
 8004afa:	f04f 0300 	mov.w	r3, #0
 8004afe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b0a:	4690      	mov	r8, r2
 8004b0c:	4699      	mov	r9, r3
 8004b0e:	4623      	mov	r3, r4
 8004b10:	eb18 0303 	adds.w	r3, r8, r3
 8004b14:	60bb      	str	r3, [r7, #8]
 8004b16:	462b      	mov	r3, r5
 8004b18:	eb49 0303 	adc.w	r3, r9, r3
 8004b1c:	60fb      	str	r3, [r7, #12]
 8004b1e:	f04f 0200 	mov.w	r2, #0
 8004b22:	f04f 0300 	mov.w	r3, #0
 8004b26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b2a:	4629      	mov	r1, r5
 8004b2c:	024b      	lsls	r3, r1, #9
 8004b2e:	4621      	mov	r1, r4
 8004b30:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b34:	4621      	mov	r1, r4
 8004b36:	024a      	lsls	r2, r1, #9
 8004b38:	4610      	mov	r0, r2
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b3e:	2200      	movs	r2, #0
 8004b40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b48:	f7fb fb3e 	bl	80001c8 <__aeabi_uldivmod>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	460b      	mov	r3, r1
 8004b50:	4613      	mov	r3, r2
 8004b52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b54:	e058      	b.n	8004c08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b56:	4b38      	ldr	r3, [pc, #224]	@ (8004c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	099b      	lsrs	r3, r3, #6
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	4618      	mov	r0, r3
 8004b60:	4611      	mov	r1, r2
 8004b62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b66:	623b      	str	r3, [r7, #32]
 8004b68:	2300      	movs	r3, #0
 8004b6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b70:	4642      	mov	r2, r8
 8004b72:	464b      	mov	r3, r9
 8004b74:	f04f 0000 	mov.w	r0, #0
 8004b78:	f04f 0100 	mov.w	r1, #0
 8004b7c:	0159      	lsls	r1, r3, #5
 8004b7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b82:	0150      	lsls	r0, r2, #5
 8004b84:	4602      	mov	r2, r0
 8004b86:	460b      	mov	r3, r1
 8004b88:	4641      	mov	r1, r8
 8004b8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b8e:	4649      	mov	r1, r9
 8004b90:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b94:	f04f 0200 	mov.w	r2, #0
 8004b98:	f04f 0300 	mov.w	r3, #0
 8004b9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ba0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ba4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ba8:	ebb2 040a 	subs.w	r4, r2, sl
 8004bac:	eb63 050b 	sbc.w	r5, r3, fp
 8004bb0:	f04f 0200 	mov.w	r2, #0
 8004bb4:	f04f 0300 	mov.w	r3, #0
 8004bb8:	00eb      	lsls	r3, r5, #3
 8004bba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bbe:	00e2      	lsls	r2, r4, #3
 8004bc0:	4614      	mov	r4, r2
 8004bc2:	461d      	mov	r5, r3
 8004bc4:	4643      	mov	r3, r8
 8004bc6:	18e3      	adds	r3, r4, r3
 8004bc8:	603b      	str	r3, [r7, #0]
 8004bca:	464b      	mov	r3, r9
 8004bcc:	eb45 0303 	adc.w	r3, r5, r3
 8004bd0:	607b      	str	r3, [r7, #4]
 8004bd2:	f04f 0200 	mov.w	r2, #0
 8004bd6:	f04f 0300 	mov.w	r3, #0
 8004bda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bde:	4629      	mov	r1, r5
 8004be0:	028b      	lsls	r3, r1, #10
 8004be2:	4621      	mov	r1, r4
 8004be4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004be8:	4621      	mov	r1, r4
 8004bea:	028a      	lsls	r2, r1, #10
 8004bec:	4610      	mov	r0, r2
 8004bee:	4619      	mov	r1, r3
 8004bf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	61bb      	str	r3, [r7, #24]
 8004bf6:	61fa      	str	r2, [r7, #28]
 8004bf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bfc:	f7fb fae4 	bl	80001c8 <__aeabi_uldivmod>
 8004c00:	4602      	mov	r2, r0
 8004c02:	460b      	mov	r3, r1
 8004c04:	4613      	mov	r3, r2
 8004c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004c08:	4b0b      	ldr	r3, [pc, #44]	@ (8004c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	0c1b      	lsrs	r3, r3, #16
 8004c0e:	f003 0303 	and.w	r3, r3, #3
 8004c12:	3301      	adds	r3, #1
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004c18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c20:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c22:	e002      	b.n	8004c2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c24:	4b05      	ldr	r3, [pc, #20]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x204>)
 8004c26:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3750      	adds	r7, #80	@ 0x50
 8004c30:	46bd      	mov	sp, r7
 8004c32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c36:	bf00      	nop
 8004c38:	40023800 	.word	0x40023800
 8004c3c:	00f42400 	.word	0x00f42400
 8004c40:	007a1200 	.word	0x007a1200

08004c44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c44:	b480      	push	{r7}
 8004c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c48:	4b03      	ldr	r3, [pc, #12]	@ (8004c58 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	20000000 	.word	0x20000000

08004c5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c60:	f7ff fff0 	bl	8004c44 <HAL_RCC_GetHCLKFreq>
 8004c64:	4602      	mov	r2, r0
 8004c66:	4b05      	ldr	r3, [pc, #20]	@ (8004c7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	0a9b      	lsrs	r3, r3, #10
 8004c6c:	f003 0307 	and.w	r3, r3, #7
 8004c70:	4903      	ldr	r1, [pc, #12]	@ (8004c80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c72:	5ccb      	ldrb	r3, [r1, r3]
 8004c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	40023800 	.word	0x40023800
 8004c80:	08009298 	.word	0x08009298

08004c84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c88:	f7ff ffdc 	bl	8004c44 <HAL_RCC_GetHCLKFreq>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	4b05      	ldr	r3, [pc, #20]	@ (8004ca4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	0b5b      	lsrs	r3, r3, #13
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	4903      	ldr	r1, [pc, #12]	@ (8004ca8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c9a:	5ccb      	ldrb	r3, [r1, r3]
 8004c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40023800 	.word	0x40023800
 8004ca8:	08009298 	.word	0x08009298

08004cac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d105      	bne.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d035      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004cd4:	4b62      	ldr	r3, [pc, #392]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cda:	f7fc f90d 	bl	8000ef8 <HAL_GetTick>
 8004cde:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ce0:	e008      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ce2:	f7fc f909 	bl	8000ef8 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e0b0      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cf4:	4b5b      	ldr	r3, [pc, #364]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1f0      	bne.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	019a      	lsls	r2, r3, #6
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	071b      	lsls	r3, r3, #28
 8004d0c:	4955      	ldr	r1, [pc, #340]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d14:	4b52      	ldr	r3, [pc, #328]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004d16:	2201      	movs	r2, #1
 8004d18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d1a:	f7fc f8ed 	bl	8000ef8 <HAL_GetTick>
 8004d1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d20:	e008      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d22:	f7fc f8e9 	bl	8000ef8 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e090      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d34:	4b4b      	ldr	r3, [pc, #300]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d0f0      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 8083 	beq.w	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d4e:	2300      	movs	r3, #0
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	4b44      	ldr	r3, [pc, #272]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d56:	4a43      	ldr	r2, [pc, #268]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d5e:	4b41      	ldr	r3, [pc, #260]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d66:	60fb      	str	r3, [r7, #12]
 8004d68:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d6a:	4b3f      	ldr	r3, [pc, #252]	@ (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a3e      	ldr	r2, [pc, #248]	@ (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d74:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d76:	f7fc f8bf 	bl	8000ef8 <HAL_GetTick>
 8004d7a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004d7c:	e008      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d7e:	f7fc f8bb 	bl	8000ef8 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e062      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004d90:	4b35      	ldr	r3, [pc, #212]	@ (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d0f0      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d9c:	4b31      	ldr	r3, [pc, #196]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004da0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004da4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d02f      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d028      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004dba:	4b2a      	ldr	r3, [pc, #168]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dc2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dc4:	4b29      	ldr	r3, [pc, #164]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004dca:	4b28      	ldr	r3, [pc, #160]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004dd0:	4a24      	ldr	r2, [pc, #144]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004dd6:	4b23      	ldr	r3, [pc, #140]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d114      	bne.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004de2:	f7fc f889 	bl	8000ef8 <HAL_GetTick>
 8004de6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de8:	e00a      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dea:	f7fc f885 	bl	8000ef8 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d901      	bls.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e02a      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e00:	4b18      	ldr	r3, [pc, #96]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d0ee      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e18:	d10d      	bne.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004e1a:	4b12      	ldr	r3, [pc, #72]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004e2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e2e:	490d      	ldr	r1, [pc, #52]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	608b      	str	r3, [r1, #8]
 8004e34:	e005      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004e36:	4b0b      	ldr	r3, [pc, #44]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e3c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004e40:	6093      	str	r3, [r2, #8]
 8004e42:	4b08      	ldr	r3, [pc, #32]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e44:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e4e:	4905      	ldr	r1, [pc, #20]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3718      	adds	r7, #24
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	42470068 	.word	0x42470068
 8004e64:	40023800 	.word	0x40023800
 8004e68:	40007000 	.word	0x40007000
 8004e6c:	42470e40 	.word	0x42470e40

08004e70 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b087      	sub	sp, #28
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004e84:	2300      	movs	r3, #0
 8004e86:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d13f      	bne.n	8004f0e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004e8e:	4b24      	ldr	r3, [pc, #144]	@ (8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e96:	60fb      	str	r3, [r7, #12]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d006      	beq.n	8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ea4:	d12f      	bne.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004ea6:	4b1f      	ldr	r3, [pc, #124]	@ (8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004ea8:	617b      	str	r3, [r7, #20]
          break;
 8004eaa:	e02f      	b.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004eac:	4b1c      	ldr	r3, [pc, #112]	@ (8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004eb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004eb8:	d108      	bne.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004eba:	4b19      	ldr	r3, [pc, #100]	@ (8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ec2:	4a19      	ldr	r2, [pc, #100]	@ (8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec8:	613b      	str	r3, [r7, #16]
 8004eca:	e007      	b.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004ecc:	4b14      	ldr	r3, [pc, #80]	@ (8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ed4:	4a15      	ldr	r2, [pc, #84]	@ (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eda:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004edc:	4b10      	ldr	r3, [pc, #64]	@ (8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ee2:	099b      	lsrs	r3, r3, #6
 8004ee4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	fb02 f303 	mul.w	r3, r2, r3
 8004eee:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ef6:	0f1b      	lsrs	r3, r3, #28
 8004ef8:	f003 0307 	and.w	r3, r3, #7
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f02:	617b      	str	r3, [r7, #20]
          break;
 8004f04:	e002      	b.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004f06:	2300      	movs	r3, #0
 8004f08:	617b      	str	r3, [r7, #20]
          break;
 8004f0a:	bf00      	nop
        }
      }
      break;
 8004f0c:	e000      	b.n	8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004f0e:	bf00      	nop
    }
  }
  return frequency;
 8004f10:	697b      	ldr	r3, [r7, #20]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	371c      	adds	r7, #28
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	40023800 	.word	0x40023800
 8004f24:	00bb8000 	.word	0x00bb8000
 8004f28:	007a1200 	.word	0x007a1200
 8004f2c:	00f42400 	.word	0x00f42400

08004f30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e07b      	b.n	800503a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d108      	bne.n	8004f5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f52:	d009      	beq.n	8004f68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	61da      	str	r2, [r3, #28]
 8004f5a:	e005      	b.n	8004f68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d106      	bne.n	8004f88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7fb fdc4 	bl	8000b10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a1b      	ldr	r3, [r3, #32]
 8004fe8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fec:	ea42 0103 	orr.w	r1, r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	0c1b      	lsrs	r3, r3, #16
 8005006:	f003 0104 	and.w	r1, r3, #4
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500e:	f003 0210 	and.w	r2, r3, #16
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	430a      	orrs	r2, r1
 8005018:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	69da      	ldr	r2, [r3, #28]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005028:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3708      	adds	r7, #8
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b082      	sub	sp, #8
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e042      	b.n	80050da <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d106      	bne.n	800506e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f7fb fe6d 	bl	8000d48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2224      	movs	r2, #36	@ 0x24
 8005072:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68da      	ldr	r2, [r3, #12]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005084:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f82c 	bl	80050e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	691a      	ldr	r2, [r3, #16]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800509a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	695a      	ldr	r2, [r3, #20]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050aa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68da      	ldr	r2, [r3, #12]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050ba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2220      	movs	r2, #32
 80050c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2220      	movs	r2, #32
 80050ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3708      	adds	r7, #8
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
	...

080050e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050e8:	b0c0      	sub	sp, #256	@ 0x100
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80050fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005100:	68d9      	ldr	r1, [r3, #12]
 8005102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	ea40 0301 	orr.w	r3, r0, r1
 800510c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800510e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005112:	689a      	ldr	r2, [r3, #8]
 8005114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	431a      	orrs	r2, r3
 800511c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	431a      	orrs	r2, r3
 8005124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	4313      	orrs	r3, r2
 800512c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800513c:	f021 010c 	bic.w	r1, r1, #12
 8005140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800514a:	430b      	orrs	r3, r1
 800514c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800514e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800515a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800515e:	6999      	ldr	r1, [r3, #24]
 8005160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	ea40 0301 	orr.w	r3, r0, r1
 800516a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800516c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	4b8f      	ldr	r3, [pc, #572]	@ (80053b0 <UART_SetConfig+0x2cc>)
 8005174:	429a      	cmp	r2, r3
 8005176:	d005      	beq.n	8005184 <UART_SetConfig+0xa0>
 8005178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	4b8d      	ldr	r3, [pc, #564]	@ (80053b4 <UART_SetConfig+0x2d0>)
 8005180:	429a      	cmp	r2, r3
 8005182:	d104      	bne.n	800518e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005184:	f7ff fd7e 	bl	8004c84 <HAL_RCC_GetPCLK2Freq>
 8005188:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800518c:	e003      	b.n	8005196 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800518e:	f7ff fd65 	bl	8004c5c <HAL_RCC_GetPCLK1Freq>
 8005192:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051a0:	f040 810c 	bne.w	80053bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051a8:	2200      	movs	r2, #0
 80051aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80051ae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80051b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80051b6:	4622      	mov	r2, r4
 80051b8:	462b      	mov	r3, r5
 80051ba:	1891      	adds	r1, r2, r2
 80051bc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80051be:	415b      	adcs	r3, r3
 80051c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80051c6:	4621      	mov	r1, r4
 80051c8:	eb12 0801 	adds.w	r8, r2, r1
 80051cc:	4629      	mov	r1, r5
 80051ce:	eb43 0901 	adc.w	r9, r3, r1
 80051d2:	f04f 0200 	mov.w	r2, #0
 80051d6:	f04f 0300 	mov.w	r3, #0
 80051da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051e6:	4690      	mov	r8, r2
 80051e8:	4699      	mov	r9, r3
 80051ea:	4623      	mov	r3, r4
 80051ec:	eb18 0303 	adds.w	r3, r8, r3
 80051f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80051f4:	462b      	mov	r3, r5
 80051f6:	eb49 0303 	adc.w	r3, r9, r3
 80051fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80051fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800520a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800520e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005212:	460b      	mov	r3, r1
 8005214:	18db      	adds	r3, r3, r3
 8005216:	653b      	str	r3, [r7, #80]	@ 0x50
 8005218:	4613      	mov	r3, r2
 800521a:	eb42 0303 	adc.w	r3, r2, r3
 800521e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005220:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005224:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005228:	f7fa ffce 	bl	80001c8 <__aeabi_uldivmod>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	4b61      	ldr	r3, [pc, #388]	@ (80053b8 <UART_SetConfig+0x2d4>)
 8005232:	fba3 2302 	umull	r2, r3, r3, r2
 8005236:	095b      	lsrs	r3, r3, #5
 8005238:	011c      	lsls	r4, r3, #4
 800523a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800523e:	2200      	movs	r2, #0
 8005240:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005244:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005248:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800524c:	4642      	mov	r2, r8
 800524e:	464b      	mov	r3, r9
 8005250:	1891      	adds	r1, r2, r2
 8005252:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005254:	415b      	adcs	r3, r3
 8005256:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005258:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800525c:	4641      	mov	r1, r8
 800525e:	eb12 0a01 	adds.w	sl, r2, r1
 8005262:	4649      	mov	r1, r9
 8005264:	eb43 0b01 	adc.w	fp, r3, r1
 8005268:	f04f 0200 	mov.w	r2, #0
 800526c:	f04f 0300 	mov.w	r3, #0
 8005270:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005274:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005278:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800527c:	4692      	mov	sl, r2
 800527e:	469b      	mov	fp, r3
 8005280:	4643      	mov	r3, r8
 8005282:	eb1a 0303 	adds.w	r3, sl, r3
 8005286:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800528a:	464b      	mov	r3, r9
 800528c:	eb4b 0303 	adc.w	r3, fp, r3
 8005290:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80052a0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80052a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80052a8:	460b      	mov	r3, r1
 80052aa:	18db      	adds	r3, r3, r3
 80052ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80052ae:	4613      	mov	r3, r2
 80052b0:	eb42 0303 	adc.w	r3, r2, r3
 80052b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80052b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80052ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80052be:	f7fa ff83 	bl	80001c8 <__aeabi_uldivmod>
 80052c2:	4602      	mov	r2, r0
 80052c4:	460b      	mov	r3, r1
 80052c6:	4611      	mov	r1, r2
 80052c8:	4b3b      	ldr	r3, [pc, #236]	@ (80053b8 <UART_SetConfig+0x2d4>)
 80052ca:	fba3 2301 	umull	r2, r3, r3, r1
 80052ce:	095b      	lsrs	r3, r3, #5
 80052d0:	2264      	movs	r2, #100	@ 0x64
 80052d2:	fb02 f303 	mul.w	r3, r2, r3
 80052d6:	1acb      	subs	r3, r1, r3
 80052d8:	00db      	lsls	r3, r3, #3
 80052da:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80052de:	4b36      	ldr	r3, [pc, #216]	@ (80053b8 <UART_SetConfig+0x2d4>)
 80052e0:	fba3 2302 	umull	r2, r3, r3, r2
 80052e4:	095b      	lsrs	r3, r3, #5
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80052ec:	441c      	add	r4, r3
 80052ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052f2:	2200      	movs	r2, #0
 80052f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80052f8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80052fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005300:	4642      	mov	r2, r8
 8005302:	464b      	mov	r3, r9
 8005304:	1891      	adds	r1, r2, r2
 8005306:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005308:	415b      	adcs	r3, r3
 800530a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800530c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005310:	4641      	mov	r1, r8
 8005312:	1851      	adds	r1, r2, r1
 8005314:	6339      	str	r1, [r7, #48]	@ 0x30
 8005316:	4649      	mov	r1, r9
 8005318:	414b      	adcs	r3, r1
 800531a:	637b      	str	r3, [r7, #52]	@ 0x34
 800531c:	f04f 0200 	mov.w	r2, #0
 8005320:	f04f 0300 	mov.w	r3, #0
 8005324:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005328:	4659      	mov	r1, fp
 800532a:	00cb      	lsls	r3, r1, #3
 800532c:	4651      	mov	r1, sl
 800532e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005332:	4651      	mov	r1, sl
 8005334:	00ca      	lsls	r2, r1, #3
 8005336:	4610      	mov	r0, r2
 8005338:	4619      	mov	r1, r3
 800533a:	4603      	mov	r3, r0
 800533c:	4642      	mov	r2, r8
 800533e:	189b      	adds	r3, r3, r2
 8005340:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005344:	464b      	mov	r3, r9
 8005346:	460a      	mov	r2, r1
 8005348:	eb42 0303 	adc.w	r3, r2, r3
 800534c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800535c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005360:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005364:	460b      	mov	r3, r1
 8005366:	18db      	adds	r3, r3, r3
 8005368:	62bb      	str	r3, [r7, #40]	@ 0x28
 800536a:	4613      	mov	r3, r2
 800536c:	eb42 0303 	adc.w	r3, r2, r3
 8005370:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005372:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005376:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800537a:	f7fa ff25 	bl	80001c8 <__aeabi_uldivmod>
 800537e:	4602      	mov	r2, r0
 8005380:	460b      	mov	r3, r1
 8005382:	4b0d      	ldr	r3, [pc, #52]	@ (80053b8 <UART_SetConfig+0x2d4>)
 8005384:	fba3 1302 	umull	r1, r3, r3, r2
 8005388:	095b      	lsrs	r3, r3, #5
 800538a:	2164      	movs	r1, #100	@ 0x64
 800538c:	fb01 f303 	mul.w	r3, r1, r3
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	00db      	lsls	r3, r3, #3
 8005394:	3332      	adds	r3, #50	@ 0x32
 8005396:	4a08      	ldr	r2, [pc, #32]	@ (80053b8 <UART_SetConfig+0x2d4>)
 8005398:	fba2 2303 	umull	r2, r3, r2, r3
 800539c:	095b      	lsrs	r3, r3, #5
 800539e:	f003 0207 	and.w	r2, r3, #7
 80053a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4422      	add	r2, r4
 80053aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053ac:	e106      	b.n	80055bc <UART_SetConfig+0x4d8>
 80053ae:	bf00      	nop
 80053b0:	40011000 	.word	0x40011000
 80053b4:	40011400 	.word	0x40011400
 80053b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053c0:	2200      	movs	r2, #0
 80053c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80053c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80053ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80053ce:	4642      	mov	r2, r8
 80053d0:	464b      	mov	r3, r9
 80053d2:	1891      	adds	r1, r2, r2
 80053d4:	6239      	str	r1, [r7, #32]
 80053d6:	415b      	adcs	r3, r3
 80053d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80053da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053de:	4641      	mov	r1, r8
 80053e0:	1854      	adds	r4, r2, r1
 80053e2:	4649      	mov	r1, r9
 80053e4:	eb43 0501 	adc.w	r5, r3, r1
 80053e8:	f04f 0200 	mov.w	r2, #0
 80053ec:	f04f 0300 	mov.w	r3, #0
 80053f0:	00eb      	lsls	r3, r5, #3
 80053f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053f6:	00e2      	lsls	r2, r4, #3
 80053f8:	4614      	mov	r4, r2
 80053fa:	461d      	mov	r5, r3
 80053fc:	4643      	mov	r3, r8
 80053fe:	18e3      	adds	r3, r4, r3
 8005400:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005404:	464b      	mov	r3, r9
 8005406:	eb45 0303 	adc.w	r3, r5, r3
 800540a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800540e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800541a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800541e:	f04f 0200 	mov.w	r2, #0
 8005422:	f04f 0300 	mov.w	r3, #0
 8005426:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800542a:	4629      	mov	r1, r5
 800542c:	008b      	lsls	r3, r1, #2
 800542e:	4621      	mov	r1, r4
 8005430:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005434:	4621      	mov	r1, r4
 8005436:	008a      	lsls	r2, r1, #2
 8005438:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800543c:	f7fa fec4 	bl	80001c8 <__aeabi_uldivmod>
 8005440:	4602      	mov	r2, r0
 8005442:	460b      	mov	r3, r1
 8005444:	4b60      	ldr	r3, [pc, #384]	@ (80055c8 <UART_SetConfig+0x4e4>)
 8005446:	fba3 2302 	umull	r2, r3, r3, r2
 800544a:	095b      	lsrs	r3, r3, #5
 800544c:	011c      	lsls	r4, r3, #4
 800544e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005452:	2200      	movs	r2, #0
 8005454:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005458:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800545c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005460:	4642      	mov	r2, r8
 8005462:	464b      	mov	r3, r9
 8005464:	1891      	adds	r1, r2, r2
 8005466:	61b9      	str	r1, [r7, #24]
 8005468:	415b      	adcs	r3, r3
 800546a:	61fb      	str	r3, [r7, #28]
 800546c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005470:	4641      	mov	r1, r8
 8005472:	1851      	adds	r1, r2, r1
 8005474:	6139      	str	r1, [r7, #16]
 8005476:	4649      	mov	r1, r9
 8005478:	414b      	adcs	r3, r1
 800547a:	617b      	str	r3, [r7, #20]
 800547c:	f04f 0200 	mov.w	r2, #0
 8005480:	f04f 0300 	mov.w	r3, #0
 8005484:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005488:	4659      	mov	r1, fp
 800548a:	00cb      	lsls	r3, r1, #3
 800548c:	4651      	mov	r1, sl
 800548e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005492:	4651      	mov	r1, sl
 8005494:	00ca      	lsls	r2, r1, #3
 8005496:	4610      	mov	r0, r2
 8005498:	4619      	mov	r1, r3
 800549a:	4603      	mov	r3, r0
 800549c:	4642      	mov	r2, r8
 800549e:	189b      	adds	r3, r3, r2
 80054a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80054a4:	464b      	mov	r3, r9
 80054a6:	460a      	mov	r2, r1
 80054a8:	eb42 0303 	adc.w	r3, r2, r3
 80054ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80054b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80054ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80054bc:	f04f 0200 	mov.w	r2, #0
 80054c0:	f04f 0300 	mov.w	r3, #0
 80054c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80054c8:	4649      	mov	r1, r9
 80054ca:	008b      	lsls	r3, r1, #2
 80054cc:	4641      	mov	r1, r8
 80054ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054d2:	4641      	mov	r1, r8
 80054d4:	008a      	lsls	r2, r1, #2
 80054d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80054da:	f7fa fe75 	bl	80001c8 <__aeabi_uldivmod>
 80054de:	4602      	mov	r2, r0
 80054e0:	460b      	mov	r3, r1
 80054e2:	4611      	mov	r1, r2
 80054e4:	4b38      	ldr	r3, [pc, #224]	@ (80055c8 <UART_SetConfig+0x4e4>)
 80054e6:	fba3 2301 	umull	r2, r3, r3, r1
 80054ea:	095b      	lsrs	r3, r3, #5
 80054ec:	2264      	movs	r2, #100	@ 0x64
 80054ee:	fb02 f303 	mul.w	r3, r2, r3
 80054f2:	1acb      	subs	r3, r1, r3
 80054f4:	011b      	lsls	r3, r3, #4
 80054f6:	3332      	adds	r3, #50	@ 0x32
 80054f8:	4a33      	ldr	r2, [pc, #204]	@ (80055c8 <UART_SetConfig+0x4e4>)
 80054fa:	fba2 2303 	umull	r2, r3, r2, r3
 80054fe:	095b      	lsrs	r3, r3, #5
 8005500:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005504:	441c      	add	r4, r3
 8005506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800550a:	2200      	movs	r2, #0
 800550c:	673b      	str	r3, [r7, #112]	@ 0x70
 800550e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005510:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005514:	4642      	mov	r2, r8
 8005516:	464b      	mov	r3, r9
 8005518:	1891      	adds	r1, r2, r2
 800551a:	60b9      	str	r1, [r7, #8]
 800551c:	415b      	adcs	r3, r3
 800551e:	60fb      	str	r3, [r7, #12]
 8005520:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005524:	4641      	mov	r1, r8
 8005526:	1851      	adds	r1, r2, r1
 8005528:	6039      	str	r1, [r7, #0]
 800552a:	4649      	mov	r1, r9
 800552c:	414b      	adcs	r3, r1
 800552e:	607b      	str	r3, [r7, #4]
 8005530:	f04f 0200 	mov.w	r2, #0
 8005534:	f04f 0300 	mov.w	r3, #0
 8005538:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800553c:	4659      	mov	r1, fp
 800553e:	00cb      	lsls	r3, r1, #3
 8005540:	4651      	mov	r1, sl
 8005542:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005546:	4651      	mov	r1, sl
 8005548:	00ca      	lsls	r2, r1, #3
 800554a:	4610      	mov	r0, r2
 800554c:	4619      	mov	r1, r3
 800554e:	4603      	mov	r3, r0
 8005550:	4642      	mov	r2, r8
 8005552:	189b      	adds	r3, r3, r2
 8005554:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005556:	464b      	mov	r3, r9
 8005558:	460a      	mov	r2, r1
 800555a:	eb42 0303 	adc.w	r3, r2, r3
 800555e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	663b      	str	r3, [r7, #96]	@ 0x60
 800556a:	667a      	str	r2, [r7, #100]	@ 0x64
 800556c:	f04f 0200 	mov.w	r2, #0
 8005570:	f04f 0300 	mov.w	r3, #0
 8005574:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005578:	4649      	mov	r1, r9
 800557a:	008b      	lsls	r3, r1, #2
 800557c:	4641      	mov	r1, r8
 800557e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005582:	4641      	mov	r1, r8
 8005584:	008a      	lsls	r2, r1, #2
 8005586:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800558a:	f7fa fe1d 	bl	80001c8 <__aeabi_uldivmod>
 800558e:	4602      	mov	r2, r0
 8005590:	460b      	mov	r3, r1
 8005592:	4b0d      	ldr	r3, [pc, #52]	@ (80055c8 <UART_SetConfig+0x4e4>)
 8005594:	fba3 1302 	umull	r1, r3, r3, r2
 8005598:	095b      	lsrs	r3, r3, #5
 800559a:	2164      	movs	r1, #100	@ 0x64
 800559c:	fb01 f303 	mul.w	r3, r1, r3
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	011b      	lsls	r3, r3, #4
 80055a4:	3332      	adds	r3, #50	@ 0x32
 80055a6:	4a08      	ldr	r2, [pc, #32]	@ (80055c8 <UART_SetConfig+0x4e4>)
 80055a8:	fba2 2303 	umull	r2, r3, r2, r3
 80055ac:	095b      	lsrs	r3, r3, #5
 80055ae:	f003 020f 	and.w	r2, r3, #15
 80055b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4422      	add	r2, r4
 80055ba:	609a      	str	r2, [r3, #8]
}
 80055bc:	bf00      	nop
 80055be:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80055c2:	46bd      	mov	sp, r7
 80055c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055c8:	51eb851f 	.word	0x51eb851f

080055cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055cc:	b084      	sub	sp, #16
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b084      	sub	sp, #16
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	f107 001c 	add.w	r0, r7, #28
 80055da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055de:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d123      	bne.n	800562e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80055fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800560e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005612:	2b01      	cmp	r3, #1
 8005614:	d105      	bne.n	8005622 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f9dc 	bl	80059e0 <USB_CoreReset>
 8005628:	4603      	mov	r3, r0
 800562a:	73fb      	strb	r3, [r7, #15]
 800562c:	e01b      	b.n	8005666 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f9d0 	bl	80059e0 <USB_CoreReset>
 8005640:	4603      	mov	r3, r0
 8005642:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005644:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005648:	2b00      	cmp	r3, #0
 800564a:	d106      	bne.n	800565a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005650:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	639a      	str	r2, [r3, #56]	@ 0x38
 8005658:	e005      	b.n	8005666 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800565e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005666:	7fbb      	ldrb	r3, [r7, #30]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d10b      	bne.n	8005684 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f043 0206 	orr.w	r2, r3, #6
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f043 0220 	orr.w	r2, r3, #32
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005684:	7bfb      	ldrb	r3, [r7, #15]
}
 8005686:	4618      	mov	r0, r3
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005690:	b004      	add	sp, #16
 8005692:	4770      	bx	lr

08005694 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f043 0201 	orr.w	r2, r3, #1
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b083      	sub	sp, #12
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f023 0201 	bic.w	r2, r3, #1
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	460b      	mov	r3, r1
 80056e2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80056e4:	2300      	movs	r3, #0
 80056e6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80056f4:	78fb      	ldrb	r3, [r7, #3]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d115      	bne.n	8005726 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005706:	200a      	movs	r0, #10
 8005708:	f7fb fc02 	bl	8000f10 <HAL_Delay>
      ms += 10U;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	330a      	adds	r3, #10
 8005710:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f956 	bl	80059c4 <USB_GetMode>
 8005718:	4603      	mov	r3, r0
 800571a:	2b01      	cmp	r3, #1
 800571c:	d01e      	beq.n	800575c <USB_SetCurrentMode+0x84>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2bc7      	cmp	r3, #199	@ 0xc7
 8005722:	d9f0      	bls.n	8005706 <USB_SetCurrentMode+0x2e>
 8005724:	e01a      	b.n	800575c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005726:	78fb      	ldrb	r3, [r7, #3]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d115      	bne.n	8005758 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005738:	200a      	movs	r0, #10
 800573a:	f7fb fbe9 	bl	8000f10 <HAL_Delay>
      ms += 10U;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	330a      	adds	r3, #10
 8005742:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f93d 	bl	80059c4 <USB_GetMode>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d005      	beq.n	800575c <USB_SetCurrentMode+0x84>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2bc7      	cmp	r3, #199	@ 0xc7
 8005754:	d9f0      	bls.n	8005738 <USB_SetCurrentMode+0x60>
 8005756:	e001      	b.n	800575c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e005      	b.n	8005768 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2bc8      	cmp	r3, #200	@ 0xc8
 8005760:	d101      	bne.n	8005766 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e000      	b.n	8005768 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3710      	adds	r7, #16
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800577a:	2300      	movs	r3, #0
 800577c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	3301      	adds	r3, #1
 8005782:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800578a:	d901      	bls.n	8005790 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e01b      	b.n	80057c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	2b00      	cmp	r3, #0
 8005796:	daf2      	bge.n	800577e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005798:	2300      	movs	r3, #0
 800579a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	019b      	lsls	r3, r3, #6
 80057a0:	f043 0220 	orr.w	r2, r3, #32
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	3301      	adds	r3, #1
 80057ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80057b4:	d901      	bls.n	80057ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e006      	b.n	80057c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f003 0320 	and.w	r3, r3, #32
 80057c2:	2b20      	cmp	r3, #32
 80057c4:	d0f0      	beq.n	80057a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3714      	adds	r7, #20
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057dc:	2300      	movs	r3, #0
 80057de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	3301      	adds	r3, #1
 80057e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80057ec:	d901      	bls.n	80057f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e018      	b.n	8005824 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	daf2      	bge.n	80057e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80057fa:	2300      	movs	r3, #0
 80057fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2210      	movs	r2, #16
 8005802:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	3301      	adds	r3, #1
 8005808:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005810:	d901      	bls.n	8005816 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e006      	b.n	8005824 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	f003 0310 	and.w	r3, r3, #16
 800581e:	2b10      	cmp	r3, #16
 8005820:	d0f0      	beq.n	8005804 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3714      	adds	r7, #20
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005830:	b480      	push	{r7}
 8005832:	b089      	sub	sp, #36	@ 0x24
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	4611      	mov	r1, r2
 800583c:	461a      	mov	r2, r3
 800583e:	460b      	mov	r3, r1
 8005840:	71fb      	strb	r3, [r7, #7]
 8005842:	4613      	mov	r3, r2
 8005844:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800584e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005852:	2b00      	cmp	r3, #0
 8005854:	d123      	bne.n	800589e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005856:	88bb      	ldrh	r3, [r7, #4]
 8005858:	3303      	adds	r3, #3
 800585a:	089b      	lsrs	r3, r3, #2
 800585c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800585e:	2300      	movs	r3, #0
 8005860:	61bb      	str	r3, [r7, #24]
 8005862:	e018      	b.n	8005896 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005864:	79fb      	ldrb	r3, [r7, #7]
 8005866:	031a      	lsls	r2, r3, #12
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	4413      	add	r3, r2
 800586c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005870:	461a      	mov	r2, r3
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	3301      	adds	r3, #1
 800587c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	3301      	adds	r3, #1
 8005882:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	3301      	adds	r3, #1
 8005888:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	3301      	adds	r3, #1
 800588e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	3301      	adds	r3, #1
 8005894:	61bb      	str	r3, [r7, #24]
 8005896:	69ba      	ldr	r2, [r7, #24]
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	429a      	cmp	r2, r3
 800589c:	d3e2      	bcc.n	8005864 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3724      	adds	r7, #36	@ 0x24
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b08b      	sub	sp, #44	@ 0x2c
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	4613      	mov	r3, r2
 80058b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80058c2:	88fb      	ldrh	r3, [r7, #6]
 80058c4:	089b      	lsrs	r3, r3, #2
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80058ca:	88fb      	ldrh	r3, [r7, #6]
 80058cc:	f003 0303 	and.w	r3, r3, #3
 80058d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80058d2:	2300      	movs	r3, #0
 80058d4:	623b      	str	r3, [r7, #32]
 80058d6:	e014      	b.n	8005902 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e2:	601a      	str	r2, [r3, #0]
    pDest++;
 80058e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e6:	3301      	adds	r3, #1
 80058e8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80058ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ec:	3301      	adds	r3, #1
 80058ee:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80058f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f2:	3301      	adds	r3, #1
 80058f4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80058f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f8:	3301      	adds	r3, #1
 80058fa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80058fc:	6a3b      	ldr	r3, [r7, #32]
 80058fe:	3301      	adds	r3, #1
 8005900:	623b      	str	r3, [r7, #32]
 8005902:	6a3a      	ldr	r2, [r7, #32]
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	429a      	cmp	r2, r3
 8005908:	d3e6      	bcc.n	80058d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800590a:	8bfb      	ldrh	r3, [r7, #30]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d01e      	beq.n	800594e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005910:	2300      	movs	r3, #0
 8005912:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800591a:	461a      	mov	r2, r3
 800591c:	f107 0310 	add.w	r3, r7, #16
 8005920:	6812      	ldr	r2, [r2, #0]
 8005922:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	b2db      	uxtb	r3, r3
 800592a:	00db      	lsls	r3, r3, #3
 800592c:	fa22 f303 	lsr.w	r3, r2, r3
 8005930:	b2da      	uxtb	r2, r3
 8005932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005934:	701a      	strb	r2, [r3, #0]
      i++;
 8005936:	6a3b      	ldr	r3, [r7, #32]
 8005938:	3301      	adds	r3, #1
 800593a:	623b      	str	r3, [r7, #32]
      pDest++;
 800593c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593e:	3301      	adds	r3, #1
 8005940:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005942:	8bfb      	ldrh	r3, [r7, #30]
 8005944:	3b01      	subs	r3, #1
 8005946:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005948:	8bfb      	ldrh	r3, [r7, #30]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1ea      	bne.n	8005924 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800594e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005950:	4618      	mov	r0, r3
 8005952:	372c      	adds	r7, #44	@ 0x2c
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	4013      	ands	r3, r2
 8005972:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005974:	68fb      	ldr	r3, [r7, #12]
}
 8005976:	4618      	mov	r0, r3
 8005978:	3714      	adds	r7, #20
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr

08005982 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005982:	b480      	push	{r7}
 8005984:	b085      	sub	sp, #20
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
 800598a:	460b      	mov	r3, r1
 800598c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005992:	78fb      	ldrb	r3, [r7, #3]
 8005994:	015a      	lsls	r2, r3, #5
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	4413      	add	r3, r2
 800599a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80059a2:	78fb      	ldrb	r3, [r7, #3]
 80059a4:	015a      	lsls	r2, r3, #5
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	4413      	add	r3, r2
 80059aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	4013      	ands	r3, r2
 80059b4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80059b6:	68bb      	ldr	r3, [r7, #8]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3714      	adds	r7, #20
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	f003 0301 	and.w	r3, r3, #1
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059e8:	2300      	movs	r3, #0
 80059ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	3301      	adds	r3, #1
 80059f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059f8:	d901      	bls.n	80059fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e022      	b.n	8005a44 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	daf2      	bge.n	80059ec <USB_CoreReset+0xc>

  count = 10U;
 8005a06:	230a      	movs	r3, #10
 8005a08:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8005a0a:	e002      	b.n	8005a12 <USB_CoreReset+0x32>
  {
    count--;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1f9      	bne.n	8005a0c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	f043 0201 	orr.w	r2, r3, #1
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	3301      	adds	r3, #1
 8005a28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a30:	d901      	bls.n	8005a36 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e006      	b.n	8005a44 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d0f0      	beq.n	8005a24 <USB_CoreReset+0x44>

  return HAL_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3714      	adds	r7, #20
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a50:	b084      	sub	sp, #16
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b086      	sub	sp, #24
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
 8005a5a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005a5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005a62:	2300      	movs	r3, #0
 8005a64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005a70:	461a      	mov	r2, r3
 8005a72:	2300      	movs	r3, #0
 8005a74:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a7a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a86:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a92:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d119      	bne.n	8005ada <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005aa6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d10a      	bne.n	8005ac4 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005abc:	f043 0304 	orr.w	r3, r3, #4
 8005ac0:	6013      	str	r3, [r2, #0]
 8005ac2:	e014      	b.n	8005aee <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005ad2:	f023 0304 	bic.w	r3, r3, #4
 8005ad6:	6013      	str	r3, [r2, #0]
 8005ad8:	e009      	b.n	8005aee <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005ae8:	f023 0304 	bic.w	r3, r3, #4
 8005aec:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005aee:	2110      	movs	r1, #16
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f7ff fe3d 	bl	8005770 <USB_FlushTxFifo>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d001      	beq.n	8005b00 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f7ff fe67 	bl	80057d4 <USB_FlushRxFifo>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d001      	beq.n	8005b10 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005b10:	2300      	movs	r3, #0
 8005b12:	613b      	str	r3, [r7, #16]
 8005b14:	e015      	b.n	8005b42 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	015a      	lsls	r2, r3, #5
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b22:	461a      	mov	r2, r3
 8005b24:	f04f 33ff 	mov.w	r3, #4294967295
 8005b28:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	015a      	lsls	r2, r3, #5
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	4413      	add	r3, r2
 8005b32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b36:	461a      	mov	r2, r3
 8005b38:	2300      	movs	r3, #0
 8005b3a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	613b      	str	r3, [r7, #16]
 8005b42:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005b46:	461a      	mov	r2, r3
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d3e3      	bcc.n	8005b16 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f04f 32ff 	mov.w	r2, #4294967295
 8005b5a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a18      	ldr	r2, [pc, #96]	@ (8005bc0 <USB_HostInit+0x170>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d10b      	bne.n	8005b7c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b6a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a15      	ldr	r2, [pc, #84]	@ (8005bc4 <USB_HostInit+0x174>)
 8005b70:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a14      	ldr	r2, [pc, #80]	@ (8005bc8 <USB_HostInit+0x178>)
 8005b76:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005b7a:	e009      	b.n	8005b90 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2280      	movs	r2, #128	@ 0x80
 8005b80:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a11      	ldr	r2, [pc, #68]	@ (8005bcc <USB_HostInit+0x17c>)
 8005b86:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a11      	ldr	r2, [pc, #68]	@ (8005bd0 <USB_HostInit+0x180>)
 8005b8c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b90:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d105      	bne.n	8005ba4 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	f043 0210 	orr.w	r2, r3, #16
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	699a      	ldr	r2, [r3, #24]
 8005ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8005bd4 <USB_HostInit+0x184>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3718      	adds	r7, #24
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bbc:	b004      	add	sp, #16
 8005bbe:	4770      	bx	lr
 8005bc0:	40040000 	.word	0x40040000
 8005bc4:	01000200 	.word	0x01000200
 8005bc8:	00e00300 	.word	0x00e00300
 8005bcc:	00600080 	.word	0x00600080
 8005bd0:	004000e0 	.word	0x004000e0
 8005bd4:	a3200008 	.word	0xa3200008

08005bd8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	460b      	mov	r3, r1
 8005be2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005bf6:	f023 0303 	bic.w	r3, r3, #3
 8005bfa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	78fb      	ldrb	r3, [r7, #3]
 8005c06:	f003 0303 	and.w	r3, r3, #3
 8005c0a:	68f9      	ldr	r1, [r7, #12]
 8005c0c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005c10:	4313      	orrs	r3, r2
 8005c12:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005c14:	78fb      	ldrb	r3, [r7, #3]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d107      	bne.n	8005c2a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c20:	461a      	mov	r2, r3
 8005c22:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005c26:	6053      	str	r3, [r2, #4]
 8005c28:	e00c      	b.n	8005c44 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005c2a:	78fb      	ldrb	r3, [r7, #3]
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d107      	bne.n	8005c40 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c36:	461a      	mov	r2, r3
 8005c38:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005c3c:	6053      	str	r3, [r2, #4]
 8005c3e:	e001      	b.n	8005c44 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e000      	b.n	8005c46 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3714      	adds	r7, #20
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr

08005c52 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c52:	b580      	push	{r7, lr}
 8005c54:	b084      	sub	sp, #16
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005c72:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005c7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c80:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005c82:	2064      	movs	r0, #100	@ 0x64
 8005c84:	f7fb f944 	bl	8000f10 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005c90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c94:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005c96:	200a      	movs	r0, #10
 8005c98:	f7fb f93a 	bl	8000f10 <HAL_Delay>

  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b085      	sub	sp, #20
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
 8005cae:	460b      	mov	r3, r1
 8005cb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005cca:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d109      	bne.n	8005cea <USB_DriveVbus+0x44>
 8005cd6:	78fb      	ldrb	r3, [r7, #3]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d106      	bne.n	8005cea <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005ce4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005ce8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005cf0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cf4:	d109      	bne.n	8005d0a <USB_DriveVbus+0x64>
 8005cf6:	78fb      	ldrb	r3, [r7, #3]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d106      	bne.n	8005d0a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005d04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d08:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3714      	adds	r7, #20
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005d24:	2300      	movs	r3, #0
 8005d26:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	0c5b      	lsrs	r3, r3, #17
 8005d36:	f003 0303 	and.w	r3, r3, #3
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b085      	sub	sp, #20
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	b29b      	uxth	r3, r3
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3714      	adds	r7, #20
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b088      	sub	sp, #32
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	4608      	mov	r0, r1
 8005d72:	4611      	mov	r1, r2
 8005d74:	461a      	mov	r2, r3
 8005d76:	4603      	mov	r3, r0
 8005d78:	70fb      	strb	r3, [r7, #3]
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	70bb      	strb	r3, [r7, #2]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d82:	2300      	movs	r3, #0
 8005d84:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005d8a:	78fb      	ldrb	r3, [r7, #3]
 8005d8c:	015a      	lsls	r2, r3, #5
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d96:	461a      	mov	r2, r3
 8005d98:	f04f 33ff 	mov.w	r3, #4294967295
 8005d9c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005d9e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005da2:	2b03      	cmp	r3, #3
 8005da4:	d87c      	bhi.n	8005ea0 <USB_HC_Init+0x138>
 8005da6:	a201      	add	r2, pc, #4	@ (adr r2, 8005dac <USB_HC_Init+0x44>)
 8005da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dac:	08005dbd 	.word	0x08005dbd
 8005db0:	08005e63 	.word	0x08005e63
 8005db4:	08005dbd 	.word	0x08005dbd
 8005db8:	08005e25 	.word	0x08005e25
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005dbc:	78fb      	ldrb	r3, [r7, #3]
 8005dbe:	015a      	lsls	r2, r3, #5
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dc8:	461a      	mov	r2, r3
 8005dca:	f240 439d 	movw	r3, #1181	@ 0x49d
 8005dce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005dd0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	da10      	bge.n	8005dfa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005dd8:	78fb      	ldrb	r3, [r7, #3]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	78fa      	ldrb	r2, [r7, #3]
 8005de8:	0151      	lsls	r1, r2, #5
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	440a      	add	r2, r1
 8005dee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005df2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005df6:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005df8:	e055      	b.n	8005ea6 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a6f      	ldr	r2, [pc, #444]	@ (8005fbc <USB_HC_Init+0x254>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d151      	bne.n	8005ea6 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005e02:	78fb      	ldrb	r3, [r7, #3]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	78fa      	ldrb	r2, [r7, #3]
 8005e12:	0151      	lsls	r1, r2, #5
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	440a      	add	r2, r1
 8005e18:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e1c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005e20:	60d3      	str	r3, [r2, #12]
      break;
 8005e22:	e040      	b.n	8005ea6 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e24:	78fb      	ldrb	r3, [r7, #3]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e30:	461a      	mov	r2, r3
 8005e32:	f240 639d 	movw	r3, #1693	@ 0x69d
 8005e36:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005e38:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	da34      	bge.n	8005eaa <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005e40:	78fb      	ldrb	r3, [r7, #3]
 8005e42:	015a      	lsls	r2, r3, #5
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	4413      	add	r3, r2
 8005e48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	78fa      	ldrb	r2, [r7, #3]
 8005e50:	0151      	lsls	r1, r2, #5
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	440a      	add	r2, r1
 8005e56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e5e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005e60:	e023      	b.n	8005eaa <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e62:	78fb      	ldrb	r3, [r7, #3]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e6e:	461a      	mov	r2, r3
 8005e70:	f240 2325 	movw	r3, #549	@ 0x225
 8005e74:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005e76:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	da17      	bge.n	8005eae <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005e7e:	78fb      	ldrb	r3, [r7, #3]
 8005e80:	015a      	lsls	r2, r3, #5
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	4413      	add	r3, r2
 8005e86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	78fa      	ldrb	r2, [r7, #3]
 8005e8e:	0151      	lsls	r1, r2, #5
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	440a      	add	r2, r1
 8005e94:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e98:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005e9c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005e9e:	e006      	b.n	8005eae <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	77fb      	strb	r3, [r7, #31]
      break;
 8005ea4:	e004      	b.n	8005eb0 <USB_HC_Init+0x148>
      break;
 8005ea6:	bf00      	nop
 8005ea8:	e002      	b.n	8005eb0 <USB_HC_Init+0x148>
      break;
 8005eaa:	bf00      	nop
 8005eac:	e000      	b.n	8005eb0 <USB_HC_Init+0x148>
      break;
 8005eae:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005eb0:	78fb      	ldrb	r3, [r7, #3]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005ec2:	78fb      	ldrb	r3, [r7, #3]
 8005ec4:	015a      	lsls	r2, r3, #5
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	4413      	add	r3, r2
 8005eca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	78fa      	ldrb	r2, [r7, #3]
 8005ed2:	0151      	lsls	r1, r2, #5
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	440a      	add	r2, r1
 8005ed8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005edc:	f043 0302 	orr.w	r3, r3, #2
 8005ee0:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ee8:	699a      	ldr	r2, [r3, #24]
 8005eea:	78fb      	ldrb	r3, [r7, #3]
 8005eec:	f003 030f 	and.w	r3, r3, #15
 8005ef0:	2101      	movs	r1, #1
 8005ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ef6:	6939      	ldr	r1, [r7, #16]
 8005ef8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005efc:	4313      	orrs	r3, r2
 8005efe:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005f0c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	da03      	bge.n	8005f1c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005f14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f18:	61bb      	str	r3, [r7, #24]
 8005f1a:	e001      	b.n	8005f20 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f7ff fef9 	bl	8005d18 <USB_GetHostSpeed>
 8005f26:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005f28:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d106      	bne.n	8005f3e <USB_HC_Init+0x1d6>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d003      	beq.n	8005f3e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005f36:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005f3a:	617b      	str	r3, [r7, #20]
 8005f3c:	e001      	b.n	8005f42 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f42:	787b      	ldrb	r3, [r7, #1]
 8005f44:	059b      	lsls	r3, r3, #22
 8005f46:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005f4a:	78bb      	ldrb	r3, [r7, #2]
 8005f4c:	02db      	lsls	r3, r3, #11
 8005f4e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f52:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f54:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005f58:	049b      	lsls	r3, r3, #18
 8005f5a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005f5e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8005f60:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005f62:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f66:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f70:	78fa      	ldrb	r2, [r7, #3]
 8005f72:	0151      	lsls	r1, r2, #5
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	440a      	add	r2, r1
 8005f78:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005f7c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f80:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005f82:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005f86:	2b03      	cmp	r3, #3
 8005f88:	d003      	beq.n	8005f92 <USB_HC_Init+0x22a>
 8005f8a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d10f      	bne.n	8005fb2 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005f92:	78fb      	ldrb	r3, [r7, #3]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	78fa      	ldrb	r2, [r7, #3]
 8005fa2:	0151      	lsls	r1, r2, #5
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	440a      	add	r2, r1
 8005fa8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005fb0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005fb2:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3720      	adds	r7, #32
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	40040000 	.word	0x40040000

08005fc0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b08c      	sub	sp, #48	@ 0x30
 8005fc4:	af02      	add	r7, sp, #8
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	785b      	ldrb	r3, [r3, #1]
 8005fd6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005fd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005fdc:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	4a5d      	ldr	r2, [pc, #372]	@ (8006158 <USB_HC_StartXfer+0x198>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d12f      	bne.n	8006046 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8005fe6:	79fb      	ldrb	r3, [r7, #7]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d11c      	bne.n	8006026 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	7c9b      	ldrb	r3, [r3, #18]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d003      	beq.n	8005ffc <USB_HC_StartXfer+0x3c>
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	7c9b      	ldrb	r3, [r3, #18]
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d124      	bne.n	8006046 <USB_HC_StartXfer+0x86>
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	799b      	ldrb	r3, [r3, #6]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d120      	bne.n	8006046 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	6a3b      	ldr	r3, [r7, #32]
 800600a:	4413      	add	r3, r2
 800600c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	69fa      	ldr	r2, [r7, #28]
 8006014:	0151      	lsls	r1, r2, #5
 8006016:	6a3a      	ldr	r2, [r7, #32]
 8006018:	440a      	add	r2, r1
 800601a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800601e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006022:	60d3      	str	r3, [r2, #12]
 8006024:	e00f      	b.n	8006046 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	791b      	ldrb	r3, [r3, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10b      	bne.n	8006046 <USB_HC_StartXfer+0x86>
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	795b      	ldrb	r3, [r3, #5]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d107      	bne.n	8006046 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	785b      	ldrb	r3, [r3, #1]
 800603a:	4619      	mov	r1, r3
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f000 fb6b 	bl	8006718 <USB_DoPing>
        return HAL_OK;
 8006042:	2300      	movs	r3, #0
 8006044:	e232      	b.n	80064ac <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	799b      	ldrb	r3, [r3, #6]
 800604a:	2b01      	cmp	r3, #1
 800604c:	d158      	bne.n	8006100 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800604e:	2301      	movs	r3, #1
 8006050:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	78db      	ldrb	r3, [r3, #3]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d007      	beq.n	800606a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800605a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800605c:	68ba      	ldr	r2, [r7, #8]
 800605e:	8a92      	ldrh	r2, [r2, #20]
 8006060:	fb03 f202 	mul.w	r2, r3, r2
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	61da      	str	r2, [r3, #28]
 8006068:	e07c      	b.n	8006164 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	7c9b      	ldrb	r3, [r3, #18]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d130      	bne.n	80060d4 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	2bbc      	cmp	r3, #188	@ 0xbc
 8006078:	d918      	bls.n	80060ac <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	8a9b      	ldrh	r3, [r3, #20]
 800607e:	461a      	mov	r2, r3
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	69da      	ldr	r2, [r3, #28]
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d003      	beq.n	800609c <USB_HC_StartXfer+0xdc>
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	2b02      	cmp	r3, #2
 800609a:	d103      	bne.n	80060a4 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	2202      	movs	r2, #2
 80060a0:	60da      	str	r2, [r3, #12]
 80060a2:	e05f      	b.n	8006164 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	2201      	movs	r2, #1
 80060a8:	60da      	str	r2, [r3, #12]
 80060aa:	e05b      	b.n	8006164 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	6a1a      	ldr	r2, [r3, #32]
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d007      	beq.n	80060cc <USB_HC_StartXfer+0x10c>
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d003      	beq.n	80060cc <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2204      	movs	r2, #4
 80060c8:	60da      	str	r2, [r3, #12]
 80060ca:	e04b      	b.n	8006164 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	2203      	movs	r2, #3
 80060d0:	60da      	str	r2, [r3, #12]
 80060d2:	e047      	b.n	8006164 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80060d4:	79fb      	ldrb	r3, [r7, #7]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d10d      	bne.n	80060f6 <USB_HC_StartXfer+0x136>
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	8a92      	ldrh	r2, [r2, #20]
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d907      	bls.n	80060f6 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80060e6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	8a92      	ldrh	r2, [r2, #20]
 80060ec:	fb03 f202 	mul.w	r2, r3, r2
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	61da      	str	r2, [r3, #28]
 80060f4:	e036      	b.n	8006164 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	6a1a      	ldr	r2, [r3, #32]
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	61da      	str	r2, [r3, #28]
 80060fe:	e031      	b.n	8006164 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d018      	beq.n	800613a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	6a1b      	ldr	r3, [r3, #32]
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	8a92      	ldrh	r2, [r2, #20]
 8006110:	4413      	add	r3, r2
 8006112:	3b01      	subs	r3, #1
 8006114:	68ba      	ldr	r2, [r7, #8]
 8006116:	8a92      	ldrh	r2, [r2, #20]
 8006118:	fbb3 f3f2 	udiv	r3, r3, r2
 800611c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800611e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006120:	8b7b      	ldrh	r3, [r7, #26]
 8006122:	429a      	cmp	r2, r3
 8006124:	d90b      	bls.n	800613e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8006126:	8b7b      	ldrh	r3, [r7, #26]
 8006128:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800612a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	8a92      	ldrh	r2, [r2, #20]
 8006130:	fb03 f202 	mul.w	r2, r3, r2
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	61da      	str	r2, [r3, #28]
 8006138:	e001      	b.n	800613e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800613a:	2301      	movs	r3, #1
 800613c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	78db      	ldrb	r3, [r3, #3]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00a      	beq.n	800615c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006146:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	8a92      	ldrh	r2, [r2, #20]
 800614c:	fb03 f202 	mul.w	r2, r3, r2
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	61da      	str	r2, [r3, #28]
 8006154:	e006      	b.n	8006164 <USB_HC_StartXfer+0x1a4>
 8006156:	bf00      	nop
 8006158:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	6a1a      	ldr	r2, [r3, #32]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	69db      	ldr	r3, [r3, #28]
 8006168:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800616c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800616e:	04d9      	lsls	r1, r3, #19
 8006170:	4ba3      	ldr	r3, [pc, #652]	@ (8006400 <USB_HC_StartXfer+0x440>)
 8006172:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006174:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	7d9b      	ldrb	r3, [r3, #22]
 800617a:	075b      	lsls	r3, r3, #29
 800617c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006180:	69f9      	ldr	r1, [r7, #28]
 8006182:	0148      	lsls	r0, r1, #5
 8006184:	6a39      	ldr	r1, [r7, #32]
 8006186:	4401      	add	r1, r0
 8006188:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800618c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800618e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006190:	79fb      	ldrb	r3, [r7, #7]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d009      	beq.n	80061aa <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	6999      	ldr	r1, [r3, #24]
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	015a      	lsls	r2, r3, #5
 800619e:	6a3b      	ldr	r3, [r7, #32]
 80061a0:	4413      	add	r3, r2
 80061a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061a6:	460a      	mov	r2, r1
 80061a8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80061aa:	6a3b      	ldr	r3, [r7, #32]
 80061ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	bf0c      	ite	eq
 80061ba:	2301      	moveq	r3, #1
 80061bc:	2300      	movne	r3, #0
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	015a      	lsls	r2, r3, #5
 80061c6:	6a3b      	ldr	r3, [r7, #32]
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	69fa      	ldr	r2, [r7, #28]
 80061d2:	0151      	lsls	r1, r2, #5
 80061d4:	6a3a      	ldr	r2, [r7, #32]
 80061d6:	440a      	add	r2, r1
 80061d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061dc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80061e0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	015a      	lsls	r2, r3, #5
 80061e6:	6a3b      	ldr	r3, [r7, #32]
 80061e8:	4413      	add	r3, r2
 80061ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	7e7b      	ldrb	r3, [r7, #25]
 80061f2:	075b      	lsls	r3, r3, #29
 80061f4:	69f9      	ldr	r1, [r7, #28]
 80061f6:	0148      	lsls	r0, r1, #5
 80061f8:	6a39      	ldr	r1, [r7, #32]
 80061fa:	4401      	add	r1, r0
 80061fc:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006200:	4313      	orrs	r3, r2
 8006202:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	799b      	ldrb	r3, [r3, #6]
 8006208:	2b01      	cmp	r3, #1
 800620a:	f040 80c3 	bne.w	8006394 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	7c5b      	ldrb	r3, [r3, #17]
 8006212:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006218:	4313      	orrs	r3, r2
 800621a:	69fa      	ldr	r2, [r7, #28]
 800621c:	0151      	lsls	r1, r2, #5
 800621e:	6a3a      	ldr	r2, [r7, #32]
 8006220:	440a      	add	r2, r1
 8006222:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006226:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800622a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	015a      	lsls	r2, r3, #5
 8006230:	6a3b      	ldr	r3, [r7, #32]
 8006232:	4413      	add	r3, r2
 8006234:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	69fa      	ldr	r2, [r7, #28]
 800623c:	0151      	lsls	r1, r2, #5
 800623e:	6a3a      	ldr	r2, [r7, #32]
 8006240:	440a      	add	r2, r1
 8006242:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006246:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800624a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	79db      	ldrb	r3, [r3, #7]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d123      	bne.n	800629c <USB_HC_StartXfer+0x2dc>
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	78db      	ldrb	r3, [r3, #3]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d11f      	bne.n	800629c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	015a      	lsls	r2, r3, #5
 8006260:	6a3b      	ldr	r3, [r7, #32]
 8006262:	4413      	add	r3, r2
 8006264:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	69fa      	ldr	r2, [r7, #28]
 800626c:	0151      	lsls	r1, r2, #5
 800626e:	6a3a      	ldr	r2, [r7, #32]
 8006270:	440a      	add	r2, r1
 8006272:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006276:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800627a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	015a      	lsls	r2, r3, #5
 8006280:	6a3b      	ldr	r3, [r7, #32]
 8006282:	4413      	add	r3, r2
 8006284:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	69fa      	ldr	r2, [r7, #28]
 800628c:	0151      	lsls	r1, r2, #5
 800628e:	6a3a      	ldr	r2, [r7, #32]
 8006290:	440a      	add	r2, r1
 8006292:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006296:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800629a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	7c9b      	ldrb	r3, [r3, #18]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d003      	beq.n	80062ac <USB_HC_StartXfer+0x2ec>
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	7c9b      	ldrb	r3, [r3, #18]
 80062a8:	2b03      	cmp	r3, #3
 80062aa:	d117      	bne.n	80062dc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d113      	bne.n	80062dc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	78db      	ldrb	r3, [r3, #3]
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d10f      	bne.n	80062dc <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	6a3b      	ldr	r3, [r7, #32]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	69fa      	ldr	r2, [r7, #28]
 80062cc:	0151      	lsls	r1, r2, #5
 80062ce:	6a3a      	ldr	r2, [r7, #32]
 80062d0:	440a      	add	r2, r1
 80062d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062da:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	7c9b      	ldrb	r3, [r3, #18]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d162      	bne.n	80063aa <USB_HC_StartXfer+0x3ea>
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	78db      	ldrb	r3, [r3, #3]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d15e      	bne.n	80063aa <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	3b01      	subs	r3, #1
 80062f2:	2b03      	cmp	r3, #3
 80062f4:	d858      	bhi.n	80063a8 <USB_HC_StartXfer+0x3e8>
 80062f6:	a201      	add	r2, pc, #4	@ (adr r2, 80062fc <USB_HC_StartXfer+0x33c>)
 80062f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fc:	0800630d 	.word	0x0800630d
 8006300:	0800632f 	.word	0x0800632f
 8006304:	08006351 	.word	0x08006351
 8006308:	08006373 	.word	0x08006373
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	015a      	lsls	r2, r3, #5
 8006310:	6a3b      	ldr	r3, [r7, #32]
 8006312:	4413      	add	r3, r2
 8006314:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	69fa      	ldr	r2, [r7, #28]
 800631c:	0151      	lsls	r1, r2, #5
 800631e:	6a3a      	ldr	r2, [r7, #32]
 8006320:	440a      	add	r2, r1
 8006322:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006326:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800632a:	6053      	str	r3, [r2, #4]
          break;
 800632c:	e03d      	b.n	80063aa <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	015a      	lsls	r2, r3, #5
 8006332:	6a3b      	ldr	r3, [r7, #32]
 8006334:	4413      	add	r3, r2
 8006336:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	69fa      	ldr	r2, [r7, #28]
 800633e:	0151      	lsls	r1, r2, #5
 8006340:	6a3a      	ldr	r2, [r7, #32]
 8006342:	440a      	add	r2, r1
 8006344:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006348:	f043 030e 	orr.w	r3, r3, #14
 800634c:	6053      	str	r3, [r2, #4]
          break;
 800634e:	e02c      	b.n	80063aa <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	015a      	lsls	r2, r3, #5
 8006354:	6a3b      	ldr	r3, [r7, #32]
 8006356:	4413      	add	r3, r2
 8006358:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	69fa      	ldr	r2, [r7, #28]
 8006360:	0151      	lsls	r1, r2, #5
 8006362:	6a3a      	ldr	r2, [r7, #32]
 8006364:	440a      	add	r2, r1
 8006366:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800636a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800636e:	6053      	str	r3, [r2, #4]
          break;
 8006370:	e01b      	b.n	80063aa <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	015a      	lsls	r2, r3, #5
 8006376:	6a3b      	ldr	r3, [r7, #32]
 8006378:	4413      	add	r3, r2
 800637a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	69fa      	ldr	r2, [r7, #28]
 8006382:	0151      	lsls	r1, r2, #5
 8006384:	6a3a      	ldr	r2, [r7, #32]
 8006386:	440a      	add	r2, r1
 8006388:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800638c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006390:	6053      	str	r3, [r2, #4]
          break;
 8006392:	e00a      	b.n	80063aa <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	6a3b      	ldr	r3, [r7, #32]
 800639a:	4413      	add	r3, r2
 800639c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063a0:	461a      	mov	r2, r3
 80063a2:	2300      	movs	r3, #0
 80063a4:	6053      	str	r3, [r2, #4]
 80063a6:	e000      	b.n	80063aa <USB_HC_StartXfer+0x3ea>
          break;
 80063a8:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	015a      	lsls	r2, r3, #5
 80063ae:	6a3b      	ldr	r3, [r7, #32]
 80063b0:	4413      	add	r3, r2
 80063b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80063c0:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	78db      	ldrb	r3, [r3, #3]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d004      	beq.n	80063d4 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063d0:	613b      	str	r3, [r7, #16]
 80063d2:	e003      	b.n	80063dc <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80063da:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80063e2:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	015a      	lsls	r2, r3, #5
 80063e8:	6a3b      	ldr	r3, [r7, #32]
 80063ea:	4413      	add	r3, r2
 80063ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063f0:	461a      	mov	r2, r3
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80063f6:	79fb      	ldrb	r3, [r7, #7]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d003      	beq.n	8006404 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80063fc:	2300      	movs	r3, #0
 80063fe:	e055      	b.n	80064ac <USB_HC_StartXfer+0x4ec>
 8006400:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	78db      	ldrb	r3, [r3, #3]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d14e      	bne.n	80064aa <USB_HC_StartXfer+0x4ea>
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	6a1b      	ldr	r3, [r3, #32]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d04a      	beq.n	80064aa <USB_HC_StartXfer+0x4ea>
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	79db      	ldrb	r3, [r3, #7]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d146      	bne.n	80064aa <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	7c9b      	ldrb	r3, [r3, #18]
 8006420:	2b03      	cmp	r3, #3
 8006422:	d831      	bhi.n	8006488 <USB_HC_StartXfer+0x4c8>
 8006424:	a201      	add	r2, pc, #4	@ (adr r2, 800642c <USB_HC_StartXfer+0x46c>)
 8006426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642a:	bf00      	nop
 800642c:	0800643d 	.word	0x0800643d
 8006430:	08006461 	.word	0x08006461
 8006434:	0800643d 	.word	0x0800643d
 8006438:	08006461 	.word	0x08006461
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	6a1b      	ldr	r3, [r3, #32]
 8006440:	3303      	adds	r3, #3
 8006442:	089b      	lsrs	r3, r3, #2
 8006444:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006446:	8afa      	ldrh	r2, [r7, #22]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800644c:	b29b      	uxth	r3, r3
 800644e:	429a      	cmp	r2, r3
 8006450:	d91c      	bls.n	800648c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	f043 0220 	orr.w	r2, r3, #32
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	619a      	str	r2, [r3, #24]
        }
        break;
 800645e:	e015      	b.n	800648c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	6a1b      	ldr	r3, [r3, #32]
 8006464:	3303      	adds	r3, #3
 8006466:	089b      	lsrs	r3, r3, #2
 8006468:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800646a:	8afa      	ldrh	r2, [r7, #22]
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	b29b      	uxth	r3, r3
 8006476:	429a      	cmp	r2, r3
 8006478:	d90a      	bls.n	8006490 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	619a      	str	r2, [r3, #24]
        }
        break;
 8006486:	e003      	b.n	8006490 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006488:	bf00      	nop
 800648a:	e002      	b.n	8006492 <USB_HC_StartXfer+0x4d2>
        break;
 800648c:	bf00      	nop
 800648e:	e000      	b.n	8006492 <USB_HC_StartXfer+0x4d2>
        break;
 8006490:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	6999      	ldr	r1, [r3, #24]
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	785a      	ldrb	r2, [r3, #1]
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	b29b      	uxth	r3, r3
 80064a0:	2000      	movs	r0, #0
 80064a2:	9000      	str	r0, [sp, #0]
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f7ff f9c3 	bl	8005830 <USB_WritePacket>
  }

  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3728      	adds	r7, #40	@ 0x28
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064c6:	695b      	ldr	r3, [r3, #20]
 80064c8:	b29b      	uxth	r3, r3
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3714      	adds	r7, #20
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b089      	sub	sp, #36	@ 0x24
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
 80064de:	460b      	mov	r3, r1
 80064e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80064e6:	78fb      	ldrb	r3, [r7, #3]
 80064e8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80064ea:	2300      	movs	r3, #0
 80064ec:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	015a      	lsls	r2, r3, #5
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	4413      	add	r3, r2
 80064f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	0c9b      	lsrs	r3, r3, #18
 80064fe:	f003 0303 	and.w	r3, r3, #3
 8006502:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	015a      	lsls	r2, r3, #5
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	4413      	add	r3, r2
 800650c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	0fdb      	lsrs	r3, r3, #31
 8006514:	f003 0301 	and.w	r3, r3, #1
 8006518:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	015a      	lsls	r2, r3, #5
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	4413      	add	r3, r2
 8006522:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	0fdb      	lsrs	r3, r3, #31
 800652a:	f003 0301 	and.w	r3, r3, #1
 800652e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	f003 0320 	and.w	r3, r3, #32
 8006538:	2b20      	cmp	r3, #32
 800653a:	d10d      	bne.n	8006558 <USB_HC_Halt+0x82>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10a      	bne.n	8006558 <USB_HC_Halt+0x82>
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d005      	beq.n	8006554 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d002      	beq.n	8006554 <USB_HC_Halt+0x7e>
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	2b03      	cmp	r3, #3
 8006552:	d101      	bne.n	8006558 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006554:	2300      	movs	r3, #0
 8006556:	e0d8      	b.n	800670a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d002      	beq.n	8006564 <USB_HC_Halt+0x8e>
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	2b02      	cmp	r3, #2
 8006562:	d173      	bne.n	800664c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	015a      	lsls	r2, r3, #5
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	4413      	add	r3, r2
 800656c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	69ba      	ldr	r2, [r7, #24]
 8006574:	0151      	lsls	r1, r2, #5
 8006576:	69fa      	ldr	r2, [r7, #28]
 8006578:	440a      	add	r2, r1
 800657a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800657e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006582:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f003 0320 	and.w	r3, r3, #32
 800658c:	2b00      	cmp	r3, #0
 800658e:	d14a      	bne.n	8006626 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006594:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d133      	bne.n	8006604 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	015a      	lsls	r2, r3, #5
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	4413      	add	r3, r2
 80065a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	69ba      	ldr	r2, [r7, #24]
 80065ac:	0151      	lsls	r1, r2, #5
 80065ae:	69fa      	ldr	r2, [r7, #28]
 80065b0:	440a      	add	r2, r1
 80065b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80065ba:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	015a      	lsls	r2, r3, #5
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	4413      	add	r3, r2
 80065c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	69ba      	ldr	r2, [r7, #24]
 80065cc:	0151      	lsls	r1, r2, #5
 80065ce:	69fa      	ldr	r2, [r7, #28]
 80065d0:	440a      	add	r2, r1
 80065d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80065da:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	3301      	adds	r3, #1
 80065e0:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80065e8:	d82e      	bhi.n	8006648 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	015a      	lsls	r2, r3, #5
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	4413      	add	r3, r2
 80065f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006600:	d0ec      	beq.n	80065dc <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006602:	e081      	b.n	8006708 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	015a      	lsls	r2, r3, #5
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	4413      	add	r3, r2
 800660c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	69ba      	ldr	r2, [r7, #24]
 8006614:	0151      	lsls	r1, r2, #5
 8006616:	69fa      	ldr	r2, [r7, #28]
 8006618:	440a      	add	r2, r1
 800661a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800661e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006622:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006624:	e070      	b.n	8006708 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	4413      	add	r3, r2
 800662e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	69ba      	ldr	r2, [r7, #24]
 8006636:	0151      	lsls	r1, r2, #5
 8006638:	69fa      	ldr	r2, [r7, #28]
 800663a:	440a      	add	r2, r1
 800663c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006640:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006644:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006646:	e05f      	b.n	8006708 <USB_HC_Halt+0x232>
            break;
 8006648:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800664a:	e05d      	b.n	8006708 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	015a      	lsls	r2, r3, #5
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	4413      	add	r3, r2
 8006654:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	69ba      	ldr	r2, [r7, #24]
 800665c:	0151      	lsls	r1, r2, #5
 800665e:	69fa      	ldr	r2, [r7, #28]
 8006660:	440a      	add	r2, r1
 8006662:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006666:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800666a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d133      	bne.n	80066e4 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	015a      	lsls	r2, r3, #5
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	4413      	add	r3, r2
 8006684:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	69ba      	ldr	r2, [r7, #24]
 800668c:	0151      	lsls	r1, r2, #5
 800668e:	69fa      	ldr	r2, [r7, #28]
 8006690:	440a      	add	r2, r1
 8006692:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006696:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800669a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	015a      	lsls	r2, r3, #5
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	4413      	add	r3, r2
 80066a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	69ba      	ldr	r2, [r7, #24]
 80066ac:	0151      	lsls	r1, r2, #5
 80066ae:	69fa      	ldr	r2, [r7, #28]
 80066b0:	440a      	add	r2, r1
 80066b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80066ba:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	3301      	adds	r3, #1
 80066c0:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80066c8:	d81d      	bhi.n	8006706 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	015a      	lsls	r2, r3, #5
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066e0:	d0ec      	beq.n	80066bc <USB_HC_Halt+0x1e6>
 80066e2:	e011      	b.n	8006708 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	015a      	lsls	r2, r3, #5
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	4413      	add	r3, r2
 80066ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	69ba      	ldr	r2, [r7, #24]
 80066f4:	0151      	lsls	r1, r2, #5
 80066f6:	69fa      	ldr	r2, [r7, #28]
 80066f8:	440a      	add	r2, r1
 80066fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006702:	6013      	str	r3, [r2, #0]
 8006704:	e000      	b.n	8006708 <USB_HC_Halt+0x232>
          break;
 8006706:	bf00      	nop
    }
  }

  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3724      	adds	r7, #36	@ 0x24
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
	...

08006718 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006718:	b480      	push	{r7}
 800671a:	b087      	sub	sp, #28
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	460b      	mov	r3, r1
 8006722:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006728:	78fb      	ldrb	r3, [r7, #3]
 800672a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800672c:	2301      	movs	r3, #1
 800672e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	04da      	lsls	r2, r3, #19
 8006734:	4b15      	ldr	r3, [pc, #84]	@ (800678c <USB_DoPing+0x74>)
 8006736:	4013      	ands	r3, r2
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	0151      	lsls	r1, r2, #5
 800673c:	697a      	ldr	r2, [r7, #20]
 800673e:	440a      	add	r2, r1
 8006740:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006744:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006748:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	015a      	lsls	r2, r3, #5
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	4413      	add	r3, r2
 8006752:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006760:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006768:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	015a      	lsls	r2, r3, #5
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	4413      	add	r3, r2
 8006772:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006776:	461a      	mov	r2, r3
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	371c      	adds	r7, #28
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	1ff80000 	.word	0x1ff80000

08006790 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b088      	sub	sp, #32
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006798:	2300      	movs	r3, #0
 800679a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80067a0:	2300      	movs	r3, #0
 80067a2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f7fe ff86 	bl	80056b6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80067aa:	2110      	movs	r1, #16
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f7fe ffdf 	bl	8005770 <USB_FlushTxFifo>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d001      	beq.n	80067bc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f7ff f809 	bl	80057d4 <USB_FlushRxFifo>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d001      	beq.n	80067cc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80067cc:	2300      	movs	r3, #0
 80067ce:	61bb      	str	r3, [r7, #24]
 80067d0:	e01f      	b.n	8006812 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	015a      	lsls	r2, r3, #5
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	4413      	add	r3, r2
 80067da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067e8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80067f0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80067f8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	015a      	lsls	r2, r3, #5
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	4413      	add	r3, r2
 8006802:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006806:	461a      	mov	r2, r3
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	3301      	adds	r3, #1
 8006810:	61bb      	str	r3, [r7, #24]
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	2b0f      	cmp	r3, #15
 8006816:	d9dc      	bls.n	80067d2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006818:	2300      	movs	r3, #0
 800681a:	61bb      	str	r3, [r7, #24]
 800681c:	e034      	b.n	8006888 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	015a      	lsls	r2, r3, #5
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	4413      	add	r3, r2
 8006826:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006834:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800683c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006844:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	015a      	lsls	r2, r3, #5
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	4413      	add	r3, r2
 800684e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006852:	461a      	mov	r2, r3
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	3301      	adds	r3, #1
 800685c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006864:	d80c      	bhi.n	8006880 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	015a      	lsls	r2, r3, #5
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	4413      	add	r3, r2
 800686e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006878:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800687c:	d0ec      	beq.n	8006858 <USB_StopHost+0xc8>
 800687e:	e000      	b.n	8006882 <USB_StopHost+0xf2>
        break;
 8006880:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	3301      	adds	r3, #1
 8006886:	61bb      	str	r3, [r7, #24]
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	2b0f      	cmp	r3, #15
 800688c:	d9c7      	bls.n	800681e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006894:	461a      	mov	r2, r3
 8006896:	f04f 33ff 	mov.w	r3, #4294967295
 800689a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f04f 32ff 	mov.w	r2, #4294967295
 80068a2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f7fe fef5 	bl	8005694 <USB_EnableGlobalInt>

  return ret;
 80068aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3720      	adds	r7, #32
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80068b4:	b590      	push	{r4, r7, lr}
 80068b6:	b089      	sub	sp, #36	@ 0x24
 80068b8:	af04      	add	r7, sp, #16
 80068ba:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80068bc:	2301      	movs	r3, #1
 80068be:	2202      	movs	r2, #2
 80068c0:	2102      	movs	r1, #2
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 fc83 	bl	80071ce <USBH_FindInterface>
 80068c8:	4603      	mov	r3, r0
 80068ca:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80068cc:	7bfb      	ldrb	r3, [r7, #15]
 80068ce:	2bff      	cmp	r3, #255	@ 0xff
 80068d0:	d002      	beq.n	80068d8 <USBH_CDC_InterfaceInit+0x24>
 80068d2:	7bfb      	ldrb	r3, [r7, #15]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d901      	bls.n	80068dc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80068d8:	2302      	movs	r3, #2
 80068da:	e13d      	b.n	8006b58 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80068dc:	7bfb      	ldrb	r3, [r7, #15]
 80068de:	4619      	mov	r1, r3
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fc58 	bl	8007196 <USBH_SelectInterface>
 80068e6:	4603      	mov	r3, r0
 80068e8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80068ea:	7bbb      	ldrb	r3, [r7, #14]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d001      	beq.n	80068f4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80068f0:	2302      	movs	r3, #2
 80068f2:	e131      	b.n	8006b58 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80068fa:	2050      	movs	r0, #80	@ 0x50
 80068fc:	f002 fb6a 	bl	8008fd4 <malloc>
 8006900:	4603      	mov	r3, r0
 8006902:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800690a:	69db      	ldr	r3, [r3, #28]
 800690c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d101      	bne.n	8006918 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006914:	2302      	movs	r3, #2
 8006916:	e11f      	b.n	8006b58 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006918:	2250      	movs	r2, #80	@ 0x50
 800691a:	2100      	movs	r1, #0
 800691c:	68b8      	ldr	r0, [r7, #8]
 800691e:	f002 fc17 	bl	8009150 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006922:	7bfb      	ldrb	r3, [r7, #15]
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	211a      	movs	r1, #26
 8006928:	fb01 f303 	mul.w	r3, r1, r3
 800692c:	4413      	add	r3, r2
 800692e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	b25b      	sxtb	r3, r3
 8006936:	2b00      	cmp	r3, #0
 8006938:	da15      	bge.n	8006966 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800693a:	7bfb      	ldrb	r3, [r7, #15]
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	211a      	movs	r1, #26
 8006940:	fb01 f303 	mul.w	r3, r1, r3
 8006944:	4413      	add	r3, r2
 8006946:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800694a:	781a      	ldrb	r2, [r3, #0]
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006950:	7bfb      	ldrb	r3, [r7, #15]
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	211a      	movs	r1, #26
 8006956:	fb01 f303 	mul.w	r3, r1, r3
 800695a:	4413      	add	r3, r2
 800695c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006960:	881a      	ldrh	r2, [r3, #0]
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	785b      	ldrb	r3, [r3, #1]
 800696a:	4619      	mov	r1, r3
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f001 ffc4 	bl	80088fa <USBH_AllocPipe>
 8006972:	4603      	mov	r3, r0
 8006974:	461a      	mov	r2, r3
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	7819      	ldrb	r1, [r3, #0]
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	7858      	ldrb	r0, [r3, #1]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800698e:	68ba      	ldr	r2, [r7, #8]
 8006990:	8952      	ldrh	r2, [r2, #10]
 8006992:	9202      	str	r2, [sp, #8]
 8006994:	2203      	movs	r2, #3
 8006996:	9201      	str	r2, [sp, #4]
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	4623      	mov	r3, r4
 800699c:	4602      	mov	r2, r0
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f001 ff7c 	bl	800889c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	2200      	movs	r2, #0
 80069aa:	4619      	mov	r1, r3
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f002 fa8b 	bl	8008ec8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80069b2:	2300      	movs	r3, #0
 80069b4:	2200      	movs	r2, #0
 80069b6:	210a      	movs	r1, #10
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 fc08 	bl	80071ce <USBH_FindInterface>
 80069be:	4603      	mov	r3, r0
 80069c0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80069c2:	7bfb      	ldrb	r3, [r7, #15]
 80069c4:	2bff      	cmp	r3, #255	@ 0xff
 80069c6:	d002      	beq.n	80069ce <USBH_CDC_InterfaceInit+0x11a>
 80069c8:	7bfb      	ldrb	r3, [r7, #15]
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d901      	bls.n	80069d2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80069ce:	2302      	movs	r3, #2
 80069d0:	e0c2      	b.n	8006b58 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80069d2:	7bfb      	ldrb	r3, [r7, #15]
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	211a      	movs	r1, #26
 80069d8:	fb01 f303 	mul.w	r3, r1, r3
 80069dc:	4413      	add	r3, r2
 80069de:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	b25b      	sxtb	r3, r3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	da16      	bge.n	8006a18 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80069ea:	7bfb      	ldrb	r3, [r7, #15]
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	211a      	movs	r1, #26
 80069f0:	fb01 f303 	mul.w	r3, r1, r3
 80069f4:	4413      	add	r3, r2
 80069f6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80069fa:	781a      	ldrb	r2, [r3, #0]
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006a00:	7bfb      	ldrb	r3, [r7, #15]
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	211a      	movs	r1, #26
 8006a06:	fb01 f303 	mul.w	r3, r1, r3
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006a10:	881a      	ldrh	r2, [r3, #0]
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	835a      	strh	r2, [r3, #26]
 8006a16:	e015      	b.n	8006a44 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006a18:	7bfb      	ldrb	r3, [r7, #15]
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	211a      	movs	r1, #26
 8006a1e:	fb01 f303 	mul.w	r3, r1, r3
 8006a22:	4413      	add	r3, r2
 8006a24:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006a28:	781a      	ldrb	r2, [r3, #0]
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006a2e:	7bfb      	ldrb	r3, [r7, #15]
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	211a      	movs	r1, #26
 8006a34:	fb01 f303 	mul.w	r3, r1, r3
 8006a38:	4413      	add	r3, r2
 8006a3a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006a3e:	881a      	ldrh	r2, [r3, #0]
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	211a      	movs	r1, #26
 8006a4a:	fb01 f303 	mul.w	r3, r1, r3
 8006a4e:	4413      	add	r3, r2
 8006a50:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	b25b      	sxtb	r3, r3
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	da16      	bge.n	8006a8a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006a5c:	7bfb      	ldrb	r3, [r7, #15]
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	211a      	movs	r1, #26
 8006a62:	fb01 f303 	mul.w	r3, r1, r3
 8006a66:	4413      	add	r3, r2
 8006a68:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006a6c:	781a      	ldrb	r2, [r3, #0]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006a72:	7bfb      	ldrb	r3, [r7, #15]
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	211a      	movs	r1, #26
 8006a78:	fb01 f303 	mul.w	r3, r1, r3
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006a82:	881a      	ldrh	r2, [r3, #0]
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	835a      	strh	r2, [r3, #26]
 8006a88:	e015      	b.n	8006ab6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006a8a:	7bfb      	ldrb	r3, [r7, #15]
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	211a      	movs	r1, #26
 8006a90:	fb01 f303 	mul.w	r3, r1, r3
 8006a94:	4413      	add	r3, r2
 8006a96:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006a9a:	781a      	ldrb	r2, [r3, #0]
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006aa0:	7bfb      	ldrb	r3, [r7, #15]
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	211a      	movs	r1, #26
 8006aa6:	fb01 f303 	mul.w	r3, r1, r3
 8006aaa:	4413      	add	r3, r2
 8006aac:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006ab0:	881a      	ldrh	r2, [r3, #0]
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	7b9b      	ldrb	r3, [r3, #14]
 8006aba:	4619      	mov	r1, r3
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f001 ff1c 	bl	80088fa <USBH_AllocPipe>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	7bdb      	ldrb	r3, [r3, #15]
 8006ace:	4619      	mov	r1, r3
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f001 ff12 	bl	80088fa <USBH_AllocPipe>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	461a      	mov	r2, r3
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	7b59      	ldrb	r1, [r3, #13]
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	7b98      	ldrb	r0, [r3, #14]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	8b12      	ldrh	r2, [r2, #24]
 8006af6:	9202      	str	r2, [sp, #8]
 8006af8:	2202      	movs	r2, #2
 8006afa:	9201      	str	r2, [sp, #4]
 8006afc:	9300      	str	r3, [sp, #0]
 8006afe:	4623      	mov	r3, r4
 8006b00:	4602      	mov	r2, r0
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f001 feca 	bl	800889c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	7b19      	ldrb	r1, [r3, #12]
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	7bd8      	ldrb	r0, [r3, #15]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006b1c:	68ba      	ldr	r2, [r7, #8]
 8006b1e:	8b52      	ldrh	r2, [r2, #26]
 8006b20:	9202      	str	r2, [sp, #8]
 8006b22:	2202      	movs	r2, #2
 8006b24:	9201      	str	r2, [sp, #4]
 8006b26:	9300      	str	r3, [sp, #0]
 8006b28:	4623      	mov	r3, r4
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f001 feb5 	bl	800889c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	7b5b      	ldrb	r3, [r3, #13]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	4619      	mov	r1, r3
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f002 f9c0 	bl	8008ec8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	7b1b      	ldrb	r3, [r3, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	4619      	mov	r1, r3
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f002 f9b9 	bl	8008ec8 <USBH_LL_SetToggle>

  return USBH_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3714      	adds	r7, #20
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd90      	pop	{r4, r7, pc}

08006b60 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006b6e:	69db      	ldr	r3, [r3, #28]
 8006b70:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00e      	beq.n	8006b98 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	4619      	mov	r1, r3
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f001 feaa 	bl	80088da <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f001 fed5 	bl	800893c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2200      	movs	r2, #0
 8006b96:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	7b1b      	ldrb	r3, [r3, #12]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00e      	beq.n	8006bbe <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	7b1b      	ldrb	r3, [r3, #12]
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f001 fe97 	bl	80088da <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	7b1b      	ldrb	r3, [r3, #12]
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f001 fec2 	bl	800893c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	7b5b      	ldrb	r3, [r3, #13]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00e      	beq.n	8006be4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	7b5b      	ldrb	r3, [r3, #13]
 8006bca:	4619      	mov	r1, r3
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f001 fe84 	bl	80088da <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	7b5b      	ldrb	r3, [r3, #13]
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f001 feaf 	bl	800893c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2200      	movs	r2, #0
 8006be2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006bea:	69db      	ldr	r3, [r3, #28]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00b      	beq.n	8006c08 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006bf6:	69db      	ldr	r3, [r3, #28]
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f002 f9f3 	bl	8008fe4 <free>
    phost->pActiveClass->pData = 0U;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c04:	2200      	movs	r2, #0
 8006c06:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b084      	sub	sp, #16
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c20:	69db      	ldr	r3, [r3, #28]
 8006c22:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	3340      	adds	r3, #64	@ 0x40
 8006c28:	4619      	mov	r1, r3
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 f8b1 	bl	8006d92 <GetLineCoding>
 8006c30:	4603      	mov	r3, r0
 8006c32:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006c34:	7afb      	ldrb	r3, [r7, #11]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d105      	bne.n	8006c46 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006c40:	2102      	movs	r1, #2
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006c46:	7afb      	ldrb	r3, [r7, #11]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c66:	69db      	ldr	r3, [r3, #28]
 8006c68:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006c70:	2b04      	cmp	r3, #4
 8006c72:	d877      	bhi.n	8006d64 <USBH_CDC_Process+0x114>
 8006c74:	a201      	add	r2, pc, #4	@ (adr r2, 8006c7c <USBH_CDC_Process+0x2c>)
 8006c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7a:	bf00      	nop
 8006c7c:	08006c91 	.word	0x08006c91
 8006c80:	08006c97 	.word	0x08006c97
 8006c84:	08006cc7 	.word	0x08006cc7
 8006c88:	08006d3b 	.word	0x08006d3b
 8006c8c:	08006d49 	.word	0x08006d49
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006c90:	2300      	movs	r3, #0
 8006c92:	73fb      	strb	r3, [r7, #15]
      break;
 8006c94:	e06d      	b.n	8006d72 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 f897 	bl	8006dd0 <SetLineCoding>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006ca6:	7bbb      	ldrb	r3, [r7, #14]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d104      	bne.n	8006cb6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	2202      	movs	r2, #2
 8006cb0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006cb4:	e058      	b.n	8006d68 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006cb6:	7bbb      	ldrb	r3, [r7, #14]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d055      	beq.n	8006d68 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	2204      	movs	r2, #4
 8006cc0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006cc4:	e050      	b.n	8006d68 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	3340      	adds	r3, #64	@ 0x40
 8006cca:	4619      	mov	r1, r3
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 f860 	bl	8006d92 <GetLineCoding>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006cd6:	7bbb      	ldrb	r3, [r7, #14]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d126      	bne.n	8006d2a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cee:	791b      	ldrb	r3, [r3, #4]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d13b      	bne.n	8006d6c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cfe:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d133      	bne.n	8006d6c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d0e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d12b      	bne.n	8006d6c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d1c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d124      	bne.n	8006d6c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 f958 	bl	8006fd8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006d28:	e020      	b.n	8006d6c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006d2a:	7bbb      	ldrb	r3, [r7, #14]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d01d      	beq.n	8006d6c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	2204      	movs	r2, #4
 8006d34:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006d38:	e018      	b.n	8006d6c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f867 	bl	8006e0e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 f8da 	bl	8006efa <CDC_ProcessReception>
      break;
 8006d46:	e014      	b.n	8006d72 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006d48:	2100      	movs	r1, #0
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f001 f81e 	bl	8007d8c <USBH_ClrFeature>
 8006d50:	4603      	mov	r3, r0
 8006d52:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006d54:	7bbb      	ldrb	r3, [r7, #14]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d10a      	bne.n	8006d70 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8006d62:	e005      	b.n	8006d70 <USBH_CDC_Process+0x120>

    default:
      break;
 8006d64:	bf00      	nop
 8006d66:	e004      	b.n	8006d72 <USBH_CDC_Process+0x122>
      break;
 8006d68:	bf00      	nop
 8006d6a:	e002      	b.n	8006d72 <USBH_CDC_Process+0x122>
      break;
 8006d6c:	bf00      	nop
 8006d6e:	e000      	b.n	8006d72 <USBH_CDC_Process+0x122>
      break;
 8006d70:	bf00      	nop

  }

  return status;
 8006d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3710      	adds	r7, #16
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	370c      	adds	r7, #12
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr

08006d92 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b082      	sub	sp, #8
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
 8006d9a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	22a1      	movs	r2, #161	@ 0xa1
 8006da0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2221      	movs	r2, #33	@ 0x21
 8006da6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2207      	movs	r2, #7
 8006db8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	2207      	movs	r2, #7
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f001 fb17 	bl	80083f4 <USBH_CtlReq>
 8006dc6:	4603      	mov	r3, r0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3708      	adds	r7, #8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2221      	movs	r2, #33	@ 0x21
 8006dde:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2220      	movs	r2, #32
 8006de4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2207      	movs	r2, #7
 8006df6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	2207      	movs	r2, #7
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f001 faf8 	bl	80083f4 <USBH_CtlReq>
 8006e04:	4603      	mov	r3, r0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3708      	adds	r7, #8
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b086      	sub	sp, #24
 8006e12:	af02      	add	r7, sp, #8
 8006e14:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e1c:	69db      	ldr	r3, [r3, #28]
 8006e1e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006e20:	2300      	movs	r3, #0
 8006e22:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d002      	beq.n	8006e34 <CDC_ProcessTransmission+0x26>
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d023      	beq.n	8006e7a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006e32:	e05e      	b.n	8006ef2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	8b12      	ldrh	r2, [r2, #24]
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d90b      	bls.n	8006e58 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	69d9      	ldr	r1, [r3, #28]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	8b1a      	ldrh	r2, [r3, #24]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	7b5b      	ldrb	r3, [r3, #13]
 8006e4c:	2001      	movs	r0, #1
 8006e4e:	9000      	str	r0, [sp, #0]
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f001 fce0 	bl	8008816 <USBH_BulkSendData>
 8006e56:	e00b      	b.n	8006e70 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	7b5b      	ldrb	r3, [r3, #13]
 8006e66:	2001      	movs	r0, #1
 8006e68:	9000      	str	r0, [sp, #0]
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f001 fcd3 	bl	8008816 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2202      	movs	r2, #2
 8006e74:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006e78:	e03b      	b.n	8006ef2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	7b5b      	ldrb	r3, [r3, #13]
 8006e7e:	4619      	mov	r1, r3
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f001 fff7 	bl	8008e74 <USBH_LL_GetURBState>
 8006e86:	4603      	mov	r3, r0
 8006e88:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006e8a:	7afb      	ldrb	r3, [r7, #11]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d128      	bne.n	8006ee2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	8b12      	ldrh	r2, [r2, #24]
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d90e      	bls.n	8006eba <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	8b12      	ldrh	r2, [r2, #24]
 8006ea4:	1a9a      	subs	r2, r3, r2
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	8b12      	ldrh	r2, [r2, #24]
 8006eb2:	441a      	add	r2, r3
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	61da      	str	r2, [r3, #28]
 8006eb8:	e002      	b.n	8006ec0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d004      	beq.n	8006ed2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006ed0:	e00e      	b.n	8006ef0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 f868 	bl	8006fb0 <USBH_CDC_TransmitCallback>
      break;
 8006ee0:	e006      	b.n	8006ef0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006ee2:	7afb      	ldrb	r3, [r7, #11]
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d103      	bne.n	8006ef0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006ef0:	bf00      	nop
  }
}
 8006ef2:	bf00      	nop
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b086      	sub	sp, #24
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f08:	69db      	ldr	r3, [r3, #28]
 8006f0a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8006f16:	2b03      	cmp	r3, #3
 8006f18:	d002      	beq.n	8006f20 <CDC_ProcessReception+0x26>
 8006f1a:	2b04      	cmp	r3, #4
 8006f1c:	d00e      	beq.n	8006f3c <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 8006f1e:	e043      	b.n	8006fa8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	6a19      	ldr	r1, [r3, #32]
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	8b5a      	ldrh	r2, [r3, #26]
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	7b1b      	ldrb	r3, [r3, #12]
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f001 fc97 	bl	8008860 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	2204      	movs	r2, #4
 8006f36:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006f3a:	e035      	b.n	8006fa8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	7b1b      	ldrb	r3, [r3, #12]
 8006f40:	4619      	mov	r1, r3
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f001 ff96 	bl	8008e74 <USBH_LL_GetURBState>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006f4c:	7cfb      	ldrb	r3, [r7, #19]
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d129      	bne.n	8006fa6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	7b1b      	ldrb	r3, [r3, #12]
 8006f56:	4619      	mov	r1, r3
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f001 fef9 	bl	8008d50 <USBH_LL_GetLastXferSize>
 8006f5e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d016      	beq.n	8006f98 <CDC_ProcessReception+0x9e>
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	8b5b      	ldrh	r3, [r3, #26]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d110      	bne.n	8006f98 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	1ad2      	subs	r2, r2, r3
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	6a1a      	ldr	r2, [r3, #32]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	441a      	add	r2, r3
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	2203      	movs	r2, #3
 8006f92:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006f96:	e006      	b.n	8006fa6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 f80f 	bl	8006fc4 <USBH_CDC_ReceiveCallback>
      break;
 8006fa6:	bf00      	nop
  }
}
 8006fa8:	bf00      	nop
 8006faa:	3718      	adds	r7, #24
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006fb8:	bf00      	nop
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006fcc:	bf00      	nop
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006fe0:	bf00      	nop
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d101      	bne.n	8007004 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007000:	2302      	movs	r3, #2
 8007002:	e029      	b.n	8007058 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	79fa      	ldrb	r2, [r7, #7]
 8007008:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f000 f81f 	bl	8007060 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d003      	beq.n	8007050 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f001 fdc9 	bl	8008be8 <USBH_LL_Init>

  return USBH_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007068:	2300      	movs	r3, #0
 800706a:	60fb      	str	r3, [r7, #12]
 800706c:	e009      	b.n	8007082 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	33e0      	adds	r3, #224	@ 0xe0
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	4413      	add	r3, r2
 8007078:	2200      	movs	r2, #0
 800707a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	3301      	adds	r3, #1
 8007080:	60fb      	str	r3, [r7, #12]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2b0f      	cmp	r3, #15
 8007086:	d9f2      	bls.n	800706e <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007088:	2300      	movs	r3, #0
 800708a:	60fb      	str	r3, [r7, #12]
 800708c:	e009      	b.n	80070a2 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	4413      	add	r3, r2
 8007094:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007098:	2200      	movs	r2, #0
 800709a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	3301      	adds	r3, #1
 80070a0:	60fb      	str	r3, [r7, #12]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070a8:	d3f1      	bcc.n	800708e <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2201      	movs	r2, #1
 80070ba:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2240      	movs	r2, #64	@ 0x40
 80070ce:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2201      	movs	r2, #1
 80070e2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	331c      	adds	r3, #28
 80070fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80070fe:	2100      	movs	r1, #0
 8007100:	4618      	mov	r0, r3
 8007102:	f002 f825 	bl	8009150 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800710c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007110:	2100      	movs	r1, #0
 8007112:	4618      	mov	r0, r3
 8007114:	f002 f81c 	bl	8009150 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800711e:	2212      	movs	r2, #18
 8007120:	2100      	movs	r1, #0
 8007122:	4618      	mov	r0, r3
 8007124:	f002 f814 	bl	8009150 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800712e:	223e      	movs	r2, #62	@ 0x3e
 8007130:	2100      	movs	r1, #0
 8007132:	4618      	mov	r0, r3
 8007134:	f002 f80c 	bl	8009150 <memset>

  return USBH_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007142:	b480      	push	{r7}
 8007144:	b085      	sub	sp, #20
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
 800714a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800714c:	2300      	movs	r3, #0
 800714e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d016      	beq.n	8007184 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10e      	bne.n	800717e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007166:	1c59      	adds	r1, r3, #1
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	33de      	adds	r3, #222	@ 0xde
 8007172:	6839      	ldr	r1, [r7, #0]
 8007174:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007178:	2300      	movs	r3, #0
 800717a:	73fb      	strb	r3, [r7, #15]
 800717c:	e004      	b.n	8007188 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800717e:	2302      	movs	r3, #2
 8007180:	73fb      	strb	r3, [r7, #15]
 8007182:	e001      	b.n	8007188 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007184:	2302      	movs	r3, #2
 8007186:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007188:	7bfb      	ldrb	r3, [r7, #15]
}
 800718a:	4618      	mov	r0, r3
 800718c:	3714      	adds	r7, #20
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr

08007196 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007196:	b480      	push	{r7}
 8007198:	b085      	sub	sp, #20
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
 800719e:	460b      	mov	r3, r1
 80071a0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80071a2:	2300      	movs	r3, #0
 80071a4:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80071ac:	78fa      	ldrb	r2, [r7, #3]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d204      	bcs.n	80071bc <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	78fa      	ldrb	r2, [r7, #3]
 80071b6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80071ba:	e001      	b.n	80071c0 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80071bc:	2302      	movs	r3, #2
 80071be:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80071c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3714      	adds	r7, #20
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr

080071ce <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80071ce:	b480      	push	{r7}
 80071d0:	b087      	sub	sp, #28
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
 80071d6:	4608      	mov	r0, r1
 80071d8:	4611      	mov	r1, r2
 80071da:	461a      	mov	r2, r3
 80071dc:	4603      	mov	r3, r0
 80071de:	70fb      	strb	r3, [r7, #3]
 80071e0:	460b      	mov	r3, r1
 80071e2:	70bb      	strb	r3, [r7, #2]
 80071e4:	4613      	mov	r3, r2
 80071e6:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80071e8:	2300      	movs	r3, #0
 80071ea:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80071ec:	2300      	movs	r3, #0
 80071ee:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80071f6:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80071f8:	e025      	b.n	8007246 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80071fa:	7dfb      	ldrb	r3, [r7, #23]
 80071fc:	221a      	movs	r2, #26
 80071fe:	fb02 f303 	mul.w	r3, r2, r3
 8007202:	3308      	adds	r3, #8
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	4413      	add	r3, r2
 8007208:	3302      	adds	r3, #2
 800720a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	795b      	ldrb	r3, [r3, #5]
 8007210:	78fa      	ldrb	r2, [r7, #3]
 8007212:	429a      	cmp	r2, r3
 8007214:	d002      	beq.n	800721c <USBH_FindInterface+0x4e>
 8007216:	78fb      	ldrb	r3, [r7, #3]
 8007218:	2bff      	cmp	r3, #255	@ 0xff
 800721a:	d111      	bne.n	8007240 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007220:	78ba      	ldrb	r2, [r7, #2]
 8007222:	429a      	cmp	r2, r3
 8007224:	d002      	beq.n	800722c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007226:	78bb      	ldrb	r3, [r7, #2]
 8007228:	2bff      	cmp	r3, #255	@ 0xff
 800722a:	d109      	bne.n	8007240 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007230:	787a      	ldrb	r2, [r7, #1]
 8007232:	429a      	cmp	r2, r3
 8007234:	d002      	beq.n	800723c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007236:	787b      	ldrb	r3, [r7, #1]
 8007238:	2bff      	cmp	r3, #255	@ 0xff
 800723a:	d101      	bne.n	8007240 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800723c:	7dfb      	ldrb	r3, [r7, #23]
 800723e:	e006      	b.n	800724e <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007240:	7dfb      	ldrb	r3, [r7, #23]
 8007242:	3301      	adds	r3, #1
 8007244:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007246:	7dfb      	ldrb	r3, [r7, #23]
 8007248:	2b01      	cmp	r3, #1
 800724a:	d9d6      	bls.n	80071fa <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800724c:	23ff      	movs	r3, #255	@ 0xff
}
 800724e:	4618      	mov	r0, r3
 8007250:	371c      	adds	r7, #28
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr

0800725a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b082      	sub	sp, #8
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f001 fcfc 	bl	8008c60 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007268:	2101      	movs	r1, #1
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f001 fe15 	bl	8008e9a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3708      	adds	r7, #8
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
	...

0800727c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b088      	sub	sp, #32
 8007280:	af04      	add	r7, sp, #16
 8007282:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007284:	2302      	movs	r3, #2
 8007286:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007288:	2300      	movs	r3, #0
 800728a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007292:	b2db      	uxtb	r3, r3
 8007294:	2b01      	cmp	r3, #1
 8007296:	d102      	bne.n	800729e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2203      	movs	r2, #3
 800729c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	2b0b      	cmp	r3, #11
 80072a6:	f200 81bc 	bhi.w	8007622 <USBH_Process+0x3a6>
 80072aa:	a201      	add	r2, pc, #4	@ (adr r2, 80072b0 <USBH_Process+0x34>)
 80072ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b0:	080072e1 	.word	0x080072e1
 80072b4:	08007313 	.word	0x08007313
 80072b8:	0800737d 	.word	0x0800737d
 80072bc:	080075bd 	.word	0x080075bd
 80072c0:	08007623 	.word	0x08007623
 80072c4:	0800741d 	.word	0x0800741d
 80072c8:	08007563 	.word	0x08007563
 80072cc:	08007453 	.word	0x08007453
 80072d0:	08007473 	.word	0x08007473
 80072d4:	08007491 	.word	0x08007491
 80072d8:	080074d5 	.word	0x080074d5
 80072dc:	080075a5 	.word	0x080075a5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f000 819c 	beq.w	8007626 <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2201      	movs	r2, #1
 80072f2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80072f4:	20c8      	movs	r0, #200	@ 0xc8
 80072f6:	f001 fe1a 	bl	8008f2e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f001 fd0d 	bl	8008d1a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8007310:	e189      	b.n	8007626 <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007318:	b2db      	uxtb	r3, r3
 800731a:	2b01      	cmp	r3, #1
 800731c:	d107      	bne.n	800732e <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2202      	movs	r2, #2
 800732a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800732c:	e18a      	b.n	8007644 <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007334:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007338:	d914      	bls.n	8007364 <USBH_Process+0xe8>
          phost->device.RstCnt++;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007340:	3301      	adds	r3, #1
 8007342:	b2da      	uxtb	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007350:	2b03      	cmp	r3, #3
 8007352:	d903      	bls.n	800735c <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	220d      	movs	r2, #13
 8007358:	701a      	strb	r2, [r3, #0]
      break;
 800735a:	e173      	b.n	8007644 <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	701a      	strb	r2, [r3, #0]
      break;
 8007362:	e16f      	b.n	8007644 <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800736a:	f103 020a 	add.w	r2, r3, #10
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007374:	200a      	movs	r0, #10
 8007376:	f001 fdda 	bl	8008f2e <USBH_Delay>
      break;
 800737a:	e163      	b.n	8007644 <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007382:	2b00      	cmp	r3, #0
 8007384:	d005      	beq.n	8007392 <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800738c:	2104      	movs	r1, #4
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007392:	2064      	movs	r0, #100	@ 0x64
 8007394:	f001 fdcb 	bl	8008f2e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f001 fc97 	bl	8008ccc <USBH_LL_GetSpeed>
 800739e:	4603      	mov	r3, r0
 80073a0:	461a      	mov	r2, r3
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2205      	movs	r2, #5
 80073ac:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80073ae:	2100      	movs	r1, #0
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f001 faa2 	bl	80088fa <USBH_AllocPipe>
 80073b6:	4603      	mov	r3, r0
 80073b8:	461a      	mov	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80073be:	2180      	movs	r1, #128	@ 0x80
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f001 fa9a 	bl	80088fa <USBH_AllocPipe>
 80073c6:	4603      	mov	r3, r0
 80073c8:	461a      	mov	r2, r3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	7919      	ldrb	r1, [r3, #4]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80073e2:	9202      	str	r2, [sp, #8]
 80073e4:	2200      	movs	r2, #0
 80073e6:	9201      	str	r2, [sp, #4]
 80073e8:	9300      	str	r3, [sp, #0]
 80073ea:	4603      	mov	r3, r0
 80073ec:	2280      	movs	r2, #128	@ 0x80
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f001 fa54 	bl	800889c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	7959      	ldrb	r1, [r3, #5]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007408:	9202      	str	r2, [sp, #8]
 800740a:	2200      	movs	r2, #0
 800740c:	9201      	str	r2, [sp, #4]
 800740e:	9300      	str	r3, [sp, #0]
 8007410:	4603      	mov	r3, r0
 8007412:	2200      	movs	r2, #0
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f001 fa41 	bl	800889c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800741a:	e113      	b.n	8007644 <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 f917 	bl	8007650 <USBH_HandleEnum>
 8007422:	4603      	mov	r3, r0
 8007424:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007426:	7bbb      	ldrb	r3, [r7, #14]
 8007428:	b2db      	uxtb	r3, r3
 800742a:	2b00      	cmp	r3, #0
 800742c:	f040 80fd 	bne.w	800762a <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800743e:	2b01      	cmp	r3, #1
 8007440:	d103      	bne.n	800744a <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2208      	movs	r2, #8
 8007446:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8007448:	e0ef      	b.n	800762a <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2207      	movs	r2, #7
 800744e:	701a      	strb	r2, [r3, #0]
      break;
 8007450:	e0eb      	b.n	800762a <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007458:	2b00      	cmp	r3, #0
 800745a:	f000 80e8 	beq.w	800762e <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007464:	2101      	movs	r1, #1
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2208      	movs	r2, #8
 800746e:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 8007470:	e0dd      	b.n	800762e <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007478:	4619      	mov	r1, r3
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 fc3f 	bl	8007cfe <USBH_SetCfg>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	f040 80d5 	bne.w	8007632 <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2209      	movs	r2, #9
 800748c:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800748e:	e0d0      	b.n	8007632 <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007496:	f003 0320 	and.w	r3, r3, #32
 800749a:	2b00      	cmp	r3, #0
 800749c:	d016      	beq.n	80074cc <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800749e:	2101      	movs	r1, #1
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 fc4f 	bl	8007d44 <USBH_SetFeature>
 80074a6:	4603      	mov	r3, r0
 80074a8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80074aa:	7bbb      	ldrb	r3, [r7, #14]
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d103      	bne.n	80074ba <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	220a      	movs	r2, #10
 80074b6:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80074b8:	e0bd      	b.n	8007636 <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 80074ba:	7bbb      	ldrb	r3, [r7, #14]
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	2b03      	cmp	r3, #3
 80074c0:	f040 80b9 	bne.w	8007636 <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	220a      	movs	r2, #10
 80074c8:	701a      	strb	r2, [r3, #0]
      break;
 80074ca:	e0b4      	b.n	8007636 <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	220a      	movs	r2, #10
 80074d0:	701a      	strb	r2, [r3, #0]
      break;
 80074d2:	e0b0      	b.n	8007636 <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f000 80ad 	beq.w	800763a <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80074e8:	2300      	movs	r3, #0
 80074ea:	73fb      	strb	r3, [r7, #15]
 80074ec:	e016      	b.n	800751c <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80074ee:	7bfa      	ldrb	r2, [r7, #15]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	32de      	adds	r2, #222	@ 0xde
 80074f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074f8:	791a      	ldrb	r2, [r3, #4]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007500:	429a      	cmp	r2, r3
 8007502:	d108      	bne.n	8007516 <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007504:	7bfa      	ldrb	r2, [r7, #15]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	32de      	adds	r2, #222	@ 0xde
 800750a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007514:	e005      	b.n	8007522 <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007516:	7bfb      	ldrb	r3, [r7, #15]
 8007518:	3301      	adds	r3, #1
 800751a:	73fb      	strb	r3, [r7, #15]
 800751c:	7bfb      	ldrb	r3, [r7, #15]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d0e5      	beq.n	80074ee <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007528:	2b00      	cmp	r3, #0
 800752a:	d016      	beq.n	800755a <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	4798      	blx	r3
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d109      	bne.n	8007552 <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2206      	movs	r2, #6
 8007542:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800754a:	2103      	movs	r1, #3
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007550:	e073      	b.n	800763a <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	220d      	movs	r2, #13
 8007556:	701a      	strb	r2, [r3, #0]
      break;
 8007558:	e06f      	b.n	800763a <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	220d      	movs	r2, #13
 800755e:	701a      	strb	r2, [r3, #0]
      break;
 8007560:	e06b      	b.n	800763a <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007568:	2b00      	cmp	r3, #0
 800756a:	d017      	beq.n	800759c <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	4798      	blx	r3
 8007578:	4603      	mov	r3, r0
 800757a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800757c:	7bbb      	ldrb	r3, [r7, #14]
 800757e:	b2db      	uxtb	r3, r3
 8007580:	2b00      	cmp	r3, #0
 8007582:	d103      	bne.n	800758c <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	220b      	movs	r2, #11
 8007588:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800758a:	e058      	b.n	800763e <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 800758c:	7bbb      	ldrb	r3, [r7, #14]
 800758e:	b2db      	uxtb	r3, r3
 8007590:	2b02      	cmp	r3, #2
 8007592:	d154      	bne.n	800763e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	220d      	movs	r2, #13
 8007598:	701a      	strb	r2, [r3, #0]
      break;
 800759a:	e050      	b.n	800763e <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	220d      	movs	r2, #13
 80075a0:	701a      	strb	r2, [r3, #0]
      break;
 80075a2:	e04c      	b.n	800763e <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d049      	beq.n	8007642 <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075b4:	695b      	ldr	r3, [r3, #20]
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	4798      	blx	r3
      }
      break;
 80075ba:	e042      	b.n	8007642 <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f7ff fd4b 	bl	8007060 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d009      	beq.n	80075e8 <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d005      	beq.n	80075fe <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80075f8:	2105      	movs	r1, #5
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007604:	b2db      	uxtb	r3, r3
 8007606:	2b01      	cmp	r3, #1
 8007608:	d107      	bne.n	800761a <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f7ff fe21 	bl	800725a <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007618:	e014      	b.n	8007644 <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f001 fb20 	bl	8008c60 <USBH_LL_Start>
      break;
 8007620:	e010      	b.n	8007644 <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 8007622:	bf00      	nop
 8007624:	e00e      	b.n	8007644 <USBH_Process+0x3c8>
      break;
 8007626:	bf00      	nop
 8007628:	e00c      	b.n	8007644 <USBH_Process+0x3c8>
      break;
 800762a:	bf00      	nop
 800762c:	e00a      	b.n	8007644 <USBH_Process+0x3c8>
    break;
 800762e:	bf00      	nop
 8007630:	e008      	b.n	8007644 <USBH_Process+0x3c8>
      break;
 8007632:	bf00      	nop
 8007634:	e006      	b.n	8007644 <USBH_Process+0x3c8>
      break;
 8007636:	bf00      	nop
 8007638:	e004      	b.n	8007644 <USBH_Process+0x3c8>
      break;
 800763a:	bf00      	nop
 800763c:	e002      	b.n	8007644 <USBH_Process+0x3c8>
      break;
 800763e:	bf00      	nop
 8007640:	e000      	b.n	8007644 <USBH_Process+0x3c8>
      break;
 8007642:	bf00      	nop
  }
  return USBH_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop

08007650 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b088      	sub	sp, #32
 8007654:	af04      	add	r7, sp, #16
 8007656:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007658:	2301      	movs	r3, #1
 800765a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800765c:	2301      	movs	r3, #1
 800765e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	785b      	ldrb	r3, [r3, #1]
 8007664:	2b07      	cmp	r3, #7
 8007666:	f200 81bd 	bhi.w	80079e4 <USBH_HandleEnum+0x394>
 800766a:	a201      	add	r2, pc, #4	@ (adr r2, 8007670 <USBH_HandleEnum+0x20>)
 800766c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007670:	08007691 	.word	0x08007691
 8007674:	0800774b 	.word	0x0800774b
 8007678:	080077b5 	.word	0x080077b5
 800767c:	0800783f 	.word	0x0800783f
 8007680:	080078a9 	.word	0x080078a9
 8007684:	08007919 	.word	0x08007919
 8007688:	0800795f 	.word	0x0800795f
 800768c:	080079a5 	.word	0x080079a5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007690:	2108      	movs	r1, #8
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 fa50 	bl	8007b38 <USBH_Get_DevDesc>
 8007698:	4603      	mov	r3, r0
 800769a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800769c:	7bbb      	ldrb	r3, [r7, #14]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d12e      	bne.n	8007700 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	7919      	ldrb	r1, [r3, #4]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80076c6:	9202      	str	r2, [sp, #8]
 80076c8:	2200      	movs	r2, #0
 80076ca:	9201      	str	r2, [sp, #4]
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	4603      	mov	r3, r0
 80076d0:	2280      	movs	r2, #128	@ 0x80
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f001 f8e2 	bl	800889c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	7959      	ldrb	r1, [r3, #5]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80076ec:	9202      	str	r2, [sp, #8]
 80076ee:	2200      	movs	r2, #0
 80076f0:	9201      	str	r2, [sp, #4]
 80076f2:	9300      	str	r3, [sp, #0]
 80076f4:	4603      	mov	r3, r0
 80076f6:	2200      	movs	r2, #0
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f001 f8cf 	bl	800889c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80076fe:	e173      	b.n	80079e8 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007700:	7bbb      	ldrb	r3, [r7, #14]
 8007702:	2b03      	cmp	r3, #3
 8007704:	f040 8170 	bne.w	80079e8 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800770e:	3301      	adds	r3, #1
 8007710:	b2da      	uxtb	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800771e:	2b03      	cmp	r3, #3
 8007720:	d903      	bls.n	800772a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	220d      	movs	r2, #13
 8007726:	701a      	strb	r2, [r3, #0]
      break;
 8007728:	e15e      	b.n	80079e8 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	795b      	ldrb	r3, [r3, #5]
 800772e:	4619      	mov	r1, r3
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f001 f903 	bl	800893c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	791b      	ldrb	r3, [r3, #4]
 800773a:	4619      	mov	r1, r3
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f001 f8fd 	bl	800893c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	701a      	strb	r2, [r3, #0]
      break;
 8007748:	e14e      	b.n	80079e8 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800774a:	2112      	movs	r1, #18
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 f9f3 	bl	8007b38 <USBH_Get_DevDesc>
 8007752:	4603      	mov	r3, r0
 8007754:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007756:	7bbb      	ldrb	r3, [r7, #14]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d103      	bne.n	8007764 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2202      	movs	r2, #2
 8007760:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007762:	e143      	b.n	80079ec <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007764:	7bbb      	ldrb	r3, [r7, #14]
 8007766:	2b03      	cmp	r3, #3
 8007768:	f040 8140 	bne.w	80079ec <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007772:	3301      	adds	r3, #1
 8007774:	b2da      	uxtb	r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007782:	2b03      	cmp	r3, #3
 8007784:	d903      	bls.n	800778e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	220d      	movs	r2, #13
 800778a:	701a      	strb	r2, [r3, #0]
      break;
 800778c:	e12e      	b.n	80079ec <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	795b      	ldrb	r3, [r3, #5]
 8007792:	4619      	mov	r1, r3
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f001 f8d1 	bl	800893c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	791b      	ldrb	r3, [r3, #4]
 800779e:	4619      	mov	r1, r3
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f001 f8cb 	bl	800893c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	701a      	strb	r2, [r3, #0]
      break;
 80077b2:	e11b      	b.n	80079ec <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80077b4:	2101      	movs	r1, #1
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 fa7d 	bl	8007cb6 <USBH_SetAddress>
 80077bc:	4603      	mov	r3, r0
 80077be:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077c0:	7bbb      	ldrb	r3, [r7, #14]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d130      	bne.n	8007828 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80077c6:	2002      	movs	r0, #2
 80077c8:	f001 fbb1 	bl	8008f2e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2203      	movs	r2, #3
 80077d8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	7919      	ldrb	r1, [r3, #4]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80077ee:	9202      	str	r2, [sp, #8]
 80077f0:	2200      	movs	r2, #0
 80077f2:	9201      	str	r2, [sp, #4]
 80077f4:	9300      	str	r3, [sp, #0]
 80077f6:	4603      	mov	r3, r0
 80077f8:	2280      	movs	r2, #128	@ 0x80
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f001 f84e 	bl	800889c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	7959      	ldrb	r1, [r3, #5]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007814:	9202      	str	r2, [sp, #8]
 8007816:	2200      	movs	r2, #0
 8007818:	9201      	str	r2, [sp, #4]
 800781a:	9300      	str	r3, [sp, #0]
 800781c:	4603      	mov	r3, r0
 800781e:	2200      	movs	r2, #0
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f001 f83b 	bl	800889c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007826:	e0e3      	b.n	80079f0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007828:	7bbb      	ldrb	r3, [r7, #14]
 800782a:	2b03      	cmp	r3, #3
 800782c:	f040 80e0 	bne.w	80079f0 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	220d      	movs	r2, #13
 8007834:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	705a      	strb	r2, [r3, #1]
      break;
 800783c:	e0d8      	b.n	80079f0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800783e:	2109      	movs	r1, #9
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f9a5 	bl	8007b90 <USBH_Get_CfgDesc>
 8007846:	4603      	mov	r3, r0
 8007848:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800784a:	7bbb      	ldrb	r3, [r7, #14]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d103      	bne.n	8007858 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2204      	movs	r2, #4
 8007854:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007856:	e0cd      	b.n	80079f4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007858:	7bbb      	ldrb	r3, [r7, #14]
 800785a:	2b03      	cmp	r3, #3
 800785c:	f040 80ca 	bne.w	80079f4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007866:	3301      	adds	r3, #1
 8007868:	b2da      	uxtb	r2, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007876:	2b03      	cmp	r3, #3
 8007878:	d903      	bls.n	8007882 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	220d      	movs	r2, #13
 800787e:	701a      	strb	r2, [r3, #0]
      break;
 8007880:	e0b8      	b.n	80079f4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	795b      	ldrb	r3, [r3, #5]
 8007886:	4619      	mov	r1, r3
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f001 f857 	bl	800893c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	791b      	ldrb	r3, [r3, #4]
 8007892:	4619      	mov	r1, r3
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f001 f851 	bl	800893c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	701a      	strb	r2, [r3, #0]
      break;
 80078a6:	e0a5      	b.n	80079f4 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80078ae:	4619      	mov	r1, r3
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f96d 	bl	8007b90 <USBH_Get_CfgDesc>
 80078b6:	4603      	mov	r3, r0
 80078b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80078ba:	7bbb      	ldrb	r3, [r7, #14]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d103      	bne.n	80078c8 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2205      	movs	r2, #5
 80078c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80078c6:	e097      	b.n	80079f8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078c8:	7bbb      	ldrb	r3, [r7, #14]
 80078ca:	2b03      	cmp	r3, #3
 80078cc:	f040 8094 	bne.w	80079f8 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80078d6:	3301      	adds	r3, #1
 80078d8:	b2da      	uxtb	r2, r3
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80078e6:	2b03      	cmp	r3, #3
 80078e8:	d903      	bls.n	80078f2 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	220d      	movs	r2, #13
 80078ee:	701a      	strb	r2, [r3, #0]
      break;
 80078f0:	e082      	b.n	80079f8 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	795b      	ldrb	r3, [r3, #5]
 80078f6:	4619      	mov	r1, r3
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f001 f81f 	bl	800893c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	791b      	ldrb	r3, [r3, #4]
 8007902:	4619      	mov	r1, r3
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f001 f819 	bl	800893c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	701a      	strb	r2, [r3, #0]
      break;
 8007916:	e06f      	b.n	80079f8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800791e:	2b00      	cmp	r3, #0
 8007920:	d019      	beq.n	8007956 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800792e:	23ff      	movs	r3, #255	@ 0xff
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 f957 	bl	8007be4 <USBH_Get_StringDesc>
 8007936:	4603      	mov	r3, r0
 8007938:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800793a:	7bbb      	ldrb	r3, [r7, #14]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d103      	bne.n	8007948 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2206      	movs	r2, #6
 8007944:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8007946:	e059      	b.n	80079fc <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007948:	7bbb      	ldrb	r3, [r7, #14]
 800794a:	2b03      	cmp	r3, #3
 800794c:	d156      	bne.n	80079fc <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2206      	movs	r2, #6
 8007952:	705a      	strb	r2, [r3, #1]
      break;
 8007954:	e052      	b.n	80079fc <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2206      	movs	r2, #6
 800795a:	705a      	strb	r2, [r3, #1]
      break;
 800795c:	e04e      	b.n	80079fc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007964:	2b00      	cmp	r3, #0
 8007966:	d019      	beq.n	800799c <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007974:	23ff      	movs	r3, #255	@ 0xff
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 f934 	bl	8007be4 <USBH_Get_StringDesc>
 800797c:	4603      	mov	r3, r0
 800797e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007980:	7bbb      	ldrb	r3, [r7, #14]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d103      	bne.n	800798e <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2207      	movs	r2, #7
 800798a:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800798c:	e038      	b.n	8007a00 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800798e:	7bbb      	ldrb	r3, [r7, #14]
 8007990:	2b03      	cmp	r3, #3
 8007992:	d135      	bne.n	8007a00 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2207      	movs	r2, #7
 8007998:	705a      	strb	r2, [r3, #1]
      break;
 800799a:	e031      	b.n	8007a00 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2207      	movs	r2, #7
 80079a0:	705a      	strb	r2, [r3, #1]
      break;
 80079a2:	e02d      	b.n	8007a00 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d017      	beq.n	80079de <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80079ba:	23ff      	movs	r3, #255	@ 0xff
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 f911 	bl	8007be4 <USBH_Get_StringDesc>
 80079c2:	4603      	mov	r3, r0
 80079c4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80079c6:	7bbb      	ldrb	r3, [r7, #14]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d102      	bne.n	80079d2 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80079cc:	2300      	movs	r3, #0
 80079ce:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80079d0:	e018      	b.n	8007a04 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079d2:	7bbb      	ldrb	r3, [r7, #14]
 80079d4:	2b03      	cmp	r3, #3
 80079d6:	d115      	bne.n	8007a04 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 80079d8:	2300      	movs	r3, #0
 80079da:	73fb      	strb	r3, [r7, #15]
      break;
 80079dc:	e012      	b.n	8007a04 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 80079de:	2300      	movs	r3, #0
 80079e0:	73fb      	strb	r3, [r7, #15]
      break;
 80079e2:	e00f      	b.n	8007a04 <USBH_HandleEnum+0x3b4>

    default:
      break;
 80079e4:	bf00      	nop
 80079e6:	e00e      	b.n	8007a06 <USBH_HandleEnum+0x3b6>
      break;
 80079e8:	bf00      	nop
 80079ea:	e00c      	b.n	8007a06 <USBH_HandleEnum+0x3b6>
      break;
 80079ec:	bf00      	nop
 80079ee:	e00a      	b.n	8007a06 <USBH_HandleEnum+0x3b6>
      break;
 80079f0:	bf00      	nop
 80079f2:	e008      	b.n	8007a06 <USBH_HandleEnum+0x3b6>
      break;
 80079f4:	bf00      	nop
 80079f6:	e006      	b.n	8007a06 <USBH_HandleEnum+0x3b6>
      break;
 80079f8:	bf00      	nop
 80079fa:	e004      	b.n	8007a06 <USBH_HandleEnum+0x3b6>
      break;
 80079fc:	bf00      	nop
 80079fe:	e002      	b.n	8007a06 <USBH_HandleEnum+0x3b6>
      break;
 8007a00:	bf00      	nop
 8007a02:	e000      	b.n	8007a06 <USBH_HandleEnum+0x3b6>
      break;
 8007a04:	bf00      	nop
  }
  return Status;
 8007a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	683a      	ldr	r2, [r7, #0]
 8007a1e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007a22:	bf00      	nop
 8007a24:	370c      	adds	r7, #12
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr

08007a2e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007a2e:	b580      	push	{r7, lr}
 8007a30:	b082      	sub	sp, #8
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007a3c:	1c5a      	adds	r2, r3, #1
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 f804 	bl	8007a52 <USBH_HandleSof>
}
 8007a4a:	bf00      	nop
 8007a4c:	3708      	adds	r7, #8
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b082      	sub	sp, #8
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	2b0b      	cmp	r3, #11
 8007a62:	d10a      	bne.n	8007a7a <USBH_HandleSof+0x28>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d005      	beq.n	8007a7a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a74:	699b      	ldr	r3, [r3, #24]
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	4798      	blx	r3
  }
}
 8007a7a:	bf00      	nop
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007a82:	b480      	push	{r7}
 8007a84:	b083      	sub	sp, #12
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 8007a92:	bf00      	nop
}
 8007a94:	370c      	adds	r7, #12
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr

08007a9e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	b083      	sub	sp, #12
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8007ab6:	bf00      	nop
}
 8007ab8:	370c      	adds	r7, #12
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr

08007ac2 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007ac2:	b480      	push	{r7}
 8007ac4:	b083      	sub	sp, #12
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	370c      	adds	r7, #12
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2201      	movs	r2, #1
 8007afc:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f001 f8c0 	bl	8008c96 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	791b      	ldrb	r3, [r3, #4]
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 ff0d 	bl	800893c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	795b      	ldrb	r3, [r3, #5]
 8007b26:	4619      	mov	r1, r3
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 ff07 	bl	800893c <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3708      	adds	r7, #8
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b086      	sub	sp, #24
 8007b3c:	af02      	add	r7, sp, #8
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	460b      	mov	r3, r1
 8007b42:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007b44:	887b      	ldrh	r3, [r7, #2]
 8007b46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b4a:	d901      	bls.n	8007b50 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	e01b      	b.n	8007b88 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007b56:	887b      	ldrh	r3, [r7, #2]
 8007b58:	9300      	str	r3, [sp, #0]
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007b60:	2100      	movs	r1, #0
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 f872 	bl	8007c4c <USBH_GetDescriptor>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007b6c:	7bfb      	ldrb	r3, [r7, #15]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d109      	bne.n	8007b86 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007b78:	887a      	ldrh	r2, [r7, #2]
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 f929 	bl	8007dd4 <USBH_ParseDevDesc>
 8007b82:	4603      	mov	r3, r0
 8007b84:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b086      	sub	sp, #24
 8007b94:	af02      	add	r7, sp, #8
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	460b      	mov	r3, r1
 8007b9a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	331c      	adds	r3, #28
 8007ba0:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007ba2:	887b      	ldrh	r3, [r7, #2]
 8007ba4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ba8:	d901      	bls.n	8007bae <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007baa:	2303      	movs	r3, #3
 8007bac:	e016      	b.n	8007bdc <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007bae:	887b      	ldrh	r3, [r7, #2]
 8007bb0:	9300      	str	r3, [sp, #0]
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007bb8:	2100      	movs	r1, #0
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 f846 	bl	8007c4c <USBH_GetDescriptor>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007bc4:	7bfb      	ldrb	r3, [r7, #15]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d107      	bne.n	8007bda <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007bca:	887b      	ldrh	r3, [r7, #2]
 8007bcc:	461a      	mov	r2, r3
 8007bce:	68b9      	ldr	r1, [r7, #8]
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 f9af 	bl	8007f34 <USBH_ParseCfgDesc>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3710      	adds	r7, #16
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b088      	sub	sp, #32
 8007be8:	af02      	add	r7, sp, #8
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	607a      	str	r2, [r7, #4]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	72fb      	strb	r3, [r7, #11]
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007bf8:	893b      	ldrh	r3, [r7, #8]
 8007bfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bfe:	d802      	bhi.n	8007c06 <USBH_Get_StringDesc+0x22>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d101      	bne.n	8007c0a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007c06:	2303      	movs	r3, #3
 8007c08:	e01c      	b.n	8007c44 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007c0a:	7afb      	ldrb	r3, [r7, #11]
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007c12:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007c1a:	893b      	ldrh	r3, [r7, #8]
 8007c1c:	9300      	str	r3, [sp, #0]
 8007c1e:	460b      	mov	r3, r1
 8007c20:	2100      	movs	r1, #0
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f000 f812 	bl	8007c4c <USBH_GetDescriptor>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007c2c:	7dfb      	ldrb	r3, [r7, #23]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d107      	bne.n	8007c42 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007c38:	893a      	ldrh	r2, [r7, #8]
 8007c3a:	6879      	ldr	r1, [r7, #4]
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f000 fb8c 	bl	800835a <USBH_ParseStringDesc>
  }

  return status;
 8007c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3718      	adds	r7, #24
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	607b      	str	r3, [r7, #4]
 8007c56:	460b      	mov	r3, r1
 8007c58:	72fb      	strb	r3, [r7, #11]
 8007c5a:	4613      	mov	r3, r2
 8007c5c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	789b      	ldrb	r3, [r3, #2]
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d11c      	bne.n	8007ca0 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007c66:	7afb      	ldrb	r3, [r7, #11]
 8007c68:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007c6c:	b2da      	uxtb	r2, r3
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2206      	movs	r2, #6
 8007c76:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	893a      	ldrh	r2, [r7, #8]
 8007c7c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007c7e:	893b      	ldrh	r3, [r7, #8]
 8007c80:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007c84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c88:	d104      	bne.n	8007c94 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f240 4209 	movw	r2, #1033	@ 0x409
 8007c90:	829a      	strh	r2, [r3, #20]
 8007c92:	e002      	b.n	8007c9a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2200      	movs	r2, #0
 8007c98:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	8b3a      	ldrh	r2, [r7, #24]
 8007c9e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007ca0:	8b3b      	ldrh	r3, [r7, #24]
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	6879      	ldr	r1, [r7, #4]
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	f000 fba4 	bl	80083f4 <USBH_CtlReq>
 8007cac:	4603      	mov	r3, r0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b082      	sub	sp, #8
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	789b      	ldrb	r3, [r3, #2]
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d10f      	bne.n	8007cea <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2205      	movs	r2, #5
 8007cd4:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007cd6:	78fb      	ldrb	r3, [r7, #3]
 8007cd8:	b29a      	uxth	r2, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007cea:	2200      	movs	r2, #0
 8007cec:	2100      	movs	r1, #0
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 fb80 	bl	80083f4 <USBH_CtlReq>
 8007cf4:	4603      	mov	r3, r0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3708      	adds	r7, #8
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b082      	sub	sp, #8
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
 8007d06:	460b      	mov	r3, r1
 8007d08:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	789b      	ldrb	r3, [r3, #2]
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d10e      	bne.n	8007d30 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2209      	movs	r2, #9
 8007d1c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	887a      	ldrh	r2, [r7, #2]
 8007d22:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007d30:	2200      	movs	r2, #0
 8007d32:	2100      	movs	r1, #0
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 fb5d 	bl	80083f4 <USBH_CtlReq>
 8007d3a:	4603      	mov	r3, r0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3708      	adds	r7, #8
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	789b      	ldrb	r3, [r3, #2]
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d10f      	bne.n	8007d78 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2203      	movs	r2, #3
 8007d62:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007d64:	78fb      	ldrb	r3, [r7, #3]
 8007d66:	b29a      	uxth	r2, r3
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007d78:	2200      	movs	r2, #0
 8007d7a:	2100      	movs	r1, #0
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 fb39 	bl	80083f4 <USBH_CtlReq>
 8007d82:	4603      	mov	r3, r0
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3708      	adds	r7, #8
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	460b      	mov	r3, r1
 8007d96:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	789b      	ldrb	r3, [r3, #2]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d10f      	bne.n	8007dc0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2202      	movs	r2, #2
 8007da4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2201      	movs	r2, #1
 8007daa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007db2:	78fb      	ldrb	r3, [r7, #3]
 8007db4:	b29a      	uxth	r2, r3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	2100      	movs	r1, #0
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 fb15 	bl	80083f4 <USBH_CtlReq>
 8007dca:	4603      	mov	r3, r0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3708      	adds	r7, #8
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b087      	sub	sp, #28
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	4613      	mov	r3, r2
 8007de0:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007de8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8007dea:	2300      	movs	r3, #0
 8007dec:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d101      	bne.n	8007df8 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007df4:	2302      	movs	r3, #2
 8007df6:	e094      	b.n	8007f22 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	781a      	ldrb	r2, [r3, #0]
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	785a      	ldrb	r2, [r3, #1]
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	3302      	adds	r3, #2
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	461a      	mov	r2, r3
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	3303      	adds	r3, #3
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	021b      	lsls	r3, r3, #8
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	791a      	ldrb	r2, [r3, #4]
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	795a      	ldrb	r2, [r3, #5]
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	799a      	ldrb	r2, [r3, #6]
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	79da      	ldrb	r2, [r3, #7]
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d004      	beq.n	8007e56 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d11b      	bne.n	8007e8e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	79db      	ldrb	r3, [r3, #7]
 8007e5a:	2b20      	cmp	r3, #32
 8007e5c:	dc0f      	bgt.n	8007e7e <USBH_ParseDevDesc+0xaa>
 8007e5e:	2b08      	cmp	r3, #8
 8007e60:	db0f      	blt.n	8007e82 <USBH_ParseDevDesc+0xae>
 8007e62:	3b08      	subs	r3, #8
 8007e64:	4a32      	ldr	r2, [pc, #200]	@ (8007f30 <USBH_ParseDevDesc+0x15c>)
 8007e66:	fa22 f303 	lsr.w	r3, r2, r3
 8007e6a:	f003 0301 	and.w	r3, r3, #1
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	bf14      	ite	ne
 8007e72:	2301      	movne	r3, #1
 8007e74:	2300      	moveq	r3, #0
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d106      	bne.n	8007e8a <USBH_ParseDevDesc+0xb6>
 8007e7c:	e001      	b.n	8007e82 <USBH_ParseDevDesc+0xae>
 8007e7e:	2b40      	cmp	r3, #64	@ 0x40
 8007e80:	d003      	beq.n	8007e8a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	2208      	movs	r2, #8
 8007e86:	71da      	strb	r2, [r3, #7]
        break;
 8007e88:	e000      	b.n	8007e8c <USBH_ParseDevDesc+0xb8>
        break;
 8007e8a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8007e8c:	e00e      	b.n	8007eac <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	d107      	bne.n	8007ea8 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	79db      	ldrb	r3, [r3, #7]
 8007e9c:	2b08      	cmp	r3, #8
 8007e9e:	d005      	beq.n	8007eac <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	2208      	movs	r2, #8
 8007ea4:	71da      	strb	r2, [r3, #7]
 8007ea6:	e001      	b.n	8007eac <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8007eac:	88fb      	ldrh	r3, [r7, #6]
 8007eae:	2b08      	cmp	r3, #8
 8007eb0:	d936      	bls.n	8007f20 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	3308      	adds	r3, #8
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	461a      	mov	r2, r3
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	3309      	adds	r3, #9
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	021b      	lsls	r3, r3, #8
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	b29a      	uxth	r2, r3
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	330a      	adds	r3, #10
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	330b      	adds	r3, #11
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	021b      	lsls	r3, r3, #8
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	b29a      	uxth	r2, r3
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	330c      	adds	r3, #12
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	461a      	mov	r2, r3
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	330d      	adds	r3, #13
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	021b      	lsls	r3, r3, #8
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	b29a      	uxth	r2, r3
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	7b9a      	ldrb	r2, [r3, #14]
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	7bda      	ldrb	r2, [r3, #15]
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	7c1a      	ldrb	r2, [r3, #16]
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	7c5a      	ldrb	r2, [r3, #17]
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8007f20:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	371c      	adds	r7, #28
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	01000101 	.word	0x01000101

08007f34 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b08c      	sub	sp, #48	@ 0x30
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	4613      	mov	r3, r2
 8007f40:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007f48:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007f50:	2300      	movs	r3, #0
 8007f52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8007f56:	2300      	movs	r3, #0
 8007f58:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d101      	bne.n	8007f66 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8007f62:	2302      	movs	r3, #2
 8007f64:	e0de      	b.n	8008124 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8007f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	2b09      	cmp	r3, #9
 8007f70:	d002      	beq.n	8007f78 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f74:	2209      	movs	r2, #9
 8007f76:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	781a      	ldrb	r2, [r3, #0]
 8007f7c:	6a3b      	ldr	r3, [r7, #32]
 8007f7e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	785a      	ldrb	r2, [r3, #1]
 8007f84:	6a3b      	ldr	r3, [r7, #32]
 8007f86:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	3302      	adds	r3, #2
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	461a      	mov	r2, r3
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	3303      	adds	r3, #3
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	021b      	lsls	r3, r3, #8
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fa2:	bf28      	it	cs
 8007fa4:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8007fa8:	b29a      	uxth	r2, r3
 8007faa:	6a3b      	ldr	r3, [r7, #32]
 8007fac:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	791a      	ldrb	r2, [r3, #4]
 8007fb2:	6a3b      	ldr	r3, [r7, #32]
 8007fb4:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	795a      	ldrb	r2, [r3, #5]
 8007fba:	6a3b      	ldr	r3, [r7, #32]
 8007fbc:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	799a      	ldrb	r2, [r3, #6]
 8007fc2:	6a3b      	ldr	r3, [r7, #32]
 8007fc4:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	79da      	ldrb	r2, [r3, #7]
 8007fca:	6a3b      	ldr	r3, [r7, #32]
 8007fcc:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	7a1a      	ldrb	r2, [r3, #8]
 8007fd2:	6a3b      	ldr	r3, [r7, #32]
 8007fd4:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007fd6:	88fb      	ldrh	r3, [r7, #6]
 8007fd8:	2b09      	cmp	r3, #9
 8007fda:	f240 80a1 	bls.w	8008120 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 8007fde:	2309      	movs	r3, #9
 8007fe0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007fe6:	e085      	b.n	80080f4 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007fe8:	f107 0316 	add.w	r3, r7, #22
 8007fec:	4619      	mov	r1, r3
 8007fee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ff0:	f000 f9e6 	bl	80083c0 <USBH_GetNextDesc>
 8007ff4:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ff8:	785b      	ldrb	r3, [r3, #1]
 8007ffa:	2b04      	cmp	r3, #4
 8007ffc:	d17a      	bne.n	80080f4 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	2b09      	cmp	r3, #9
 8008004:	d002      	beq.n	800800c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008008:	2209      	movs	r2, #9
 800800a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800800c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008010:	221a      	movs	r2, #26
 8008012:	fb02 f303 	mul.w	r3, r2, r3
 8008016:	3308      	adds	r3, #8
 8008018:	6a3a      	ldr	r2, [r7, #32]
 800801a:	4413      	add	r3, r2
 800801c:	3302      	adds	r3, #2
 800801e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008020:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008022:	69f8      	ldr	r0, [r7, #28]
 8008024:	f000 f882 	bl	800812c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008028:	2300      	movs	r3, #0
 800802a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800802e:	2300      	movs	r3, #0
 8008030:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008032:	e043      	b.n	80080bc <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008034:	f107 0316 	add.w	r3, r7, #22
 8008038:	4619      	mov	r1, r3
 800803a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800803c:	f000 f9c0 	bl	80083c0 <USBH_GetNextDesc>
 8008040:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008044:	785b      	ldrb	r3, [r3, #1]
 8008046:	2b05      	cmp	r3, #5
 8008048:	d138      	bne.n	80080bc <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	795b      	ldrb	r3, [r3, #5]
 800804e:	2b01      	cmp	r3, #1
 8008050:	d113      	bne.n	800807a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008052:	69fb      	ldr	r3, [r7, #28]
 8008054:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008056:	2b02      	cmp	r3, #2
 8008058:	d003      	beq.n	8008062 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	799b      	ldrb	r3, [r3, #6]
 800805e:	2b03      	cmp	r3, #3
 8008060:	d10b      	bne.n	800807a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008062:	69fb      	ldr	r3, [r7, #28]
 8008064:	79db      	ldrb	r3, [r3, #7]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d10b      	bne.n	8008082 <USBH_ParseCfgDesc+0x14e>
 800806a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	2b09      	cmp	r3, #9
 8008070:	d007      	beq.n	8008082 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8008072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008074:	2209      	movs	r2, #9
 8008076:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008078:	e003      	b.n	8008082 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800807a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800807c:	2207      	movs	r2, #7
 800807e:	701a      	strb	r2, [r3, #0]
 8008080:	e000      	b.n	8008084 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008082:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008084:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008088:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800808c:	3201      	adds	r2, #1
 800808e:	00d2      	lsls	r2, r2, #3
 8008090:	211a      	movs	r1, #26
 8008092:	fb01 f303 	mul.w	r3, r1, r3
 8008096:	4413      	add	r3, r2
 8008098:	3308      	adds	r3, #8
 800809a:	6a3a      	ldr	r2, [r7, #32]
 800809c:	4413      	add	r3, r2
 800809e:	3304      	adds	r3, #4
 80080a0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80080a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80080a4:	69b9      	ldr	r1, [r7, #24]
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f000 f86f 	bl	800818a <USBH_ParseEPDesc>
 80080ac:	4603      	mov	r3, r0
 80080ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80080b2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80080b6:	3301      	adds	r3, #1
 80080b8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80080bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d80a      	bhi.n	80080da <USBH_ParseCfgDesc+0x1a6>
 80080c4:	69fb      	ldr	r3, [r7, #28]
 80080c6:	791b      	ldrb	r3, [r3, #4]
 80080c8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d204      	bcs.n	80080da <USBH_ParseCfgDesc+0x1a6>
 80080d0:	6a3b      	ldr	r3, [r7, #32]
 80080d2:	885a      	ldrh	r2, [r3, #2]
 80080d4:	8afb      	ldrh	r3, [r7, #22]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d8ac      	bhi.n	8008034 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	791b      	ldrb	r3, [r3, #4]
 80080de:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d201      	bcs.n	80080ea <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 80080e6:	2303      	movs	r3, #3
 80080e8:	e01c      	b.n	8008124 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 80080ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080ee:	3301      	adds	r3, #1
 80080f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80080f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d805      	bhi.n	8008108 <USBH_ParseCfgDesc+0x1d4>
 80080fc:	6a3b      	ldr	r3, [r7, #32]
 80080fe:	885a      	ldrh	r2, [r3, #2]
 8008100:	8afb      	ldrh	r3, [r7, #22]
 8008102:	429a      	cmp	r2, r3
 8008104:	f63f af70 	bhi.w	8007fe8 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008108:	6a3b      	ldr	r3, [r7, #32]
 800810a:	791b      	ldrb	r3, [r3, #4]
 800810c:	2b02      	cmp	r3, #2
 800810e:	bf28      	it	cs
 8008110:	2302      	movcs	r3, #2
 8008112:	b2db      	uxtb	r3, r3
 8008114:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008118:	429a      	cmp	r2, r3
 800811a:	d201      	bcs.n	8008120 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 800811c:	2303      	movs	r3, #3
 800811e:	e001      	b.n	8008124 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 8008120:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008124:	4618      	mov	r0, r3
 8008126:	3730      	adds	r7, #48	@ 0x30
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	781a      	ldrb	r2, [r3, #0]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	785a      	ldrb	r2, [r3, #1]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	789a      	ldrb	r2, [r3, #2]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	78da      	ldrb	r2, [r3, #3]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	791a      	ldrb	r2, [r3, #4]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	795a      	ldrb	r2, [r3, #5]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	799a      	ldrb	r2, [r3, #6]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	79da      	ldrb	r2, [r3, #7]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	7a1a      	ldrb	r2, [r3, #8]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	721a      	strb	r2, [r3, #8]
}
 800817e:	bf00      	nop
 8008180:	370c      	adds	r7, #12
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr

0800818a <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800818a:	b480      	push	{r7}
 800818c:	b087      	sub	sp, #28
 800818e:	af00      	add	r7, sp, #0
 8008190:	60f8      	str	r0, [r7, #12]
 8008192:	60b9      	str	r1, [r7, #8]
 8008194:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008196:	2300      	movs	r3, #0
 8008198:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	781a      	ldrb	r2, [r3, #0]
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	785a      	ldrb	r2, [r3, #1]
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	789a      	ldrb	r2, [r3, #2]
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	78da      	ldrb	r2, [r3, #3]
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	3304      	adds	r3, #4
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	461a      	mov	r2, r3
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	3305      	adds	r3, #5
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	021b      	lsls	r3, r3, #8
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	4313      	orrs	r3, r2
 80081ce:	b29a      	uxth	r2, r3
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	799a      	ldrb	r2, [r3, #6]
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	889b      	ldrh	r3, [r3, #4]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d009      	beq.n	80081f8 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80081e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081ec:	d804      	bhi.n	80081f8 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80081f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081f6:	d901      	bls.n	80081fc <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80081f8:	2303      	movs	r3, #3
 80081fa:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008202:	2b00      	cmp	r3, #0
 8008204:	d136      	bne.n	8008274 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	78db      	ldrb	r3, [r3, #3]
 800820a:	f003 0303 	and.w	r3, r3, #3
 800820e:	2b02      	cmp	r3, #2
 8008210:	d108      	bne.n	8008224 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	889b      	ldrh	r3, [r3, #4]
 8008216:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800821a:	f240 8097 	bls.w	800834c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800821e:	2303      	movs	r3, #3
 8008220:	75fb      	strb	r3, [r7, #23]
 8008222:	e093      	b.n	800834c <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	78db      	ldrb	r3, [r3, #3]
 8008228:	f003 0303 	and.w	r3, r3, #3
 800822c:	2b00      	cmp	r3, #0
 800822e:	d107      	bne.n	8008240 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	889b      	ldrh	r3, [r3, #4]
 8008234:	2b40      	cmp	r3, #64	@ 0x40
 8008236:	f240 8089 	bls.w	800834c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800823a:	2303      	movs	r3, #3
 800823c:	75fb      	strb	r3, [r7, #23]
 800823e:	e085      	b.n	800834c <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	78db      	ldrb	r3, [r3, #3]
 8008244:	f003 0303 	and.w	r3, r3, #3
 8008248:	2b01      	cmp	r3, #1
 800824a:	d005      	beq.n	8008258 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	78db      	ldrb	r3, [r3, #3]
 8008250:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008254:	2b03      	cmp	r3, #3
 8008256:	d10a      	bne.n	800826e <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	799b      	ldrb	r3, [r3, #6]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d003      	beq.n	8008268 <USBH_ParseEPDesc+0xde>
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	799b      	ldrb	r3, [r3, #6]
 8008264:	2b10      	cmp	r3, #16
 8008266:	d970      	bls.n	800834a <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008268:	2303      	movs	r3, #3
 800826a:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800826c:	e06d      	b.n	800834a <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800826e:	2303      	movs	r3, #3
 8008270:	75fb      	strb	r3, [r7, #23]
 8008272:	e06b      	b.n	800834c <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800827a:	2b01      	cmp	r3, #1
 800827c:	d13c      	bne.n	80082f8 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	78db      	ldrb	r3, [r3, #3]
 8008282:	f003 0303 	and.w	r3, r3, #3
 8008286:	2b02      	cmp	r3, #2
 8008288:	d005      	beq.n	8008296 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	78db      	ldrb	r3, [r3, #3]
 800828e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008292:	2b00      	cmp	r3, #0
 8008294:	d106      	bne.n	80082a4 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	889b      	ldrh	r3, [r3, #4]
 800829a:	2b40      	cmp	r3, #64	@ 0x40
 800829c:	d956      	bls.n	800834c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800829e:	2303      	movs	r3, #3
 80082a0:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80082a2:	e053      	b.n	800834c <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	78db      	ldrb	r3, [r3, #3]
 80082a8:	f003 0303 	and.w	r3, r3, #3
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d10e      	bne.n	80082ce <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	799b      	ldrb	r3, [r3, #6]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d007      	beq.n	80082c8 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80082bc:	2b10      	cmp	r3, #16
 80082be:	d803      	bhi.n	80082c8 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80082c4:	2b40      	cmp	r3, #64	@ 0x40
 80082c6:	d941      	bls.n	800834c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80082c8:	2303      	movs	r3, #3
 80082ca:	75fb      	strb	r3, [r7, #23]
 80082cc:	e03e      	b.n	800834c <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	78db      	ldrb	r3, [r3, #3]
 80082d2:	f003 0303 	and.w	r3, r3, #3
 80082d6:	2b03      	cmp	r3, #3
 80082d8:	d10b      	bne.n	80082f2 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	799b      	ldrb	r3, [r3, #6]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d004      	beq.n	80082ec <USBH_ParseEPDesc+0x162>
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	889b      	ldrh	r3, [r3, #4]
 80082e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082ea:	d32f      	bcc.n	800834c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80082ec:	2303      	movs	r3, #3
 80082ee:	75fb      	strb	r3, [r7, #23]
 80082f0:	e02c      	b.n	800834c <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80082f2:	2303      	movs	r3, #3
 80082f4:	75fb      	strb	r3, [r7, #23]
 80082f6:	e029      	b.n	800834c <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80082fe:	2b02      	cmp	r3, #2
 8008300:	d120      	bne.n	8008344 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	78db      	ldrb	r3, [r3, #3]
 8008306:	f003 0303 	and.w	r3, r3, #3
 800830a:	2b00      	cmp	r3, #0
 800830c:	d106      	bne.n	800831c <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	889b      	ldrh	r3, [r3, #4]
 8008312:	2b08      	cmp	r3, #8
 8008314:	d01a      	beq.n	800834c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008316:	2303      	movs	r3, #3
 8008318:	75fb      	strb	r3, [r7, #23]
 800831a:	e017      	b.n	800834c <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	78db      	ldrb	r3, [r3, #3]
 8008320:	f003 0303 	and.w	r3, r3, #3
 8008324:	2b03      	cmp	r3, #3
 8008326:	d10a      	bne.n	800833e <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	799b      	ldrb	r3, [r3, #6]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d003      	beq.n	8008338 <USBH_ParseEPDesc+0x1ae>
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	889b      	ldrh	r3, [r3, #4]
 8008334:	2b08      	cmp	r3, #8
 8008336:	d909      	bls.n	800834c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008338:	2303      	movs	r3, #3
 800833a:	75fb      	strb	r3, [r7, #23]
 800833c:	e006      	b.n	800834c <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800833e:	2303      	movs	r3, #3
 8008340:	75fb      	strb	r3, [r7, #23]
 8008342:	e003      	b.n	800834c <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008344:	2303      	movs	r3, #3
 8008346:	75fb      	strb	r3, [r7, #23]
 8008348:	e000      	b.n	800834c <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800834a:	bf00      	nop
  }

  return status;
 800834c:	7dfb      	ldrb	r3, [r7, #23]
}
 800834e:	4618      	mov	r0, r3
 8008350:	371c      	adds	r7, #28
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr

0800835a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800835a:	b480      	push	{r7}
 800835c:	b087      	sub	sp, #28
 800835e:	af00      	add	r7, sp, #0
 8008360:	60f8      	str	r0, [r7, #12]
 8008362:	60b9      	str	r1, [r7, #8]
 8008364:	4613      	mov	r3, r2
 8008366:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	3301      	adds	r3, #1
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	2b03      	cmp	r3, #3
 8008370:	d120      	bne.n	80083b4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	1e9a      	subs	r2, r3, #2
 8008378:	88fb      	ldrh	r3, [r7, #6]
 800837a:	4293      	cmp	r3, r2
 800837c:	bf28      	it	cs
 800837e:	4613      	movcs	r3, r2
 8008380:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	3302      	adds	r3, #2
 8008386:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008388:	2300      	movs	r3, #0
 800838a:	82fb      	strh	r3, [r7, #22]
 800838c:	e00b      	b.n	80083a6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800838e:	8afb      	ldrh	r3, [r7, #22]
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	4413      	add	r3, r2
 8008394:	781a      	ldrb	r2, [r3, #0]
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	701a      	strb	r2, [r3, #0]
      pdest++;
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	3301      	adds	r3, #1
 800839e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80083a0:	8afb      	ldrh	r3, [r7, #22]
 80083a2:	3302      	adds	r3, #2
 80083a4:	82fb      	strh	r3, [r7, #22]
 80083a6:	8afa      	ldrh	r2, [r7, #22]
 80083a8:	8abb      	ldrh	r3, [r7, #20]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d3ef      	bcc.n	800838e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	2200      	movs	r2, #0
 80083b2:	701a      	strb	r2, [r3, #0]
  }
}
 80083b4:	bf00      	nop
 80083b6:	371c      	adds	r7, #28
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr

080083c0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b085      	sub	sp, #20
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	881b      	ldrh	r3, [r3, #0]
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	7812      	ldrb	r2, [r2, #0]
 80083d2:	4413      	add	r3, r2
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	4413      	add	r3, r2
 80083e4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80083e6:	68fb      	ldr	r3, [r7, #12]
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3714      	adds	r7, #20
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b086      	sub	sp, #24
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	4613      	mov	r3, r2
 8008400:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008402:	2301      	movs	r3, #1
 8008404:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	789b      	ldrb	r3, [r3, #2]
 800840a:	2b01      	cmp	r3, #1
 800840c:	d002      	beq.n	8008414 <USBH_CtlReq+0x20>
 800840e:	2b02      	cmp	r3, #2
 8008410:	d00f      	beq.n	8008432 <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 8008412:	e027      	b.n	8008464 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	68ba      	ldr	r2, [r7, #8]
 8008418:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	88fa      	ldrh	r2, [r7, #6]
 800841e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2201      	movs	r2, #1
 8008424:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2202      	movs	r2, #2
 800842a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800842c:	2301      	movs	r3, #1
 800842e:	75fb      	strb	r3, [r7, #23]
      break;
 8008430:	e018      	b.n	8008464 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008432:	68f8      	ldr	r0, [r7, #12]
 8008434:	f000 f81c 	bl	8008470 <USBH_HandleControl>
 8008438:	4603      	mov	r3, r0
 800843a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800843c:	7dfb      	ldrb	r3, [r7, #23]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d002      	beq.n	8008448 <USBH_CtlReq+0x54>
 8008442:	7dfb      	ldrb	r3, [r7, #23]
 8008444:	2b03      	cmp	r3, #3
 8008446:	d106      	bne.n	8008456 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2201      	movs	r2, #1
 800844c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2200      	movs	r2, #0
 8008452:	761a      	strb	r2, [r3, #24]
      break;
 8008454:	e005      	b.n	8008462 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008456:	7dfb      	ldrb	r3, [r7, #23]
 8008458:	2b02      	cmp	r3, #2
 800845a:	d102      	bne.n	8008462 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2201      	movs	r2, #1
 8008460:	709a      	strb	r2, [r3, #2]
      break;
 8008462:	bf00      	nop
  }
  return status;
 8008464:	7dfb      	ldrb	r3, [r7, #23]
}
 8008466:	4618      	mov	r0, r3
 8008468:	3718      	adds	r7, #24
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
	...

08008470 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b086      	sub	sp, #24
 8008474:	af02      	add	r7, sp, #8
 8008476:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008478:	2301      	movs	r3, #1
 800847a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800847c:	2300      	movs	r3, #0
 800847e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	7e1b      	ldrb	r3, [r3, #24]
 8008484:	3b01      	subs	r3, #1
 8008486:	2b0a      	cmp	r3, #10
 8008488:	f200 8157 	bhi.w	800873a <USBH_HandleControl+0x2ca>
 800848c:	a201      	add	r2, pc, #4	@ (adr r2, 8008494 <USBH_HandleControl+0x24>)
 800848e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008492:	bf00      	nop
 8008494:	080084c1 	.word	0x080084c1
 8008498:	080084db 	.word	0x080084db
 800849c:	08008545 	.word	0x08008545
 80084a0:	0800856b 	.word	0x0800856b
 80084a4:	080085a5 	.word	0x080085a5
 80084a8:	080085cf 	.word	0x080085cf
 80084ac:	08008621 	.word	0x08008621
 80084b0:	08008643 	.word	0x08008643
 80084b4:	0800867f 	.word	0x0800867f
 80084b8:	080086a5 	.word	0x080086a5
 80084bc:	080086e3 	.word	0x080086e3
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f103 0110 	add.w	r1, r3, #16
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	795b      	ldrb	r3, [r3, #5]
 80084ca:	461a      	mov	r2, r3
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 f945 	bl	800875c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2202      	movs	r2, #2
 80084d6:	761a      	strb	r2, [r3, #24]
      break;
 80084d8:	e13a      	b.n	8008750 <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	795b      	ldrb	r3, [r3, #5]
 80084de:	4619      	mov	r1, r3
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 fcc7 	bl	8008e74 <USBH_LL_GetURBState>
 80084e6:	4603      	mov	r3, r0
 80084e8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80084ea:	7bbb      	ldrb	r3, [r7, #14]
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d11e      	bne.n	800852e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	7c1b      	ldrb	r3, [r3, #16]
 80084f4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80084f8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	8adb      	ldrh	r3, [r3, #22]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d00a      	beq.n	8008518 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008502:	7b7b      	ldrb	r3, [r7, #13]
 8008504:	2b80      	cmp	r3, #128	@ 0x80
 8008506:	d103      	bne.n	8008510 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2203      	movs	r2, #3
 800850c:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800850e:	e116      	b.n	800873e <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2205      	movs	r2, #5
 8008514:	761a      	strb	r2, [r3, #24]
      break;
 8008516:	e112      	b.n	800873e <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 8008518:	7b7b      	ldrb	r3, [r7, #13]
 800851a:	2b80      	cmp	r3, #128	@ 0x80
 800851c:	d103      	bne.n	8008526 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2209      	movs	r2, #9
 8008522:	761a      	strb	r2, [r3, #24]
      break;
 8008524:	e10b      	b.n	800873e <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2207      	movs	r2, #7
 800852a:	761a      	strb	r2, [r3, #24]
      break;
 800852c:	e107      	b.n	800873e <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800852e:	7bbb      	ldrb	r3, [r7, #14]
 8008530:	2b04      	cmp	r3, #4
 8008532:	d003      	beq.n	800853c <USBH_HandleControl+0xcc>
 8008534:	7bbb      	ldrb	r3, [r7, #14]
 8008536:	2b02      	cmp	r3, #2
 8008538:	f040 8101 	bne.w	800873e <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	220b      	movs	r2, #11
 8008540:	761a      	strb	r2, [r3, #24]
      break;
 8008542:	e0fc      	b.n	800873e <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800854a:	b29a      	uxth	r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6899      	ldr	r1, [r3, #8]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	899a      	ldrh	r2, [r3, #12]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	791b      	ldrb	r3, [r3, #4]
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 f93c 	bl	80087da <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2204      	movs	r2, #4
 8008566:	761a      	strb	r2, [r3, #24]
      break;
 8008568:	e0f2      	b.n	8008750 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	791b      	ldrb	r3, [r3, #4]
 800856e:	4619      	mov	r1, r3
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 fc7f 	bl	8008e74 <USBH_LL_GetURBState>
 8008576:	4603      	mov	r3, r0
 8008578:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800857a:	7bbb      	ldrb	r3, [r7, #14]
 800857c:	2b01      	cmp	r3, #1
 800857e:	d103      	bne.n	8008588 <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2209      	movs	r2, #9
 8008584:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8008586:	e0dc      	b.n	8008742 <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 8008588:	7bbb      	ldrb	r3, [r7, #14]
 800858a:	2b05      	cmp	r3, #5
 800858c:	d102      	bne.n	8008594 <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 800858e:	2303      	movs	r3, #3
 8008590:	73fb      	strb	r3, [r7, #15]
      break;
 8008592:	e0d6      	b.n	8008742 <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 8008594:	7bbb      	ldrb	r3, [r7, #14]
 8008596:	2b04      	cmp	r3, #4
 8008598:	f040 80d3 	bne.w	8008742 <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	220b      	movs	r2, #11
 80085a0:	761a      	strb	r2, [r3, #24]
      break;
 80085a2:	e0ce      	b.n	8008742 <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6899      	ldr	r1, [r3, #8]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	899a      	ldrh	r2, [r3, #12]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	795b      	ldrb	r3, [r3, #5]
 80085b0:	2001      	movs	r0, #1
 80085b2:	9000      	str	r0, [sp, #0]
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 f8eb 	bl	8008790 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80085c0:	b29a      	uxth	r2, r3
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2206      	movs	r2, #6
 80085ca:	761a      	strb	r2, [r3, #24]
      break;
 80085cc:	e0c0      	b.n	8008750 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	795b      	ldrb	r3, [r3, #5]
 80085d2:	4619      	mov	r1, r3
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 fc4d 	bl	8008e74 <USBH_LL_GetURBState>
 80085da:	4603      	mov	r3, r0
 80085dc:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80085de:	7bbb      	ldrb	r3, [r7, #14]
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d103      	bne.n	80085ec <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2207      	movs	r2, #7
 80085e8:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80085ea:	e0ac      	b.n	8008746 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 80085ec:	7bbb      	ldrb	r3, [r7, #14]
 80085ee:	2b05      	cmp	r3, #5
 80085f0:	d105      	bne.n	80085fe <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	220c      	movs	r2, #12
 80085f6:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80085f8:	2303      	movs	r3, #3
 80085fa:	73fb      	strb	r3, [r7, #15]
      break;
 80085fc:	e0a3      	b.n	8008746 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 80085fe:	7bbb      	ldrb	r3, [r7, #14]
 8008600:	2b02      	cmp	r3, #2
 8008602:	d103      	bne.n	800860c <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2205      	movs	r2, #5
 8008608:	761a      	strb	r2, [r3, #24]
      break;
 800860a:	e09c      	b.n	8008746 <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 800860c:	7bbb      	ldrb	r3, [r7, #14]
 800860e:	2b04      	cmp	r3, #4
 8008610:	f040 8099 	bne.w	8008746 <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	220b      	movs	r2, #11
 8008618:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800861a:	2302      	movs	r3, #2
 800861c:	73fb      	strb	r3, [r7, #15]
      break;
 800861e:	e092      	b.n	8008746 <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	791b      	ldrb	r3, [r3, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	2100      	movs	r1, #0
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 f8d6 	bl	80087da <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008634:	b29a      	uxth	r2, r3
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2208      	movs	r2, #8
 800863e:	761a      	strb	r2, [r3, #24]

      break;
 8008640:	e086      	b.n	8008750 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	791b      	ldrb	r3, [r3, #4]
 8008646:	4619      	mov	r1, r3
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 fc13 	bl	8008e74 <USBH_LL_GetURBState>
 800864e:	4603      	mov	r3, r0
 8008650:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008652:	7bbb      	ldrb	r3, [r7, #14]
 8008654:	2b01      	cmp	r3, #1
 8008656:	d105      	bne.n	8008664 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	220d      	movs	r2, #13
 800865c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800865e:	2300      	movs	r3, #0
 8008660:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8008662:	e072      	b.n	800874a <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 8008664:	7bbb      	ldrb	r3, [r7, #14]
 8008666:	2b04      	cmp	r3, #4
 8008668:	d103      	bne.n	8008672 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	220b      	movs	r2, #11
 800866e:	761a      	strb	r2, [r3, #24]
      break;
 8008670:	e06b      	b.n	800874a <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 8008672:	7bbb      	ldrb	r3, [r7, #14]
 8008674:	2b05      	cmp	r3, #5
 8008676:	d168      	bne.n	800874a <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 8008678:	2303      	movs	r3, #3
 800867a:	73fb      	strb	r3, [r7, #15]
      break;
 800867c:	e065      	b.n	800874a <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	795b      	ldrb	r3, [r3, #5]
 8008682:	2201      	movs	r2, #1
 8008684:	9200      	str	r2, [sp, #0]
 8008686:	2200      	movs	r2, #0
 8008688:	2100      	movs	r1, #0
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f880 	bl	8008790 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008696:	b29a      	uxth	r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	220a      	movs	r2, #10
 80086a0:	761a      	strb	r2, [r3, #24]
      break;
 80086a2:	e055      	b.n	8008750 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	795b      	ldrb	r3, [r3, #5]
 80086a8:	4619      	mov	r1, r3
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 fbe2 	bl	8008e74 <USBH_LL_GetURBState>
 80086b0:	4603      	mov	r3, r0
 80086b2:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80086b4:	7bbb      	ldrb	r3, [r7, #14]
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d105      	bne.n	80086c6 <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 80086ba:	2300      	movs	r3, #0
 80086bc:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	220d      	movs	r2, #13
 80086c2:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80086c4:	e043      	b.n	800874e <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 80086c6:	7bbb      	ldrb	r3, [r7, #14]
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	d103      	bne.n	80086d4 <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2209      	movs	r2, #9
 80086d0:	761a      	strb	r2, [r3, #24]
      break;
 80086d2:	e03c      	b.n	800874e <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 80086d4:	7bbb      	ldrb	r3, [r7, #14]
 80086d6:	2b04      	cmp	r3, #4
 80086d8:	d139      	bne.n	800874e <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	220b      	movs	r2, #11
 80086de:	761a      	strb	r2, [r3, #24]
      break;
 80086e0:	e035      	b.n	800874e <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	7e5b      	ldrb	r3, [r3, #25]
 80086e6:	3301      	adds	r3, #1
 80086e8:	b2da      	uxtb	r2, r3
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	765a      	strb	r2, [r3, #25]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	7e5b      	ldrb	r3, [r3, #25]
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	d806      	bhi.n	8008704 <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2201      	movs	r2, #1
 80086fa:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008702:	e025      	b.n	8008750 <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800870a:	2106      	movs	r1, #6
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	795b      	ldrb	r3, [r3, #5]
 800871a:	4619      	mov	r1, r3
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 f90d 	bl	800893c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	791b      	ldrb	r3, [r3, #4]
 8008726:	4619      	mov	r1, r3
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 f907 	bl	800893c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008734:	2302      	movs	r3, #2
 8008736:	73fb      	strb	r3, [r7, #15]
      break;
 8008738:	e00a      	b.n	8008750 <USBH_HandleControl+0x2e0>

    default:
      break;
 800873a:	bf00      	nop
 800873c:	e008      	b.n	8008750 <USBH_HandleControl+0x2e0>
      break;
 800873e:	bf00      	nop
 8008740:	e006      	b.n	8008750 <USBH_HandleControl+0x2e0>
      break;
 8008742:	bf00      	nop
 8008744:	e004      	b.n	8008750 <USBH_HandleControl+0x2e0>
      break;
 8008746:	bf00      	nop
 8008748:	e002      	b.n	8008750 <USBH_HandleControl+0x2e0>
      break;
 800874a:	bf00      	nop
 800874c:	e000      	b.n	8008750 <USBH_HandleControl+0x2e0>
      break;
 800874e:	bf00      	nop
  }

  return status;
 8008750:	7bfb      	ldrb	r3, [r7, #15]
}
 8008752:	4618      	mov	r0, r3
 8008754:	3710      	adds	r7, #16
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop

0800875c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b088      	sub	sp, #32
 8008760:	af04      	add	r7, sp, #16
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	60b9      	str	r1, [r7, #8]
 8008766:	4613      	mov	r3, r2
 8008768:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800876a:	79f9      	ldrb	r1, [r7, #7]
 800876c:	2300      	movs	r3, #0
 800876e:	9303      	str	r3, [sp, #12]
 8008770:	2308      	movs	r3, #8
 8008772:	9302      	str	r3, [sp, #8]
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	9301      	str	r3, [sp, #4]
 8008778:	2300      	movs	r3, #0
 800877a:	9300      	str	r3, [sp, #0]
 800877c:	2300      	movs	r3, #0
 800877e:	2200      	movs	r2, #0
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	f000 fb46 	bl	8008e12 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008786:	2300      	movs	r3, #0
}
 8008788:	4618      	mov	r0, r3
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b088      	sub	sp, #32
 8008794:	af04      	add	r7, sp, #16
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	4611      	mov	r1, r2
 800879c:	461a      	mov	r2, r3
 800879e:	460b      	mov	r3, r1
 80087a0:	80fb      	strh	r3, [r7, #6]
 80087a2:	4613      	mov	r3, r2
 80087a4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d001      	beq.n	80087b4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80087b0:	2300      	movs	r3, #0
 80087b2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80087b4:	7979      	ldrb	r1, [r7, #5]
 80087b6:	7e3b      	ldrb	r3, [r7, #24]
 80087b8:	9303      	str	r3, [sp, #12]
 80087ba:	88fb      	ldrh	r3, [r7, #6]
 80087bc:	9302      	str	r3, [sp, #8]
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	9301      	str	r3, [sp, #4]
 80087c2:	2301      	movs	r3, #1
 80087c4:	9300      	str	r3, [sp, #0]
 80087c6:	2300      	movs	r3, #0
 80087c8:	2200      	movs	r2, #0
 80087ca:	68f8      	ldr	r0, [r7, #12]
 80087cc:	f000 fb21 	bl	8008e12 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b088      	sub	sp, #32
 80087de:	af04      	add	r7, sp, #16
 80087e0:	60f8      	str	r0, [r7, #12]
 80087e2:	60b9      	str	r1, [r7, #8]
 80087e4:	4611      	mov	r1, r2
 80087e6:	461a      	mov	r2, r3
 80087e8:	460b      	mov	r3, r1
 80087ea:	80fb      	strh	r3, [r7, #6]
 80087ec:	4613      	mov	r3, r2
 80087ee:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80087f0:	7979      	ldrb	r1, [r7, #5]
 80087f2:	2300      	movs	r3, #0
 80087f4:	9303      	str	r3, [sp, #12]
 80087f6:	88fb      	ldrh	r3, [r7, #6]
 80087f8:	9302      	str	r3, [sp, #8]
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	9301      	str	r3, [sp, #4]
 80087fe:	2301      	movs	r3, #1
 8008800:	9300      	str	r3, [sp, #0]
 8008802:	2300      	movs	r3, #0
 8008804:	2201      	movs	r2, #1
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f000 fb03 	bl	8008e12 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800880c:	2300      	movs	r3, #0

}
 800880e:	4618      	mov	r0, r3
 8008810:	3710      	adds	r7, #16
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b088      	sub	sp, #32
 800881a:	af04      	add	r7, sp, #16
 800881c:	60f8      	str	r0, [r7, #12]
 800881e:	60b9      	str	r1, [r7, #8]
 8008820:	4611      	mov	r1, r2
 8008822:	461a      	mov	r2, r3
 8008824:	460b      	mov	r3, r1
 8008826:	80fb      	strh	r3, [r7, #6]
 8008828:	4613      	mov	r3, r2
 800882a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008832:	2b00      	cmp	r3, #0
 8008834:	d001      	beq.n	800883a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008836:	2300      	movs	r3, #0
 8008838:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800883a:	7979      	ldrb	r1, [r7, #5]
 800883c:	7e3b      	ldrb	r3, [r7, #24]
 800883e:	9303      	str	r3, [sp, #12]
 8008840:	88fb      	ldrh	r3, [r7, #6]
 8008842:	9302      	str	r3, [sp, #8]
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	9301      	str	r3, [sp, #4]
 8008848:	2301      	movs	r3, #1
 800884a:	9300      	str	r3, [sp, #0]
 800884c:	2302      	movs	r3, #2
 800884e:	2200      	movs	r2, #0
 8008850:	68f8      	ldr	r0, [r7, #12]
 8008852:	f000 fade 	bl	8008e12 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	3710      	adds	r7, #16
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b088      	sub	sp, #32
 8008864:	af04      	add	r7, sp, #16
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	4611      	mov	r1, r2
 800886c:	461a      	mov	r2, r3
 800886e:	460b      	mov	r3, r1
 8008870:	80fb      	strh	r3, [r7, #6]
 8008872:	4613      	mov	r3, r2
 8008874:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008876:	7979      	ldrb	r1, [r7, #5]
 8008878:	2300      	movs	r3, #0
 800887a:	9303      	str	r3, [sp, #12]
 800887c:	88fb      	ldrh	r3, [r7, #6]
 800887e:	9302      	str	r3, [sp, #8]
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	9301      	str	r3, [sp, #4]
 8008884:	2301      	movs	r3, #1
 8008886:	9300      	str	r3, [sp, #0]
 8008888:	2302      	movs	r3, #2
 800888a:	2201      	movs	r2, #1
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f000 fac0 	bl	8008e12 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	3710      	adds	r7, #16
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b086      	sub	sp, #24
 80088a0:	af04      	add	r7, sp, #16
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	4608      	mov	r0, r1
 80088a6:	4611      	mov	r1, r2
 80088a8:	461a      	mov	r2, r3
 80088aa:	4603      	mov	r3, r0
 80088ac:	70fb      	strb	r3, [r7, #3]
 80088ae:	460b      	mov	r3, r1
 80088b0:	70bb      	strb	r3, [r7, #2]
 80088b2:	4613      	mov	r3, r2
 80088b4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80088b6:	7878      	ldrb	r0, [r7, #1]
 80088b8:	78ba      	ldrb	r2, [r7, #2]
 80088ba:	78f9      	ldrb	r1, [r7, #3]
 80088bc:	8b3b      	ldrh	r3, [r7, #24]
 80088be:	9302      	str	r3, [sp, #8]
 80088c0:	7d3b      	ldrb	r3, [r7, #20]
 80088c2:	9301      	str	r3, [sp, #4]
 80088c4:	7c3b      	ldrb	r3, [r7, #16]
 80088c6:	9300      	str	r3, [sp, #0]
 80088c8:	4603      	mov	r3, r0
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 fa53 	bl	8008d76 <USBH_LL_OpenPipe>

  return USBH_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3708      	adds	r7, #8
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b082      	sub	sp, #8
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
 80088e2:	460b      	mov	r3, r1
 80088e4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80088e6:	78fb      	ldrb	r3, [r7, #3]
 80088e8:	4619      	mov	r1, r3
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 fa72 	bl	8008dd4 <USBH_LL_ClosePipe>

  return USBH_OK;
 80088f0:	2300      	movs	r3, #0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3708      	adds	r7, #8
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b084      	sub	sp, #16
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
 8008902:	460b      	mov	r3, r1
 8008904:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 f836 	bl	8008978 <USBH_GetFreePipe>
 800890c:	4603      	mov	r3, r0
 800890e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008910:	89fb      	ldrh	r3, [r7, #14]
 8008912:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008916:	4293      	cmp	r3, r2
 8008918:	d00a      	beq.n	8008930 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800891a:	78fa      	ldrb	r2, [r7, #3]
 800891c:	89fb      	ldrh	r3, [r7, #14]
 800891e:	f003 030f 	and.w	r3, r3, #15
 8008922:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008926:	6879      	ldr	r1, [r7, #4]
 8008928:	33e0      	adds	r3, #224	@ 0xe0
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	440b      	add	r3, r1
 800892e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008930:	89fb      	ldrh	r3, [r7, #14]
 8008932:	b2db      	uxtb	r3, r3
}
 8008934:	4618      	mov	r0, r3
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	460b      	mov	r3, r1
 8008946:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008948:	78fb      	ldrb	r3, [r7, #3]
 800894a:	2b0f      	cmp	r3, #15
 800894c:	d80d      	bhi.n	800896a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800894e:	78fb      	ldrb	r3, [r7, #3]
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	33e0      	adds	r3, #224	@ 0xe0
 8008954:	009b      	lsls	r3, r3, #2
 8008956:	4413      	add	r3, r2
 8008958:	685a      	ldr	r2, [r3, #4]
 800895a:	78fb      	ldrb	r3, [r7, #3]
 800895c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008960:	6879      	ldr	r1, [r7, #4]
 8008962:	33e0      	adds	r3, #224	@ 0xe0
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	440b      	add	r3, r1
 8008968:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800896a:	2300      	movs	r3, #0
}
 800896c:	4618      	mov	r0, r3
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008980:	2300      	movs	r3, #0
 8008982:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008984:	2300      	movs	r3, #0
 8008986:	73fb      	strb	r3, [r7, #15]
 8008988:	e00f      	b.n	80089aa <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800898a:	7bfb      	ldrb	r3, [r7, #15]
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	33e0      	adds	r3, #224	@ 0xe0
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	4413      	add	r3, r2
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800899a:	2b00      	cmp	r3, #0
 800899c:	d102      	bne.n	80089a4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800899e:	7bfb      	ldrb	r3, [r7, #15]
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	e007      	b.n	80089b4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80089a4:	7bfb      	ldrb	r3, [r7, #15]
 80089a6:	3301      	adds	r3, #1
 80089a8:	73fb      	strb	r3, [r7, #15]
 80089aa:	7bfb      	ldrb	r3, [r7, #15]
 80089ac:	2b0f      	cmp	r3, #15
 80089ae:	d9ec      	bls.n	800898a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80089b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3714      	adds	r7, #20
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr

080089c0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80089c4:	2201      	movs	r2, #1
 80089c6:	490e      	ldr	r1, [pc, #56]	@ (8008a00 <MX_USB_HOST_Init+0x40>)
 80089c8:	480e      	ldr	r0, [pc, #56]	@ (8008a04 <MX_USB_HOST_Init+0x44>)
 80089ca:	f7fe fb0f 	bl	8006fec <USBH_Init>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d001      	beq.n	80089d8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80089d4:	f7f8 f860 	bl	8000a98 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80089d8:	490b      	ldr	r1, [pc, #44]	@ (8008a08 <MX_USB_HOST_Init+0x48>)
 80089da:	480a      	ldr	r0, [pc, #40]	@ (8008a04 <MX_USB_HOST_Init+0x44>)
 80089dc:	f7fe fbb1 	bl	8007142 <USBH_RegisterClass>
 80089e0:	4603      	mov	r3, r0
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d001      	beq.n	80089ea <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80089e6:	f7f8 f857 	bl	8000a98 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80089ea:	4806      	ldr	r0, [pc, #24]	@ (8008a04 <MX_USB_HOST_Init+0x44>)
 80089ec:	f7fe fc35 	bl	800725a <USBH_Start>
 80089f0:	4603      	mov	r3, r0
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d001      	beq.n	80089fa <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80089f6:	f7f8 f84f 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80089fa:	bf00      	nop
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	08008a21 	.word	0x08008a21
 8008a04:	200001dc 	.word	0x200001dc
 8008a08:	2000000c 	.word	0x2000000c

08008a0c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008a10:	4802      	ldr	r0, [pc, #8]	@ (8008a1c <MX_USB_HOST_Process+0x10>)
 8008a12:	f7fe fc33 	bl	800727c <USBH_Process>
}
 8008a16:	bf00      	nop
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	200001dc 	.word	0x200001dc

08008a20 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b083      	sub	sp, #12
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	460b      	mov	r3, r1
 8008a2a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008a2c:	78fb      	ldrb	r3, [r7, #3]
 8008a2e:	3b01      	subs	r3, #1
 8008a30:	2b04      	cmp	r3, #4
 8008a32:	d819      	bhi.n	8008a68 <USBH_UserProcess+0x48>
 8008a34:	a201      	add	r2, pc, #4	@ (adr r2, 8008a3c <USBH_UserProcess+0x1c>)
 8008a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a3a:	bf00      	nop
 8008a3c:	08008a69 	.word	0x08008a69
 8008a40:	08008a59 	.word	0x08008a59
 8008a44:	08008a69 	.word	0x08008a69
 8008a48:	08008a61 	.word	0x08008a61
 8008a4c:	08008a51 	.word	0x08008a51
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008a50:	4b09      	ldr	r3, [pc, #36]	@ (8008a78 <USBH_UserProcess+0x58>)
 8008a52:	2203      	movs	r2, #3
 8008a54:	701a      	strb	r2, [r3, #0]
  break;
 8008a56:	e008      	b.n	8008a6a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008a58:	4b07      	ldr	r3, [pc, #28]	@ (8008a78 <USBH_UserProcess+0x58>)
 8008a5a:	2202      	movs	r2, #2
 8008a5c:	701a      	strb	r2, [r3, #0]
  break;
 8008a5e:	e004      	b.n	8008a6a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008a60:	4b05      	ldr	r3, [pc, #20]	@ (8008a78 <USBH_UserProcess+0x58>)
 8008a62:	2201      	movs	r2, #1
 8008a64:	701a      	strb	r2, [r3, #0]
  break;
 8008a66:	e000      	b.n	8008a6a <USBH_UserProcess+0x4a>

  default:
  break;
 8008a68:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008a6a:	bf00      	nop
 8008a6c:	370c      	adds	r7, #12
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr
 8008a76:	bf00      	nop
 8008a78:	200005b4 	.word	0x200005b4

08008a7c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b08a      	sub	sp, #40	@ 0x28
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a84:	f107 0314 	add.w	r3, r7, #20
 8008a88:	2200      	movs	r2, #0
 8008a8a:	601a      	str	r2, [r3, #0]
 8008a8c:	605a      	str	r2, [r3, #4]
 8008a8e:	609a      	str	r2, [r3, #8]
 8008a90:	60da      	str	r2, [r3, #12]
 8008a92:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a9c:	d147      	bne.n	8008b2e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	613b      	str	r3, [r7, #16]
 8008aa2:	4b25      	ldr	r3, [pc, #148]	@ (8008b38 <HAL_HCD_MspInit+0xbc>)
 8008aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008aa6:	4a24      	ldr	r2, [pc, #144]	@ (8008b38 <HAL_HCD_MspInit+0xbc>)
 8008aa8:	f043 0301 	orr.w	r3, r3, #1
 8008aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8008aae:	4b22      	ldr	r3, [pc, #136]	@ (8008b38 <HAL_HCD_MspInit+0xbc>)
 8008ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ab2:	f003 0301 	and.w	r3, r3, #1
 8008ab6:	613b      	str	r3, [r7, #16]
 8008ab8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008aba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008ac8:	f107 0314 	add.w	r3, r7, #20
 8008acc:	4619      	mov	r1, r3
 8008ace:	481b      	ldr	r0, [pc, #108]	@ (8008b3c <HAL_HCD_MspInit+0xc0>)
 8008ad0:	f7f8 fb54 	bl	800117c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008ad4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ada:	2302      	movs	r3, #2
 8008adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008ae6:	230a      	movs	r3, #10
 8008ae8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008aea:	f107 0314 	add.w	r3, r7, #20
 8008aee:	4619      	mov	r1, r3
 8008af0:	4812      	ldr	r0, [pc, #72]	@ (8008b3c <HAL_HCD_MspInit+0xc0>)
 8008af2:	f7f8 fb43 	bl	800117c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008af6:	4b10      	ldr	r3, [pc, #64]	@ (8008b38 <HAL_HCD_MspInit+0xbc>)
 8008af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008afa:	4a0f      	ldr	r2, [pc, #60]	@ (8008b38 <HAL_HCD_MspInit+0xbc>)
 8008afc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b00:	6353      	str	r3, [r2, #52]	@ 0x34
 8008b02:	2300      	movs	r3, #0
 8008b04:	60fb      	str	r3, [r7, #12]
 8008b06:	4b0c      	ldr	r3, [pc, #48]	@ (8008b38 <HAL_HCD_MspInit+0xbc>)
 8008b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b0a:	4a0b      	ldr	r2, [pc, #44]	@ (8008b38 <HAL_HCD_MspInit+0xbc>)
 8008b0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008b10:	6453      	str	r3, [r2, #68]	@ 0x44
 8008b12:	4b09      	ldr	r3, [pc, #36]	@ (8008b38 <HAL_HCD_MspInit+0xbc>)
 8008b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b1a:	60fb      	str	r3, [r7, #12]
 8008b1c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008b1e:	2200      	movs	r2, #0
 8008b20:	2100      	movs	r1, #0
 8008b22:	2043      	movs	r0, #67	@ 0x43
 8008b24:	f7f8 faf3 	bl	800110e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008b28:	2043      	movs	r0, #67	@ 0x43
 8008b2a:	f7f8 fb0c 	bl	8001146 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008b2e:	bf00      	nop
 8008b30:	3728      	adds	r7, #40	@ 0x28
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	40023800 	.word	0x40023800
 8008b3c:	40020000 	.word	0x40020000

08008b40 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f7fe ff6d 	bl	8007a2e <USBH_LL_IncTimer>
}
 8008b54:	bf00      	nop
 8008b56:	3708      	adds	r7, #8
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7fe ffa9 	bl	8007ac2 <USBH_LL_Connect>
}
 8008b70:	bf00      	nop
 8008b72:	3708      	adds	r7, #8
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008b86:	4618      	mov	r0, r3
 8008b88:	f7fe ffb2 	bl	8007af0 <USBH_LL_Disconnect>
}
 8008b8c:	bf00      	nop
 8008b8e:	3708      	adds	r7, #8
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	70fb      	strb	r3, [r7, #3]
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008ba4:	bf00      	nop
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f7fe ff5f 	bl	8007a82 <USBH_LL_PortEnabled>
}
 8008bc4:	bf00      	nop
 8008bc6:	3708      	adds	r7, #8
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b082      	sub	sp, #8
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7fe ff5f 	bl	8007a9e <USBH_LL_PortDisabled>
}
 8008be0:	bf00      	nop
 8008be2:	3708      	adds	r7, #8
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d12a      	bne.n	8008c50 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008bfa:	4a18      	ldr	r2, [pc, #96]	@ (8008c5c <USBH_LL_Init+0x74>)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	4a15      	ldr	r2, [pc, #84]	@ (8008c5c <USBH_LL_Init+0x74>)
 8008c06:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008c0a:	4b14      	ldr	r3, [pc, #80]	@ (8008c5c <USBH_LL_Init+0x74>)
 8008c0c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008c10:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008c12:	4b12      	ldr	r3, [pc, #72]	@ (8008c5c <USBH_LL_Init+0x74>)
 8008c14:	2208      	movs	r2, #8
 8008c16:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008c18:	4b10      	ldr	r3, [pc, #64]	@ (8008c5c <USBH_LL_Init+0x74>)
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8008c5c <USBH_LL_Init+0x74>)
 8008c20:	2200      	movs	r2, #0
 8008c22:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008c24:	4b0d      	ldr	r3, [pc, #52]	@ (8008c5c <USBH_LL_Init+0x74>)
 8008c26:	2202      	movs	r2, #2
 8008c28:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8008c5c <USBH_LL_Init+0x74>)
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008c30:	480a      	ldr	r0, [pc, #40]	@ (8008c5c <USBH_LL_Init+0x74>)
 8008c32:	f7f8 fc8a 	bl	800154a <HAL_HCD_Init>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d001      	beq.n	8008c40 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008c3c:	f7f7 ff2c 	bl	8000a98 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008c40:	4806      	ldr	r0, [pc, #24]	@ (8008c5c <USBH_LL_Init+0x74>)
 8008c42:	f7f9 f8eb 	bl	8001e1c <HAL_HCD_GetCurrentFrame>
 8008c46:	4603      	mov	r3, r0
 8008c48:	4619      	mov	r1, r3
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f7fe fee0 	bl	8007a10 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008c50:	2300      	movs	r3, #0
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3708      	adds	r7, #8
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	200005b8 	.word	0x200005b8

08008c60 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7f9 f858 	bl	8001d2c <HAL_HCD_Start>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c80:	7bfb      	ldrb	r3, [r7, #15]
 8008c82:	4618      	mov	r0, r3
 8008c84:	f000 f95e 	bl	8008f44 <USBH_Get_USB_Status>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3710      	adds	r7, #16
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008c96:	b580      	push	{r7, lr}
 8008c98:	b084      	sub	sp, #16
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008cac:	4618      	mov	r0, r3
 8008cae:	f7f9 f860 	bl	8001d72 <HAL_HCD_Stop>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008cb6:	7bfb      	ldrb	r3, [r7, #15]
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f000 f943 	bl	8008f44 <USBH_Get_USB_Status>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3710      	adds	r7, #16
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7f9 f8aa 	bl	8001e38 <HAL_HCD_GetCurrentSpeed>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	2b02      	cmp	r3, #2
 8008ce8:	d00c      	beq.n	8008d04 <USBH_LL_GetSpeed+0x38>
 8008cea:	2b02      	cmp	r3, #2
 8008cec:	d80d      	bhi.n	8008d0a <USBH_LL_GetSpeed+0x3e>
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d002      	beq.n	8008cf8 <USBH_LL_GetSpeed+0x2c>
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d003      	beq.n	8008cfe <USBH_LL_GetSpeed+0x32>
 8008cf6:	e008      	b.n	8008d0a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	73fb      	strb	r3, [r7, #15]
    break;
 8008cfc:	e008      	b.n	8008d10 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	73fb      	strb	r3, [r7, #15]
    break;
 8008d02:	e005      	b.n	8008d10 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008d04:	2302      	movs	r3, #2
 8008d06:	73fb      	strb	r3, [r7, #15]
    break;
 8008d08:	e002      	b.n	8008d10 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d0e:	bf00      	nop
  }
  return  speed;
 8008d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3710      	adds	r7, #16
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}

08008d1a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	b084      	sub	sp, #16
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d22:	2300      	movs	r3, #0
 8008d24:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d26:	2300      	movs	r3, #0
 8008d28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7f9 f83b 	bl	8001dac <HAL_HCD_ResetPort>
 8008d36:	4603      	mov	r3, r0
 8008d38:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d3a:	7bfb      	ldrb	r3, [r7, #15]
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f000 f901 	bl	8008f44 <USBH_Get_USB_Status>
 8008d42:	4603      	mov	r3, r0
 8008d44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d46:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3710      	adds	r7, #16
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	460b      	mov	r3, r1
 8008d5a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008d62:	78fa      	ldrb	r2, [r7, #3]
 8008d64:	4611      	mov	r1, r2
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7f9 f843 	bl	8001df2 <HAL_HCD_HC_GetXferCount>
 8008d6c:	4603      	mov	r3, r0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3708      	adds	r7, #8
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}

08008d76 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008d76:	b590      	push	{r4, r7, lr}
 8008d78:	b089      	sub	sp, #36	@ 0x24
 8008d7a:	af04      	add	r7, sp, #16
 8008d7c:	6078      	str	r0, [r7, #4]
 8008d7e:	4608      	mov	r0, r1
 8008d80:	4611      	mov	r1, r2
 8008d82:	461a      	mov	r2, r3
 8008d84:	4603      	mov	r3, r0
 8008d86:	70fb      	strb	r3, [r7, #3]
 8008d88:	460b      	mov	r3, r1
 8008d8a:	70bb      	strb	r3, [r7, #2]
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d90:	2300      	movs	r3, #0
 8008d92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d94:	2300      	movs	r3, #0
 8008d96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008d9e:	787c      	ldrb	r4, [r7, #1]
 8008da0:	78ba      	ldrb	r2, [r7, #2]
 8008da2:	78f9      	ldrb	r1, [r7, #3]
 8008da4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008da6:	9302      	str	r3, [sp, #8]
 8008da8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008dac:	9301      	str	r3, [sp, #4]
 8008dae:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008db2:	9300      	str	r3, [sp, #0]
 8008db4:	4623      	mov	r3, r4
 8008db6:	f7f8 fc2f 	bl	8001618 <HAL_HCD_HC_Init>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008dbe:	7bfb      	ldrb	r3, [r7, #15]
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f000 f8bf 	bl	8008f44 <USBH_Get_USB_Status>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dca:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3714      	adds	r7, #20
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd90      	pop	{r4, r7, pc}

08008dd4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	460b      	mov	r3, r1
 8008dde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008de0:	2300      	movs	r3, #0
 8008de2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008de4:	2300      	movs	r3, #0
 8008de6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008dee:	78fa      	ldrb	r2, [r7, #3]
 8008df0:	4611      	mov	r1, r2
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7f8 fcc8 	bl	8001788 <HAL_HCD_HC_Halt>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008dfc:	7bfb      	ldrb	r3, [r7, #15]
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f000 f8a0 	bl	8008f44 <USBH_Get_USB_Status>
 8008e04:	4603      	mov	r3, r0
 8008e06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e08:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3710      	adds	r7, #16
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}

08008e12 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008e12:	b590      	push	{r4, r7, lr}
 8008e14:	b089      	sub	sp, #36	@ 0x24
 8008e16:	af04      	add	r7, sp, #16
 8008e18:	6078      	str	r0, [r7, #4]
 8008e1a:	4608      	mov	r0, r1
 8008e1c:	4611      	mov	r1, r2
 8008e1e:	461a      	mov	r2, r3
 8008e20:	4603      	mov	r3, r0
 8008e22:	70fb      	strb	r3, [r7, #3]
 8008e24:	460b      	mov	r3, r1
 8008e26:	70bb      	strb	r3, [r7, #2]
 8008e28:	4613      	mov	r3, r2
 8008e2a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e30:	2300      	movs	r3, #0
 8008e32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008e3a:	787c      	ldrb	r4, [r7, #1]
 8008e3c:	78ba      	ldrb	r2, [r7, #2]
 8008e3e:	78f9      	ldrb	r1, [r7, #3]
 8008e40:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008e44:	9303      	str	r3, [sp, #12]
 8008e46:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008e48:	9302      	str	r3, [sp, #8]
 8008e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e4c:	9301      	str	r3, [sp, #4]
 8008e4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008e52:	9300      	str	r3, [sp, #0]
 8008e54:	4623      	mov	r3, r4
 8008e56:	f7f8 fcbb 	bl	80017d0 <HAL_HCD_HC_SubmitRequest>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008e5e:	7bfb      	ldrb	r3, [r7, #15]
 8008e60:	4618      	mov	r0, r3
 8008e62:	f000 f86f 	bl	8008f44 <USBH_Get_USB_Status>
 8008e66:	4603      	mov	r3, r0
 8008e68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3714      	adds	r7, #20
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd90      	pop	{r4, r7, pc}

08008e74 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008e86:	78fa      	ldrb	r2, [r7, #3]
 8008e88:	4611      	mov	r1, r2
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7f8 ff9c 	bl	8001dc8 <HAL_HCD_HC_GetURBState>
 8008e90:	4603      	mov	r3, r0
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3708      	adds	r7, #8
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}

08008e9a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008e9a:	b580      	push	{r7, lr}
 8008e9c:	b082      	sub	sp, #8
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d103      	bne.n	8008eb8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008eb0:	78fb      	ldrb	r3, [r7, #3]
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f000 f872 	bl	8008f9c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008eb8:	20c8      	movs	r0, #200	@ 0xc8
 8008eba:	f7f8 f829 	bl	8000f10 <HAL_Delay>
  return USBH_OK;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3708      	adds	r7, #8
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b085      	sub	sp, #20
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	70fb      	strb	r3, [r7, #3]
 8008ed4:	4613      	mov	r3, r2
 8008ed6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008ede:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008ee0:	78fa      	ldrb	r2, [r7, #3]
 8008ee2:	68f9      	ldr	r1, [r7, #12]
 8008ee4:	4613      	mov	r3, r2
 8008ee6:	011b      	lsls	r3, r3, #4
 8008ee8:	1a9b      	subs	r3, r3, r2
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	440b      	add	r3, r1
 8008eee:	3317      	adds	r3, #23
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00a      	beq.n	8008f0c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008ef6:	78fa      	ldrb	r2, [r7, #3]
 8008ef8:	68f9      	ldr	r1, [r7, #12]
 8008efa:	4613      	mov	r3, r2
 8008efc:	011b      	lsls	r3, r3, #4
 8008efe:	1a9b      	subs	r3, r3, r2
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	440b      	add	r3, r1
 8008f04:	333c      	adds	r3, #60	@ 0x3c
 8008f06:	78ba      	ldrb	r2, [r7, #2]
 8008f08:	701a      	strb	r2, [r3, #0]
 8008f0a:	e009      	b.n	8008f20 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008f0c:	78fa      	ldrb	r2, [r7, #3]
 8008f0e:	68f9      	ldr	r1, [r7, #12]
 8008f10:	4613      	mov	r3, r2
 8008f12:	011b      	lsls	r3, r3, #4
 8008f14:	1a9b      	subs	r3, r3, r2
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	440b      	add	r3, r1
 8008f1a:	333d      	adds	r3, #61	@ 0x3d
 8008f1c:	78ba      	ldrb	r2, [r7, #2]
 8008f1e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008f20:	2300      	movs	r3, #0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3714      	adds	r7, #20
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr

08008f2e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b082      	sub	sp, #8
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f7f7 ffea 	bl	8000f10 <HAL_Delay>
}
 8008f3c:	bf00      	nop
 8008f3e:	3708      	adds	r7, #8
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b085      	sub	sp, #20
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008f52:	79fb      	ldrb	r3, [r7, #7]
 8008f54:	2b03      	cmp	r3, #3
 8008f56:	d817      	bhi.n	8008f88 <USBH_Get_USB_Status+0x44>
 8008f58:	a201      	add	r2, pc, #4	@ (adr r2, 8008f60 <USBH_Get_USB_Status+0x1c>)
 8008f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f5e:	bf00      	nop
 8008f60:	08008f71 	.word	0x08008f71
 8008f64:	08008f77 	.word	0x08008f77
 8008f68:	08008f7d 	.word	0x08008f7d
 8008f6c:	08008f83 	.word	0x08008f83
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008f70:	2300      	movs	r3, #0
 8008f72:	73fb      	strb	r3, [r7, #15]
    break;
 8008f74:	e00b      	b.n	8008f8e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008f76:	2302      	movs	r3, #2
 8008f78:	73fb      	strb	r3, [r7, #15]
    break;
 8008f7a:	e008      	b.n	8008f8e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	73fb      	strb	r3, [r7, #15]
    break;
 8008f80:	e005      	b.n	8008f8e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008f82:	2302      	movs	r3, #2
 8008f84:	73fb      	strb	r3, [r7, #15]
    break;
 8008f86:	e002      	b.n	8008f8e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008f88:	2302      	movs	r3, #2
 8008f8a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f8c:	bf00      	nop
  }
  return usb_status;
 8008f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3714      	adds	r7, #20
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008fa6:	79fb      	ldrb	r3, [r7, #7]
 8008fa8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008faa:	79fb      	ldrb	r3, [r7, #7]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d102      	bne.n	8008fb6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	73fb      	strb	r3, [r7, #15]
 8008fb4:	e001      	b.n	8008fba <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008fba:	7bfb      	ldrb	r3, [r7, #15]
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	2101      	movs	r1, #1
 8008fc0:	4803      	ldr	r0, [pc, #12]	@ (8008fd0 <MX_DriverVbusFS+0x34>)
 8008fc2:	f7f8 fa8f 	bl	80014e4 <HAL_GPIO_WritePin>
}
 8008fc6:	bf00      	nop
 8008fc8:	3710      	adds	r7, #16
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	40020800 	.word	0x40020800

08008fd4 <malloc>:
 8008fd4:	4b02      	ldr	r3, [pc, #8]	@ (8008fe0 <malloc+0xc>)
 8008fd6:	4601      	mov	r1, r0
 8008fd8:	6818      	ldr	r0, [r3, #0]
 8008fda:	f000 b82d 	b.w	8009038 <_malloc_r>
 8008fde:	bf00      	nop
 8008fe0:	2000002c 	.word	0x2000002c

08008fe4 <free>:
 8008fe4:	4b02      	ldr	r3, [pc, #8]	@ (8008ff0 <free+0xc>)
 8008fe6:	4601      	mov	r1, r0
 8008fe8:	6818      	ldr	r0, [r3, #0]
 8008fea:	f000 b8f5 	b.w	80091d8 <_free_r>
 8008fee:	bf00      	nop
 8008ff0:	2000002c 	.word	0x2000002c

08008ff4 <sbrk_aligned>:
 8008ff4:	b570      	push	{r4, r5, r6, lr}
 8008ff6:	4e0f      	ldr	r6, [pc, #60]	@ (8009034 <sbrk_aligned+0x40>)
 8008ff8:	460c      	mov	r4, r1
 8008ffa:	6831      	ldr	r1, [r6, #0]
 8008ffc:	4605      	mov	r5, r0
 8008ffe:	b911      	cbnz	r1, 8009006 <sbrk_aligned+0x12>
 8009000:	f000 f8ae 	bl	8009160 <_sbrk_r>
 8009004:	6030      	str	r0, [r6, #0]
 8009006:	4621      	mov	r1, r4
 8009008:	4628      	mov	r0, r5
 800900a:	f000 f8a9 	bl	8009160 <_sbrk_r>
 800900e:	1c43      	adds	r3, r0, #1
 8009010:	d103      	bne.n	800901a <sbrk_aligned+0x26>
 8009012:	f04f 34ff 	mov.w	r4, #4294967295
 8009016:	4620      	mov	r0, r4
 8009018:	bd70      	pop	{r4, r5, r6, pc}
 800901a:	1cc4      	adds	r4, r0, #3
 800901c:	f024 0403 	bic.w	r4, r4, #3
 8009020:	42a0      	cmp	r0, r4
 8009022:	d0f8      	beq.n	8009016 <sbrk_aligned+0x22>
 8009024:	1a21      	subs	r1, r4, r0
 8009026:	4628      	mov	r0, r5
 8009028:	f000 f89a 	bl	8009160 <_sbrk_r>
 800902c:	3001      	adds	r0, #1
 800902e:	d1f2      	bne.n	8009016 <sbrk_aligned+0x22>
 8009030:	e7ef      	b.n	8009012 <sbrk_aligned+0x1e>
 8009032:	bf00      	nop
 8009034:	20000998 	.word	0x20000998

08009038 <_malloc_r>:
 8009038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800903c:	1ccd      	adds	r5, r1, #3
 800903e:	f025 0503 	bic.w	r5, r5, #3
 8009042:	3508      	adds	r5, #8
 8009044:	2d0c      	cmp	r5, #12
 8009046:	bf38      	it	cc
 8009048:	250c      	movcc	r5, #12
 800904a:	2d00      	cmp	r5, #0
 800904c:	4606      	mov	r6, r0
 800904e:	db01      	blt.n	8009054 <_malloc_r+0x1c>
 8009050:	42a9      	cmp	r1, r5
 8009052:	d904      	bls.n	800905e <_malloc_r+0x26>
 8009054:	230c      	movs	r3, #12
 8009056:	6033      	str	r3, [r6, #0]
 8009058:	2000      	movs	r0, #0
 800905a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800905e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009134 <_malloc_r+0xfc>
 8009062:	f000 f869 	bl	8009138 <__malloc_lock>
 8009066:	f8d8 3000 	ldr.w	r3, [r8]
 800906a:	461c      	mov	r4, r3
 800906c:	bb44      	cbnz	r4, 80090c0 <_malloc_r+0x88>
 800906e:	4629      	mov	r1, r5
 8009070:	4630      	mov	r0, r6
 8009072:	f7ff ffbf 	bl	8008ff4 <sbrk_aligned>
 8009076:	1c43      	adds	r3, r0, #1
 8009078:	4604      	mov	r4, r0
 800907a:	d158      	bne.n	800912e <_malloc_r+0xf6>
 800907c:	f8d8 4000 	ldr.w	r4, [r8]
 8009080:	4627      	mov	r7, r4
 8009082:	2f00      	cmp	r7, #0
 8009084:	d143      	bne.n	800910e <_malloc_r+0xd6>
 8009086:	2c00      	cmp	r4, #0
 8009088:	d04b      	beq.n	8009122 <_malloc_r+0xea>
 800908a:	6823      	ldr	r3, [r4, #0]
 800908c:	4639      	mov	r1, r7
 800908e:	4630      	mov	r0, r6
 8009090:	eb04 0903 	add.w	r9, r4, r3
 8009094:	f000 f864 	bl	8009160 <_sbrk_r>
 8009098:	4581      	cmp	r9, r0
 800909a:	d142      	bne.n	8009122 <_malloc_r+0xea>
 800909c:	6821      	ldr	r1, [r4, #0]
 800909e:	1a6d      	subs	r5, r5, r1
 80090a0:	4629      	mov	r1, r5
 80090a2:	4630      	mov	r0, r6
 80090a4:	f7ff ffa6 	bl	8008ff4 <sbrk_aligned>
 80090a8:	3001      	adds	r0, #1
 80090aa:	d03a      	beq.n	8009122 <_malloc_r+0xea>
 80090ac:	6823      	ldr	r3, [r4, #0]
 80090ae:	442b      	add	r3, r5
 80090b0:	6023      	str	r3, [r4, #0]
 80090b2:	f8d8 3000 	ldr.w	r3, [r8]
 80090b6:	685a      	ldr	r2, [r3, #4]
 80090b8:	bb62      	cbnz	r2, 8009114 <_malloc_r+0xdc>
 80090ba:	f8c8 7000 	str.w	r7, [r8]
 80090be:	e00f      	b.n	80090e0 <_malloc_r+0xa8>
 80090c0:	6822      	ldr	r2, [r4, #0]
 80090c2:	1b52      	subs	r2, r2, r5
 80090c4:	d420      	bmi.n	8009108 <_malloc_r+0xd0>
 80090c6:	2a0b      	cmp	r2, #11
 80090c8:	d917      	bls.n	80090fa <_malloc_r+0xc2>
 80090ca:	1961      	adds	r1, r4, r5
 80090cc:	42a3      	cmp	r3, r4
 80090ce:	6025      	str	r5, [r4, #0]
 80090d0:	bf18      	it	ne
 80090d2:	6059      	strne	r1, [r3, #4]
 80090d4:	6863      	ldr	r3, [r4, #4]
 80090d6:	bf08      	it	eq
 80090d8:	f8c8 1000 	streq.w	r1, [r8]
 80090dc:	5162      	str	r2, [r4, r5]
 80090de:	604b      	str	r3, [r1, #4]
 80090e0:	4630      	mov	r0, r6
 80090e2:	f000 f82f 	bl	8009144 <__malloc_unlock>
 80090e6:	f104 000b 	add.w	r0, r4, #11
 80090ea:	1d23      	adds	r3, r4, #4
 80090ec:	f020 0007 	bic.w	r0, r0, #7
 80090f0:	1ac2      	subs	r2, r0, r3
 80090f2:	bf1c      	itt	ne
 80090f4:	1a1b      	subne	r3, r3, r0
 80090f6:	50a3      	strne	r3, [r4, r2]
 80090f8:	e7af      	b.n	800905a <_malloc_r+0x22>
 80090fa:	6862      	ldr	r2, [r4, #4]
 80090fc:	42a3      	cmp	r3, r4
 80090fe:	bf0c      	ite	eq
 8009100:	f8c8 2000 	streq.w	r2, [r8]
 8009104:	605a      	strne	r2, [r3, #4]
 8009106:	e7eb      	b.n	80090e0 <_malloc_r+0xa8>
 8009108:	4623      	mov	r3, r4
 800910a:	6864      	ldr	r4, [r4, #4]
 800910c:	e7ae      	b.n	800906c <_malloc_r+0x34>
 800910e:	463c      	mov	r4, r7
 8009110:	687f      	ldr	r7, [r7, #4]
 8009112:	e7b6      	b.n	8009082 <_malloc_r+0x4a>
 8009114:	461a      	mov	r2, r3
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	42a3      	cmp	r3, r4
 800911a:	d1fb      	bne.n	8009114 <_malloc_r+0xdc>
 800911c:	2300      	movs	r3, #0
 800911e:	6053      	str	r3, [r2, #4]
 8009120:	e7de      	b.n	80090e0 <_malloc_r+0xa8>
 8009122:	230c      	movs	r3, #12
 8009124:	6033      	str	r3, [r6, #0]
 8009126:	4630      	mov	r0, r6
 8009128:	f000 f80c 	bl	8009144 <__malloc_unlock>
 800912c:	e794      	b.n	8009058 <_malloc_r+0x20>
 800912e:	6005      	str	r5, [r0, #0]
 8009130:	e7d6      	b.n	80090e0 <_malloc_r+0xa8>
 8009132:	bf00      	nop
 8009134:	2000099c 	.word	0x2000099c

08009138 <__malloc_lock>:
 8009138:	4801      	ldr	r0, [pc, #4]	@ (8009140 <__malloc_lock+0x8>)
 800913a:	f000 b84b 	b.w	80091d4 <__retarget_lock_acquire_recursive>
 800913e:	bf00      	nop
 8009140:	20000adc 	.word	0x20000adc

08009144 <__malloc_unlock>:
 8009144:	4801      	ldr	r0, [pc, #4]	@ (800914c <__malloc_unlock+0x8>)
 8009146:	f000 b846 	b.w	80091d6 <__retarget_lock_release_recursive>
 800914a:	bf00      	nop
 800914c:	20000adc 	.word	0x20000adc

08009150 <memset>:
 8009150:	4402      	add	r2, r0
 8009152:	4603      	mov	r3, r0
 8009154:	4293      	cmp	r3, r2
 8009156:	d100      	bne.n	800915a <memset+0xa>
 8009158:	4770      	bx	lr
 800915a:	f803 1b01 	strb.w	r1, [r3], #1
 800915e:	e7f9      	b.n	8009154 <memset+0x4>

08009160 <_sbrk_r>:
 8009160:	b538      	push	{r3, r4, r5, lr}
 8009162:	4d06      	ldr	r5, [pc, #24]	@ (800917c <_sbrk_r+0x1c>)
 8009164:	2300      	movs	r3, #0
 8009166:	4604      	mov	r4, r0
 8009168:	4608      	mov	r0, r1
 800916a:	602b      	str	r3, [r5, #0]
 800916c:	f7f7 fd7a 	bl	8000c64 <_sbrk>
 8009170:	1c43      	adds	r3, r0, #1
 8009172:	d102      	bne.n	800917a <_sbrk_r+0x1a>
 8009174:	682b      	ldr	r3, [r5, #0]
 8009176:	b103      	cbz	r3, 800917a <_sbrk_r+0x1a>
 8009178:	6023      	str	r3, [r4, #0]
 800917a:	bd38      	pop	{r3, r4, r5, pc}
 800917c:	20000ad8 	.word	0x20000ad8

08009180 <__errno>:
 8009180:	4b01      	ldr	r3, [pc, #4]	@ (8009188 <__errno+0x8>)
 8009182:	6818      	ldr	r0, [r3, #0]
 8009184:	4770      	bx	lr
 8009186:	bf00      	nop
 8009188:	2000002c 	.word	0x2000002c

0800918c <__libc_init_array>:
 800918c:	b570      	push	{r4, r5, r6, lr}
 800918e:	4d0d      	ldr	r5, [pc, #52]	@ (80091c4 <__libc_init_array+0x38>)
 8009190:	4c0d      	ldr	r4, [pc, #52]	@ (80091c8 <__libc_init_array+0x3c>)
 8009192:	1b64      	subs	r4, r4, r5
 8009194:	10a4      	asrs	r4, r4, #2
 8009196:	2600      	movs	r6, #0
 8009198:	42a6      	cmp	r6, r4
 800919a:	d109      	bne.n	80091b0 <__libc_init_array+0x24>
 800919c:	4d0b      	ldr	r5, [pc, #44]	@ (80091cc <__libc_init_array+0x40>)
 800919e:	4c0c      	ldr	r4, [pc, #48]	@ (80091d0 <__libc_init_array+0x44>)
 80091a0:	f000 f864 	bl	800926c <_init>
 80091a4:	1b64      	subs	r4, r4, r5
 80091a6:	10a4      	asrs	r4, r4, #2
 80091a8:	2600      	movs	r6, #0
 80091aa:	42a6      	cmp	r6, r4
 80091ac:	d105      	bne.n	80091ba <__libc_init_array+0x2e>
 80091ae:	bd70      	pop	{r4, r5, r6, pc}
 80091b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80091b4:	4798      	blx	r3
 80091b6:	3601      	adds	r6, #1
 80091b8:	e7ee      	b.n	8009198 <__libc_init_array+0xc>
 80091ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80091be:	4798      	blx	r3
 80091c0:	3601      	adds	r6, #1
 80091c2:	e7f2      	b.n	80091aa <__libc_init_array+0x1e>
 80091c4:	080092a8 	.word	0x080092a8
 80091c8:	080092a8 	.word	0x080092a8
 80091cc:	080092a8 	.word	0x080092a8
 80091d0:	080092ac 	.word	0x080092ac

080091d4 <__retarget_lock_acquire_recursive>:
 80091d4:	4770      	bx	lr

080091d6 <__retarget_lock_release_recursive>:
 80091d6:	4770      	bx	lr

080091d8 <_free_r>:
 80091d8:	b538      	push	{r3, r4, r5, lr}
 80091da:	4605      	mov	r5, r0
 80091dc:	2900      	cmp	r1, #0
 80091de:	d041      	beq.n	8009264 <_free_r+0x8c>
 80091e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091e4:	1f0c      	subs	r4, r1, #4
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	bfb8      	it	lt
 80091ea:	18e4      	addlt	r4, r4, r3
 80091ec:	f7ff ffa4 	bl	8009138 <__malloc_lock>
 80091f0:	4a1d      	ldr	r2, [pc, #116]	@ (8009268 <_free_r+0x90>)
 80091f2:	6813      	ldr	r3, [r2, #0]
 80091f4:	b933      	cbnz	r3, 8009204 <_free_r+0x2c>
 80091f6:	6063      	str	r3, [r4, #4]
 80091f8:	6014      	str	r4, [r2, #0]
 80091fa:	4628      	mov	r0, r5
 80091fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009200:	f7ff bfa0 	b.w	8009144 <__malloc_unlock>
 8009204:	42a3      	cmp	r3, r4
 8009206:	d908      	bls.n	800921a <_free_r+0x42>
 8009208:	6820      	ldr	r0, [r4, #0]
 800920a:	1821      	adds	r1, r4, r0
 800920c:	428b      	cmp	r3, r1
 800920e:	bf01      	itttt	eq
 8009210:	6819      	ldreq	r1, [r3, #0]
 8009212:	685b      	ldreq	r3, [r3, #4]
 8009214:	1809      	addeq	r1, r1, r0
 8009216:	6021      	streq	r1, [r4, #0]
 8009218:	e7ed      	b.n	80091f6 <_free_r+0x1e>
 800921a:	461a      	mov	r2, r3
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	b10b      	cbz	r3, 8009224 <_free_r+0x4c>
 8009220:	42a3      	cmp	r3, r4
 8009222:	d9fa      	bls.n	800921a <_free_r+0x42>
 8009224:	6811      	ldr	r1, [r2, #0]
 8009226:	1850      	adds	r0, r2, r1
 8009228:	42a0      	cmp	r0, r4
 800922a:	d10b      	bne.n	8009244 <_free_r+0x6c>
 800922c:	6820      	ldr	r0, [r4, #0]
 800922e:	4401      	add	r1, r0
 8009230:	1850      	adds	r0, r2, r1
 8009232:	4283      	cmp	r3, r0
 8009234:	6011      	str	r1, [r2, #0]
 8009236:	d1e0      	bne.n	80091fa <_free_r+0x22>
 8009238:	6818      	ldr	r0, [r3, #0]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	6053      	str	r3, [r2, #4]
 800923e:	4408      	add	r0, r1
 8009240:	6010      	str	r0, [r2, #0]
 8009242:	e7da      	b.n	80091fa <_free_r+0x22>
 8009244:	d902      	bls.n	800924c <_free_r+0x74>
 8009246:	230c      	movs	r3, #12
 8009248:	602b      	str	r3, [r5, #0]
 800924a:	e7d6      	b.n	80091fa <_free_r+0x22>
 800924c:	6820      	ldr	r0, [r4, #0]
 800924e:	1821      	adds	r1, r4, r0
 8009250:	428b      	cmp	r3, r1
 8009252:	bf04      	itt	eq
 8009254:	6819      	ldreq	r1, [r3, #0]
 8009256:	685b      	ldreq	r3, [r3, #4]
 8009258:	6063      	str	r3, [r4, #4]
 800925a:	bf04      	itt	eq
 800925c:	1809      	addeq	r1, r1, r0
 800925e:	6021      	streq	r1, [r4, #0]
 8009260:	6054      	str	r4, [r2, #4]
 8009262:	e7ca      	b.n	80091fa <_free_r+0x22>
 8009264:	bd38      	pop	{r3, r4, r5, pc}
 8009266:	bf00      	nop
 8009268:	2000099c 	.word	0x2000099c

0800926c <_init>:
 800926c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800926e:	bf00      	nop
 8009270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009272:	bc08      	pop	{r3}
 8009274:	469e      	mov	lr, r3
 8009276:	4770      	bx	lr

08009278 <_fini>:
 8009278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800927a:	bf00      	nop
 800927c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800927e:	bc08      	pop	{r3}
 8009280:	469e      	mov	lr, r3
 8009282:	4770      	bx	lr
