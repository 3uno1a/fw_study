
f407_discovery_base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a750  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800a8e0  0800a8e0  0000b8e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a994  0800a994  0000c088  2**0
                  CONTENTS
  4 .ARM          00000008  0800a994  0800a994  0000b994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a99c  0800a99c  0000c088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a99c  0800a99c  0000b99c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a9a0  0800a9a0  0000b9a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800a9a4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c088  2**0
                  CONTENTS
 10 .bss          00000a68  20000088  20000088  0000c088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000af0  20000af0  0000c088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019b6f  00000000  00000000  0000c0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000045b5  00000000  00000000  00025c27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014a8  00000000  00000000  0002a1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fc7  00000000  00000000  0002b688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025b2b  00000000  00000000  0002c64f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e2b0  00000000  00000000  0005217a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfc78  00000000  00000000  0007042a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001400a2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c88  00000000  00000000  001400e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00145d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a8c8 	.word	0x0800a8c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800a8c8 	.word	0x0800a8c8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08c      	sub	sp, #48	@ 0x30
 8000564:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	f107 031c 	add.w	r3, r7, #28
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000576:	2300      	movs	r3, #0
 8000578:	61bb      	str	r3, [r7, #24]
 800057a:	4b7b      	ldr	r3, [pc, #492]	@ (8000768 <MX_GPIO_Init+0x208>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057e:	4a7a      	ldr	r2, [pc, #488]	@ (8000768 <MX_GPIO_Init+0x208>)
 8000580:	f043 0310 	orr.w	r3, r3, #16
 8000584:	6313      	str	r3, [r2, #48]	@ 0x30
 8000586:	4b78      	ldr	r3, [pc, #480]	@ (8000768 <MX_GPIO_Init+0x208>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	f003 0310 	and.w	r3, r3, #16
 800058e:	61bb      	str	r3, [r7, #24]
 8000590:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]
 8000596:	4b74      	ldr	r3, [pc, #464]	@ (8000768 <MX_GPIO_Init+0x208>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059a:	4a73      	ldr	r2, [pc, #460]	@ (8000768 <MX_GPIO_Init+0x208>)
 800059c:	f043 0304 	orr.w	r3, r3, #4
 80005a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a2:	4b71      	ldr	r3, [pc, #452]	@ (8000768 <MX_GPIO_Init+0x208>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a6:	f003 0304 	and.w	r3, r3, #4
 80005aa:	617b      	str	r3, [r7, #20]
 80005ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	613b      	str	r3, [r7, #16]
 80005b2:	4b6d      	ldr	r3, [pc, #436]	@ (8000768 <MX_GPIO_Init+0x208>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	4a6c      	ldr	r2, [pc, #432]	@ (8000768 <MX_GPIO_Init+0x208>)
 80005b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005be:	4b6a      	ldr	r3, [pc, #424]	@ (8000768 <MX_GPIO_Init+0x208>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005c6:	613b      	str	r3, [r7, #16]
 80005c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	4b66      	ldr	r3, [pc, #408]	@ (8000768 <MX_GPIO_Init+0x208>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d2:	4a65      	ldr	r2, [pc, #404]	@ (8000768 <MX_GPIO_Init+0x208>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005da:	4b63      	ldr	r3, [pc, #396]	@ (8000768 <MX_GPIO_Init+0x208>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	60bb      	str	r3, [r7, #8]
 80005ea:	4b5f      	ldr	r3, [pc, #380]	@ (8000768 <MX_GPIO_Init+0x208>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ee:	4a5e      	ldr	r2, [pc, #376]	@ (8000768 <MX_GPIO_Init+0x208>)
 80005f0:	f043 0302 	orr.w	r3, r3, #2
 80005f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f6:	4b5c      	ldr	r3, [pc, #368]	@ (8000768 <MX_GPIO_Init+0x208>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	f003 0302 	and.w	r3, r3, #2
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	4b58      	ldr	r3, [pc, #352]	@ (8000768 <MX_GPIO_Init+0x208>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	4a57      	ldr	r2, [pc, #348]	@ (8000768 <MX_GPIO_Init+0x208>)
 800060c:	f043 0308 	orr.w	r3, r3, #8
 8000610:	6313      	str	r3, [r2, #48]	@ 0x30
 8000612:	4b55      	ldr	r3, [pc, #340]	@ (8000768 <MX_GPIO_Init+0x208>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	f003 0308 	and.w	r3, r3, #8
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	2108      	movs	r1, #8
 8000622:	4852      	ldr	r0, [pc, #328]	@ (800076c <MX_GPIO_Init+0x20c>)
 8000624:	f001 f8cc 	bl	80017c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000628:	2201      	movs	r2, #1
 800062a:	2101      	movs	r1, #1
 800062c:	4850      	ldr	r0, [pc, #320]	@ (8000770 <MX_GPIO_Init+0x210>)
 800062e:	f001 f8c7 	bl	80017c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000632:	2200      	movs	r2, #0
 8000634:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000638:	484e      	ldr	r0, [pc, #312]	@ (8000774 <MX_GPIO_Init+0x214>)
 800063a:	f001 f8c1 	bl	80017c0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	2120      	movs	r1, #32
 8000642:	484d      	ldr	r0, [pc, #308]	@ (8000778 <MX_GPIO_Init+0x218>)
 8000644:	f001 f8bc 	bl	80017c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000648:	2308      	movs	r3, #8
 800064a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064c:	2301      	movs	r3, #1
 800064e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000654:	2300      	movs	r3, #0
 8000656:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000658:	f107 031c 	add.w	r3, r7, #28
 800065c:	4619      	mov	r1, r3
 800065e:	4843      	ldr	r0, [pc, #268]	@ (800076c <MX_GPIO_Init+0x20c>)
 8000660:	f000 fefa 	bl	8001458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000664:	2301      	movs	r3, #1
 8000666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000668:	2301      	movs	r3, #1
 800066a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000670:	2300      	movs	r3, #0
 8000672:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000674:	f107 031c 	add.w	r3, r7, #28
 8000678:	4619      	mov	r1, r3
 800067a:	483d      	ldr	r0, [pc, #244]	@ (8000770 <MX_GPIO_Init+0x210>)
 800067c:	f000 feec 	bl	8001458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000680:	2308      	movs	r3, #8
 8000682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000684:	2302      	movs	r3, #2
 8000686:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068c:	2300      	movs	r3, #0
 800068e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000690:	2305      	movs	r3, #5
 8000692:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000694:	f107 031c 	add.w	r3, r7, #28
 8000698:	4619      	mov	r1, r3
 800069a:	4835      	ldr	r0, [pc, #212]	@ (8000770 <MX_GPIO_Init+0x210>)
 800069c:	f000 fedc 	bl	8001458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006a0:	2301      	movs	r3, #1
 80006a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a4:	2300      	movs	r3, #0
 80006a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ac:	f107 031c 	add.w	r3, r7, #28
 80006b0:	4619      	mov	r1, r3
 80006b2:	4832      	ldr	r0, [pc, #200]	@ (800077c <MX_GPIO_Init+0x21c>)
 80006b4:	f000 fed0 	bl	8001458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80006b8:	2304      	movs	r3, #4
 80006ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006bc:	2300      	movs	r3, #0
 80006be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	4619      	mov	r1, r3
 80006ca:	482b      	ldr	r0, [pc, #172]	@ (8000778 <MX_GPIO_Init+0x218>)
 80006cc:	f000 fec4 	bl	8001458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80006d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d6:	2302      	movs	r3, #2
 80006d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006de:	2300      	movs	r3, #0
 80006e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006e2:	2305      	movs	r3, #5
 80006e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	4619      	mov	r1, r3
 80006ec:	4822      	ldr	r0, [pc, #136]	@ (8000778 <MX_GPIO_Init+0x218>)
 80006ee:	f000 feb3 	bl	8001458 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80006f2:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80006f6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	2300      	movs	r3, #0
 8000702:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000704:	f107 031c 	add.w	r3, r7, #28
 8000708:	4619      	mov	r1, r3
 800070a:	481a      	ldr	r0, [pc, #104]	@ (8000774 <MX_GPIO_Init+0x214>)
 800070c:	f000 fea4 	bl	8001458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000710:	2320      	movs	r3, #32
 8000712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000714:	2300      	movs	r3, #0
 8000716:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	4619      	mov	r1, r3
 8000722:	4814      	ldr	r0, [pc, #80]	@ (8000774 <MX_GPIO_Init+0x214>)
 8000724:	f000 fe98 	bl	8001458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000728:	2320      	movs	r3, #32
 800072a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072c:	2301      	movs	r3, #1
 800072e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000734:	2300      	movs	r3, #0
 8000736:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000738:	f107 031c 	add.w	r3, r7, #28
 800073c:	4619      	mov	r1, r3
 800073e:	480e      	ldr	r0, [pc, #56]	@ (8000778 <MX_GPIO_Init+0x218>)
 8000740:	f000 fe8a 	bl	8001458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000744:	2302      	movs	r3, #2
 8000746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000748:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800074c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	4619      	mov	r1, r3
 8000758:	4804      	ldr	r0, [pc, #16]	@ (800076c <MX_GPIO_Init+0x20c>)
 800075a:	f000 fe7d 	bl	8001458 <HAL_GPIO_Init>

}
 800075e:	bf00      	nop
 8000760:	3730      	adds	r7, #48	@ 0x30
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800
 800076c:	40021000 	.word	0x40021000
 8000770:	40020800 	.word	0x40020800
 8000774:	40020c00 	.word	0x40020c00
 8000778:	40020400 	.word	0x40020400
 800077c:	40020000 	.word	0x40020000

08000780 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000784:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <MX_I2C1_Init+0x50>)
 8000786:	4a13      	ldr	r2, [pc, #76]	@ (80007d4 <MX_I2C1_Init+0x54>)
 8000788:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800078a:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <MX_I2C1_Init+0x50>)
 800078c:	4a12      	ldr	r2, [pc, #72]	@ (80007d8 <MX_I2C1_Init+0x58>)
 800078e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000790:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <MX_I2C1_Init+0x50>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000796:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <MX_I2C1_Init+0x50>)
 8000798:	2200      	movs	r2, #0
 800079a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800079c:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <MX_I2C1_Init+0x50>)
 800079e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a4:	4b0a      	ldr	r3, [pc, #40]	@ (80007d0 <MX_I2C1_Init+0x50>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007aa:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <MX_I2C1_Init+0x50>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b0:	4b07      	ldr	r3, [pc, #28]	@ (80007d0 <MX_I2C1_Init+0x50>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b6:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <MX_I2C1_Init+0x50>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007bc:	4804      	ldr	r0, [pc, #16]	@ (80007d0 <MX_I2C1_Init+0x50>)
 80007be:	f003 f967 	bl	8003a90 <HAL_I2C_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007c8:	f000 fa82 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	200000a4 	.word	0x200000a4
 80007d4:	40005400 	.word	0x40005400
 80007d8:	000186a0 	.word	0x000186a0

080007dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	@ 0x28
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a19      	ldr	r2, [pc, #100]	@ (8000860 <HAL_I2C_MspInit+0x84>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d12c      	bne.n	8000858 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	4b18      	ldr	r3, [pc, #96]	@ (8000864 <HAL_I2C_MspInit+0x88>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	4a17      	ldr	r2, [pc, #92]	@ (8000864 <HAL_I2C_MspInit+0x88>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	6313      	str	r3, [r2, #48]	@ 0x30
 800080e:	4b15      	ldr	r3, [pc, #84]	@ (8000864 <HAL_I2C_MspInit+0x88>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800081a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800081e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000820:	2312      	movs	r3, #18
 8000822:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000824:	2301      	movs	r3, #1
 8000826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800082c:	2304      	movs	r3, #4
 800082e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	480c      	ldr	r0, [pc, #48]	@ (8000868 <HAL_I2C_MspInit+0x8c>)
 8000838:	f000 fe0e 	bl	8001458 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	4b08      	ldr	r3, [pc, #32]	@ (8000864 <HAL_I2C_MspInit+0x88>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000844:	4a07      	ldr	r2, [pc, #28]	@ (8000864 <HAL_I2C_MspInit+0x88>)
 8000846:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800084a:	6413      	str	r3, [r2, #64]	@ 0x40
 800084c:	4b05      	ldr	r3, [pc, #20]	@ (8000864 <HAL_I2C_MspInit+0x88>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000850:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000858:	bf00      	nop
 800085a:	3728      	adds	r7, #40	@ 0x28
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40005400 	.word	0x40005400
 8000864:	40023800 	.word	0x40023800
 8000868:	40020400 	.word	0x40020400

0800086c <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000870:	4b13      	ldr	r3, [pc, #76]	@ (80008c0 <MX_I2S3_Init+0x54>)
 8000872:	4a14      	ldr	r2, [pc, #80]	@ (80008c4 <MX_I2S3_Init+0x58>)
 8000874:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000876:	4b12      	ldr	r3, [pc, #72]	@ (80008c0 <MX_I2S3_Init+0x54>)
 8000878:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800087c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800087e:	4b10      	ldr	r3, [pc, #64]	@ (80008c0 <MX_I2S3_Init+0x54>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000884:	4b0e      	ldr	r3, [pc, #56]	@ (80008c0 <MX_I2S3_Init+0x54>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800088a:	4b0d      	ldr	r3, [pc, #52]	@ (80008c0 <MX_I2S3_Init+0x54>)
 800088c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000890:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000892:	4b0b      	ldr	r3, [pc, #44]	@ (80008c0 <MX_I2S3_Init+0x54>)
 8000894:	4a0c      	ldr	r2, [pc, #48]	@ (80008c8 <MX_I2S3_Init+0x5c>)
 8000896:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000898:	4b09      	ldr	r3, [pc, #36]	@ (80008c0 <MX_I2S3_Init+0x54>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800089e:	4b08      	ldr	r3, [pc, #32]	@ (80008c0 <MX_I2S3_Init+0x54>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008a4:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <MX_I2S3_Init+0x54>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	@ (80008c0 <MX_I2S3_Init+0x54>)
 80008ac:	f003 fa34 	bl	8003d18 <HAL_I2S_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008b6:	f000 fa0b 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200000f8 	.word	0x200000f8
 80008c4:	40003c00 	.word	0x40003c00
 80008c8:	00017700 	.word	0x00017700

080008cc <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08e      	sub	sp, #56	@ 0x38
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a31      	ldr	r2, [pc, #196]	@ (80009bc <HAL_I2S_MspInit+0xf0>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d15a      	bne.n	80009b2 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80008fc:	2301      	movs	r3, #1
 80008fe:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000900:	23c0      	movs	r3, #192	@ 0xc0
 8000902:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000904:	2302      	movs	r3, #2
 8000906:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	4618      	mov	r0, r3
 800090e:	f004 fb3b 	bl	8004f88 <HAL_RCCEx_PeriphCLKConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000918:	f000 f9da 	bl	8000cd0 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800091c:	2300      	movs	r3, #0
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	4b27      	ldr	r3, [pc, #156]	@ (80009c0 <HAL_I2S_MspInit+0xf4>)
 8000922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000924:	4a26      	ldr	r2, [pc, #152]	@ (80009c0 <HAL_I2S_MspInit+0xf4>)
 8000926:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800092a:	6413      	str	r3, [r2, #64]	@ 0x40
 800092c:	4b24      	ldr	r3, [pc, #144]	@ (80009c0 <HAL_I2S_MspInit+0xf4>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000930:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	4b20      	ldr	r3, [pc, #128]	@ (80009c0 <HAL_I2S_MspInit+0xf4>)
 800093e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000940:	4a1f      	ldr	r2, [pc, #124]	@ (80009c0 <HAL_I2S_MspInit+0xf4>)
 8000942:	f043 0301 	orr.w	r3, r3, #1
 8000946:	6313      	str	r3, [r2, #48]	@ 0x30
 8000948:	4b1d      	ldr	r3, [pc, #116]	@ (80009c0 <HAL_I2S_MspInit+0xf4>)
 800094a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094c:	f003 0301 	and.w	r3, r3, #1
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000954:	2300      	movs	r3, #0
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	4b19      	ldr	r3, [pc, #100]	@ (80009c0 <HAL_I2S_MspInit+0xf4>)
 800095a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095c:	4a18      	ldr	r2, [pc, #96]	@ (80009c0 <HAL_I2S_MspInit+0xf4>)
 800095e:	f043 0304 	orr.w	r3, r3, #4
 8000962:	6313      	str	r3, [r2, #48]	@ 0x30
 8000964:	4b16      	ldr	r3, [pc, #88]	@ (80009c0 <HAL_I2S_MspInit+0xf4>)
 8000966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000968:	f003 0304 	and.w	r3, r3, #4
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000970:	2310      	movs	r3, #16
 8000972:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2300      	movs	r3, #0
 800097e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000980:	2306      	movs	r3, #6
 8000982:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000988:	4619      	mov	r1, r3
 800098a:	480e      	ldr	r0, [pc, #56]	@ (80009c4 <HAL_I2S_MspInit+0xf8>)
 800098c:	f000 fd64 	bl	8001458 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000990:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000994:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009a2:	2306      	movs	r3, #6
 80009a4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009aa:	4619      	mov	r1, r3
 80009ac:	4806      	ldr	r0, [pc, #24]	@ (80009c8 <HAL_I2S_MspInit+0xfc>)
 80009ae:	f000 fd53 	bl	8001458 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80009b2:	bf00      	nop
 80009b4:	3738      	adds	r7, #56	@ 0x38
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40003c00 	.word	0x40003c00
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40020000 	.word	0x40020000
 80009c8:	40020800 	.word	0x40020800

080009cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d2:	f000 fb99 	bl	8001108 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d6:	f000 f86f 	bl	8000ab8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009da:	f7ff fdc1 	bl	8000560 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009de:	f7ff fecf 	bl	8000780 <MX_I2C1_Init>
  MX_I2S3_Init();
 80009e2:	f7ff ff43 	bl	800086c <MX_I2S3_Init>
  MX_SPI1_Init();
 80009e6:	f000 f979 	bl	8000cdc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80009ea:	f008 fd23 	bl	8009434 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80009ee:	f000 faef 	bl	8000fd0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t btnState = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	71bb      	strb	r3, [r7, #6]
  uint8_t prevBtnState = 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	73fb      	strb	r3, [r7, #15]

  uint32_t pressedTime = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
  uint8_t blinking = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	71fb      	strb	r3, [r7, #7]

  //LIS3DSH SPI Test
  LIS3DSH_CS_HIGH();
 8000a02:	2201      	movs	r2, #1
 8000a04:	2120      	movs	r1, #32
 8000a06:	4829      	ldr	r0, [pc, #164]	@ (8000aac <main+0xe0>)
 8000a08:	f000 feda 	bl	80017c0 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000a0c:	2064      	movs	r0, #100	@ 0x64
 8000a0e:	f000 fbed 	bl	80011ec <HAL_Delay>

  LIS3DSH_Test();
 8000a12:	f000 f8fb 	bl	8000c0c <LIS3DSH_Test>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    MX_USB_HOST_Process();
 8000a16:	f008 fd33 	bl	8009480 <MX_USB_HOST_Process>

//    printf("Hello World-! \r\n");
//    HAL_Delay(1000);

    btnState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	4824      	ldr	r0, [pc, #144]	@ (8000ab0 <main+0xe4>)
 8000a1e:	f000 feb7 	bl	8001790 <HAL_GPIO_ReadPin>
 8000a22:	4603      	mov	r3, r0
 8000a24:	71bb      	strb	r3, [r7, #6]

    if (btnState == GPIO_PIN_SET && prevBtnState == GPIO_PIN_RESET)
 8000a26:	79bb      	ldrb	r3, [r7, #6]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d105      	bne.n	8000a38 <main+0x6c>
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d102      	bne.n	8000a38 <main+0x6c>
        {
          pressedTime = HAL_GetTick();
 8000a32:	f000 fbcf 	bl	80011d4 <HAL_GetTick>
 8000a36:	60b8      	str	r0, [r7, #8]
        }

    if (btnState == GPIO_PIN_SET && (HAL_GetTick() - pressedTime >= 2000))
 8000a38:	79bb      	ldrb	r3, [r7, #6]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d109      	bne.n	8000a52 <main+0x86>
 8000a3e:	f000 fbc9 	bl	80011d4 <HAL_GetTick>
 8000a42:	4602      	mov	r2, r0
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	1ad3      	subs	r3, r2, r3
 8000a48:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000a4c:	d301      	bcc.n	8000a52 <main+0x86>
    {
      blinking = 1;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	71fb      	strb	r3, [r7, #7]
    }

    if (btnState == GPIO_PIN_RESET && prevBtnState == GPIO_PIN_SET)
 8000a52:	79bb      	ldrb	r3, [r7, #6]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d111      	bne.n	8000a7c <main+0xb0>
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d10e      	bne.n	8000a7c <main+0xb0>
    {
      if (HAL_GetTick() - pressedTime < 2000)
 8000a5e:	f000 fbb9 	bl	80011d4 <HAL_GetTick>
 8000a62:	4602      	mov	r2, r0
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	1ad3      	subs	r3, r2, r3
 8000a68:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000a6c:	d204      	bcs.n	8000a78 <main+0xac>
      {
        HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);   // Green
 8000a6e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a72:	4810      	ldr	r0, [pc, #64]	@ (8000ab4 <main+0xe8>)
 8000a74:	f000 febd 	bl	80017f2 <HAL_GPIO_TogglePin>
      }
      blinking = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	71fb      	strb	r3, [r7, #7]
    }

    if (blinking)
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d008      	beq.n	8000a94 <main+0xc8>
    {
      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);    // Blue
 8000a82:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a86:	480b      	ldr	r0, [pc, #44]	@ (8000ab4 <main+0xe8>)
 8000a88:	f000 feb3 	bl	80017f2 <HAL_GPIO_TogglePin>
      HAL_Delay(50);
 8000a8c:	2032      	movs	r0, #50	@ 0x32
 8000a8e:	f000 fbad 	bl	80011ec <HAL_Delay>
 8000a92:	e002      	b.n	8000a9a <main+0xce>
    }
    else
    {
      HAL_Delay(10);
 8000a94:	200a      	movs	r0, #10
 8000a96:	f000 fba9 	bl	80011ec <HAL_Delay>
    }

    LIS3DSH_ReadXYZ();
 8000a9a:	f000 f8f5 	bl	8000c88 <LIS3DSH_ReadXYZ>
    HAL_Delay(500);
 8000a9e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000aa2:	f000 fba3 	bl	80011ec <HAL_Delay>

    prevBtnState = btnState;
 8000aa6:	79bb      	ldrb	r3, [r7, #6]
 8000aa8:	73fb      	strb	r3, [r7, #15]
  {
 8000aaa:	e7b4      	b.n	8000a16 <main+0x4a>
 8000aac:	40020400 	.word	0x40020400
 8000ab0:	40020000 	.word	0x40020000
 8000ab4:	40020c00 	.word	0x40020c00

08000ab8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b094      	sub	sp, #80	@ 0x50
 8000abc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000abe:	f107 0320 	add.w	r3, r7, #32
 8000ac2:	2230      	movs	r2, #48	@ 0x30
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f009 f993 	bl	8009df2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000acc:	f107 030c 	add.w	r3, r7, #12
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000adc:	2300      	movs	r3, #0
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	4b28      	ldr	r3, [pc, #160]	@ (8000b84 <SystemClock_Config+0xcc>)
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae4:	4a27      	ldr	r2, [pc, #156]	@ (8000b84 <SystemClock_Config+0xcc>)
 8000ae6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aea:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aec:	4b25      	ldr	r3, [pc, #148]	@ (8000b84 <SystemClock_Config+0xcc>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000af8:	2300      	movs	r3, #0
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	4b22      	ldr	r3, [pc, #136]	@ (8000b88 <SystemClock_Config+0xd0>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a21      	ldr	r2, [pc, #132]	@ (8000b88 <SystemClock_Config+0xd0>)
 8000b02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b06:	6013      	str	r3, [r2, #0]
 8000b08:	4b1f      	ldr	r3, [pc, #124]	@ (8000b88 <SystemClock_Config+0xd0>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b14:	2301      	movs	r3, #1
 8000b16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b18:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b1c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b22:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b28:	2308      	movs	r3, #8
 8000b2a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b2c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000b30:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b32:	2302      	movs	r3, #2
 8000b34:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b36:	2307      	movs	r3, #7
 8000b38:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b3a:	f107 0320 	add.w	r3, r7, #32
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f003 fd8a 	bl	8004658 <HAL_RCC_OscConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b4a:	f000 f8c1 	bl	8000cd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4e:	230f      	movs	r3, #15
 8000b50:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b52:	2302      	movs	r3, #2
 8000b54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b5a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b5e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b64:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b66:	f107 030c 	add.w	r3, r7, #12
 8000b6a:	2105      	movs	r1, #5
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f003 ffeb 	bl	8004b48 <HAL_RCC_ClockConfig>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b78:	f000 f8aa 	bl	8000cd0 <Error_Handler>
  }
}
 8000b7c:	bf00      	nop
 8000b7e:	3750      	adds	r7, #80	@ 0x50
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40007000 	.word	0x40007000

08000b8c <_write>:

/* USER CODE BEGIN 4 */
/* printf() - override */

int _write(int file, char *ptr, int len)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	b29a      	uxth	r2, r3
 8000b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba0:	68b9      	ldr	r1, [r7, #8]
 8000ba2:	4804      	ldr	r0, [pc, #16]	@ (8000bb4 <_write+0x28>)
 8000ba4:	f004 fe90 	bl	80058c8 <HAL_UART_Transmit>
    return len;
 8000ba8:	687b      	ldr	r3, [r7, #4]
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	2000019c 	.word	0x2000019c

08000bb8 <LIS3DSH_ReadReg>:


uint8_t LIS3DSH_ReadReg(uint8_t reg)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af02      	add	r7, sp, #8
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
  uint8_t tx[2];
  uint8_t rx[2];

  tx[0] = reg | 0x80; // read : MSB = 1
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	733b      	strb	r3, [r7, #12]
  tx[1] = 0x00;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	737b      	strb	r3, [r7, #13]

  LIS3DSH_CS_LOW();
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2120      	movs	r1, #32
 8000bd4:	480b      	ldr	r0, [pc, #44]	@ (8000c04 <LIS3DSH_ReadReg+0x4c>)
 8000bd6:	f000 fdf3 	bl	80017c0 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, tx, rx, 2, HAL_MAX_DELAY);
 8000bda:	f107 0208 	add.w	r2, r7, #8
 8000bde:	f107 010c 	add.w	r1, r7, #12
 8000be2:	f04f 33ff 	mov.w	r3, #4294967295
 8000be6:	9300      	str	r3, [sp, #0]
 8000be8:	2302      	movs	r3, #2
 8000bea:	4807      	ldr	r0, [pc, #28]	@ (8000c08 <LIS3DSH_ReadReg+0x50>)
 8000bec:	f004 fb97 	bl	800531e <HAL_SPI_TransmitReceive>
  LIS3DSH_CS_HIGH();
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	2120      	movs	r1, #32
 8000bf4:	4803      	ldr	r0, [pc, #12]	@ (8000c04 <LIS3DSH_ReadReg+0x4c>)
 8000bf6:	f000 fde3 	bl	80017c0 <HAL_GPIO_WritePin>

  return rx[1];
 8000bfa:	7a7b      	ldrb	r3, [r7, #9]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40020400 	.word	0x40020400
 8000c08:	20000140 	.word	0x20000140

08000c0c <LIS3DSH_Test>:


void LIS3DSH_Test(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
  uint8_t id = LIS3DSH_ReadReg(0x0F);   // read who am i reg
 8000c12:	200f      	movs	r0, #15
 8000c14:	f7ff ffd0 	bl	8000bb8 <LIS3DSH_ReadReg>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	71fb      	strb	r3, [r7, #7]

  if (id == 0x3F)  // LIS3DSH ID
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c20:	d105      	bne.n	8000c2e <LIS3DSH_Test+0x22>
  {
    printf("LIS3DSH detected! WHO_AM_I = 0x%02X\r\n", id);
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	4619      	mov	r1, r3
 8000c26:	4806      	ldr	r0, [pc, #24]	@ (8000c40 <LIS3DSH_Test+0x34>)
 8000c28:	f009 f88e 	bl	8009d48 <iprintf>
  }
  else
  {
    printf("LIS3DSH not found. Read: 0x%02X\r\n", id);
  }
}
 8000c2c:	e004      	b.n	8000c38 <LIS3DSH_Test+0x2c>
    printf("LIS3DSH not found. Read: 0x%02X\r\n", id);
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	4619      	mov	r1, r3
 8000c32:	4804      	ldr	r0, [pc, #16]	@ (8000c44 <LIS3DSH_Test+0x38>)
 8000c34:	f009 f888 	bl	8009d48 <iprintf>
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	0800a8e0 	.word	0x0800a8e0
 8000c44:	0800a908 	.word	0x0800a908

08000c48 <LIS3DSH_ReadAxis>:


int16_t LIS3DSH_ReadAxis(uint8_t addr_l, uint8_t addr_h)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	460a      	mov	r2, r1
 8000c52:	71fb      	strb	r3, [r7, #7]
 8000c54:	4613      	mov	r3, r2
 8000c56:	71bb      	strb	r3, [r7, #6]
  uint8_t low = LIS3DSH_ReadReg(addr_l);      // read LSB
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff ffac 	bl	8000bb8 <LIS3DSH_ReadReg>
 8000c60:	4603      	mov	r3, r0
 8000c62:	73fb      	strb	r3, [r7, #15]
  uint8_t high = LIS3DSH_ReadReg(addr_h);     // read MSB
 8000c64:	79bb      	ldrb	r3, [r7, #6]
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff ffa6 	bl	8000bb8 <LIS3DSH_ReadReg>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	73bb      	strb	r3, [r7, #14]
  return (uint16_t)((high << 8) | low);       // 16 bit (MSB + LSB)
 8000c70:	7bbb      	ldrb	r3, [r7, #14]
 8000c72:	021b      	lsls	r3, r3, #8
 8000c74:	b21a      	sxth	r2, r3
 8000c76:	7bfb      	ldrb	r3, [r7, #15]
 8000c78:	b21b      	sxth	r3, r3
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	b21b      	sxth	r3, r3
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <LIS3DSH_ReadXYZ>:


void LIS3DSH_ReadXYZ(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
  int16_t x = LIS3DSH_ReadAxis(0x28, 0x29);    // x-LSB, x-MSB
 8000c8e:	2129      	movs	r1, #41	@ 0x29
 8000c90:	2028      	movs	r0, #40	@ 0x28
 8000c92:	f7ff ffd9 	bl	8000c48 <LIS3DSH_ReadAxis>
 8000c96:	4603      	mov	r3, r0
 8000c98:	80fb      	strh	r3, [r7, #6]
  int16_t y = LIS3DSH_ReadAxis(0x2A, 0x2B);
 8000c9a:	212b      	movs	r1, #43	@ 0x2b
 8000c9c:	202a      	movs	r0, #42	@ 0x2a
 8000c9e:	f7ff ffd3 	bl	8000c48 <LIS3DSH_ReadAxis>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	80bb      	strh	r3, [r7, #4]
  int16_t z = LIS3DSH_ReadAxis(0x2C, 0x2D);
 8000ca6:	212d      	movs	r1, #45	@ 0x2d
 8000ca8:	202c      	movs	r0, #44	@ 0x2c
 8000caa:	f7ff ffcd 	bl	8000c48 <LIS3DSH_ReadAxis>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	807b      	strh	r3, [r7, #2]

  printf("X: %d, Y: %d, Z: %d \r\n", x, y, z);
 8000cb2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000cb6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000cba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000cbe:	4803      	ldr	r0, [pc, #12]	@ (8000ccc <LIS3DSH_ReadXYZ+0x44>)
 8000cc0:	f009 f842 	bl	8009d48 <iprintf>
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	0800a92c 	.word	0x0800a92c

08000cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd4:	b672      	cpsid	i
}
 8000cd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <Error_Handler+0x8>

08000cdc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ce0:	4b17      	ldr	r3, [pc, #92]	@ (8000d40 <MX_SPI1_Init+0x64>)
 8000ce2:	4a18      	ldr	r2, [pc, #96]	@ (8000d44 <MX_SPI1_Init+0x68>)
 8000ce4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ce6:	4b16      	ldr	r3, [pc, #88]	@ (8000d40 <MX_SPI1_Init+0x64>)
 8000ce8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000cec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cee:	4b14      	ldr	r3, [pc, #80]	@ (8000d40 <MX_SPI1_Init+0x64>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cf4:	4b12      	ldr	r3, [pc, #72]	@ (8000d40 <MX_SPI1_Init+0x64>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000cfa:	4b11      	ldr	r3, [pc, #68]	@ (8000d40 <MX_SPI1_Init+0x64>)
 8000cfc:	2202      	movs	r2, #2
 8000cfe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d00:	4b0f      	ldr	r3, [pc, #60]	@ (8000d40 <MX_SPI1_Init+0x64>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	@ (8000d40 <MX_SPI1_Init+0x64>)
 8000d08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d40 <MX_SPI1_Init+0x64>)
 8000d10:	2218      	movs	r2, #24
 8000d12:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d14:	4b0a      	ldr	r3, [pc, #40]	@ (8000d40 <MX_SPI1_Init+0x64>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d1a:	4b09      	ldr	r3, [pc, #36]	@ (8000d40 <MX_SPI1_Init+0x64>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <MX_SPI1_Init+0x64>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d26:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <MX_SPI1_Init+0x64>)
 8000d28:	220a      	movs	r2, #10
 8000d2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d2c:	4804      	ldr	r0, [pc, #16]	@ (8000d40 <MX_SPI1_Init+0x64>)
 8000d2e:	f004 fa6d 	bl	800520c <HAL_SPI_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d38:	f7ff ffca 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000140 	.word	0x20000140
 8000d44:	40013000 	.word	0x40013000

08000d48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08a      	sub	sp, #40	@ 0x28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a19      	ldr	r2, [pc, #100]	@ (8000dcc <HAL_SPI_MspInit+0x84>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d12b      	bne.n	8000dc2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	4b18      	ldr	r3, [pc, #96]	@ (8000dd0 <HAL_SPI_MspInit+0x88>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d72:	4a17      	ldr	r2, [pc, #92]	@ (8000dd0 <HAL_SPI_MspInit+0x88>)
 8000d74:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d7a:	4b15      	ldr	r3, [pc, #84]	@ (8000dd0 <HAL_SPI_MspInit+0x88>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	4b11      	ldr	r3, [pc, #68]	@ (8000dd0 <HAL_SPI_MspInit+0x88>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	4a10      	ldr	r2, [pc, #64]	@ (8000dd0 <HAL_SPI_MspInit+0x88>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d96:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd0 <HAL_SPI_MspInit+0x88>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000da2:	23e0      	movs	r3, #224	@ 0xe0
 8000da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000db2:	2305      	movs	r3, #5
 8000db4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4805      	ldr	r0, [pc, #20]	@ (8000dd4 <HAL_SPI_MspInit+0x8c>)
 8000dbe:	f000 fb4b 	bl	8001458 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000dc2:	bf00      	nop
 8000dc4:	3728      	adds	r7, #40	@ 0x28
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40013000 	.word	0x40013000
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40020000 	.word	0x40020000

08000dd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	4b10      	ldr	r3, [pc, #64]	@ (8000e24 <HAL_MspInit+0x4c>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de6:	4a0f      	ldr	r2, [pc, #60]	@ (8000e24 <HAL_MspInit+0x4c>)
 8000de8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dee:	4b0d      	ldr	r3, [pc, #52]	@ (8000e24 <HAL_MspInit+0x4c>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	603b      	str	r3, [r7, #0]
 8000dfe:	4b09      	ldr	r3, [pc, #36]	@ (8000e24 <HAL_MspInit+0x4c>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e02:	4a08      	ldr	r2, [pc, #32]	@ (8000e24 <HAL_MspInit+0x4c>)
 8000e04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e0a:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <HAL_MspInit+0x4c>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e12:	603b      	str	r3, [r7, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e16:	2007      	movs	r0, #7
 8000e18:	f000 fadc 	bl	80013d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40023800 	.word	0x40023800

08000e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <NMI_Handler+0x4>

08000e30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <HardFault_Handler+0x4>

08000e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <MemManage_Handler+0x4>

08000e40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <BusFault_Handler+0x4>

08000e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <UsageFault_Handler+0x4>

08000e50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e7e:	f000 f995 	bl	80011ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e8c:	4802      	ldr	r0, [pc, #8]	@ (8000e98 <OTG_FS_IRQHandler+0x10>)
 8000e8e:	f000 ffab 	bl	8001de8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200005c4 	.word	0x200005c4

08000e9c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	e00a      	b.n	8000ec4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000eae:	f3af 8000 	nop.w
 8000eb2:	4601      	mov	r1, r0
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	1c5a      	adds	r2, r3, #1
 8000eb8:	60ba      	str	r2, [r7, #8]
 8000eba:	b2ca      	uxtb	r2, r1
 8000ebc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	617b      	str	r3, [r7, #20]
 8000ec4:	697a      	ldr	r2, [r7, #20]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	dbf0      	blt.n	8000eae <_read+0x12>
  }

  return len;
 8000ecc:	687b      	ldr	r3, [r7, #4]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
 8000ef6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000efe:	605a      	str	r2, [r3, #4]
  return 0;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <_isatty>:

int _isatty(int file)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	b083      	sub	sp, #12
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f16:	2301      	movs	r3, #1
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
	...

08000f40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f48:	4a14      	ldr	r2, [pc, #80]	@ (8000f9c <_sbrk+0x5c>)
 8000f4a:	4b15      	ldr	r3, [pc, #84]	@ (8000fa0 <_sbrk+0x60>)
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f54:	4b13      	ldr	r3, [pc, #76]	@ (8000fa4 <_sbrk+0x64>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d102      	bne.n	8000f62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	@ (8000fa4 <_sbrk+0x64>)
 8000f5e:	4a12      	ldr	r2, [pc, #72]	@ (8000fa8 <_sbrk+0x68>)
 8000f60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f62:	4b10      	ldr	r3, [pc, #64]	@ (8000fa4 <_sbrk+0x64>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d207      	bcs.n	8000f80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f70:	f008 ff9e 	bl	8009eb0 <__errno>
 8000f74:	4603      	mov	r3, r0
 8000f76:	220c      	movs	r2, #12
 8000f78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7e:	e009      	b.n	8000f94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f80:	4b08      	ldr	r3, [pc, #32]	@ (8000fa4 <_sbrk+0x64>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f86:	4b07      	ldr	r3, [pc, #28]	@ (8000fa4 <_sbrk+0x64>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	4a05      	ldr	r2, [pc, #20]	@ (8000fa4 <_sbrk+0x64>)
 8000f90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f92:	68fb      	ldr	r3, [r7, #12]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20020000 	.word	0x20020000
 8000fa0:	00000400 	.word	0x00000400
 8000fa4:	20000198 	.word	0x20000198
 8000fa8:	20000af0 	.word	0x20000af0

08000fac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fb0:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <SystemInit+0x20>)
 8000fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fb6:	4a05      	ldr	r2, [pc, #20]	@ (8000fcc <SystemInit+0x20>)
 8000fb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fd4:	4b11      	ldr	r3, [pc, #68]	@ (800101c <MX_USART2_UART_Init+0x4c>)
 8000fd6:	4a12      	ldr	r2, [pc, #72]	@ (8001020 <MX_USART2_UART_Init+0x50>)
 8000fd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fda:	4b10      	ldr	r3, [pc, #64]	@ (800101c <MX_USART2_UART_Init+0x4c>)
 8000fdc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fe0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800101c <MX_USART2_UART_Init+0x4c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <MX_USART2_UART_Init+0x4c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fee:	4b0b      	ldr	r3, [pc, #44]	@ (800101c <MX_USART2_UART_Init+0x4c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ff4:	4b09      	ldr	r3, [pc, #36]	@ (800101c <MX_USART2_UART_Init+0x4c>)
 8000ff6:	220c      	movs	r2, #12
 8000ff8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffa:	4b08      	ldr	r3, [pc, #32]	@ (800101c <MX_USART2_UART_Init+0x4c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001000:	4b06      	ldr	r3, [pc, #24]	@ (800101c <MX_USART2_UART_Init+0x4c>)
 8001002:	2200      	movs	r2, #0
 8001004:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001006:	4805      	ldr	r0, [pc, #20]	@ (800101c <MX_USART2_UART_Init+0x4c>)
 8001008:	f004 fc0e 	bl	8005828 <HAL_UART_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001012:	f7ff fe5d 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	2000019c 	.word	0x2000019c
 8001020:	40004400 	.word	0x40004400

08001024 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	@ 0x28
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a19      	ldr	r2, [pc, #100]	@ (80010a8 <HAL_UART_MspInit+0x84>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d12b      	bne.n	800109e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	4b18      	ldr	r3, [pc, #96]	@ (80010ac <HAL_UART_MspInit+0x88>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104e:	4a17      	ldr	r2, [pc, #92]	@ (80010ac <HAL_UART_MspInit+0x88>)
 8001050:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001054:	6413      	str	r3, [r2, #64]	@ 0x40
 8001056:	4b15      	ldr	r3, [pc, #84]	@ (80010ac <HAL_UART_MspInit+0x88>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <HAL_UART_MspInit+0x88>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	4a10      	ldr	r2, [pc, #64]	@ (80010ac <HAL_UART_MspInit+0x88>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6313      	str	r3, [r2, #48]	@ 0x30
 8001072:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <HAL_UART_MspInit+0x88>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800107e:	230c      	movs	r3, #12
 8001080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001082:	2302      	movs	r3, #2
 8001084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108a:	2303      	movs	r3, #3
 800108c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800108e:	2307      	movs	r3, #7
 8001090:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	4619      	mov	r1, r3
 8001098:	4805      	ldr	r0, [pc, #20]	@ (80010b0 <HAL_UART_MspInit+0x8c>)
 800109a:	f000 f9dd 	bl	8001458 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800109e:	bf00      	nop
 80010a0:	3728      	adds	r7, #40	@ 0x28
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40004400 	.word	0x40004400
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40020000 	.word	0x40020000

080010b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010b8:	f7ff ff78 	bl	8000fac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010bc:	480c      	ldr	r0, [pc, #48]	@ (80010f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010be:	490d      	ldr	r1, [pc, #52]	@ (80010f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010c0:	4a0d      	ldr	r2, [pc, #52]	@ (80010f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c4:	e002      	b.n	80010cc <LoopCopyDataInit>

080010c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ca:	3304      	adds	r3, #4

080010cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d0:	d3f9      	bcc.n	80010c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010d2:	4a0a      	ldr	r2, [pc, #40]	@ (80010fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001100 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d8:	e001      	b.n	80010de <LoopFillZerobss>

080010da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010dc:	3204      	adds	r2, #4

080010de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e0:	d3fb      	bcc.n	80010da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010e2:	f008 feeb 	bl	8009ebc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010e6:	f7ff fc71 	bl	80009cc <main>
  bx  lr    
 80010ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80010f8:	0800a9a4 	.word	0x0800a9a4
  ldr r2, =_sbss
 80010fc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001100:	20000af0 	.word	0x20000af0

08001104 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001104:	e7fe      	b.n	8001104 <ADC_IRQHandler>
	...

08001108 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800110c:	4b0e      	ldr	r3, [pc, #56]	@ (8001148 <HAL_Init+0x40>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a0d      	ldr	r2, [pc, #52]	@ (8001148 <HAL_Init+0x40>)
 8001112:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001116:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001118:	4b0b      	ldr	r3, [pc, #44]	@ (8001148 <HAL_Init+0x40>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a0a      	ldr	r2, [pc, #40]	@ (8001148 <HAL_Init+0x40>)
 800111e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001122:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001124:	4b08      	ldr	r3, [pc, #32]	@ (8001148 <HAL_Init+0x40>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a07      	ldr	r2, [pc, #28]	@ (8001148 <HAL_Init+0x40>)
 800112a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800112e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001130:	2003      	movs	r0, #3
 8001132:	f000 f94f 	bl	80013d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001136:	2000      	movs	r0, #0
 8001138:	f000 f808 	bl	800114c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800113c:	f7ff fe4c 	bl	8000dd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40023c00 	.word	0x40023c00

0800114c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001154:	4b12      	ldr	r3, [pc, #72]	@ (80011a0 <HAL_InitTick+0x54>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4b12      	ldr	r3, [pc, #72]	@ (80011a4 <HAL_InitTick+0x58>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	4619      	mov	r1, r3
 800115e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001162:	fbb3 f3f1 	udiv	r3, r3, r1
 8001166:	fbb2 f3f3 	udiv	r3, r2, r3
 800116a:	4618      	mov	r0, r3
 800116c:	f000 f967 	bl	800143e <HAL_SYSTICK_Config>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e00e      	b.n	8001198 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2b0f      	cmp	r3, #15
 800117e:	d80a      	bhi.n	8001196 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001180:	2200      	movs	r2, #0
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	f04f 30ff 	mov.w	r0, #4294967295
 8001188:	f000 f92f 	bl	80013ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800118c:	4a06      	ldr	r2, [pc, #24]	@ (80011a8 <HAL_InitTick+0x5c>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001192:	2300      	movs	r3, #0
 8001194:	e000      	b.n	8001198 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000000 	.word	0x20000000
 80011a4:	20000008 	.word	0x20000008
 80011a8:	20000004 	.word	0x20000004

080011ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011b0:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <HAL_IncTick+0x20>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b06      	ldr	r3, [pc, #24]	@ (80011d0 <HAL_IncTick+0x24>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4413      	add	r3, r2
 80011bc:	4a04      	ldr	r2, [pc, #16]	@ (80011d0 <HAL_IncTick+0x24>)
 80011be:	6013      	str	r3, [r2, #0]
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	20000008 	.word	0x20000008
 80011d0:	200001e4 	.word	0x200001e4

080011d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return uwTick;
 80011d8:	4b03      	ldr	r3, [pc, #12]	@ (80011e8 <HAL_GetTick+0x14>)
 80011da:	681b      	ldr	r3, [r3, #0]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	200001e4 	.word	0x200001e4

080011ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011f4:	f7ff ffee 	bl	80011d4 <HAL_GetTick>
 80011f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001204:	d005      	beq.n	8001212 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001206:	4b0a      	ldr	r3, [pc, #40]	@ (8001230 <HAL_Delay+0x44>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	461a      	mov	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4413      	add	r3, r2
 8001210:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001212:	bf00      	nop
 8001214:	f7ff ffde 	bl	80011d4 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	429a      	cmp	r2, r3
 8001222:	d8f7      	bhi.n	8001214 <HAL_Delay+0x28>
  {
  }
}
 8001224:	bf00      	nop
 8001226:	bf00      	nop
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000008 	.word	0x20000008

08001234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001244:	4b0c      	ldr	r3, [pc, #48]	@ (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001250:	4013      	ands	r3, r2
 8001252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800125c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001260:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001266:	4a04      	ldr	r2, [pc, #16]	@ (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	60d3      	str	r3, [r2, #12]
}
 800126c:	bf00      	nop
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001280:	4b04      	ldr	r3, [pc, #16]	@ (8001294 <__NVIC_GetPriorityGrouping+0x18>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	0a1b      	lsrs	r3, r3, #8
 8001286:	f003 0307 	and.w	r3, r3, #7
}
 800128a:	4618      	mov	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	db0b      	blt.n	80012c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	f003 021f 	and.w	r2, r3, #31
 80012b0:	4907      	ldr	r1, [pc, #28]	@ (80012d0 <__NVIC_EnableIRQ+0x38>)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	095b      	lsrs	r3, r3, #5
 80012b8:	2001      	movs	r0, #1
 80012ba:	fa00 f202 	lsl.w	r2, r0, r2
 80012be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	e000e100 	.word	0xe000e100

080012d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	6039      	str	r1, [r7, #0]
 80012de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	db0a      	blt.n	80012fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	490c      	ldr	r1, [pc, #48]	@ (8001320 <__NVIC_SetPriority+0x4c>)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	0112      	lsls	r2, r2, #4
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	440b      	add	r3, r1
 80012f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012fc:	e00a      	b.n	8001314 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4908      	ldr	r1, [pc, #32]	@ (8001324 <__NVIC_SetPriority+0x50>)
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	f003 030f 	and.w	r3, r3, #15
 800130a:	3b04      	subs	r3, #4
 800130c:	0112      	lsls	r2, r2, #4
 800130e:	b2d2      	uxtb	r2, r2
 8001310:	440b      	add	r3, r1
 8001312:	761a      	strb	r2, [r3, #24]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000e100 	.word	0xe000e100
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001328:	b480      	push	{r7}
 800132a:	b089      	sub	sp, #36	@ 0x24
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f1c3 0307 	rsb	r3, r3, #7
 8001342:	2b04      	cmp	r3, #4
 8001344:	bf28      	it	cs
 8001346:	2304      	movcs	r3, #4
 8001348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3304      	adds	r3, #4
 800134e:	2b06      	cmp	r3, #6
 8001350:	d902      	bls.n	8001358 <NVIC_EncodePriority+0x30>
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3b03      	subs	r3, #3
 8001356:	e000      	b.n	800135a <NVIC_EncodePriority+0x32>
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	f04f 32ff 	mov.w	r2, #4294967295
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43da      	mvns	r2, r3
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	401a      	ands	r2, r3
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001370:	f04f 31ff 	mov.w	r1, #4294967295
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	fa01 f303 	lsl.w	r3, r1, r3
 800137a:	43d9      	mvns	r1, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001380:	4313      	orrs	r3, r2
         );
}
 8001382:	4618      	mov	r0, r3
 8001384:	3724      	adds	r7, #36	@ 0x24
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
	...

08001390 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3b01      	subs	r3, #1
 800139c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013a0:	d301      	bcc.n	80013a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013a2:	2301      	movs	r3, #1
 80013a4:	e00f      	b.n	80013c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013a6:	4a0a      	ldr	r2, [pc, #40]	@ (80013d0 <SysTick_Config+0x40>)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ae:	210f      	movs	r1, #15
 80013b0:	f04f 30ff 	mov.w	r0, #4294967295
 80013b4:	f7ff ff8e 	bl	80012d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b8:	4b05      	ldr	r3, [pc, #20]	@ (80013d0 <SysTick_Config+0x40>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013be:	4b04      	ldr	r3, [pc, #16]	@ (80013d0 <SysTick_Config+0x40>)
 80013c0:	2207      	movs	r2, #7
 80013c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	e000e010 	.word	0xe000e010

080013d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff ff29 	bl	8001234 <__NVIC_SetPriorityGrouping>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b086      	sub	sp, #24
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	4603      	mov	r3, r0
 80013f2:	60b9      	str	r1, [r7, #8]
 80013f4:	607a      	str	r2, [r7, #4]
 80013f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013fc:	f7ff ff3e 	bl	800127c <__NVIC_GetPriorityGrouping>
 8001400:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	68b9      	ldr	r1, [r7, #8]
 8001406:	6978      	ldr	r0, [r7, #20]
 8001408:	f7ff ff8e 	bl	8001328 <NVIC_EncodePriority>
 800140c:	4602      	mov	r2, r0
 800140e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001412:	4611      	mov	r1, r2
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ff5d 	bl	80012d4 <__NVIC_SetPriority>
}
 800141a:	bf00      	nop
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	4603      	mov	r3, r0
 800142a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800142c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff31 	bl	8001298 <__NVIC_EnableIRQ>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff ffa2 	bl	8001390 <SysTick_Config>
 800144c:	4603      	mov	r3, r0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
	...

08001458 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001458:	b480      	push	{r7}
 800145a:	b089      	sub	sp, #36	@ 0x24
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800146a:	2300      	movs	r3, #0
 800146c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
 8001472:	e16b      	b.n	800174c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001474:	2201      	movs	r2, #1
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	697a      	ldr	r2, [r7, #20]
 8001484:	4013      	ands	r3, r2
 8001486:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	429a      	cmp	r2, r3
 800148e:	f040 815a 	bne.w	8001746 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	2b01      	cmp	r3, #1
 800149c:	d005      	beq.n	80014aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d130      	bne.n	800150c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	2203      	movs	r2, #3
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4013      	ands	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	68da      	ldr	r2, [r3, #12]
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014e0:	2201      	movs	r2, #1
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	091b      	lsrs	r3, r3, #4
 80014f6:	f003 0201 	and.w	r2, r3, #1
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	2b03      	cmp	r3, #3
 8001516:	d017      	beq.n	8001548 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	2203      	movs	r2, #3
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4313      	orrs	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 0303 	and.w	r3, r3, #3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d123      	bne.n	800159c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	08da      	lsrs	r2, r3, #3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3208      	adds	r2, #8
 800155c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001560:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	220f      	movs	r2, #15
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4013      	ands	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	691a      	ldr	r2, [r3, #16]
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	08da      	lsrs	r2, r3, #3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	3208      	adds	r2, #8
 8001596:	69b9      	ldr	r1, [r7, #24]
 8001598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	2203      	movs	r2, #3
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	43db      	mvns	r3, r3
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4013      	ands	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 0203 	and.w	r2, r3, #3
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f000 80b4 	beq.w	8001746 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	4b60      	ldr	r3, [pc, #384]	@ (8001764 <HAL_GPIO_Init+0x30c>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e6:	4a5f      	ldr	r2, [pc, #380]	@ (8001764 <HAL_GPIO_Init+0x30c>)
 80015e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ee:	4b5d      	ldr	r3, [pc, #372]	@ (8001764 <HAL_GPIO_Init+0x30c>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015fa:	4a5b      	ldr	r2, [pc, #364]	@ (8001768 <HAL_GPIO_Init+0x310>)
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	089b      	lsrs	r3, r3, #2
 8001600:	3302      	adds	r3, #2
 8001602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001606:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f003 0303 	and.w	r3, r3, #3
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	220f      	movs	r2, #15
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4013      	ands	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a52      	ldr	r2, [pc, #328]	@ (800176c <HAL_GPIO_Init+0x314>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d02b      	beq.n	800167e <HAL_GPIO_Init+0x226>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a51      	ldr	r2, [pc, #324]	@ (8001770 <HAL_GPIO_Init+0x318>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d025      	beq.n	800167a <HAL_GPIO_Init+0x222>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a50      	ldr	r2, [pc, #320]	@ (8001774 <HAL_GPIO_Init+0x31c>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d01f      	beq.n	8001676 <HAL_GPIO_Init+0x21e>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a4f      	ldr	r2, [pc, #316]	@ (8001778 <HAL_GPIO_Init+0x320>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d019      	beq.n	8001672 <HAL_GPIO_Init+0x21a>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a4e      	ldr	r2, [pc, #312]	@ (800177c <HAL_GPIO_Init+0x324>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d013      	beq.n	800166e <HAL_GPIO_Init+0x216>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a4d      	ldr	r2, [pc, #308]	@ (8001780 <HAL_GPIO_Init+0x328>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d00d      	beq.n	800166a <HAL_GPIO_Init+0x212>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a4c      	ldr	r2, [pc, #304]	@ (8001784 <HAL_GPIO_Init+0x32c>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d007      	beq.n	8001666 <HAL_GPIO_Init+0x20e>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a4b      	ldr	r2, [pc, #300]	@ (8001788 <HAL_GPIO_Init+0x330>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d101      	bne.n	8001662 <HAL_GPIO_Init+0x20a>
 800165e:	2307      	movs	r3, #7
 8001660:	e00e      	b.n	8001680 <HAL_GPIO_Init+0x228>
 8001662:	2308      	movs	r3, #8
 8001664:	e00c      	b.n	8001680 <HAL_GPIO_Init+0x228>
 8001666:	2306      	movs	r3, #6
 8001668:	e00a      	b.n	8001680 <HAL_GPIO_Init+0x228>
 800166a:	2305      	movs	r3, #5
 800166c:	e008      	b.n	8001680 <HAL_GPIO_Init+0x228>
 800166e:	2304      	movs	r3, #4
 8001670:	e006      	b.n	8001680 <HAL_GPIO_Init+0x228>
 8001672:	2303      	movs	r3, #3
 8001674:	e004      	b.n	8001680 <HAL_GPIO_Init+0x228>
 8001676:	2302      	movs	r3, #2
 8001678:	e002      	b.n	8001680 <HAL_GPIO_Init+0x228>
 800167a:	2301      	movs	r3, #1
 800167c:	e000      	b.n	8001680 <HAL_GPIO_Init+0x228>
 800167e:	2300      	movs	r3, #0
 8001680:	69fa      	ldr	r2, [r7, #28]
 8001682:	f002 0203 	and.w	r2, r2, #3
 8001686:	0092      	lsls	r2, r2, #2
 8001688:	4093      	lsls	r3, r2
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4313      	orrs	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001690:	4935      	ldr	r1, [pc, #212]	@ (8001768 <HAL_GPIO_Init+0x310>)
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	089b      	lsrs	r3, r3, #2
 8001696:	3302      	adds	r3, #2
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800169e:	4b3b      	ldr	r3, [pc, #236]	@ (800178c <HAL_GPIO_Init+0x334>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	43db      	mvns	r3, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4013      	ands	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	4313      	orrs	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016c2:	4a32      	ldr	r2, [pc, #200]	@ (800178c <HAL_GPIO_Init+0x334>)
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016c8:	4b30      	ldr	r3, [pc, #192]	@ (800178c <HAL_GPIO_Init+0x334>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016ec:	4a27      	ldr	r2, [pc, #156]	@ (800178c <HAL_GPIO_Init+0x334>)
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016f2:	4b26      	ldr	r3, [pc, #152]	@ (800178c <HAL_GPIO_Init+0x334>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	43db      	mvns	r3, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4013      	ands	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	4313      	orrs	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001716:	4a1d      	ldr	r2, [pc, #116]	@ (800178c <HAL_GPIO_Init+0x334>)
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800171c:	4b1b      	ldr	r3, [pc, #108]	@ (800178c <HAL_GPIO_Init+0x334>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	43db      	mvns	r3, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4013      	ands	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	4313      	orrs	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001740:	4a12      	ldr	r2, [pc, #72]	@ (800178c <HAL_GPIO_Init+0x334>)
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3301      	adds	r3, #1
 800174a:	61fb      	str	r3, [r7, #28]
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	2b0f      	cmp	r3, #15
 8001750:	f67f ae90 	bls.w	8001474 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001754:	bf00      	nop
 8001756:	bf00      	nop
 8001758:	3724      	adds	r7, #36	@ 0x24
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	40023800 	.word	0x40023800
 8001768:	40013800 	.word	0x40013800
 800176c:	40020000 	.word	0x40020000
 8001770:	40020400 	.word	0x40020400
 8001774:	40020800 	.word	0x40020800
 8001778:	40020c00 	.word	0x40020c00
 800177c:	40021000 	.word	0x40021000
 8001780:	40021400 	.word	0x40021400
 8001784:	40021800 	.word	0x40021800
 8001788:	40021c00 	.word	0x40021c00
 800178c:	40013c00 	.word	0x40013c00

08001790 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	691a      	ldr	r2, [r3, #16]
 80017a0:	887b      	ldrh	r3, [r7, #2]
 80017a2:	4013      	ands	r3, r2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d002      	beq.n	80017ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017a8:	2301      	movs	r3, #1
 80017aa:	73fb      	strb	r3, [r7, #15]
 80017ac:	e001      	b.n	80017b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017ae:	2300      	movs	r3, #0
 80017b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	807b      	strh	r3, [r7, #2]
 80017cc:	4613      	mov	r3, r2
 80017ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017d0:	787b      	ldrb	r3, [r7, #1]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017d6:	887a      	ldrh	r2, [r7, #2]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017dc:	e003      	b.n	80017e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017de:	887b      	ldrh	r3, [r7, #2]
 80017e0:	041a      	lsls	r2, r3, #16
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	619a      	str	r2, [r3, #24]
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b085      	sub	sp, #20
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	460b      	mov	r3, r1
 80017fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001804:	887a      	ldrh	r2, [r7, #2]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4013      	ands	r3, r2
 800180a:	041a      	lsls	r2, r3, #16
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	43d9      	mvns	r1, r3
 8001810:	887b      	ldrh	r3, [r7, #2]
 8001812:	400b      	ands	r3, r1
 8001814:	431a      	orrs	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	619a      	str	r2, [r3, #24]
}
 800181a:	bf00      	nop
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af02      	add	r7, sp, #8
 800182c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d101      	bne.n	8001838 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e059      	b.n	80018ec <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d106      	bne.n	8001858 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f007 fe4c 	bl	80094f0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2203      	movs	r2, #3
 800185c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001866:	d102      	bne.n	800186e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f004 fc59 	bl	800612a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6818      	ldr	r0, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	7c1a      	ldrb	r2, [r3, #16]
 8001880:	f88d 2000 	strb.w	r2, [sp]
 8001884:	3304      	adds	r3, #4
 8001886:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001888:	f004 fbda 	bl	8006040 <USB_CoreInit>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d005      	beq.n	800189e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2202      	movs	r2, #2
 8001896:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e026      	b.n	80018ec <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2101      	movs	r1, #1
 80018a4:	4618      	mov	r0, r3
 80018a6:	f004 fc51 	bl	800614c <USB_SetCurrentMode>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d005      	beq.n	80018bc <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2202      	movs	r2, #2
 80018b4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e017      	b.n	80018ec <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6818      	ldr	r0, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	7c1a      	ldrb	r2, [r3, #16]
 80018c4:	f88d 2000 	strb.w	r2, [sp]
 80018c8:	3304      	adds	r3, #4
 80018ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018cc:	f004 fdfa 	bl	80064c4 <USB_HostInit>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d005      	beq.n	80018e2 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2202      	movs	r2, #2
 80018da:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e004      	b.n	80018ec <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2201      	movs	r2, #1
 80018e6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80018f4:	b590      	push	{r4, r7, lr}
 80018f6:	b08b      	sub	sp, #44	@ 0x2c
 80018f8:	af04      	add	r7, sp, #16
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	4608      	mov	r0, r1
 80018fe:	4611      	mov	r1, r2
 8001900:	461a      	mov	r2, r3
 8001902:	4603      	mov	r3, r0
 8001904:	70fb      	strb	r3, [r7, #3]
 8001906:	460b      	mov	r3, r1
 8001908:	70bb      	strb	r3, [r7, #2]
 800190a:	4613      	mov	r3, r2
 800190c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800190e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001910:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001918:	2b01      	cmp	r3, #1
 800191a:	d101      	bne.n	8001920 <HAL_HCD_HC_Init+0x2c>
 800191c:	2302      	movs	r3, #2
 800191e:	e09d      	b.n	8001a5c <HAL_HCD_HC_Init+0x168>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001928:	78fa      	ldrb	r2, [r7, #3]
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	4613      	mov	r3, r2
 800192e:	011b      	lsls	r3, r3, #4
 8001930:	1a9b      	subs	r3, r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	440b      	add	r3, r1
 8001936:	3319      	adds	r3, #25
 8001938:	2200      	movs	r2, #0
 800193a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800193c:	78fa      	ldrb	r2, [r7, #3]
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	011b      	lsls	r3, r3, #4
 8001944:	1a9b      	subs	r3, r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	440b      	add	r3, r1
 800194a:	3314      	adds	r3, #20
 800194c:	787a      	ldrb	r2, [r7, #1]
 800194e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001950:	78fa      	ldrb	r2, [r7, #3]
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	4613      	mov	r3, r2
 8001956:	011b      	lsls	r3, r3, #4
 8001958:	1a9b      	subs	r3, r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	440b      	add	r3, r1
 800195e:	3315      	adds	r3, #21
 8001960:	78fa      	ldrb	r2, [r7, #3]
 8001962:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001964:	78fa      	ldrb	r2, [r7, #3]
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	4613      	mov	r3, r2
 800196a:	011b      	lsls	r3, r3, #4
 800196c:	1a9b      	subs	r3, r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	440b      	add	r3, r1
 8001972:	3326      	adds	r3, #38	@ 0x26
 8001974:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001978:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800197a:	78fa      	ldrb	r2, [r7, #3]
 800197c:	78bb      	ldrb	r3, [r7, #2]
 800197e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001982:	b2d8      	uxtb	r0, r3
 8001984:	6879      	ldr	r1, [r7, #4]
 8001986:	4613      	mov	r3, r2
 8001988:	011b      	lsls	r3, r3, #4
 800198a:	1a9b      	subs	r3, r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	440b      	add	r3, r1
 8001990:	3316      	adds	r3, #22
 8001992:	4602      	mov	r2, r0
 8001994:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001996:	78fb      	ldrb	r3, [r7, #3]
 8001998:	4619      	mov	r1, r3
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 fbc8 	bl	8002130 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80019a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	da0a      	bge.n	80019be <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80019a8:	78fa      	ldrb	r2, [r7, #3]
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	4613      	mov	r3, r2
 80019ae:	011b      	lsls	r3, r3, #4
 80019b0:	1a9b      	subs	r3, r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	440b      	add	r3, r1
 80019b6:	3317      	adds	r3, #23
 80019b8:	2201      	movs	r2, #1
 80019ba:	701a      	strb	r2, [r3, #0]
 80019bc:	e009      	b.n	80019d2 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80019be:	78fa      	ldrb	r2, [r7, #3]
 80019c0:	6879      	ldr	r1, [r7, #4]
 80019c2:	4613      	mov	r3, r2
 80019c4:	011b      	lsls	r3, r3, #4
 80019c6:	1a9b      	subs	r3, r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	440b      	add	r3, r1
 80019cc:	3317      	adds	r3, #23
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f004 fed8 	bl	800678c <USB_GetHostSpeed>
 80019dc:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80019de:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d10b      	bne.n	80019fe <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80019e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d107      	bne.n	80019fe <HAL_HCD_HC_Init+0x10a>
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d104      	bne.n	80019fe <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	2bbc      	cmp	r3, #188	@ 0xbc
 80019f8:	d901      	bls.n	80019fe <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80019fa:	23bc      	movs	r3, #188	@ 0xbc
 80019fc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80019fe:	78fa      	ldrb	r2, [r7, #3]
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	4613      	mov	r3, r2
 8001a04:	011b      	lsls	r3, r3, #4
 8001a06:	1a9b      	subs	r3, r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	3318      	adds	r3, #24
 8001a0e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001a12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001a14:	78fa      	ldrb	r2, [r7, #3]
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	b298      	uxth	r0, r3
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	011b      	lsls	r3, r3, #4
 8001a20:	1a9b      	subs	r3, r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	440b      	add	r3, r1
 8001a26:	3328      	adds	r3, #40	@ 0x28
 8001a28:	4602      	mov	r2, r0
 8001a2a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6818      	ldr	r0, [r3, #0]
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	787c      	ldrb	r4, [r7, #1]
 8001a36:	78ba      	ldrb	r2, [r7, #2]
 8001a38:	78f9      	ldrb	r1, [r7, #3]
 8001a3a:	9302      	str	r3, [sp, #8]
 8001a3c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a40:	9301      	str	r3, [sp, #4]
 8001a42:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	4623      	mov	r3, r4
 8001a4a:	f004 fec7 	bl	80067dc <USB_HC_Init>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	371c      	adds	r7, #28
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd90      	pop	{r4, r7, pc}

08001a64 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001a70:	2300      	movs	r3, #0
 8001a72:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d101      	bne.n	8001a82 <HAL_HCD_HC_Halt+0x1e>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e00f      	b.n	8001aa2 <HAL_HCD_HC_Halt+0x3e>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	78fa      	ldrb	r2, [r7, #3]
 8001a90:	4611      	mov	r1, r2
 8001a92:	4618      	mov	r0, r3
 8001a94:	f005 fa59 	bl	8006f4a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
	...

08001aac <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	4608      	mov	r0, r1
 8001ab6:	4611      	mov	r1, r2
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4603      	mov	r3, r0
 8001abc:	70fb      	strb	r3, [r7, #3]
 8001abe:	460b      	mov	r3, r1
 8001ac0:	70bb      	strb	r3, [r7, #2]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001ac6:	78fa      	ldrb	r2, [r7, #3]
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	4613      	mov	r3, r2
 8001acc:	011b      	lsls	r3, r3, #4
 8001ace:	1a9b      	subs	r3, r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	3317      	adds	r3, #23
 8001ad6:	78ba      	ldrb	r2, [r7, #2]
 8001ad8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001ada:	78fa      	ldrb	r2, [r7, #3]
 8001adc:	6879      	ldr	r1, [r7, #4]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	011b      	lsls	r3, r3, #4
 8001ae2:	1a9b      	subs	r3, r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	440b      	add	r3, r1
 8001ae8:	3326      	adds	r3, #38	@ 0x26
 8001aea:	787a      	ldrb	r2, [r7, #1]
 8001aec:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001aee:	7c3b      	ldrb	r3, [r7, #16]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d114      	bne.n	8001b1e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001af4:	78fa      	ldrb	r2, [r7, #3]
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	4613      	mov	r3, r2
 8001afa:	011b      	lsls	r3, r3, #4
 8001afc:	1a9b      	subs	r3, r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	440b      	add	r3, r1
 8001b02:	332a      	adds	r3, #42	@ 0x2a
 8001b04:	2203      	movs	r2, #3
 8001b06:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001b08:	78fa      	ldrb	r2, [r7, #3]
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	011b      	lsls	r3, r3, #4
 8001b10:	1a9b      	subs	r3, r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	440b      	add	r3, r1
 8001b16:	3319      	adds	r3, #25
 8001b18:	7f3a      	ldrb	r2, [r7, #28]
 8001b1a:	701a      	strb	r2, [r3, #0]
 8001b1c:	e009      	b.n	8001b32 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b1e:	78fa      	ldrb	r2, [r7, #3]
 8001b20:	6879      	ldr	r1, [r7, #4]
 8001b22:	4613      	mov	r3, r2
 8001b24:	011b      	lsls	r3, r3, #4
 8001b26:	1a9b      	subs	r3, r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	332a      	adds	r3, #42	@ 0x2a
 8001b2e:	2202      	movs	r2, #2
 8001b30:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001b32:	787b      	ldrb	r3, [r7, #1]
 8001b34:	2b03      	cmp	r3, #3
 8001b36:	f200 8102 	bhi.w	8001d3e <HAL_HCD_HC_SubmitRequest+0x292>
 8001b3a:	a201      	add	r2, pc, #4	@ (adr r2, 8001b40 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b40:	08001b51 	.word	0x08001b51
 8001b44:	08001d29 	.word	0x08001d29
 8001b48:	08001c15 	.word	0x08001c15
 8001b4c:	08001c9f 	.word	0x08001c9f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001b50:	7c3b      	ldrb	r3, [r7, #16]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	f040 80f5 	bne.w	8001d42 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001b58:	78bb      	ldrb	r3, [r7, #2]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d12d      	bne.n	8001bba <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001b5e:	8b3b      	ldrh	r3, [r7, #24]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d109      	bne.n	8001b78 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001b64:	78fa      	ldrb	r2, [r7, #3]
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	011b      	lsls	r3, r3, #4
 8001b6c:	1a9b      	subs	r3, r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	440b      	add	r3, r1
 8001b72:	333d      	adds	r3, #61	@ 0x3d
 8001b74:	2201      	movs	r2, #1
 8001b76:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b78:	78fa      	ldrb	r2, [r7, #3]
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	011b      	lsls	r3, r3, #4
 8001b80:	1a9b      	subs	r3, r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	440b      	add	r3, r1
 8001b86:	333d      	adds	r3, #61	@ 0x3d
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d10a      	bne.n	8001ba4 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b8e:	78fa      	ldrb	r2, [r7, #3]
 8001b90:	6879      	ldr	r1, [r7, #4]
 8001b92:	4613      	mov	r3, r2
 8001b94:	011b      	lsls	r3, r3, #4
 8001b96:	1a9b      	subs	r3, r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	440b      	add	r3, r1
 8001b9c:	332a      	adds	r3, #42	@ 0x2a
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001ba2:	e0ce      	b.n	8001d42 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ba4:	78fa      	ldrb	r2, [r7, #3]
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	011b      	lsls	r3, r3, #4
 8001bac:	1a9b      	subs	r3, r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	332a      	adds	r3, #42	@ 0x2a
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	701a      	strb	r2, [r3, #0]
      break;
 8001bb8:	e0c3      	b.n	8001d42 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001bba:	78fa      	ldrb	r2, [r7, #3]
 8001bbc:	6879      	ldr	r1, [r7, #4]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	011b      	lsls	r3, r3, #4
 8001bc2:	1a9b      	subs	r3, r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	440b      	add	r3, r1
 8001bc8:	331a      	adds	r3, #26
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	f040 80b8 	bne.w	8001d42 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001bd2:	78fa      	ldrb	r2, [r7, #3]
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	011b      	lsls	r3, r3, #4
 8001bda:	1a9b      	subs	r3, r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	440b      	add	r3, r1
 8001be0:	333c      	adds	r3, #60	@ 0x3c
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d10a      	bne.n	8001bfe <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001be8:	78fa      	ldrb	r2, [r7, #3]
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	4613      	mov	r3, r2
 8001bee:	011b      	lsls	r3, r3, #4
 8001bf0:	1a9b      	subs	r3, r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	332a      	adds	r3, #42	@ 0x2a
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]
      break;
 8001bfc:	e0a1      	b.n	8001d42 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bfe:	78fa      	ldrb	r2, [r7, #3]
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	4613      	mov	r3, r2
 8001c04:	011b      	lsls	r3, r3, #4
 8001c06:	1a9b      	subs	r3, r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	332a      	adds	r3, #42	@ 0x2a
 8001c0e:	2202      	movs	r2, #2
 8001c10:	701a      	strb	r2, [r3, #0]
      break;
 8001c12:	e096      	b.n	8001d42 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001c14:	78bb      	ldrb	r3, [r7, #2]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d120      	bne.n	8001c5c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c1a:	78fa      	ldrb	r2, [r7, #3]
 8001c1c:	6879      	ldr	r1, [r7, #4]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	011b      	lsls	r3, r3, #4
 8001c22:	1a9b      	subs	r3, r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	440b      	add	r3, r1
 8001c28:	333d      	adds	r3, #61	@ 0x3d
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10a      	bne.n	8001c46 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c30:	78fa      	ldrb	r2, [r7, #3]
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	4613      	mov	r3, r2
 8001c36:	011b      	lsls	r3, r3, #4
 8001c38:	1a9b      	subs	r3, r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	332a      	adds	r3, #42	@ 0x2a
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001c44:	e07e      	b.n	8001d44 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c46:	78fa      	ldrb	r2, [r7, #3]
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	011b      	lsls	r3, r3, #4
 8001c4e:	1a9b      	subs	r3, r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	440b      	add	r3, r1
 8001c54:	332a      	adds	r3, #42	@ 0x2a
 8001c56:	2202      	movs	r2, #2
 8001c58:	701a      	strb	r2, [r3, #0]
      break;
 8001c5a:	e073      	b.n	8001d44 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c5c:	78fa      	ldrb	r2, [r7, #3]
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	4613      	mov	r3, r2
 8001c62:	011b      	lsls	r3, r3, #4
 8001c64:	1a9b      	subs	r3, r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	333c      	adds	r3, #60	@ 0x3c
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10a      	bne.n	8001c88 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c72:	78fa      	ldrb	r2, [r7, #3]
 8001c74:	6879      	ldr	r1, [r7, #4]
 8001c76:	4613      	mov	r3, r2
 8001c78:	011b      	lsls	r3, r3, #4
 8001c7a:	1a9b      	subs	r3, r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	440b      	add	r3, r1
 8001c80:	332a      	adds	r3, #42	@ 0x2a
 8001c82:	2200      	movs	r2, #0
 8001c84:	701a      	strb	r2, [r3, #0]
      break;
 8001c86:	e05d      	b.n	8001d44 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c88:	78fa      	ldrb	r2, [r7, #3]
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	011b      	lsls	r3, r3, #4
 8001c90:	1a9b      	subs	r3, r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	440b      	add	r3, r1
 8001c96:	332a      	adds	r3, #42	@ 0x2a
 8001c98:	2202      	movs	r2, #2
 8001c9a:	701a      	strb	r2, [r3, #0]
      break;
 8001c9c:	e052      	b.n	8001d44 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001c9e:	78bb      	ldrb	r3, [r7, #2]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d120      	bne.n	8001ce6 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ca4:	78fa      	ldrb	r2, [r7, #3]
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	011b      	lsls	r3, r3, #4
 8001cac:	1a9b      	subs	r3, r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	333d      	adds	r3, #61	@ 0x3d
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10a      	bne.n	8001cd0 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cba:	78fa      	ldrb	r2, [r7, #3]
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	011b      	lsls	r3, r3, #4
 8001cc2:	1a9b      	subs	r3, r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	332a      	adds	r3, #42	@ 0x2a
 8001cca:	2200      	movs	r2, #0
 8001ccc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001cce:	e039      	b.n	8001d44 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cd0:	78fa      	ldrb	r2, [r7, #3]
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	011b      	lsls	r3, r3, #4
 8001cd8:	1a9b      	subs	r3, r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	440b      	add	r3, r1
 8001cde:	332a      	adds	r3, #42	@ 0x2a
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	701a      	strb	r2, [r3, #0]
      break;
 8001ce4:	e02e      	b.n	8001d44 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ce6:	78fa      	ldrb	r2, [r7, #3]
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	4613      	mov	r3, r2
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	1a9b      	subs	r3, r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	440b      	add	r3, r1
 8001cf4:	333c      	adds	r3, #60	@ 0x3c
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d10a      	bne.n	8001d12 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cfc:	78fa      	ldrb	r2, [r7, #3]
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	4613      	mov	r3, r2
 8001d02:	011b      	lsls	r3, r3, #4
 8001d04:	1a9b      	subs	r3, r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	440b      	add	r3, r1
 8001d0a:	332a      	adds	r3, #42	@ 0x2a
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	701a      	strb	r2, [r3, #0]
      break;
 8001d10:	e018      	b.n	8001d44 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d12:	78fa      	ldrb	r2, [r7, #3]
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	4613      	mov	r3, r2
 8001d18:	011b      	lsls	r3, r3, #4
 8001d1a:	1a9b      	subs	r3, r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	440b      	add	r3, r1
 8001d20:	332a      	adds	r3, #42	@ 0x2a
 8001d22:	2202      	movs	r2, #2
 8001d24:	701a      	strb	r2, [r3, #0]
      break;
 8001d26:	e00d      	b.n	8001d44 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d28:	78fa      	ldrb	r2, [r7, #3]
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	011b      	lsls	r3, r3, #4
 8001d30:	1a9b      	subs	r3, r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	440b      	add	r3, r1
 8001d36:	332a      	adds	r3, #42	@ 0x2a
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
      break;
 8001d3c:	e002      	b.n	8001d44 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001d3e:	bf00      	nop
 8001d40:	e000      	b.n	8001d44 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001d42:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001d44:	78fa      	ldrb	r2, [r7, #3]
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	011b      	lsls	r3, r3, #4
 8001d4c:	1a9b      	subs	r3, r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	332c      	adds	r3, #44	@ 0x2c
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001d58:	78fa      	ldrb	r2, [r7, #3]
 8001d5a:	8b39      	ldrh	r1, [r7, #24]
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	011b      	lsls	r3, r3, #4
 8001d62:	1a9b      	subs	r3, r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4403      	add	r3, r0
 8001d68:	3334      	adds	r3, #52	@ 0x34
 8001d6a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001d6c:	78fa      	ldrb	r2, [r7, #3]
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	4613      	mov	r3, r2
 8001d72:	011b      	lsls	r3, r3, #4
 8001d74:	1a9b      	subs	r3, r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	440b      	add	r3, r1
 8001d7a:	334c      	adds	r3, #76	@ 0x4c
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001d80:	78fa      	ldrb	r2, [r7, #3]
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	4613      	mov	r3, r2
 8001d86:	011b      	lsls	r3, r3, #4
 8001d88:	1a9b      	subs	r3, r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	3338      	adds	r3, #56	@ 0x38
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d94:	78fa      	ldrb	r2, [r7, #3]
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	1a9b      	subs	r3, r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	3315      	adds	r3, #21
 8001da4:	78fa      	ldrb	r2, [r7, #3]
 8001da6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001da8:	78fa      	ldrb	r2, [r7, #3]
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	4613      	mov	r3, r2
 8001dae:	011b      	lsls	r3, r3, #4
 8001db0:	1a9b      	subs	r3, r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	334d      	adds	r3, #77	@ 0x4d
 8001db8:	2200      	movs	r2, #0
 8001dba:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6818      	ldr	r0, [r3, #0]
 8001dc0:	78fa      	ldrb	r2, [r7, #3]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	011b      	lsls	r3, r3, #4
 8001dc6:	1a9b      	subs	r3, r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	3310      	adds	r3, #16
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	4413      	add	r3, r2
 8001dd0:	1d19      	adds	r1, r3, #4
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	799b      	ldrb	r3, [r3, #6]
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	f004 fe2c 	bl	8006a34 <USB_HC_StartXfer>
 8001ddc:	4603      	mov	r3, r0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop

08001de8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f004 fb1a 	bl	8006438 <USB_GetMode>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	f040 80fb 	bne.w	8002002 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f004 fadd 	bl	80063d0 <USB_ReadInterrupts>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f000 80f1 	beq.w	8002000 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f004 fad4 	bl	80063d0 <USB_ReadInterrupts>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001e32:	d104      	bne.n	8001e3e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001e3c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f004 fac4 	bl	80063d0 <USB_ReadInterrupts>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001e52:	d104      	bne.n	8001e5e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001e5c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f004 fab4 	bl	80063d0 <USB_ReadInterrupts>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e6e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001e72:	d104      	bne.n	8001e7e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001e7c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f004 faa4 	bl	80063d0 <USB_ReadInterrupts>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d103      	bne.n	8001e9a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2202      	movs	r2, #2
 8001e98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f004 fa96 	bl	80063d0 <USB_ReadInterrupts>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001eaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001eae:	d120      	bne.n	8001ef2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001eb8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d113      	bne.n	8001ef2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001eca:	2110      	movs	r1, #16
 8001ecc:	6938      	ldr	r0, [r7, #16]
 8001ece:	f004 f989 	bl	80061e4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001ed2:	6938      	ldr	r0, [r7, #16]
 8001ed4:	f004 f9b8 	bl	8006248 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	7a5b      	ldrb	r3, [r3, #9]
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d105      	bne.n	8001eec <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f004 fbb0 	bl	800664c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f007 fb7d 	bl	80095ec <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f004 fa6a 	bl	80063d0 <USB_ReadInterrupts>
 8001efc:	4603      	mov	r3, r0
 8001efe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f06:	d102      	bne.n	8001f0e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f001 fd4d 	bl	80039a8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f004 fa5c 	bl	80063d0 <USB_ReadInterrupts>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b08      	cmp	r3, #8
 8001f20:	d106      	bne.n	8001f30 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f007 fb46 	bl	80095b4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2208      	movs	r2, #8
 8001f2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f004 fa4b 	bl	80063d0 <USB_ReadInterrupts>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f44:	d139      	bne.n	8001fba <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f004 ffec 	bl	8006f28 <USB_HC_ReadInterrupt>
 8001f50:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
 8001f56:	e025      	b.n	8001fa4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	68ba      	ldr	r2, [r7, #8]
 8001f60:	fa22 f303 	lsr.w	r3, r2, r3
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d018      	beq.n	8001f9e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	015a      	lsls	r2, r3, #5
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4413      	add	r3, r2
 8001f74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f82:	d106      	bne.n	8001f92 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	4619      	mov	r1, r3
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f905 	bl	800219a <HCD_HC_IN_IRQHandler>
 8001f90:	e005      	b.n	8001f9e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	4619      	mov	r1, r3
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 ff67 	bl	8002e6c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	795b      	ldrb	r3, [r3, #5]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d3d3      	bcc.n	8001f58 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001fb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f004 fa06 	bl	80063d0 <USB_ReadInterrupts>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	f003 0310 	and.w	r3, r3, #16
 8001fca:	2b10      	cmp	r3, #16
 8001fcc:	d101      	bne.n	8001fd2 <HAL_HCD_IRQHandler+0x1ea>
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e000      	b.n	8001fd4 <HAL_HCD_IRQHandler+0x1ec>
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d014      	beq.n	8002002 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	699a      	ldr	r2, [r3, #24]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f022 0210 	bic.w	r2, r2, #16
 8001fe6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f001 fbfe 	bl	80037ea <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	699a      	ldr	r2, [r3, #24]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f042 0210 	orr.w	r2, r2, #16
 8001ffc:	619a      	str	r2, [r3, #24]
 8001ffe:	e000      	b.n	8002002 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002000:	bf00      	nop
    }
  }
}
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002016:	2b01      	cmp	r3, #1
 8002018:	d101      	bne.n	800201e <HAL_HCD_Start+0x16>
 800201a:	2302      	movs	r3, #2
 800201c:	e013      	b.n	8002046 <HAL_HCD_Start+0x3e>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2101      	movs	r1, #1
 800202c:	4618      	mov	r0, r3
 800202e:	f004 fb74 	bl	800671a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f004 f866 	bl	8006108 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b082      	sub	sp, #8
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800205c:	2b01      	cmp	r3, #1
 800205e:	d101      	bne.n	8002064 <HAL_HCD_Stop+0x16>
 8002060:	2302      	movs	r3, #2
 8002062:	e00d      	b.n	8002080 <HAL_HCD_Stop+0x32>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f005 f8c7 	bl	8007204 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f004 fb16 	bl	80066c6 <USB_ResetPort>
 800209a:	4603      	mov	r3, r0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80020b0:	78fa      	ldrb	r2, [r7, #3]
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	1a9b      	subs	r3, r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	334c      	adds	r3, #76	@ 0x4c
 80020c0:	781b      	ldrb	r3, [r3, #0]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	460b      	mov	r3, r1
 80020d8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80020da:	78fa      	ldrb	r2, [r7, #3]
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	011b      	lsls	r3, r3, #4
 80020e2:	1a9b      	subs	r3, r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	440b      	add	r3, r1
 80020e8:	3338      	adds	r3, #56	@ 0x38
 80020ea:	681b      	ldr	r3, [r3, #0]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f004 fb58 	bl	80067ba <USB_GetCurrentFrame>
 800210a:	4603      	mov	r3, r0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f004 fb33 	bl	800678c <USB_GetHostSpeed>
 8002126:	4603      	mov	r3, r0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 800213c:	78fa      	ldrb	r2, [r7, #3]
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	011b      	lsls	r3, r3, #4
 8002144:	1a9b      	subs	r3, r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	331a      	adds	r3, #26
 800214c:	2200      	movs	r2, #0
 800214e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002150:	78fa      	ldrb	r2, [r7, #3]
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	1a9b      	subs	r3, r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	331b      	adds	r3, #27
 8002160:	2200      	movs	r2, #0
 8002162:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002164:	78fa      	ldrb	r2, [r7, #3]
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	011b      	lsls	r3, r3, #4
 800216c:	1a9b      	subs	r3, r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	3325      	adds	r3, #37	@ 0x25
 8002174:	2200      	movs	r2, #0
 8002176:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002178:	78fa      	ldrb	r2, [r7, #3]
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	1a9b      	subs	r3, r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	3324      	adds	r3, #36	@ 0x24
 8002188:	2200      	movs	r2, #0
 800218a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b086      	sub	sp, #24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
 80021a2:	460b      	mov	r3, r1
 80021a4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	78fa      	ldrb	r2, [r7, #3]
 80021b6:	4611      	mov	r1, r2
 80021b8:	4618      	mov	r0, r3
 80021ba:	f004 f91c 	bl	80063f6 <USB_ReadChInterrupts>
 80021be:	4603      	mov	r3, r0
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b04      	cmp	r3, #4
 80021c6:	d11a      	bne.n	80021fe <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80021c8:	78fb      	ldrb	r3, [r7, #3]
 80021ca:	015a      	lsls	r2, r3, #5
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	4413      	add	r3, r2
 80021d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021d4:	461a      	mov	r2, r3
 80021d6:	2304      	movs	r3, #4
 80021d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80021da:	78fa      	ldrb	r2, [r7, #3]
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	4613      	mov	r3, r2
 80021e0:	011b      	lsls	r3, r3, #4
 80021e2:	1a9b      	subs	r3, r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	440b      	add	r3, r1
 80021e8:	334d      	adds	r3, #77	@ 0x4d
 80021ea:	2207      	movs	r2, #7
 80021ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	78fa      	ldrb	r2, [r7, #3]
 80021f4:	4611      	mov	r1, r2
 80021f6:	4618      	mov	r0, r3
 80021f8:	f004 fea7 	bl	8006f4a <USB_HC_Halt>
 80021fc:	e09e      	b.n	800233c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	78fa      	ldrb	r2, [r7, #3]
 8002204:	4611      	mov	r1, r2
 8002206:	4618      	mov	r0, r3
 8002208:	f004 f8f5 	bl	80063f6 <USB_ReadChInterrupts>
 800220c:	4603      	mov	r3, r0
 800220e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002212:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002216:	d11b      	bne.n	8002250 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002218:	78fb      	ldrb	r3, [r7, #3]
 800221a:	015a      	lsls	r2, r3, #5
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4413      	add	r3, r2
 8002220:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002224:	461a      	mov	r2, r3
 8002226:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800222a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800222c:	78fa      	ldrb	r2, [r7, #3]
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	4613      	mov	r3, r2
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	1a9b      	subs	r3, r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	334d      	adds	r3, #77	@ 0x4d
 800223c:	2208      	movs	r2, #8
 800223e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	78fa      	ldrb	r2, [r7, #3]
 8002246:	4611      	mov	r1, r2
 8002248:	4618      	mov	r0, r3
 800224a:	f004 fe7e 	bl	8006f4a <USB_HC_Halt>
 800224e:	e075      	b.n	800233c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	78fa      	ldrb	r2, [r7, #3]
 8002256:	4611      	mov	r1, r2
 8002258:	4618      	mov	r0, r3
 800225a:	f004 f8cc 	bl	80063f6 <USB_ReadChInterrupts>
 800225e:	4603      	mov	r3, r0
 8002260:	f003 0308 	and.w	r3, r3, #8
 8002264:	2b08      	cmp	r3, #8
 8002266:	d11a      	bne.n	800229e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002268:	78fb      	ldrb	r3, [r7, #3]
 800226a:	015a      	lsls	r2, r3, #5
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	4413      	add	r3, r2
 8002270:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002274:	461a      	mov	r2, r3
 8002276:	2308      	movs	r3, #8
 8002278:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800227a:	78fa      	ldrb	r2, [r7, #3]
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	1a9b      	subs	r3, r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	440b      	add	r3, r1
 8002288:	334d      	adds	r3, #77	@ 0x4d
 800228a:	2206      	movs	r2, #6
 800228c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	78fa      	ldrb	r2, [r7, #3]
 8002294:	4611      	mov	r1, r2
 8002296:	4618      	mov	r0, r3
 8002298:	f004 fe57 	bl	8006f4a <USB_HC_Halt>
 800229c:	e04e      	b.n	800233c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	78fa      	ldrb	r2, [r7, #3]
 80022a4:	4611      	mov	r1, r2
 80022a6:	4618      	mov	r0, r3
 80022a8:	f004 f8a5 	bl	80063f6 <USB_ReadChInterrupts>
 80022ac:	4603      	mov	r3, r0
 80022ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022b6:	d11b      	bne.n	80022f0 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80022b8:	78fb      	ldrb	r3, [r7, #3]
 80022ba:	015a      	lsls	r2, r3, #5
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	4413      	add	r3, r2
 80022c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022c4:	461a      	mov	r2, r3
 80022c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80022cc:	78fa      	ldrb	r2, [r7, #3]
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	4613      	mov	r3, r2
 80022d2:	011b      	lsls	r3, r3, #4
 80022d4:	1a9b      	subs	r3, r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	334d      	adds	r3, #77	@ 0x4d
 80022dc:	2209      	movs	r2, #9
 80022de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	78fa      	ldrb	r2, [r7, #3]
 80022e6:	4611      	mov	r1, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f004 fe2e 	bl	8006f4a <USB_HC_Halt>
 80022ee:	e025      	b.n	800233c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	78fa      	ldrb	r2, [r7, #3]
 80022f6:	4611      	mov	r1, r2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f004 f87c 	bl	80063f6 <USB_ReadChInterrupts>
 80022fe:	4603      	mov	r3, r0
 8002300:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002304:	2b80      	cmp	r3, #128	@ 0x80
 8002306:	d119      	bne.n	800233c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002308:	78fb      	ldrb	r3, [r7, #3]
 800230a:	015a      	lsls	r2, r3, #5
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4413      	add	r3, r2
 8002310:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002314:	461a      	mov	r2, r3
 8002316:	2380      	movs	r3, #128	@ 0x80
 8002318:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800231a:	78fa      	ldrb	r2, [r7, #3]
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	011b      	lsls	r3, r3, #4
 8002322:	1a9b      	subs	r3, r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	440b      	add	r3, r1
 8002328:	334d      	adds	r3, #77	@ 0x4d
 800232a:	2207      	movs	r2, #7
 800232c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	78fa      	ldrb	r2, [r7, #3]
 8002334:	4611      	mov	r1, r2
 8002336:	4618      	mov	r0, r3
 8002338:	f004 fe07 	bl	8006f4a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	78fa      	ldrb	r2, [r7, #3]
 8002342:	4611      	mov	r1, r2
 8002344:	4618      	mov	r0, r3
 8002346:	f004 f856 	bl	80063f6 <USB_ReadChInterrupts>
 800234a:	4603      	mov	r3, r0
 800234c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002350:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002354:	d112      	bne.n	800237c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	78fa      	ldrb	r2, [r7, #3]
 800235c:	4611      	mov	r1, r2
 800235e:	4618      	mov	r0, r3
 8002360:	f004 fdf3 	bl	8006f4a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002364:	78fb      	ldrb	r3, [r7, #3]
 8002366:	015a      	lsls	r2, r3, #5
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4413      	add	r3, r2
 800236c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002370:	461a      	mov	r2, r3
 8002372:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002376:	6093      	str	r3, [r2, #8]
 8002378:	f000 bd75 	b.w	8002e66 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	78fa      	ldrb	r2, [r7, #3]
 8002382:	4611      	mov	r1, r2
 8002384:	4618      	mov	r0, r3
 8002386:	f004 f836 	bl	80063f6 <USB_ReadChInterrupts>
 800238a:	4603      	mov	r3, r0
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b01      	cmp	r3, #1
 8002392:	f040 8128 	bne.w	80025e6 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002396:	78fb      	ldrb	r3, [r7, #3]
 8002398:	015a      	lsls	r2, r3, #5
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	4413      	add	r3, r2
 800239e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023a2:	461a      	mov	r2, r3
 80023a4:	2320      	movs	r3, #32
 80023a6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80023a8:	78fa      	ldrb	r2, [r7, #3]
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	4613      	mov	r3, r2
 80023ae:	011b      	lsls	r3, r3, #4
 80023b0:	1a9b      	subs	r3, r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	331b      	adds	r3, #27
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d119      	bne.n	80023f2 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80023be:	78fa      	ldrb	r2, [r7, #3]
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	4613      	mov	r3, r2
 80023c4:	011b      	lsls	r3, r3, #4
 80023c6:	1a9b      	subs	r3, r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	440b      	add	r3, r1
 80023cc:	331b      	adds	r3, #27
 80023ce:	2200      	movs	r2, #0
 80023d0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80023d2:	78fb      	ldrb	r3, [r7, #3]
 80023d4:	015a      	lsls	r2, r3, #5
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	4413      	add	r3, r2
 80023da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	78fa      	ldrb	r2, [r7, #3]
 80023e2:	0151      	lsls	r1, r2, #5
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	440a      	add	r2, r1
 80023e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80023ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023f0:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	799b      	ldrb	r3, [r3, #6]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d01b      	beq.n	8002432 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80023fa:	78fa      	ldrb	r2, [r7, #3]
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	011b      	lsls	r3, r3, #4
 8002402:	1a9b      	subs	r3, r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	440b      	add	r3, r1
 8002408:	3330      	adds	r3, #48	@ 0x30
 800240a:	6819      	ldr	r1, [r3, #0]
 800240c:	78fb      	ldrb	r3, [r7, #3]
 800240e:	015a      	lsls	r2, r3, #5
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	4413      	add	r3, r2
 8002414:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800241e:	78fa      	ldrb	r2, [r7, #3]
 8002420:	1ac9      	subs	r1, r1, r3
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	1a9b      	subs	r3, r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4403      	add	r3, r0
 800242e:	3338      	adds	r3, #56	@ 0x38
 8002430:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002432:	78fa      	ldrb	r2, [r7, #3]
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	4613      	mov	r3, r2
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	1a9b      	subs	r3, r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	440b      	add	r3, r1
 8002440:	334d      	adds	r3, #77	@ 0x4d
 8002442:	2201      	movs	r2, #1
 8002444:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002446:	78fa      	ldrb	r2, [r7, #3]
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	011b      	lsls	r3, r3, #4
 800244e:	1a9b      	subs	r3, r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	440b      	add	r3, r1
 8002454:	3344      	adds	r3, #68	@ 0x44
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800245a:	78fb      	ldrb	r3, [r7, #3]
 800245c:	015a      	lsls	r2, r3, #5
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4413      	add	r3, r2
 8002462:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002466:	461a      	mov	r2, r3
 8002468:	2301      	movs	r3, #1
 800246a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800246c:	78fa      	ldrb	r2, [r7, #3]
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	4613      	mov	r3, r2
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	1a9b      	subs	r3, r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	3326      	adds	r3, #38	@ 0x26
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00a      	beq.n	8002498 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002482:	78fa      	ldrb	r2, [r7, #3]
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	1a9b      	subs	r3, r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	3326      	adds	r3, #38	@ 0x26
 8002492:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002494:	2b02      	cmp	r3, #2
 8002496:	d110      	bne.n	80024ba <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	78fa      	ldrb	r2, [r7, #3]
 800249e:	4611      	mov	r1, r2
 80024a0:	4618      	mov	r0, r3
 80024a2:	f004 fd52 	bl	8006f4a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80024a6:	78fb      	ldrb	r3, [r7, #3]
 80024a8:	015a      	lsls	r2, r3, #5
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024b2:	461a      	mov	r2, r3
 80024b4:	2310      	movs	r3, #16
 80024b6:	6093      	str	r3, [r2, #8]
 80024b8:	e03d      	b.n	8002536 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80024ba:	78fa      	ldrb	r2, [r7, #3]
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	4613      	mov	r3, r2
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	1a9b      	subs	r3, r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	440b      	add	r3, r1
 80024c8:	3326      	adds	r3, #38	@ 0x26
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	d00a      	beq.n	80024e6 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80024d0:	78fa      	ldrb	r2, [r7, #3]
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	011b      	lsls	r3, r3, #4
 80024d8:	1a9b      	subs	r3, r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	3326      	adds	r3, #38	@ 0x26
 80024e0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d127      	bne.n	8002536 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80024e6:	78fb      	ldrb	r3, [r7, #3]
 80024e8:	015a      	lsls	r2, r3, #5
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4413      	add	r3, r2
 80024ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	78fa      	ldrb	r2, [r7, #3]
 80024f6:	0151      	lsls	r1, r2, #5
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	440a      	add	r2, r1
 80024fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002500:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002504:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002506:	78fa      	ldrb	r2, [r7, #3]
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	4613      	mov	r3, r2
 800250c:	011b      	lsls	r3, r3, #4
 800250e:	1a9b      	subs	r3, r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	440b      	add	r3, r1
 8002514:	334c      	adds	r3, #76	@ 0x4c
 8002516:	2201      	movs	r2, #1
 8002518:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800251a:	78fa      	ldrb	r2, [r7, #3]
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	4613      	mov	r3, r2
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	1a9b      	subs	r3, r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	440b      	add	r3, r1
 8002528:	334c      	adds	r3, #76	@ 0x4c
 800252a:	781a      	ldrb	r2, [r3, #0]
 800252c:	78fb      	ldrb	r3, [r7, #3]
 800252e:	4619      	mov	r1, r3
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f007 f869 	bl	8009608 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	799b      	ldrb	r3, [r3, #6]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d13b      	bne.n	80025b6 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800253e:	78fa      	ldrb	r2, [r7, #3]
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	011b      	lsls	r3, r3, #4
 8002546:	1a9b      	subs	r3, r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	440b      	add	r3, r1
 800254c:	3338      	adds	r3, #56	@ 0x38
 800254e:	6819      	ldr	r1, [r3, #0]
 8002550:	78fa      	ldrb	r2, [r7, #3]
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	011b      	lsls	r3, r3, #4
 8002558:	1a9b      	subs	r3, r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4403      	add	r3, r0
 800255e:	3328      	adds	r3, #40	@ 0x28
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	440b      	add	r3, r1
 8002564:	1e59      	subs	r1, r3, #1
 8002566:	78fa      	ldrb	r2, [r7, #3]
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	4613      	mov	r3, r2
 800256c:	011b      	lsls	r3, r3, #4
 800256e:	1a9b      	subs	r3, r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4403      	add	r3, r0
 8002574:	3328      	adds	r3, #40	@ 0x28
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	fbb1 f3f3 	udiv	r3, r1, r3
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 8470 	beq.w	8002e66 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002586:	78fa      	ldrb	r2, [r7, #3]
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	4613      	mov	r3, r2
 800258c:	011b      	lsls	r3, r3, #4
 800258e:	1a9b      	subs	r3, r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	440b      	add	r3, r1
 8002594:	333c      	adds	r3, #60	@ 0x3c
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	78fa      	ldrb	r2, [r7, #3]
 800259a:	f083 0301 	eor.w	r3, r3, #1
 800259e:	b2d8      	uxtb	r0, r3
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	4613      	mov	r3, r2
 80025a4:	011b      	lsls	r3, r3, #4
 80025a6:	1a9b      	subs	r3, r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	440b      	add	r3, r1
 80025ac:	333c      	adds	r3, #60	@ 0x3c
 80025ae:	4602      	mov	r2, r0
 80025b0:	701a      	strb	r2, [r3, #0]
 80025b2:	f000 bc58 	b.w	8002e66 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80025b6:	78fa      	ldrb	r2, [r7, #3]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	1a9b      	subs	r3, r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	333c      	adds	r3, #60	@ 0x3c
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	78fa      	ldrb	r2, [r7, #3]
 80025ca:	f083 0301 	eor.w	r3, r3, #1
 80025ce:	b2d8      	uxtb	r0, r3
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	011b      	lsls	r3, r3, #4
 80025d6:	1a9b      	subs	r3, r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	440b      	add	r3, r1
 80025dc:	333c      	adds	r3, #60	@ 0x3c
 80025de:	4602      	mov	r2, r0
 80025e0:	701a      	strb	r2, [r3, #0]
 80025e2:	f000 bc40 	b.w	8002e66 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	78fa      	ldrb	r2, [r7, #3]
 80025ec:	4611      	mov	r1, r2
 80025ee:	4618      	mov	r0, r3
 80025f0:	f003 ff01 	bl	80063f6 <USB_ReadChInterrupts>
 80025f4:	4603      	mov	r3, r0
 80025f6:	f003 0320 	and.w	r3, r3, #32
 80025fa:	2b20      	cmp	r3, #32
 80025fc:	d131      	bne.n	8002662 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80025fe:	78fb      	ldrb	r3, [r7, #3]
 8002600:	015a      	lsls	r2, r3, #5
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	4413      	add	r3, r2
 8002606:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800260a:	461a      	mov	r2, r3
 800260c:	2320      	movs	r3, #32
 800260e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002610:	78fa      	ldrb	r2, [r7, #3]
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	1a9b      	subs	r3, r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	331a      	adds	r3, #26
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b01      	cmp	r3, #1
 8002624:	f040 841f 	bne.w	8002e66 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	1a9b      	subs	r3, r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	331b      	adds	r3, #27
 8002638:	2201      	movs	r2, #1
 800263a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800263c:	78fa      	ldrb	r2, [r7, #3]
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	1a9b      	subs	r3, r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	334d      	adds	r3, #77	@ 0x4d
 800264c:	2203      	movs	r2, #3
 800264e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	78fa      	ldrb	r2, [r7, #3]
 8002656:	4611      	mov	r1, r2
 8002658:	4618      	mov	r0, r3
 800265a:	f004 fc76 	bl	8006f4a <USB_HC_Halt>
 800265e:	f000 bc02 	b.w	8002e66 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	78fa      	ldrb	r2, [r7, #3]
 8002668:	4611      	mov	r1, r2
 800266a:	4618      	mov	r0, r3
 800266c:	f003 fec3 	bl	80063f6 <USB_ReadChInterrupts>
 8002670:	4603      	mov	r3, r0
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b02      	cmp	r3, #2
 8002678:	f040 8305 	bne.w	8002c86 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800267c:	78fb      	ldrb	r3, [r7, #3]
 800267e:	015a      	lsls	r2, r3, #5
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	4413      	add	r3, r2
 8002684:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002688:	461a      	mov	r2, r3
 800268a:	2302      	movs	r3, #2
 800268c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800268e:	78fa      	ldrb	r2, [r7, #3]
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	4613      	mov	r3, r2
 8002694:	011b      	lsls	r3, r3, #4
 8002696:	1a9b      	subs	r3, r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	440b      	add	r3, r1
 800269c:	334d      	adds	r3, #77	@ 0x4d
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d114      	bne.n	80026ce <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026a4:	78fa      	ldrb	r2, [r7, #3]
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	4613      	mov	r3, r2
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	1a9b      	subs	r3, r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	334d      	adds	r3, #77	@ 0x4d
 80026b4:	2202      	movs	r2, #2
 80026b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80026b8:	78fa      	ldrb	r2, [r7, #3]
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	4613      	mov	r3, r2
 80026be:	011b      	lsls	r3, r3, #4
 80026c0:	1a9b      	subs	r3, r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	334c      	adds	r3, #76	@ 0x4c
 80026c8:	2201      	movs	r2, #1
 80026ca:	701a      	strb	r2, [r3, #0]
 80026cc:	e2cc      	b.n	8002c68 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80026ce:	78fa      	ldrb	r2, [r7, #3]
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	4613      	mov	r3, r2
 80026d4:	011b      	lsls	r3, r3, #4
 80026d6:	1a9b      	subs	r3, r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	334d      	adds	r3, #77	@ 0x4d
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b06      	cmp	r3, #6
 80026e2:	d114      	bne.n	800270e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026e4:	78fa      	ldrb	r2, [r7, #3]
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	4613      	mov	r3, r2
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	1a9b      	subs	r3, r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	334d      	adds	r3, #77	@ 0x4d
 80026f4:	2202      	movs	r2, #2
 80026f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80026f8:	78fa      	ldrb	r2, [r7, #3]
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	1a9b      	subs	r3, r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	334c      	adds	r3, #76	@ 0x4c
 8002708:	2205      	movs	r2, #5
 800270a:	701a      	strb	r2, [r3, #0]
 800270c:	e2ac      	b.n	8002c68 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800270e:	78fa      	ldrb	r2, [r7, #3]
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	4613      	mov	r3, r2
 8002714:	011b      	lsls	r3, r3, #4
 8002716:	1a9b      	subs	r3, r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	440b      	add	r3, r1
 800271c:	334d      	adds	r3, #77	@ 0x4d
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b07      	cmp	r3, #7
 8002722:	d00b      	beq.n	800273c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002724:	78fa      	ldrb	r2, [r7, #3]
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	4613      	mov	r3, r2
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	1a9b      	subs	r3, r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	334d      	adds	r3, #77	@ 0x4d
 8002734:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002736:	2b09      	cmp	r3, #9
 8002738:	f040 80a6 	bne.w	8002888 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800273c:	78fa      	ldrb	r2, [r7, #3]
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	4613      	mov	r3, r2
 8002742:	011b      	lsls	r3, r3, #4
 8002744:	1a9b      	subs	r3, r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	440b      	add	r3, r1
 800274a:	334d      	adds	r3, #77	@ 0x4d
 800274c:	2202      	movs	r2, #2
 800274e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002750:	78fa      	ldrb	r2, [r7, #3]
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	4613      	mov	r3, r2
 8002756:	011b      	lsls	r3, r3, #4
 8002758:	1a9b      	subs	r3, r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	440b      	add	r3, r1
 800275e:	3344      	adds	r3, #68	@ 0x44
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	1c59      	adds	r1, r3, #1
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	4613      	mov	r3, r2
 8002768:	011b      	lsls	r3, r3, #4
 800276a:	1a9b      	subs	r3, r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4403      	add	r3, r0
 8002770:	3344      	adds	r3, #68	@ 0x44
 8002772:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002774:	78fa      	ldrb	r2, [r7, #3]
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	1a9b      	subs	r3, r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	3344      	adds	r3, #68	@ 0x44
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b02      	cmp	r3, #2
 8002788:	d943      	bls.n	8002812 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800278a:	78fa      	ldrb	r2, [r7, #3]
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	4613      	mov	r3, r2
 8002790:	011b      	lsls	r3, r3, #4
 8002792:	1a9b      	subs	r3, r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	440b      	add	r3, r1
 8002798:	3344      	adds	r3, #68	@ 0x44
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800279e:	78fa      	ldrb	r2, [r7, #3]
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	4613      	mov	r3, r2
 80027a4:	011b      	lsls	r3, r3, #4
 80027a6:	1a9b      	subs	r3, r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	440b      	add	r3, r1
 80027ac:	331a      	adds	r3, #26
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d123      	bne.n	80027fc <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80027b4:	78fa      	ldrb	r2, [r7, #3]
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	4613      	mov	r3, r2
 80027ba:	011b      	lsls	r3, r3, #4
 80027bc:	1a9b      	subs	r3, r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	440b      	add	r3, r1
 80027c2:	331b      	adds	r3, #27
 80027c4:	2200      	movs	r2, #0
 80027c6:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80027c8:	78fa      	ldrb	r2, [r7, #3]
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	4613      	mov	r3, r2
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	1a9b      	subs	r3, r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	331c      	adds	r3, #28
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80027dc:	78fb      	ldrb	r3, [r7, #3]
 80027de:	015a      	lsls	r2, r3, #5
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	4413      	add	r3, r2
 80027e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	78fa      	ldrb	r2, [r7, #3]
 80027ec:	0151      	lsls	r1, r2, #5
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	440a      	add	r2, r1
 80027f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027fa:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80027fc:	78fa      	ldrb	r2, [r7, #3]
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	1a9b      	subs	r3, r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	334c      	adds	r3, #76	@ 0x4c
 800280c:	2204      	movs	r2, #4
 800280e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002810:	e229      	b.n	8002c66 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002812:	78fa      	ldrb	r2, [r7, #3]
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	1a9b      	subs	r3, r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	334c      	adds	r3, #76	@ 0x4c
 8002822:	2202      	movs	r2, #2
 8002824:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002826:	78fa      	ldrb	r2, [r7, #3]
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	1a9b      	subs	r3, r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	3326      	adds	r3, #38	@ 0x26
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00b      	beq.n	8002854 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800283c:	78fa      	ldrb	r2, [r7, #3]
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	4613      	mov	r3, r2
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	1a9b      	subs	r3, r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	3326      	adds	r3, #38	@ 0x26
 800284c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800284e:	2b02      	cmp	r3, #2
 8002850:	f040 8209 	bne.w	8002c66 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002854:	78fb      	ldrb	r3, [r7, #3]
 8002856:	015a      	lsls	r2, r3, #5
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	4413      	add	r3, r2
 800285c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800286a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002872:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002874:	78fb      	ldrb	r3, [r7, #3]
 8002876:	015a      	lsls	r2, r3, #5
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	4413      	add	r3, r2
 800287c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002880:	461a      	mov	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002886:	e1ee      	b.n	8002c66 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002888:	78fa      	ldrb	r2, [r7, #3]
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	4613      	mov	r3, r2
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	1a9b      	subs	r3, r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	334d      	adds	r3, #77	@ 0x4d
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b05      	cmp	r3, #5
 800289c:	f040 80c8 	bne.w	8002a30 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028a0:	78fa      	ldrb	r2, [r7, #3]
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	4613      	mov	r3, r2
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	1a9b      	subs	r3, r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	334d      	adds	r3, #77	@ 0x4d
 80028b0:	2202      	movs	r2, #2
 80028b2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80028b4:	78fa      	ldrb	r2, [r7, #3]
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	011b      	lsls	r3, r3, #4
 80028bc:	1a9b      	subs	r3, r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	331b      	adds	r3, #27
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	f040 81ce 	bne.w	8002c68 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80028cc:	78fa      	ldrb	r2, [r7, #3]
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	4613      	mov	r3, r2
 80028d2:	011b      	lsls	r3, r3, #4
 80028d4:	1a9b      	subs	r3, r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	440b      	add	r3, r1
 80028da:	3326      	adds	r3, #38	@ 0x26
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b03      	cmp	r3, #3
 80028e0:	d16b      	bne.n	80029ba <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80028e2:	78fa      	ldrb	r2, [r7, #3]
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	1a9b      	subs	r3, r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	440b      	add	r3, r1
 80028f0:	3348      	adds	r3, #72	@ 0x48
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	1c59      	adds	r1, r3, #1
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	4613      	mov	r3, r2
 80028fa:	011b      	lsls	r3, r3, #4
 80028fc:	1a9b      	subs	r3, r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4403      	add	r3, r0
 8002902:	3348      	adds	r3, #72	@ 0x48
 8002904:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002906:	78fa      	ldrb	r2, [r7, #3]
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	011b      	lsls	r3, r3, #4
 800290e:	1a9b      	subs	r3, r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	440b      	add	r3, r1
 8002914:	3348      	adds	r3, #72	@ 0x48
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2b02      	cmp	r3, #2
 800291a:	d943      	bls.n	80029a4 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800291c:	78fa      	ldrb	r2, [r7, #3]
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	1a9b      	subs	r3, r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	3348      	adds	r3, #72	@ 0x48
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002930:	78fa      	ldrb	r2, [r7, #3]
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	1a9b      	subs	r3, r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	331b      	adds	r3, #27
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002944:	78fa      	ldrb	r2, [r7, #3]
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	1a9b      	subs	r3, r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	3344      	adds	r3, #68	@ 0x44
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2b02      	cmp	r3, #2
 8002958:	d809      	bhi.n	800296e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800295a:	78fa      	ldrb	r2, [r7, #3]
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	4613      	mov	r3, r2
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	1a9b      	subs	r3, r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	440b      	add	r3, r1
 8002968:	331c      	adds	r3, #28
 800296a:	2201      	movs	r2, #1
 800296c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800296e:	78fb      	ldrb	r3, [r7, #3]
 8002970:	015a      	lsls	r2, r3, #5
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4413      	add	r3, r2
 8002976:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	78fa      	ldrb	r2, [r7, #3]
 800297e:	0151      	lsls	r1, r2, #5
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	440a      	add	r2, r1
 8002984:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002988:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800298c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800298e:	78fa      	ldrb	r2, [r7, #3]
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	4613      	mov	r3, r2
 8002994:	011b      	lsls	r3, r3, #4
 8002996:	1a9b      	subs	r3, r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	440b      	add	r3, r1
 800299c:	334c      	adds	r3, #76	@ 0x4c
 800299e:	2204      	movs	r2, #4
 80029a0:	701a      	strb	r2, [r3, #0]
 80029a2:	e014      	b.n	80029ce <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80029a4:	78fa      	ldrb	r2, [r7, #3]
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	4613      	mov	r3, r2
 80029aa:	011b      	lsls	r3, r3, #4
 80029ac:	1a9b      	subs	r3, r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	334c      	adds	r3, #76	@ 0x4c
 80029b4:	2202      	movs	r2, #2
 80029b6:	701a      	strb	r2, [r3, #0]
 80029b8:	e009      	b.n	80029ce <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80029ba:	78fa      	ldrb	r2, [r7, #3]
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	4613      	mov	r3, r2
 80029c0:	011b      	lsls	r3, r3, #4
 80029c2:	1a9b      	subs	r3, r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	440b      	add	r3, r1
 80029c8:	334c      	adds	r3, #76	@ 0x4c
 80029ca:	2202      	movs	r2, #2
 80029cc:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029ce:	78fa      	ldrb	r2, [r7, #3]
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	4613      	mov	r3, r2
 80029d4:	011b      	lsls	r3, r3, #4
 80029d6:	1a9b      	subs	r3, r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	440b      	add	r3, r1
 80029dc:	3326      	adds	r3, #38	@ 0x26
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00b      	beq.n	80029fc <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80029e4:	78fa      	ldrb	r2, [r7, #3]
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	4613      	mov	r3, r2
 80029ea:	011b      	lsls	r3, r3, #4
 80029ec:	1a9b      	subs	r3, r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	3326      	adds	r3, #38	@ 0x26
 80029f4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	f040 8136 	bne.w	8002c68 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80029fc:	78fb      	ldrb	r3, [r7, #3]
 80029fe:	015a      	lsls	r2, r3, #5
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	4413      	add	r3, r2
 8002a04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002a12:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002a1a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a1c:	78fb      	ldrb	r3, [r7, #3]
 8002a1e:	015a      	lsls	r2, r3, #5
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	4413      	add	r3, r2
 8002a24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a28:	461a      	mov	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	e11b      	b.n	8002c68 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002a30:	78fa      	ldrb	r2, [r7, #3]
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	4613      	mov	r3, r2
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	1a9b      	subs	r3, r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	334d      	adds	r3, #77	@ 0x4d
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b03      	cmp	r3, #3
 8002a44:	f040 8081 	bne.w	8002b4a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a48:	78fa      	ldrb	r2, [r7, #3]
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	011b      	lsls	r3, r3, #4
 8002a50:	1a9b      	subs	r3, r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	334d      	adds	r3, #77	@ 0x4d
 8002a58:	2202      	movs	r2, #2
 8002a5a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002a5c:	78fa      	ldrb	r2, [r7, #3]
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	4613      	mov	r3, r2
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	1a9b      	subs	r3, r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	331b      	adds	r3, #27
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	f040 80fa 	bne.w	8002c68 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a74:	78fa      	ldrb	r2, [r7, #3]
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	1a9b      	subs	r3, r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	334c      	adds	r3, #76	@ 0x4c
 8002a84:	2202      	movs	r2, #2
 8002a86:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002a88:	78fb      	ldrb	r3, [r7, #3]
 8002a8a:	015a      	lsls	r2, r3, #5
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	78fa      	ldrb	r2, [r7, #3]
 8002a98:	0151      	lsls	r1, r2, #5
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	440a      	add	r2, r1
 8002a9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002aa2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aa6:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002aa8:	78fb      	ldrb	r3, [r7, #3]
 8002aaa:	015a      	lsls	r2, r3, #5
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	4413      	add	r3, r2
 8002ab0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	78fa      	ldrb	r2, [r7, #3]
 8002ab8:	0151      	lsls	r1, r2, #5
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	440a      	add	r2, r1
 8002abe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ac2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ac6:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002ac8:	78fb      	ldrb	r3, [r7, #3]
 8002aca:	015a      	lsls	r2, r3, #5
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	4413      	add	r3, r2
 8002ad0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	78fa      	ldrb	r2, [r7, #3]
 8002ad8:	0151      	lsls	r1, r2, #5
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	440a      	add	r2, r1
 8002ade:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ae2:	f023 0320 	bic.w	r3, r3, #32
 8002ae6:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ae8:	78fa      	ldrb	r2, [r7, #3]
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	4613      	mov	r3, r2
 8002aee:	011b      	lsls	r3, r3, #4
 8002af0:	1a9b      	subs	r3, r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	3326      	adds	r3, #38	@ 0x26
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00b      	beq.n	8002b16 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002afe:	78fa      	ldrb	r2, [r7, #3]
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	4613      	mov	r3, r2
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	1a9b      	subs	r3, r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	3326      	adds	r3, #38	@ 0x26
 8002b0e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	f040 80a9 	bne.w	8002c68 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002b16:	78fb      	ldrb	r3, [r7, #3]
 8002b18:	015a      	lsls	r2, r3, #5
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002b2c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002b34:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002b36:	78fb      	ldrb	r3, [r7, #3]
 8002b38:	015a      	lsls	r2, r3, #5
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b42:	461a      	mov	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6013      	str	r3, [r2, #0]
 8002b48:	e08e      	b.n	8002c68 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002b4a:	78fa      	ldrb	r2, [r7, #3]
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	1a9b      	subs	r3, r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	440b      	add	r3, r1
 8002b58:	334d      	adds	r3, #77	@ 0x4d
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d143      	bne.n	8002be8 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b60:	78fa      	ldrb	r2, [r7, #3]
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	4613      	mov	r3, r2
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	1a9b      	subs	r3, r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	334d      	adds	r3, #77	@ 0x4d
 8002b70:	2202      	movs	r2, #2
 8002b72:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b74:	78fa      	ldrb	r2, [r7, #3]
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	1a9b      	subs	r3, r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	334c      	adds	r3, #76	@ 0x4c
 8002b84:	2202      	movs	r2, #2
 8002b86:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b88:	78fa      	ldrb	r2, [r7, #3]
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	011b      	lsls	r3, r3, #4
 8002b90:	1a9b      	subs	r3, r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	3326      	adds	r3, #38	@ 0x26
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00a      	beq.n	8002bb4 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002b9e:	78fa      	ldrb	r2, [r7, #3]
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	011b      	lsls	r3, r3, #4
 8002ba6:	1a9b      	subs	r3, r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	440b      	add	r3, r1
 8002bac:	3326      	adds	r3, #38	@ 0x26
 8002bae:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d159      	bne.n	8002c68 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002bb4:	78fb      	ldrb	r3, [r7, #3]
 8002bb6:	015a      	lsls	r2, r3, #5
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	4413      	add	r3, r2
 8002bbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002bca:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002bd2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002bd4:	78fb      	ldrb	r3, [r7, #3]
 8002bd6:	015a      	lsls	r2, r3, #5
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	4413      	add	r3, r2
 8002bdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002be0:	461a      	mov	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	e03f      	b.n	8002c68 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002be8:	78fa      	ldrb	r2, [r7, #3]
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	4613      	mov	r3, r2
 8002bee:	011b      	lsls	r3, r3, #4
 8002bf0:	1a9b      	subs	r3, r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	334d      	adds	r3, #77	@ 0x4d
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	2b08      	cmp	r3, #8
 8002bfc:	d126      	bne.n	8002c4c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002bfe:	78fa      	ldrb	r2, [r7, #3]
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	4613      	mov	r3, r2
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	1a9b      	subs	r3, r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	440b      	add	r3, r1
 8002c0c:	334d      	adds	r3, #77	@ 0x4d
 8002c0e:	2202      	movs	r2, #2
 8002c10:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002c12:	78fa      	ldrb	r2, [r7, #3]
 8002c14:	6879      	ldr	r1, [r7, #4]
 8002c16:	4613      	mov	r3, r2
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	1a9b      	subs	r3, r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	440b      	add	r3, r1
 8002c20:	3344      	adds	r3, #68	@ 0x44
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	1c59      	adds	r1, r3, #1
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	1a9b      	subs	r3, r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4403      	add	r3, r0
 8002c32:	3344      	adds	r3, #68	@ 0x44
 8002c34:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002c36:	78fa      	ldrb	r2, [r7, #3]
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	1a9b      	subs	r3, r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	440b      	add	r3, r1
 8002c44:	334c      	adds	r3, #76	@ 0x4c
 8002c46:	2204      	movs	r2, #4
 8002c48:	701a      	strb	r2, [r3, #0]
 8002c4a:	e00d      	b.n	8002c68 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002c4c:	78fa      	ldrb	r2, [r7, #3]
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	4613      	mov	r3, r2
 8002c52:	011b      	lsls	r3, r3, #4
 8002c54:	1a9b      	subs	r3, r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	334d      	adds	r3, #77	@ 0x4d
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	f000 8100 	beq.w	8002e64 <HCD_HC_IN_IRQHandler+0xcca>
 8002c64:	e000      	b.n	8002c68 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002c66:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002c68:	78fa      	ldrb	r2, [r7, #3]
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	1a9b      	subs	r3, r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	334c      	adds	r3, #76	@ 0x4c
 8002c78:	781a      	ldrb	r2, [r3, #0]
 8002c7a:	78fb      	ldrb	r3, [r7, #3]
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f006 fcc2 	bl	8009608 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c84:	e0ef      	b.n	8002e66 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	78fa      	ldrb	r2, [r7, #3]
 8002c8c:	4611      	mov	r1, r2
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f003 fbb1 	bl	80063f6 <USB_ReadChInterrupts>
 8002c94:	4603      	mov	r3, r0
 8002c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c9a:	2b40      	cmp	r3, #64	@ 0x40
 8002c9c:	d12f      	bne.n	8002cfe <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002c9e:	78fb      	ldrb	r3, [r7, #3]
 8002ca0:	015a      	lsls	r2, r3, #5
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002caa:	461a      	mov	r2, r3
 8002cac:	2340      	movs	r3, #64	@ 0x40
 8002cae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002cb0:	78fa      	ldrb	r2, [r7, #3]
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	1a9b      	subs	r3, r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	334d      	adds	r3, #77	@ 0x4d
 8002cc0:	2205      	movs	r2, #5
 8002cc2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002cc4:	78fa      	ldrb	r2, [r7, #3]
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	1a9b      	subs	r3, r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	331a      	adds	r3, #26
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d109      	bne.n	8002cee <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002cda:	78fa      	ldrb	r2, [r7, #3]
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	011b      	lsls	r3, r3, #4
 8002ce2:	1a9b      	subs	r3, r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	3344      	adds	r3, #68	@ 0x44
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	78fa      	ldrb	r2, [r7, #3]
 8002cf4:	4611      	mov	r1, r2
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f004 f927 	bl	8006f4a <USB_HC_Halt>
 8002cfc:	e0b3      	b.n	8002e66 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	78fa      	ldrb	r2, [r7, #3]
 8002d04:	4611      	mov	r1, r2
 8002d06:	4618      	mov	r0, r3
 8002d08:	f003 fb75 	bl	80063f6 <USB_ReadChInterrupts>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	f003 0310 	and.w	r3, r3, #16
 8002d12:	2b10      	cmp	r3, #16
 8002d14:	f040 80a7 	bne.w	8002e66 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002d18:	78fa      	ldrb	r2, [r7, #3]
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	1a9b      	subs	r3, r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	3326      	adds	r3, #38	@ 0x26
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	2b03      	cmp	r3, #3
 8002d2c:	d11b      	bne.n	8002d66 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002d2e:	78fa      	ldrb	r2, [r7, #3]
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	4613      	mov	r3, r2
 8002d34:	011b      	lsls	r3, r3, #4
 8002d36:	1a9b      	subs	r3, r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	440b      	add	r3, r1
 8002d3c:	3344      	adds	r3, #68	@ 0x44
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002d42:	78fa      	ldrb	r2, [r7, #3]
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	4613      	mov	r3, r2
 8002d48:	011b      	lsls	r3, r3, #4
 8002d4a:	1a9b      	subs	r3, r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	440b      	add	r3, r1
 8002d50:	334d      	adds	r3, #77	@ 0x4d
 8002d52:	2204      	movs	r2, #4
 8002d54:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	78fa      	ldrb	r2, [r7, #3]
 8002d5c:	4611      	mov	r1, r2
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f004 f8f3 	bl	8006f4a <USB_HC_Halt>
 8002d64:	e03f      	b.n	8002de6 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d66:	78fa      	ldrb	r2, [r7, #3]
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	1a9b      	subs	r3, r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	440b      	add	r3, r1
 8002d74:	3326      	adds	r3, #38	@ 0x26
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00a      	beq.n	8002d92 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d7c:	78fa      	ldrb	r2, [r7, #3]
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	4613      	mov	r3, r2
 8002d82:	011b      	lsls	r3, r3, #4
 8002d84:	1a9b      	subs	r3, r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	3326      	adds	r3, #38	@ 0x26
 8002d8c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d129      	bne.n	8002de6 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002d92:	78fa      	ldrb	r2, [r7, #3]
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	4613      	mov	r3, r2
 8002d98:	011b      	lsls	r3, r3, #4
 8002d9a:	1a9b      	subs	r3, r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	440b      	add	r3, r1
 8002da0:	3344      	adds	r3, #68	@ 0x44
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	799b      	ldrb	r3, [r3, #6]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00a      	beq.n	8002dc4 <HCD_HC_IN_IRQHandler+0xc2a>
 8002dae:	78fa      	ldrb	r2, [r7, #3]
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	4613      	mov	r3, r2
 8002db4:	011b      	lsls	r3, r3, #4
 8002db6:	1a9b      	subs	r3, r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	440b      	add	r3, r1
 8002dbc:	331b      	adds	r3, #27
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d110      	bne.n	8002de6 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002dc4:	78fa      	ldrb	r2, [r7, #3]
 8002dc6:	6879      	ldr	r1, [r7, #4]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	011b      	lsls	r3, r3, #4
 8002dcc:	1a9b      	subs	r3, r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	334d      	adds	r3, #77	@ 0x4d
 8002dd4:	2204      	movs	r2, #4
 8002dd6:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	78fa      	ldrb	r2, [r7, #3]
 8002dde:	4611      	mov	r1, r2
 8002de0:	4618      	mov	r0, r3
 8002de2:	f004 f8b2 	bl	8006f4a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002de6:	78fa      	ldrb	r2, [r7, #3]
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	4613      	mov	r3, r2
 8002dec:	011b      	lsls	r3, r3, #4
 8002dee:	1a9b      	subs	r3, r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	440b      	add	r3, r1
 8002df4:	331b      	adds	r3, #27
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d129      	bne.n	8002e50 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002dfc:	78fa      	ldrb	r2, [r7, #3]
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	4613      	mov	r3, r2
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	1a9b      	subs	r3, r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	440b      	add	r3, r1
 8002e0a:	331b      	adds	r3, #27
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002e10:	78fb      	ldrb	r3, [r7, #3]
 8002e12:	015a      	lsls	r2, r3, #5
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	4413      	add	r3, r2
 8002e18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	78fa      	ldrb	r2, [r7, #3]
 8002e20:	0151      	lsls	r1, r2, #5
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	440a      	add	r2, r1
 8002e26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e2e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002e30:	78fb      	ldrb	r3, [r7, #3]
 8002e32:	015a      	lsls	r2, r3, #5
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	4413      	add	r3, r2
 8002e38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	78fa      	ldrb	r2, [r7, #3]
 8002e40:	0151      	lsls	r1, r2, #5
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	440a      	add	r2, r1
 8002e46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e4a:	f043 0320 	orr.w	r3, r3, #32
 8002e4e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002e50:	78fb      	ldrb	r3, [r7, #3]
 8002e52:	015a      	lsls	r2, r3, #5
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	4413      	add	r3, r2
 8002e58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	2310      	movs	r3, #16
 8002e60:	6093      	str	r3, [r2, #8]
 8002e62:	e000      	b.n	8002e66 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002e64:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002e66:	3718      	adds	r7, #24
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	78fa      	ldrb	r2, [r7, #3]
 8002e88:	4611      	mov	r1, r2
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f003 fab3 	bl	80063f6 <USB_ReadChInterrupts>
 8002e90:	4603      	mov	r3, r0
 8002e92:	f003 0304 	and.w	r3, r3, #4
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	d11b      	bne.n	8002ed2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002e9a:	78fb      	ldrb	r3, [r7, #3]
 8002e9c:	015a      	lsls	r2, r3, #5
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	2304      	movs	r3, #4
 8002eaa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002eac:	78fa      	ldrb	r2, [r7, #3]
 8002eae:	6879      	ldr	r1, [r7, #4]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	011b      	lsls	r3, r3, #4
 8002eb4:	1a9b      	subs	r3, r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	440b      	add	r3, r1
 8002eba:	334d      	adds	r3, #77	@ 0x4d
 8002ebc:	2207      	movs	r2, #7
 8002ebe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	78fa      	ldrb	r2, [r7, #3]
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f004 f83e 	bl	8006f4a <USB_HC_Halt>
 8002ece:	f000 bc89 	b.w	80037e4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	78fa      	ldrb	r2, [r7, #3]
 8002ed8:	4611      	mov	r1, r2
 8002eda:	4618      	mov	r0, r3
 8002edc:	f003 fa8b 	bl	80063f6 <USB_ReadChInterrupts>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f003 0320 	and.w	r3, r3, #32
 8002ee6:	2b20      	cmp	r3, #32
 8002ee8:	f040 8082 	bne.w	8002ff0 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002eec:	78fb      	ldrb	r3, [r7, #3]
 8002eee:	015a      	lsls	r2, r3, #5
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ef8:	461a      	mov	r2, r3
 8002efa:	2320      	movs	r3, #32
 8002efc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002efe:	78fa      	ldrb	r2, [r7, #3]
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	1a9b      	subs	r3, r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	3319      	adds	r3, #25
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d124      	bne.n	8002f5e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002f14:	78fa      	ldrb	r2, [r7, #3]
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	1a9b      	subs	r3, r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	3319      	adds	r3, #25
 8002f24:	2200      	movs	r2, #0
 8002f26:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f28:	78fa      	ldrb	r2, [r7, #3]
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	1a9b      	subs	r3, r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	440b      	add	r3, r1
 8002f36:	334c      	adds	r3, #76	@ 0x4c
 8002f38:	2202      	movs	r2, #2
 8002f3a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002f3c:	78fa      	ldrb	r2, [r7, #3]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	1a9b      	subs	r3, r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	334d      	adds	r3, #77	@ 0x4d
 8002f4c:	2203      	movs	r2, #3
 8002f4e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	78fa      	ldrb	r2, [r7, #3]
 8002f56:	4611      	mov	r1, r2
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f003 fff6 	bl	8006f4a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002f5e:	78fa      	ldrb	r2, [r7, #3]
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	4613      	mov	r3, r2
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	1a9b      	subs	r3, r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	331a      	adds	r3, #26
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	f040 8437 	bne.w	80037e4 <HCD_HC_OUT_IRQHandler+0x978>
 8002f76:	78fa      	ldrb	r2, [r7, #3]
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	011b      	lsls	r3, r3, #4
 8002f7e:	1a9b      	subs	r3, r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	440b      	add	r3, r1
 8002f84:	331b      	adds	r3, #27
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f040 842b 	bne.w	80037e4 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002f8e:	78fa      	ldrb	r2, [r7, #3]
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	4613      	mov	r3, r2
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	1a9b      	subs	r3, r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	440b      	add	r3, r1
 8002f9c:	3326      	adds	r3, #38	@ 0x26
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d009      	beq.n	8002fb8 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002fa4:	78fa      	ldrb	r2, [r7, #3]
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	011b      	lsls	r3, r3, #4
 8002fac:	1a9b      	subs	r3, r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	331b      	adds	r3, #27
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002fb8:	78fa      	ldrb	r2, [r7, #3]
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	1a9b      	subs	r3, r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	334d      	adds	r3, #77	@ 0x4d
 8002fc8:	2203      	movs	r2, #3
 8002fca:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	78fa      	ldrb	r2, [r7, #3]
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f003 ffb8 	bl	8006f4a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002fda:	78fa      	ldrb	r2, [r7, #3]
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	1a9b      	subs	r3, r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	3344      	adds	r3, #68	@ 0x44
 8002fea:	2200      	movs	r2, #0
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	e3f9      	b.n	80037e4 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	78fa      	ldrb	r2, [r7, #3]
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f003 f9fc 	bl	80063f6 <USB_ReadChInterrupts>
 8002ffe:	4603      	mov	r3, r0
 8003000:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003004:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003008:	d111      	bne.n	800302e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800300a:	78fb      	ldrb	r3, [r7, #3]
 800300c:	015a      	lsls	r2, r3, #5
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	4413      	add	r3, r2
 8003012:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003016:	461a      	mov	r2, r3
 8003018:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800301c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	78fa      	ldrb	r2, [r7, #3]
 8003024:	4611      	mov	r1, r2
 8003026:	4618      	mov	r0, r3
 8003028:	f003 ff8f 	bl	8006f4a <USB_HC_Halt>
 800302c:	e3da      	b.n	80037e4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	78fa      	ldrb	r2, [r7, #3]
 8003034:	4611      	mov	r1, r2
 8003036:	4618      	mov	r0, r3
 8003038:	f003 f9dd 	bl	80063f6 <USB_ReadChInterrupts>
 800303c:	4603      	mov	r3, r0
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b01      	cmp	r3, #1
 8003044:	d168      	bne.n	8003118 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003046:	78fa      	ldrb	r2, [r7, #3]
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	4613      	mov	r3, r2
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	1a9b      	subs	r3, r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	440b      	add	r3, r1
 8003054:	3344      	adds	r3, #68	@ 0x44
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	78fa      	ldrb	r2, [r7, #3]
 8003060:	4611      	mov	r1, r2
 8003062:	4618      	mov	r0, r3
 8003064:	f003 f9c7 	bl	80063f6 <USB_ReadChInterrupts>
 8003068:	4603      	mov	r3, r0
 800306a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800306e:	2b40      	cmp	r3, #64	@ 0x40
 8003070:	d112      	bne.n	8003098 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003072:	78fa      	ldrb	r2, [r7, #3]
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	1a9b      	subs	r3, r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	440b      	add	r3, r1
 8003080:	3319      	adds	r3, #25
 8003082:	2201      	movs	r2, #1
 8003084:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003086:	78fb      	ldrb	r3, [r7, #3]
 8003088:	015a      	lsls	r2, r3, #5
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	4413      	add	r3, r2
 800308e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003092:	461a      	mov	r2, r3
 8003094:	2340      	movs	r3, #64	@ 0x40
 8003096:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003098:	78fa      	ldrb	r2, [r7, #3]
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	4613      	mov	r3, r2
 800309e:	011b      	lsls	r3, r3, #4
 80030a0:	1a9b      	subs	r3, r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	331b      	adds	r3, #27
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d019      	beq.n	80030e2 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80030ae:	78fa      	ldrb	r2, [r7, #3]
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	4613      	mov	r3, r2
 80030b4:	011b      	lsls	r3, r3, #4
 80030b6:	1a9b      	subs	r3, r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	440b      	add	r3, r1
 80030bc:	331b      	adds	r3, #27
 80030be:	2200      	movs	r2, #0
 80030c0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80030c2:	78fb      	ldrb	r3, [r7, #3]
 80030c4:	015a      	lsls	r2, r3, #5
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	4413      	add	r3, r2
 80030ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	78fa      	ldrb	r2, [r7, #3]
 80030d2:	0151      	lsls	r1, r2, #5
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	440a      	add	r2, r1
 80030d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80030dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030e0:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80030e2:	78fb      	ldrb	r3, [r7, #3]
 80030e4:	015a      	lsls	r2, r3, #5
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	4413      	add	r3, r2
 80030ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030ee:	461a      	mov	r2, r3
 80030f0:	2301      	movs	r3, #1
 80030f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80030f4:	78fa      	ldrb	r2, [r7, #3]
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	1a9b      	subs	r3, r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	334d      	adds	r3, #77	@ 0x4d
 8003104:	2201      	movs	r2, #1
 8003106:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	78fa      	ldrb	r2, [r7, #3]
 800310e:	4611      	mov	r1, r2
 8003110:	4618      	mov	r0, r3
 8003112:	f003 ff1a 	bl	8006f4a <USB_HC_Halt>
 8003116:	e365      	b.n	80037e4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	78fa      	ldrb	r2, [r7, #3]
 800311e:	4611      	mov	r1, r2
 8003120:	4618      	mov	r0, r3
 8003122:	f003 f968 	bl	80063f6 <USB_ReadChInterrupts>
 8003126:	4603      	mov	r3, r0
 8003128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800312c:	2b40      	cmp	r3, #64	@ 0x40
 800312e:	d139      	bne.n	80031a4 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003130:	78fa      	ldrb	r2, [r7, #3]
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	4613      	mov	r3, r2
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	1a9b      	subs	r3, r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	334d      	adds	r3, #77	@ 0x4d
 8003140:	2205      	movs	r2, #5
 8003142:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003144:	78fa      	ldrb	r2, [r7, #3]
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	1a9b      	subs	r3, r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	331a      	adds	r3, #26
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d109      	bne.n	800316e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800315a:	78fa      	ldrb	r2, [r7, #3]
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	1a9b      	subs	r3, r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	440b      	add	r3, r1
 8003168:	3319      	adds	r3, #25
 800316a:	2201      	movs	r2, #1
 800316c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800316e:	78fa      	ldrb	r2, [r7, #3]
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	4613      	mov	r3, r2
 8003174:	011b      	lsls	r3, r3, #4
 8003176:	1a9b      	subs	r3, r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	3344      	adds	r3, #68	@ 0x44
 800317e:	2200      	movs	r2, #0
 8003180:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	78fa      	ldrb	r2, [r7, #3]
 8003188:	4611      	mov	r1, r2
 800318a:	4618      	mov	r0, r3
 800318c:	f003 fedd 	bl	8006f4a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003190:	78fb      	ldrb	r3, [r7, #3]
 8003192:	015a      	lsls	r2, r3, #5
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	4413      	add	r3, r2
 8003198:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800319c:	461a      	mov	r2, r3
 800319e:	2340      	movs	r3, #64	@ 0x40
 80031a0:	6093      	str	r3, [r2, #8]
 80031a2:	e31f      	b.n	80037e4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	78fa      	ldrb	r2, [r7, #3]
 80031aa:	4611      	mov	r1, r2
 80031ac:	4618      	mov	r0, r3
 80031ae:	f003 f922 	bl	80063f6 <USB_ReadChInterrupts>
 80031b2:	4603      	mov	r3, r0
 80031b4:	f003 0308 	and.w	r3, r3, #8
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d11a      	bne.n	80031f2 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80031bc:	78fb      	ldrb	r3, [r7, #3]
 80031be:	015a      	lsls	r2, r3, #5
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031c8:	461a      	mov	r2, r3
 80031ca:	2308      	movs	r3, #8
 80031cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80031ce:	78fa      	ldrb	r2, [r7, #3]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	1a9b      	subs	r3, r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	334d      	adds	r3, #77	@ 0x4d
 80031de:	2206      	movs	r2, #6
 80031e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	78fa      	ldrb	r2, [r7, #3]
 80031e8:	4611      	mov	r1, r2
 80031ea:	4618      	mov	r0, r3
 80031ec:	f003 fead 	bl	8006f4a <USB_HC_Halt>
 80031f0:	e2f8      	b.n	80037e4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	78fa      	ldrb	r2, [r7, #3]
 80031f8:	4611      	mov	r1, r2
 80031fa:	4618      	mov	r0, r3
 80031fc:	f003 f8fb 	bl	80063f6 <USB_ReadChInterrupts>
 8003200:	4603      	mov	r3, r0
 8003202:	f003 0310 	and.w	r3, r3, #16
 8003206:	2b10      	cmp	r3, #16
 8003208:	d144      	bne.n	8003294 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800320a:	78fa      	ldrb	r2, [r7, #3]
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	4613      	mov	r3, r2
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	1a9b      	subs	r3, r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	3344      	adds	r3, #68	@ 0x44
 800321a:	2200      	movs	r2, #0
 800321c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800321e:	78fa      	ldrb	r2, [r7, #3]
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	1a9b      	subs	r3, r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	334d      	adds	r3, #77	@ 0x4d
 800322e:	2204      	movs	r2, #4
 8003230:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003232:	78fa      	ldrb	r2, [r7, #3]
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	1a9b      	subs	r3, r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	440b      	add	r3, r1
 8003240:	3319      	adds	r3, #25
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d114      	bne.n	8003272 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003248:	78fa      	ldrb	r2, [r7, #3]
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	4613      	mov	r3, r2
 800324e:	011b      	lsls	r3, r3, #4
 8003250:	1a9b      	subs	r3, r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	3318      	adds	r3, #24
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d109      	bne.n	8003272 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800325e:	78fa      	ldrb	r2, [r7, #3]
 8003260:	6879      	ldr	r1, [r7, #4]
 8003262:	4613      	mov	r3, r2
 8003264:	011b      	lsls	r3, r3, #4
 8003266:	1a9b      	subs	r3, r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	440b      	add	r3, r1
 800326c:	3319      	adds	r3, #25
 800326e:	2201      	movs	r2, #1
 8003270:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	78fa      	ldrb	r2, [r7, #3]
 8003278:	4611      	mov	r1, r2
 800327a:	4618      	mov	r0, r3
 800327c:	f003 fe65 	bl	8006f4a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003280:	78fb      	ldrb	r3, [r7, #3]
 8003282:	015a      	lsls	r2, r3, #5
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	4413      	add	r3, r2
 8003288:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800328c:	461a      	mov	r2, r3
 800328e:	2310      	movs	r3, #16
 8003290:	6093      	str	r3, [r2, #8]
 8003292:	e2a7      	b.n	80037e4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	78fa      	ldrb	r2, [r7, #3]
 800329a:	4611      	mov	r1, r2
 800329c:	4618      	mov	r0, r3
 800329e:	f003 f8aa 	bl	80063f6 <USB_ReadChInterrupts>
 80032a2:	4603      	mov	r3, r0
 80032a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032a8:	2b80      	cmp	r3, #128	@ 0x80
 80032aa:	f040 8083 	bne.w	80033b4 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	799b      	ldrb	r3, [r3, #6]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d111      	bne.n	80032da <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80032b6:	78fa      	ldrb	r2, [r7, #3]
 80032b8:	6879      	ldr	r1, [r7, #4]
 80032ba:	4613      	mov	r3, r2
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	1a9b      	subs	r3, r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	440b      	add	r3, r1
 80032c4:	334d      	adds	r3, #77	@ 0x4d
 80032c6:	2207      	movs	r2, #7
 80032c8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	78fa      	ldrb	r2, [r7, #3]
 80032d0:	4611      	mov	r1, r2
 80032d2:	4618      	mov	r0, r3
 80032d4:	f003 fe39 	bl	8006f4a <USB_HC_Halt>
 80032d8:	e062      	b.n	80033a0 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80032da:	78fa      	ldrb	r2, [r7, #3]
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	4613      	mov	r3, r2
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	1a9b      	subs	r3, r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	440b      	add	r3, r1
 80032e8:	3344      	adds	r3, #68	@ 0x44
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	1c59      	adds	r1, r3, #1
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	1a9b      	subs	r3, r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4403      	add	r3, r0
 80032fa:	3344      	adds	r3, #68	@ 0x44
 80032fc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032fe:	78fa      	ldrb	r2, [r7, #3]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	1a9b      	subs	r3, r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	3344      	adds	r3, #68	@ 0x44
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2b02      	cmp	r3, #2
 8003312:	d922      	bls.n	800335a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003314:	78fa      	ldrb	r2, [r7, #3]
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	4613      	mov	r3, r2
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	1a9b      	subs	r3, r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	440b      	add	r3, r1
 8003322:	3344      	adds	r3, #68	@ 0x44
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003328:	78fa      	ldrb	r2, [r7, #3]
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	1a9b      	subs	r3, r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	334c      	adds	r3, #76	@ 0x4c
 8003338:	2204      	movs	r2, #4
 800333a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800333c:	78fa      	ldrb	r2, [r7, #3]
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	1a9b      	subs	r3, r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	334c      	adds	r3, #76	@ 0x4c
 800334c:	781a      	ldrb	r2, [r3, #0]
 800334e:	78fb      	ldrb	r3, [r7, #3]
 8003350:	4619      	mov	r1, r3
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f006 f958 	bl	8009608 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003358:	e022      	b.n	80033a0 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800335a:	78fa      	ldrb	r2, [r7, #3]
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	4613      	mov	r3, r2
 8003360:	011b      	lsls	r3, r3, #4
 8003362:	1a9b      	subs	r3, r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	440b      	add	r3, r1
 8003368:	334c      	adds	r3, #76	@ 0x4c
 800336a:	2202      	movs	r2, #2
 800336c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800336e:	78fb      	ldrb	r3, [r7, #3]
 8003370:	015a      	lsls	r2, r3, #5
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	4413      	add	r3, r2
 8003376:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003384:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800338c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800338e:	78fb      	ldrb	r3, [r7, #3]
 8003390:	015a      	lsls	r2, r3, #5
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	4413      	add	r3, r2
 8003396:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800339a:	461a      	mov	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80033a0:	78fb      	ldrb	r3, [r7, #3]
 80033a2:	015a      	lsls	r2, r3, #5
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	4413      	add	r3, r2
 80033a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033ac:	461a      	mov	r2, r3
 80033ae:	2380      	movs	r3, #128	@ 0x80
 80033b0:	6093      	str	r3, [r2, #8]
 80033b2:	e217      	b.n	80037e4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	78fa      	ldrb	r2, [r7, #3]
 80033ba:	4611      	mov	r1, r2
 80033bc:	4618      	mov	r0, r3
 80033be:	f003 f81a 	bl	80063f6 <USB_ReadChInterrupts>
 80033c2:	4603      	mov	r3, r0
 80033c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033cc:	d11b      	bne.n	8003406 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80033ce:	78fa      	ldrb	r2, [r7, #3]
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	4613      	mov	r3, r2
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	1a9b      	subs	r3, r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	334d      	adds	r3, #77	@ 0x4d
 80033de:	2209      	movs	r2, #9
 80033e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	78fa      	ldrb	r2, [r7, #3]
 80033e8:	4611      	mov	r1, r2
 80033ea:	4618      	mov	r0, r3
 80033ec:	f003 fdad 	bl	8006f4a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80033f0:	78fb      	ldrb	r3, [r7, #3]
 80033f2:	015a      	lsls	r2, r3, #5
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	4413      	add	r3, r2
 80033f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033fc:	461a      	mov	r2, r3
 80033fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003402:	6093      	str	r3, [r2, #8]
 8003404:	e1ee      	b.n	80037e4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	78fa      	ldrb	r2, [r7, #3]
 800340c:	4611      	mov	r1, r2
 800340e:	4618      	mov	r0, r3
 8003410:	f002 fff1 	bl	80063f6 <USB_ReadChInterrupts>
 8003414:	4603      	mov	r3, r0
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b02      	cmp	r3, #2
 800341c:	f040 81df 	bne.w	80037de <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003420:	78fb      	ldrb	r3, [r7, #3]
 8003422:	015a      	lsls	r2, r3, #5
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	4413      	add	r3, r2
 8003428:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800342c:	461a      	mov	r2, r3
 800342e:	2302      	movs	r3, #2
 8003430:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003432:	78fa      	ldrb	r2, [r7, #3]
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	4613      	mov	r3, r2
 8003438:	011b      	lsls	r3, r3, #4
 800343a:	1a9b      	subs	r3, r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	440b      	add	r3, r1
 8003440:	334d      	adds	r3, #77	@ 0x4d
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b01      	cmp	r3, #1
 8003446:	f040 8093 	bne.w	8003570 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800344a:	78fa      	ldrb	r2, [r7, #3]
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	4613      	mov	r3, r2
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	1a9b      	subs	r3, r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	334d      	adds	r3, #77	@ 0x4d
 800345a:	2202      	movs	r2, #2
 800345c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800345e:	78fa      	ldrb	r2, [r7, #3]
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	4613      	mov	r3, r2
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	1a9b      	subs	r3, r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	440b      	add	r3, r1
 800346c:	334c      	adds	r3, #76	@ 0x4c
 800346e:	2201      	movs	r2, #1
 8003470:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003472:	78fa      	ldrb	r2, [r7, #3]
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	4613      	mov	r3, r2
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	1a9b      	subs	r3, r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	440b      	add	r3, r1
 8003480:	3326      	adds	r3, #38	@ 0x26
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b02      	cmp	r3, #2
 8003486:	d00b      	beq.n	80034a0 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003488:	78fa      	ldrb	r2, [r7, #3]
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	4613      	mov	r3, r2
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	1a9b      	subs	r3, r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	440b      	add	r3, r1
 8003496:	3326      	adds	r3, #38	@ 0x26
 8003498:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800349a:	2b03      	cmp	r3, #3
 800349c:	f040 8190 	bne.w	80037c0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	799b      	ldrb	r3, [r3, #6]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d115      	bne.n	80034d4 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80034a8:	78fa      	ldrb	r2, [r7, #3]
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	4613      	mov	r3, r2
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	1a9b      	subs	r3, r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	333d      	adds	r3, #61	@ 0x3d
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	78fa      	ldrb	r2, [r7, #3]
 80034bc:	f083 0301 	eor.w	r3, r3, #1
 80034c0:	b2d8      	uxtb	r0, r3
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	1a9b      	subs	r3, r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	333d      	adds	r3, #61	@ 0x3d
 80034d0:	4602      	mov	r2, r0
 80034d2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	799b      	ldrb	r3, [r3, #6]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	f040 8171 	bne.w	80037c0 <HCD_HC_OUT_IRQHandler+0x954>
 80034de:	78fa      	ldrb	r2, [r7, #3]
 80034e0:	6879      	ldr	r1, [r7, #4]
 80034e2:	4613      	mov	r3, r2
 80034e4:	011b      	lsls	r3, r3, #4
 80034e6:	1a9b      	subs	r3, r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	440b      	add	r3, r1
 80034ec:	3334      	adds	r3, #52	@ 0x34
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 8165 	beq.w	80037c0 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80034f6:	78fa      	ldrb	r2, [r7, #3]
 80034f8:	6879      	ldr	r1, [r7, #4]
 80034fa:	4613      	mov	r3, r2
 80034fc:	011b      	lsls	r3, r3, #4
 80034fe:	1a9b      	subs	r3, r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	440b      	add	r3, r1
 8003504:	3334      	adds	r3, #52	@ 0x34
 8003506:	6819      	ldr	r1, [r3, #0]
 8003508:	78fa      	ldrb	r2, [r7, #3]
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	1a9b      	subs	r3, r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4403      	add	r3, r0
 8003516:	3328      	adds	r3, #40	@ 0x28
 8003518:	881b      	ldrh	r3, [r3, #0]
 800351a:	440b      	add	r3, r1
 800351c:	1e59      	subs	r1, r3, #1
 800351e:	78fa      	ldrb	r2, [r7, #3]
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	4613      	mov	r3, r2
 8003524:	011b      	lsls	r3, r3, #4
 8003526:	1a9b      	subs	r3, r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4403      	add	r3, r0
 800352c:	3328      	adds	r3, #40	@ 0x28
 800352e:	881b      	ldrh	r3, [r3, #0]
 8003530:	fbb1 f3f3 	udiv	r3, r1, r3
 8003534:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 813f 	beq.w	80037c0 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003542:	78fa      	ldrb	r2, [r7, #3]
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	4613      	mov	r3, r2
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	1a9b      	subs	r3, r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	440b      	add	r3, r1
 8003550:	333d      	adds	r3, #61	@ 0x3d
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	78fa      	ldrb	r2, [r7, #3]
 8003556:	f083 0301 	eor.w	r3, r3, #1
 800355a:	b2d8      	uxtb	r0, r3
 800355c:	6879      	ldr	r1, [r7, #4]
 800355e:	4613      	mov	r3, r2
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	1a9b      	subs	r3, r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	440b      	add	r3, r1
 8003568:	333d      	adds	r3, #61	@ 0x3d
 800356a:	4602      	mov	r2, r0
 800356c:	701a      	strb	r2, [r3, #0]
 800356e:	e127      	b.n	80037c0 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003570:	78fa      	ldrb	r2, [r7, #3]
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	4613      	mov	r3, r2
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	1a9b      	subs	r3, r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	334d      	adds	r3, #77	@ 0x4d
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	2b03      	cmp	r3, #3
 8003584:	d120      	bne.n	80035c8 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003586:	78fa      	ldrb	r2, [r7, #3]
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	4613      	mov	r3, r2
 800358c:	011b      	lsls	r3, r3, #4
 800358e:	1a9b      	subs	r3, r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	440b      	add	r3, r1
 8003594:	334d      	adds	r3, #77	@ 0x4d
 8003596:	2202      	movs	r2, #2
 8003598:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800359a:	78fa      	ldrb	r2, [r7, #3]
 800359c:	6879      	ldr	r1, [r7, #4]
 800359e:	4613      	mov	r3, r2
 80035a0:	011b      	lsls	r3, r3, #4
 80035a2:	1a9b      	subs	r3, r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	440b      	add	r3, r1
 80035a8:	331b      	adds	r3, #27
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	f040 8107 	bne.w	80037c0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035b2:	78fa      	ldrb	r2, [r7, #3]
 80035b4:	6879      	ldr	r1, [r7, #4]
 80035b6:	4613      	mov	r3, r2
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	1a9b      	subs	r3, r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	440b      	add	r3, r1
 80035c0:	334c      	adds	r3, #76	@ 0x4c
 80035c2:	2202      	movs	r2, #2
 80035c4:	701a      	strb	r2, [r3, #0]
 80035c6:	e0fb      	b.n	80037c0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80035c8:	78fa      	ldrb	r2, [r7, #3]
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	4613      	mov	r3, r2
 80035ce:	011b      	lsls	r3, r3, #4
 80035d0:	1a9b      	subs	r3, r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	334d      	adds	r3, #77	@ 0x4d
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b04      	cmp	r3, #4
 80035dc:	d13a      	bne.n	8003654 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035de:	78fa      	ldrb	r2, [r7, #3]
 80035e0:	6879      	ldr	r1, [r7, #4]
 80035e2:	4613      	mov	r3, r2
 80035e4:	011b      	lsls	r3, r3, #4
 80035e6:	1a9b      	subs	r3, r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	440b      	add	r3, r1
 80035ec:	334d      	adds	r3, #77	@ 0x4d
 80035ee:	2202      	movs	r2, #2
 80035f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035f2:	78fa      	ldrb	r2, [r7, #3]
 80035f4:	6879      	ldr	r1, [r7, #4]
 80035f6:	4613      	mov	r3, r2
 80035f8:	011b      	lsls	r3, r3, #4
 80035fa:	1a9b      	subs	r3, r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	440b      	add	r3, r1
 8003600:	334c      	adds	r3, #76	@ 0x4c
 8003602:	2202      	movs	r2, #2
 8003604:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003606:	78fa      	ldrb	r2, [r7, #3]
 8003608:	6879      	ldr	r1, [r7, #4]
 800360a:	4613      	mov	r3, r2
 800360c:	011b      	lsls	r3, r3, #4
 800360e:	1a9b      	subs	r3, r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	440b      	add	r3, r1
 8003614:	331b      	adds	r3, #27
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	2b01      	cmp	r3, #1
 800361a:	f040 80d1 	bne.w	80037c0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800361e:	78fa      	ldrb	r2, [r7, #3]
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	4613      	mov	r3, r2
 8003624:	011b      	lsls	r3, r3, #4
 8003626:	1a9b      	subs	r3, r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	440b      	add	r3, r1
 800362c:	331b      	adds	r3, #27
 800362e:	2200      	movs	r2, #0
 8003630:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003632:	78fb      	ldrb	r3, [r7, #3]
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	4413      	add	r3, r2
 800363a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	78fa      	ldrb	r2, [r7, #3]
 8003642:	0151      	lsls	r1, r2, #5
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	440a      	add	r2, r1
 8003648:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800364c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003650:	6053      	str	r3, [r2, #4]
 8003652:	e0b5      	b.n	80037c0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003654:	78fa      	ldrb	r2, [r7, #3]
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	4613      	mov	r3, r2
 800365a:	011b      	lsls	r3, r3, #4
 800365c:	1a9b      	subs	r3, r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	334d      	adds	r3, #77	@ 0x4d
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	2b05      	cmp	r3, #5
 8003668:	d114      	bne.n	8003694 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800366a:	78fa      	ldrb	r2, [r7, #3]
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	4613      	mov	r3, r2
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	1a9b      	subs	r3, r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	440b      	add	r3, r1
 8003678:	334d      	adds	r3, #77	@ 0x4d
 800367a:	2202      	movs	r2, #2
 800367c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800367e:	78fa      	ldrb	r2, [r7, #3]
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	1a9b      	subs	r3, r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	334c      	adds	r3, #76	@ 0x4c
 800368e:	2202      	movs	r2, #2
 8003690:	701a      	strb	r2, [r3, #0]
 8003692:	e095      	b.n	80037c0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003694:	78fa      	ldrb	r2, [r7, #3]
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	4613      	mov	r3, r2
 800369a:	011b      	lsls	r3, r3, #4
 800369c:	1a9b      	subs	r3, r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	334d      	adds	r3, #77	@ 0x4d
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	2b06      	cmp	r3, #6
 80036a8:	d114      	bne.n	80036d4 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036aa:	78fa      	ldrb	r2, [r7, #3]
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	4613      	mov	r3, r2
 80036b0:	011b      	lsls	r3, r3, #4
 80036b2:	1a9b      	subs	r3, r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	440b      	add	r3, r1
 80036b8:	334d      	adds	r3, #77	@ 0x4d
 80036ba:	2202      	movs	r2, #2
 80036bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80036be:	78fa      	ldrb	r2, [r7, #3]
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	4613      	mov	r3, r2
 80036c4:	011b      	lsls	r3, r3, #4
 80036c6:	1a9b      	subs	r3, r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	440b      	add	r3, r1
 80036cc:	334c      	adds	r3, #76	@ 0x4c
 80036ce:	2205      	movs	r2, #5
 80036d0:	701a      	strb	r2, [r3, #0]
 80036d2:	e075      	b.n	80037c0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80036d4:	78fa      	ldrb	r2, [r7, #3]
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	4613      	mov	r3, r2
 80036da:	011b      	lsls	r3, r3, #4
 80036dc:	1a9b      	subs	r3, r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	334d      	adds	r3, #77	@ 0x4d
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	2b07      	cmp	r3, #7
 80036e8:	d00a      	beq.n	8003700 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80036ea:	78fa      	ldrb	r2, [r7, #3]
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	4613      	mov	r3, r2
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	1a9b      	subs	r3, r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	440b      	add	r3, r1
 80036f8:	334d      	adds	r3, #77	@ 0x4d
 80036fa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80036fc:	2b09      	cmp	r3, #9
 80036fe:	d170      	bne.n	80037e2 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003700:	78fa      	ldrb	r2, [r7, #3]
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	4613      	mov	r3, r2
 8003706:	011b      	lsls	r3, r3, #4
 8003708:	1a9b      	subs	r3, r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	440b      	add	r3, r1
 800370e:	334d      	adds	r3, #77	@ 0x4d
 8003710:	2202      	movs	r2, #2
 8003712:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003714:	78fa      	ldrb	r2, [r7, #3]
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	4613      	mov	r3, r2
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	1a9b      	subs	r3, r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	3344      	adds	r3, #68	@ 0x44
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	1c59      	adds	r1, r3, #1
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	4613      	mov	r3, r2
 800372c:	011b      	lsls	r3, r3, #4
 800372e:	1a9b      	subs	r3, r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4403      	add	r3, r0
 8003734:	3344      	adds	r3, #68	@ 0x44
 8003736:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003738:	78fa      	ldrb	r2, [r7, #3]
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	4613      	mov	r3, r2
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	1a9b      	subs	r3, r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	440b      	add	r3, r1
 8003746:	3344      	adds	r3, #68	@ 0x44
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2b02      	cmp	r3, #2
 800374c:	d914      	bls.n	8003778 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800374e:	78fa      	ldrb	r2, [r7, #3]
 8003750:	6879      	ldr	r1, [r7, #4]
 8003752:	4613      	mov	r3, r2
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	1a9b      	subs	r3, r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	440b      	add	r3, r1
 800375c:	3344      	adds	r3, #68	@ 0x44
 800375e:	2200      	movs	r2, #0
 8003760:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003762:	78fa      	ldrb	r2, [r7, #3]
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	4613      	mov	r3, r2
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	1a9b      	subs	r3, r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	334c      	adds	r3, #76	@ 0x4c
 8003772:	2204      	movs	r2, #4
 8003774:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003776:	e022      	b.n	80037be <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003778:	78fa      	ldrb	r2, [r7, #3]
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	1a9b      	subs	r3, r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	334c      	adds	r3, #76	@ 0x4c
 8003788:	2202      	movs	r2, #2
 800378a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800378c:	78fb      	ldrb	r3, [r7, #3]
 800378e:	015a      	lsls	r2, r3, #5
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	4413      	add	r3, r2
 8003794:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80037a2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80037aa:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80037ac:	78fb      	ldrb	r3, [r7, #3]
 80037ae:	015a      	lsls	r2, r3, #5
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	4413      	add	r3, r2
 80037b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037b8:	461a      	mov	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80037be:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80037c0:	78fa      	ldrb	r2, [r7, #3]
 80037c2:	6879      	ldr	r1, [r7, #4]
 80037c4:	4613      	mov	r3, r2
 80037c6:	011b      	lsls	r3, r3, #4
 80037c8:	1a9b      	subs	r3, r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	440b      	add	r3, r1
 80037ce:	334c      	adds	r3, #76	@ 0x4c
 80037d0:	781a      	ldrb	r2, [r3, #0]
 80037d2:	78fb      	ldrb	r3, [r7, #3]
 80037d4:	4619      	mov	r1, r3
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f005 ff16 	bl	8009608 <HAL_HCD_HC_NotifyURBChange_Callback>
 80037dc:	e002      	b.n	80037e4 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80037de:	bf00      	nop
 80037e0:	e000      	b.n	80037e4 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80037e2:	bf00      	nop
  }
}
 80037e4:	3718      	adds	r7, #24
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b08a      	sub	sp, #40	@ 0x28
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	f003 030f 	and.w	r3, r3, #15
 800380a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	0c5b      	lsrs	r3, r3, #17
 8003810:	f003 030f 	and.w	r3, r3, #15
 8003814:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	091b      	lsrs	r3, r3, #4
 800381a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800381e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	2b02      	cmp	r3, #2
 8003824:	d004      	beq.n	8003830 <HCD_RXQLVL_IRQHandler+0x46>
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	2b05      	cmp	r3, #5
 800382a:	f000 80b6 	beq.w	800399a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800382e:	e0b7      	b.n	80039a0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 80b3 	beq.w	800399e <HCD_RXQLVL_IRQHandler+0x1b4>
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	4613      	mov	r3, r2
 800383e:	011b      	lsls	r3, r3, #4
 8003840:	1a9b      	subs	r3, r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	440b      	add	r3, r1
 8003846:	332c      	adds	r3, #44	@ 0x2c
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 80a7 	beq.w	800399e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003850:	6879      	ldr	r1, [r7, #4]
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	4613      	mov	r3, r2
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	1a9b      	subs	r3, r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	3338      	adds	r3, #56	@ 0x38
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	18d1      	adds	r1, r2, r3
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	4613      	mov	r3, r2
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	1a9b      	subs	r3, r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4403      	add	r3, r0
 8003874:	3334      	adds	r3, #52	@ 0x34
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4299      	cmp	r1, r3
 800387a:	f200 8083 	bhi.w	8003984 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6818      	ldr	r0, [r3, #0]
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	4613      	mov	r3, r2
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	1a9b      	subs	r3, r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	440b      	add	r3, r1
 8003890:	332c      	adds	r3, #44	@ 0x2c
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	b292      	uxth	r2, r2
 8003898:	4619      	mov	r1, r3
 800389a:	f002 fd41 	bl	8006320 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	4613      	mov	r3, r2
 80038a4:	011b      	lsls	r3, r3, #4
 80038a6:	1a9b      	subs	r3, r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	440b      	add	r3, r1
 80038ac:	332c      	adds	r3, #44	@ 0x2c
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	18d1      	adds	r1, r2, r3
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	4613      	mov	r3, r2
 80038ba:	011b      	lsls	r3, r3, #4
 80038bc:	1a9b      	subs	r3, r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4403      	add	r3, r0
 80038c2:	332c      	adds	r3, #44	@ 0x2c
 80038c4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	4613      	mov	r3, r2
 80038cc:	011b      	lsls	r3, r3, #4
 80038ce:	1a9b      	subs	r3, r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	440b      	add	r3, r1
 80038d4:	3338      	adds	r3, #56	@ 0x38
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	18d1      	adds	r1, r2, r3
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4613      	mov	r3, r2
 80038e2:	011b      	lsls	r3, r3, #4
 80038e4:	1a9b      	subs	r3, r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4403      	add	r3, r0
 80038ea:	3338      	adds	r3, #56	@ 0x38
 80038ec:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	015a      	lsls	r2, r3, #5
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	4413      	add	r3, r2
 80038f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	0cdb      	lsrs	r3, r3, #19
 80038fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003902:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	4613      	mov	r3, r2
 800390a:	011b      	lsls	r3, r3, #4
 800390c:	1a9b      	subs	r3, r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	3328      	adds	r3, #40	@ 0x28
 8003914:	881b      	ldrh	r3, [r3, #0]
 8003916:	461a      	mov	r2, r3
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	4293      	cmp	r3, r2
 800391c:	d13f      	bne.n	800399e <HCD_RXQLVL_IRQHandler+0x1b4>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d03c      	beq.n	800399e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	015a      	lsls	r2, r3, #5
 8003928:	6a3b      	ldr	r3, [r7, #32]
 800392a:	4413      	add	r3, r2
 800392c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800393a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003942:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	015a      	lsls	r2, r3, #5
 8003948:	6a3b      	ldr	r3, [r7, #32]
 800394a:	4413      	add	r3, r2
 800394c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003950:	461a      	mov	r2, r3
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	4613      	mov	r3, r2
 800395c:	011b      	lsls	r3, r3, #4
 800395e:	1a9b      	subs	r3, r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	440b      	add	r3, r1
 8003964:	333c      	adds	r3, #60	@ 0x3c
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	f083 0301 	eor.w	r3, r3, #1
 800396c:	b2d8      	uxtb	r0, r3
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	4613      	mov	r3, r2
 8003974:	011b      	lsls	r3, r3, #4
 8003976:	1a9b      	subs	r3, r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	440b      	add	r3, r1
 800397c:	333c      	adds	r3, #60	@ 0x3c
 800397e:	4602      	mov	r2, r0
 8003980:	701a      	strb	r2, [r3, #0]
      break;
 8003982:	e00c      	b.n	800399e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	4613      	mov	r3, r2
 800398a:	011b      	lsls	r3, r3, #4
 800398c:	1a9b      	subs	r3, r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	440b      	add	r3, r1
 8003992:	334c      	adds	r3, #76	@ 0x4c
 8003994:	2204      	movs	r2, #4
 8003996:	701a      	strb	r2, [r3, #0]
      break;
 8003998:	e001      	b.n	800399e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800399a:	bf00      	nop
 800399c:	e000      	b.n	80039a0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800399e:	bf00      	nop
  }
}
 80039a0:	bf00      	nop
 80039a2:	3728      	adds	r7, #40	@ 0x28
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80039d4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d10b      	bne.n	80039f8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d102      	bne.n	80039f0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f005 fdf0 	bl	80095d0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	f043 0302 	orr.w	r3, r3, #2
 80039f6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f003 0308 	and.w	r3, r3, #8
 80039fe:	2b08      	cmp	r3, #8
 8003a00:	d132      	bne.n	8003a68 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	f043 0308 	orr.w	r3, r3, #8
 8003a08:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b04      	cmp	r3, #4
 8003a12:	d126      	bne.n	8003a62 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	7a5b      	ldrb	r3, [r3, #9]
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d113      	bne.n	8003a44 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003a22:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a26:	d106      	bne.n	8003a36 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2102      	movs	r1, #2
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f002 fe0c 	bl	800664c <USB_InitFSLSPClkSel>
 8003a34:	e011      	b.n	8003a5a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f002 fe05 	bl	800664c <USB_InitFSLSPClkSel>
 8003a42:	e00a      	b.n	8003a5a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	79db      	ldrb	r3, [r3, #7]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d106      	bne.n	8003a5a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003a52:	461a      	mov	r2, r3
 8003a54:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003a58:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f005 fde2 	bl	8009624 <HAL_HCD_PortEnabled_Callback>
 8003a60:	e002      	b.n	8003a68 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f005 fdec 	bl	8009640 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f003 0320 	and.w	r3, r3, #32
 8003a6e:	2b20      	cmp	r3, #32
 8003a70:	d103      	bne.n	8003a7a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	f043 0320 	orr.w	r3, r3, #32
 8003a78:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003a80:	461a      	mov	r2, r3
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	6013      	str	r3, [r2, #0]
}
 8003a86:	bf00      	nop
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e12b      	b.n	8003cfa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d106      	bne.n	8003abc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7fc fe90 	bl	80007dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2224      	movs	r2, #36	@ 0x24
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0201 	bic.w	r2, r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ae2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003af2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003af4:	f001 fa20 	bl	8004f38 <HAL_RCC_GetPCLK1Freq>
 8003af8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	4a81      	ldr	r2, [pc, #516]	@ (8003d04 <HAL_I2C_Init+0x274>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d807      	bhi.n	8003b14 <HAL_I2C_Init+0x84>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	4a80      	ldr	r2, [pc, #512]	@ (8003d08 <HAL_I2C_Init+0x278>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	bf94      	ite	ls
 8003b0c:	2301      	movls	r3, #1
 8003b0e:	2300      	movhi	r3, #0
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	e006      	b.n	8003b22 <HAL_I2C_Init+0x92>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4a7d      	ldr	r2, [pc, #500]	@ (8003d0c <HAL_I2C_Init+0x27c>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	bf94      	ite	ls
 8003b1c:	2301      	movls	r3, #1
 8003b1e:	2300      	movhi	r3, #0
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e0e7      	b.n	8003cfa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4a78      	ldr	r2, [pc, #480]	@ (8003d10 <HAL_I2C_Init+0x280>)
 8003b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b32:	0c9b      	lsrs	r3, r3, #18
 8003b34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	4a6a      	ldr	r2, [pc, #424]	@ (8003d04 <HAL_I2C_Init+0x274>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d802      	bhi.n	8003b64 <HAL_I2C_Init+0xd4>
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	3301      	adds	r3, #1
 8003b62:	e009      	b.n	8003b78 <HAL_I2C_Init+0xe8>
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003b6a:	fb02 f303 	mul.w	r3, r2, r3
 8003b6e:	4a69      	ldr	r2, [pc, #420]	@ (8003d14 <HAL_I2C_Init+0x284>)
 8003b70:	fba2 2303 	umull	r2, r3, r2, r3
 8003b74:	099b      	lsrs	r3, r3, #6
 8003b76:	3301      	adds	r3, #1
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	6812      	ldr	r2, [r2, #0]
 8003b7c:	430b      	orrs	r3, r1
 8003b7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003b8a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	495c      	ldr	r1, [pc, #368]	@ (8003d04 <HAL_I2C_Init+0x274>)
 8003b94:	428b      	cmp	r3, r1
 8003b96:	d819      	bhi.n	8003bcc <HAL_I2C_Init+0x13c>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	1e59      	subs	r1, r3, #1
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ba6:	1c59      	adds	r1, r3, #1
 8003ba8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003bac:	400b      	ands	r3, r1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <HAL_I2C_Init+0x138>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	1e59      	subs	r1, r3, #1
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc6:	e051      	b.n	8003c6c <HAL_I2C_Init+0x1dc>
 8003bc8:	2304      	movs	r3, #4
 8003bca:	e04f      	b.n	8003c6c <HAL_I2C_Init+0x1dc>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d111      	bne.n	8003bf8 <HAL_I2C_Init+0x168>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	1e58      	subs	r0, r3, #1
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6859      	ldr	r1, [r3, #4]
 8003bdc:	460b      	mov	r3, r1
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	440b      	add	r3, r1
 8003be2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003be6:	3301      	adds	r3, #1
 8003be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	bf0c      	ite	eq
 8003bf0:	2301      	moveq	r3, #1
 8003bf2:	2300      	movne	r3, #0
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	e012      	b.n	8003c1e <HAL_I2C_Init+0x18e>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	1e58      	subs	r0, r3, #1
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6859      	ldr	r1, [r3, #4]
 8003c00:	460b      	mov	r3, r1
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	0099      	lsls	r1, r3, #2
 8003c08:	440b      	add	r3, r1
 8003c0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c0e:	3301      	adds	r3, #1
 8003c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	bf0c      	ite	eq
 8003c18:	2301      	moveq	r3, #1
 8003c1a:	2300      	movne	r3, #0
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <HAL_I2C_Init+0x196>
 8003c22:	2301      	movs	r3, #1
 8003c24:	e022      	b.n	8003c6c <HAL_I2C_Init+0x1dc>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10e      	bne.n	8003c4c <HAL_I2C_Init+0x1bc>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	1e58      	subs	r0, r3, #1
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6859      	ldr	r1, [r3, #4]
 8003c36:	460b      	mov	r3, r1
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	440b      	add	r3, r1
 8003c3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c40:	3301      	adds	r3, #1
 8003c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c4a:	e00f      	b.n	8003c6c <HAL_I2C_Init+0x1dc>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	1e58      	subs	r0, r3, #1
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6859      	ldr	r1, [r3, #4]
 8003c54:	460b      	mov	r3, r1
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	0099      	lsls	r1, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c62:	3301      	adds	r3, #1
 8003c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c6c:	6879      	ldr	r1, [r7, #4]
 8003c6e:	6809      	ldr	r1, [r1, #0]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	69da      	ldr	r2, [r3, #28]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003c9a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6911      	ldr	r1, [r2, #16]
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	68d2      	ldr	r2, [r2, #12]
 8003ca6:	4311      	orrs	r1, r2
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6812      	ldr	r2, [r2, #0]
 8003cac:	430b      	orrs	r3, r1
 8003cae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	695a      	ldr	r2, [r3, #20]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0201 	orr.w	r2, r2, #1
 8003cda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	000186a0 	.word	0x000186a0
 8003d08:	001e847f 	.word	0x001e847f
 8003d0c:	003d08ff 	.word	0x003d08ff
 8003d10:	431bde83 	.word	0x431bde83
 8003d14:	10624dd3 	.word	0x10624dd3

08003d18 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b088      	sub	sp, #32
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e128      	b.n	8003f7c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d109      	bne.n	8003d4a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a90      	ldr	r2, [pc, #576]	@ (8003f84 <HAL_I2S_Init+0x26c>)
 8003d42:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f7fc fdc1 	bl	80008cc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6812      	ldr	r2, [r2, #0]
 8003d5c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003d60:	f023 030f 	bic.w	r3, r3, #15
 8003d64:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d060      	beq.n	8003e38 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d102      	bne.n	8003d84 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003d7e:	2310      	movs	r3, #16
 8003d80:	617b      	str	r3, [r7, #20]
 8003d82:	e001      	b.n	8003d88 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003d84:	2320      	movs	r3, #32
 8003d86:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	2b20      	cmp	r3, #32
 8003d8e:	d802      	bhi.n	8003d96 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003d96:	2001      	movs	r0, #1
 8003d98:	f001 f9d8 	bl	800514c <HAL_RCCEx_GetPeriphCLKFreq>
 8003d9c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003da6:	d125      	bne.n	8003df4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d010      	beq.n	8003dd2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dba:	4613      	mov	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4413      	add	r3, r2
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dcc:	3305      	adds	r3, #5
 8003dce:	613b      	str	r3, [r7, #16]
 8003dd0:	e01f      	b.n	8003e12 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ddc:	4613      	mov	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	461a      	mov	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dee:	3305      	adds	r3, #5
 8003df0:	613b      	str	r3, [r7, #16]
 8003df2:	e00e      	b.n	8003e12 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	461a      	mov	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0e:	3305      	adds	r3, #5
 8003e10:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	4a5c      	ldr	r2, [pc, #368]	@ (8003f88 <HAL_I2S_Init+0x270>)
 8003e16:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1a:	08db      	lsrs	r3, r3, #3
 8003e1c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	085b      	lsrs	r3, r3, #1
 8003e2e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	021b      	lsls	r3, r3, #8
 8003e34:	61bb      	str	r3, [r7, #24]
 8003e36:	e003      	b.n	8003e40 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003e38:	2302      	movs	r3, #2
 8003e3a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d902      	bls.n	8003e4c <HAL_I2S_Init+0x134>
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	2bff      	cmp	r3, #255	@ 0xff
 8003e4a:	d907      	bls.n	8003e5c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e50:	f043 0210 	orr.w	r2, r3, #16
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e08f      	b.n	8003f7c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	691a      	ldr	r2, [r3, #16]
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	ea42 0103 	orr.w	r1, r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	69fa      	ldr	r2, [r7, #28]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003e7a:	f023 030f 	bic.w	r3, r3, #15
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	6851      	ldr	r1, [r2, #4]
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6892      	ldr	r2, [r2, #8]
 8003e86:	4311      	orrs	r1, r2
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	68d2      	ldr	r2, [r2, #12]
 8003e8c:	4311      	orrs	r1, r2
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6992      	ldr	r2, [r2, #24]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	431a      	orrs	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e9e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d161      	bne.n	8003f6c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a38      	ldr	r2, [pc, #224]	@ (8003f8c <HAL_I2S_Init+0x274>)
 8003eac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a37      	ldr	r2, [pc, #220]	@ (8003f90 <HAL_I2S_Init+0x278>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d101      	bne.n	8003ebc <HAL_I2S_Init+0x1a4>
 8003eb8:	4b36      	ldr	r3, [pc, #216]	@ (8003f94 <HAL_I2S_Init+0x27c>)
 8003eba:	e001      	b.n	8003ec0 <HAL_I2S_Init+0x1a8>
 8003ebc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	6812      	ldr	r2, [r2, #0]
 8003ec6:	4932      	ldr	r1, [pc, #200]	@ (8003f90 <HAL_I2S_Init+0x278>)
 8003ec8:	428a      	cmp	r2, r1
 8003eca:	d101      	bne.n	8003ed0 <HAL_I2S_Init+0x1b8>
 8003ecc:	4a31      	ldr	r2, [pc, #196]	@ (8003f94 <HAL_I2S_Init+0x27c>)
 8003ece:	e001      	b.n	8003ed4 <HAL_I2S_Init+0x1bc>
 8003ed0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003ed4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003ed8:	f023 030f 	bic.w	r3, r3, #15
 8003edc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a2b      	ldr	r2, [pc, #172]	@ (8003f90 <HAL_I2S_Init+0x278>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d101      	bne.n	8003eec <HAL_I2S_Init+0x1d4>
 8003ee8:	4b2a      	ldr	r3, [pc, #168]	@ (8003f94 <HAL_I2S_Init+0x27c>)
 8003eea:	e001      	b.n	8003ef0 <HAL_I2S_Init+0x1d8>
 8003eec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ef0:	2202      	movs	r2, #2
 8003ef2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a25      	ldr	r2, [pc, #148]	@ (8003f90 <HAL_I2S_Init+0x278>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d101      	bne.n	8003f02 <HAL_I2S_Init+0x1ea>
 8003efe:	4b25      	ldr	r3, [pc, #148]	@ (8003f94 <HAL_I2S_Init+0x27c>)
 8003f00:	e001      	b.n	8003f06 <HAL_I2S_Init+0x1ee>
 8003f02:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f12:	d003      	beq.n	8003f1c <HAL_I2S_Init+0x204>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d103      	bne.n	8003f24 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003f1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f20:	613b      	str	r3, [r7, #16]
 8003f22:	e001      	b.n	8003f28 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003f24:	2300      	movs	r3, #0
 8003f26:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003f32:	4313      	orrs	r3, r2
 8003f34:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003f46:	4313      	orrs	r3, r2
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	897b      	ldrh	r3, [r7, #10]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003f54:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a0d      	ldr	r2, [pc, #52]	@ (8003f90 <HAL_I2S_Init+0x278>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d101      	bne.n	8003f64 <HAL_I2S_Init+0x24c>
 8003f60:	4b0c      	ldr	r3, [pc, #48]	@ (8003f94 <HAL_I2S_Init+0x27c>)
 8003f62:	e001      	b.n	8003f68 <HAL_I2S_Init+0x250>
 8003f64:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f68:	897a      	ldrh	r2, [r7, #10]
 8003f6a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3720      	adds	r7, #32
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	0800408f 	.word	0x0800408f
 8003f88:	cccccccd 	.word	0xcccccccd
 8003f8c:	080041a5 	.word	0x080041a5
 8003f90:	40003800 	.word	0x40003800
 8003f94:	40003400 	.word	0x40003400

08003f98 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe0:	881a      	ldrh	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fec:	1c9a      	adds	r2, r3, #2
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004004:	b29b      	uxth	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10e      	bne.n	8004028 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004018:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7ff ffb8 	bl	8003f98 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004028:	bf00      	nop
 800402a:	3708      	adds	r7, #8
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68da      	ldr	r2, [r3, #12]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004042:	b292      	uxth	r2, r2
 8004044:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800404a:	1c9a      	adds	r2, r3, #2
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004054:	b29b      	uxth	r3, r3
 8004056:	3b01      	subs	r3, #1
 8004058:	b29a      	uxth	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004062:	b29b      	uxth	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10e      	bne.n	8004086 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004076:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f7ff ff93 	bl	8003fac <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004086:	bf00      	nop
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b086      	sub	sp, #24
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d13a      	bne.n	8004120 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d109      	bne.n	80040c8 <I2S_IRQHandler+0x3a>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040be:	2b40      	cmp	r3, #64	@ 0x40
 80040c0:	d102      	bne.n	80040c8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7ff ffb4 	bl	8004030 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ce:	2b40      	cmp	r3, #64	@ 0x40
 80040d0:	d126      	bne.n	8004120 <I2S_IRQHandler+0x92>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f003 0320 	and.w	r3, r3, #32
 80040dc:	2b20      	cmp	r3, #32
 80040de:	d11f      	bne.n	8004120 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80040ee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80040f0:	2300      	movs	r3, #0
 80040f2:	613b      	str	r3, [r7, #16]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	613b      	str	r3, [r7, #16]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	613b      	str	r3, [r7, #16]
 8004104:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004112:	f043 0202 	orr.w	r2, r3, #2
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7ff ff50 	bl	8003fc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2b03      	cmp	r3, #3
 800412a:	d136      	bne.n	800419a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b02      	cmp	r3, #2
 8004134:	d109      	bne.n	800414a <I2S_IRQHandler+0xbc>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004140:	2b80      	cmp	r3, #128	@ 0x80
 8004142:	d102      	bne.n	800414a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f7ff ff45 	bl	8003fd4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f003 0308 	and.w	r3, r3, #8
 8004150:	2b08      	cmp	r3, #8
 8004152:	d122      	bne.n	800419a <I2S_IRQHandler+0x10c>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f003 0320 	and.w	r3, r3, #32
 800415e:	2b20      	cmp	r3, #32
 8004160:	d11b      	bne.n	800419a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004170:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004172:	2300      	movs	r3, #0
 8004174:	60fb      	str	r3, [r7, #12]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800418c:	f043 0204 	orr.w	r2, r3, #4
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f7ff ff13 	bl	8003fc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800419a:	bf00      	nop
 800419c:	3718      	adds	r7, #24
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
	...

080041a4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b088      	sub	sp, #32
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a92      	ldr	r2, [pc, #584]	@ (8004404 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d101      	bne.n	80041c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80041be:	4b92      	ldr	r3, [pc, #584]	@ (8004408 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041c0:	e001      	b.n	80041c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80041c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a8b      	ldr	r2, [pc, #556]	@ (8004404 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d101      	bne.n	80041e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80041dc:	4b8a      	ldr	r3, [pc, #552]	@ (8004408 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041de:	e001      	b.n	80041e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80041e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041f0:	d004      	beq.n	80041fc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f040 8099 	bne.w	800432e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b02      	cmp	r3, #2
 8004204:	d107      	bne.n	8004216 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 f925 	bl	8004460 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b01      	cmp	r3, #1
 800421e:	d107      	bne.n	8004230 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004226:	2b00      	cmp	r3, #0
 8004228:	d002      	beq.n	8004230 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f9c8 	bl	80045c0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004236:	2b40      	cmp	r3, #64	@ 0x40
 8004238:	d13a      	bne.n	80042b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	f003 0320 	and.w	r3, r3, #32
 8004240:	2b00      	cmp	r3, #0
 8004242:	d035      	beq.n	80042b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a6e      	ldr	r2, [pc, #440]	@ (8004404 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d101      	bne.n	8004252 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800424e:	4b6e      	ldr	r3, [pc, #440]	@ (8004408 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004250:	e001      	b.n	8004256 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004252:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4969      	ldr	r1, [pc, #420]	@ (8004404 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800425e:	428b      	cmp	r3, r1
 8004260:	d101      	bne.n	8004266 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004262:	4b69      	ldr	r3, [pc, #420]	@ (8004408 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004264:	e001      	b.n	800426a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004266:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800426a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800426e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800427e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004280:	2300      	movs	r3, #0
 8004282:	60fb      	str	r3, [r7, #12]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	60fb      	str	r3, [r7, #12]
 8004294:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042a2:	f043 0202 	orr.w	r2, r3, #2
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7ff fe88 	bl	8003fc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	f003 0308 	and.w	r3, r3, #8
 80042b6:	2b08      	cmp	r3, #8
 80042b8:	f040 80c3 	bne.w	8004442 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	f003 0320 	and.w	r3, r3, #32
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 80bd 	beq.w	8004442 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80042d6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a49      	ldr	r2, [pc, #292]	@ (8004404 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d101      	bne.n	80042e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80042e2:	4b49      	ldr	r3, [pc, #292]	@ (8004408 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042e4:	e001      	b.n	80042ea <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80042e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4944      	ldr	r1, [pc, #272]	@ (8004404 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042f2:	428b      	cmp	r3, r1
 80042f4:	d101      	bne.n	80042fa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80042f6:	4b44      	ldr	r3, [pc, #272]	@ (8004408 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042f8:	e001      	b.n	80042fe <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80042fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042fe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004302:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004304:	2300      	movs	r3, #0
 8004306:	60bb      	str	r3, [r7, #8]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	60bb      	str	r3, [r7, #8]
 8004310:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800431e:	f043 0204 	orr.w	r2, r3, #4
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7ff fe4a 	bl	8003fc0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800432c:	e089      	b.n	8004442 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b02      	cmp	r3, #2
 8004336:	d107      	bne.n	8004348 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800433e:	2b00      	cmp	r3, #0
 8004340:	d002      	beq.n	8004348 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f8be 	bl	80044c4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b01      	cmp	r3, #1
 8004350:	d107      	bne.n	8004362 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004358:	2b00      	cmp	r3, #0
 800435a:	d002      	beq.n	8004362 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f8fd 	bl	800455c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004368:	2b40      	cmp	r3, #64	@ 0x40
 800436a:	d12f      	bne.n	80043cc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	f003 0320 	and.w	r3, r3, #32
 8004372:	2b00      	cmp	r3, #0
 8004374:	d02a      	beq.n	80043cc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004384:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a1e      	ldr	r2, [pc, #120]	@ (8004404 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d101      	bne.n	8004394 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004390:	4b1d      	ldr	r3, [pc, #116]	@ (8004408 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004392:	e001      	b.n	8004398 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004394:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004398:	685a      	ldr	r2, [r3, #4]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4919      	ldr	r1, [pc, #100]	@ (8004404 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043a0:	428b      	cmp	r3, r1
 80043a2:	d101      	bne.n	80043a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80043a4:	4b18      	ldr	r3, [pc, #96]	@ (8004408 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043a6:	e001      	b.n	80043ac <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80043a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043ac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80043b0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043be:	f043 0202 	orr.w	r2, r3, #2
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7ff fdfa 	bl	8003fc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b08      	cmp	r3, #8
 80043d4:	d136      	bne.n	8004444 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	f003 0320 	and.w	r3, r3, #32
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d031      	beq.n	8004444 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a07      	ldr	r2, [pc, #28]	@ (8004404 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d101      	bne.n	80043ee <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80043ea:	4b07      	ldr	r3, [pc, #28]	@ (8004408 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043ec:	e001      	b.n	80043f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80043ee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4902      	ldr	r1, [pc, #8]	@ (8004404 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043fa:	428b      	cmp	r3, r1
 80043fc:	d106      	bne.n	800440c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80043fe:	4b02      	ldr	r3, [pc, #8]	@ (8004408 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004400:	e006      	b.n	8004410 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004402:	bf00      	nop
 8004404:	40003800 	.word	0x40003800
 8004408:	40003400 	.word	0x40003400
 800440c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004410:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004414:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004424:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004432:	f043 0204 	orr.w	r2, r3, #4
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7ff fdc0 	bl	8003fc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004440:	e000      	b.n	8004444 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004442:	bf00      	nop
}
 8004444:	bf00      	nop
 8004446:	3720      	adds	r7, #32
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446c:	1c99      	adds	r1, r3, #2
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6251      	str	r1, [r2, #36]	@ 0x24
 8004472:	881a      	ldrh	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800447e:	b29b      	uxth	r3, r3
 8004480:	3b01      	subs	r3, #1
 8004482:	b29a      	uxth	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800448c:	b29b      	uxth	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d113      	bne.n	80044ba <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80044a0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d106      	bne.n	80044ba <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f7ff ffc9 	bl	800444c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044ba:	bf00      	nop
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
	...

080044c4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d0:	1c99      	adds	r1, r3, #2
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	6251      	str	r1, [r2, #36]	@ 0x24
 80044d6:	8819      	ldrh	r1, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a1d      	ldr	r2, [pc, #116]	@ (8004554 <I2SEx_TxISR_I2SExt+0x90>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d101      	bne.n	80044e6 <I2SEx_TxISR_I2SExt+0x22>
 80044e2:	4b1d      	ldr	r3, [pc, #116]	@ (8004558 <I2SEx_TxISR_I2SExt+0x94>)
 80044e4:	e001      	b.n	80044ea <I2SEx_TxISR_I2SExt+0x26>
 80044e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044ea:	460a      	mov	r2, r1
 80044ec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004500:	b29b      	uxth	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d121      	bne.n	800454a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a12      	ldr	r2, [pc, #72]	@ (8004554 <I2SEx_TxISR_I2SExt+0x90>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d101      	bne.n	8004514 <I2SEx_TxISR_I2SExt+0x50>
 8004510:	4b11      	ldr	r3, [pc, #68]	@ (8004558 <I2SEx_TxISR_I2SExt+0x94>)
 8004512:	e001      	b.n	8004518 <I2SEx_TxISR_I2SExt+0x54>
 8004514:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	490d      	ldr	r1, [pc, #52]	@ (8004554 <I2SEx_TxISR_I2SExt+0x90>)
 8004520:	428b      	cmp	r3, r1
 8004522:	d101      	bne.n	8004528 <I2SEx_TxISR_I2SExt+0x64>
 8004524:	4b0c      	ldr	r3, [pc, #48]	@ (8004558 <I2SEx_TxISR_I2SExt+0x94>)
 8004526:	e001      	b.n	800452c <I2SEx_TxISR_I2SExt+0x68>
 8004528:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800452c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004530:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004536:	b29b      	uxth	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	d106      	bne.n	800454a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f7ff ff81 	bl	800444c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800454a:	bf00      	nop
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	40003800 	.word	0x40003800
 8004558:	40003400 	.word	0x40003400

0800455c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68d8      	ldr	r0, [r3, #12]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800456e:	1c99      	adds	r1, r3, #2
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004574:	b282      	uxth	r2, r0
 8004576:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800457c:	b29b      	uxth	r3, r3
 800457e:	3b01      	subs	r3, #1
 8004580:	b29a      	uxth	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800458a:	b29b      	uxth	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	d113      	bne.n	80045b8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800459e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d106      	bne.n	80045b8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7ff ff4a 	bl	800444c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045b8:	bf00      	nop
 80045ba:	3708      	adds	r7, #8
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a20      	ldr	r2, [pc, #128]	@ (8004650 <I2SEx_RxISR_I2SExt+0x90>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d101      	bne.n	80045d6 <I2SEx_RxISR_I2SExt+0x16>
 80045d2:	4b20      	ldr	r3, [pc, #128]	@ (8004654 <I2SEx_RxISR_I2SExt+0x94>)
 80045d4:	e001      	b.n	80045da <I2SEx_RxISR_I2SExt+0x1a>
 80045d6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045da:	68d8      	ldr	r0, [r3, #12]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e0:	1c99      	adds	r1, r3, #2
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80045e6:	b282      	uxth	r2, r0
 80045e8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	3b01      	subs	r3, #1
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d121      	bne.n	8004646 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a12      	ldr	r2, [pc, #72]	@ (8004650 <I2SEx_RxISR_I2SExt+0x90>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d101      	bne.n	8004610 <I2SEx_RxISR_I2SExt+0x50>
 800460c:	4b11      	ldr	r3, [pc, #68]	@ (8004654 <I2SEx_RxISR_I2SExt+0x94>)
 800460e:	e001      	b.n	8004614 <I2SEx_RxISR_I2SExt+0x54>
 8004610:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	490d      	ldr	r1, [pc, #52]	@ (8004650 <I2SEx_RxISR_I2SExt+0x90>)
 800461c:	428b      	cmp	r3, r1
 800461e:	d101      	bne.n	8004624 <I2SEx_RxISR_I2SExt+0x64>
 8004620:	4b0c      	ldr	r3, [pc, #48]	@ (8004654 <I2SEx_RxISR_I2SExt+0x94>)
 8004622:	e001      	b.n	8004628 <I2SEx_RxISR_I2SExt+0x68>
 8004624:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004628:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800462c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004632:	b29b      	uxth	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	d106      	bne.n	8004646 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f7ff ff03 	bl	800444c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004646:	bf00      	nop
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	40003800 	.word	0x40003800
 8004654:	40003400 	.word	0x40003400

08004658 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e267      	b.n	8004b3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d075      	beq.n	8004762 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004676:	4b88      	ldr	r3, [pc, #544]	@ (8004898 <HAL_RCC_OscConfig+0x240>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 030c 	and.w	r3, r3, #12
 800467e:	2b04      	cmp	r3, #4
 8004680:	d00c      	beq.n	800469c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004682:	4b85      	ldr	r3, [pc, #532]	@ (8004898 <HAL_RCC_OscConfig+0x240>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800468a:	2b08      	cmp	r3, #8
 800468c:	d112      	bne.n	80046b4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800468e:	4b82      	ldr	r3, [pc, #520]	@ (8004898 <HAL_RCC_OscConfig+0x240>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004696:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800469a:	d10b      	bne.n	80046b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800469c:	4b7e      	ldr	r3, [pc, #504]	@ (8004898 <HAL_RCC_OscConfig+0x240>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d05b      	beq.n	8004760 <HAL_RCC_OscConfig+0x108>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d157      	bne.n	8004760 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e242      	b.n	8004b3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046bc:	d106      	bne.n	80046cc <HAL_RCC_OscConfig+0x74>
 80046be:	4b76      	ldr	r3, [pc, #472]	@ (8004898 <HAL_RCC_OscConfig+0x240>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a75      	ldr	r2, [pc, #468]	@ (8004898 <HAL_RCC_OscConfig+0x240>)
 80046c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	e01d      	b.n	8004708 <HAL_RCC_OscConfig+0xb0>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046d4:	d10c      	bne.n	80046f0 <HAL_RCC_OscConfig+0x98>
 80046d6:	4b70      	ldr	r3, [pc, #448]	@ (8004898 <HAL_RCC_OscConfig+0x240>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a6f      	ldr	r2, [pc, #444]	@ (8004898 <HAL_RCC_OscConfig+0x240>)
 80046dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046e0:	6013      	str	r3, [r2, #0]
 80046e2:	4b6d      	ldr	r3, [pc, #436]	@ (8004898 <HAL_RCC_OscConfig+0x240>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a6c      	ldr	r2, [pc, #432]	@ (8004898 <HAL_RCC_OscConfig+0x240>)
 80046e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046ec:	6013      	str	r3, [r2, #0]
 80046ee:	e00b      	b.n	8004708 <HAL_RCC_OscConfig+0xb0>
 80046f0:	4b69      	ldr	r3, [pc, #420]	@ (8004898 <HAL_RCC_OscConfig+0x240>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a68      	ldr	r2, [pc, #416]	@ (8004898 <HAL_RCC_OscConfig+0x240>)
 80046f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046fa:	6013      	str	r3, [r2, #0]
 80046fc:	4b66      	ldr	r3, [pc, #408]	@ (8004898 <HAL_RCC_OscConfig+0x240>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a65      	ldr	r2, [pc, #404]	@ (8004898 <HAL_RCC_OscConfig+0x240>)
 8004702:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004706:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d013      	beq.n	8004738 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004710:	f7fc fd60 	bl	80011d4 <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004718:	f7fc fd5c 	bl	80011d4 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b64      	cmp	r3, #100	@ 0x64
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e207      	b.n	8004b3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800472a:	4b5b      	ldr	r3, [pc, #364]	@ (8004898 <HAL_RCC_OscConfig+0x240>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0f0      	beq.n	8004718 <HAL_RCC_OscConfig+0xc0>
 8004736:	e014      	b.n	8004762 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004738:	f7fc fd4c 	bl	80011d4 <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004740:	f7fc fd48 	bl	80011d4 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b64      	cmp	r3, #100	@ 0x64
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e1f3      	b.n	8004b3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004752:	4b51      	ldr	r3, [pc, #324]	@ (8004898 <HAL_RCC_OscConfig+0x240>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1f0      	bne.n	8004740 <HAL_RCC_OscConfig+0xe8>
 800475e:	e000      	b.n	8004762 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d063      	beq.n	8004836 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800476e:	4b4a      	ldr	r3, [pc, #296]	@ (8004898 <HAL_RCC_OscConfig+0x240>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f003 030c 	and.w	r3, r3, #12
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00b      	beq.n	8004792 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800477a:	4b47      	ldr	r3, [pc, #284]	@ (8004898 <HAL_RCC_OscConfig+0x240>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004782:	2b08      	cmp	r3, #8
 8004784:	d11c      	bne.n	80047c0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004786:	4b44      	ldr	r3, [pc, #272]	@ (8004898 <HAL_RCC_OscConfig+0x240>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d116      	bne.n	80047c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004792:	4b41      	ldr	r3, [pc, #260]	@ (8004898 <HAL_RCC_OscConfig+0x240>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d005      	beq.n	80047aa <HAL_RCC_OscConfig+0x152>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d001      	beq.n	80047aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e1c7      	b.n	8004b3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047aa:	4b3b      	ldr	r3, [pc, #236]	@ (8004898 <HAL_RCC_OscConfig+0x240>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	4937      	ldr	r1, [pc, #220]	@ (8004898 <HAL_RCC_OscConfig+0x240>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047be:	e03a      	b.n	8004836 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d020      	beq.n	800480a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047c8:	4b34      	ldr	r3, [pc, #208]	@ (800489c <HAL_RCC_OscConfig+0x244>)
 80047ca:	2201      	movs	r2, #1
 80047cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ce:	f7fc fd01 	bl	80011d4 <HAL_GetTick>
 80047d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047d4:	e008      	b.n	80047e8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047d6:	f7fc fcfd 	bl	80011d4 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e1a8      	b.n	8004b3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047e8:	4b2b      	ldr	r3, [pc, #172]	@ (8004898 <HAL_RCC_OscConfig+0x240>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d0f0      	beq.n	80047d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047f4:	4b28      	ldr	r3, [pc, #160]	@ (8004898 <HAL_RCC_OscConfig+0x240>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	00db      	lsls	r3, r3, #3
 8004802:	4925      	ldr	r1, [pc, #148]	@ (8004898 <HAL_RCC_OscConfig+0x240>)
 8004804:	4313      	orrs	r3, r2
 8004806:	600b      	str	r3, [r1, #0]
 8004808:	e015      	b.n	8004836 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800480a:	4b24      	ldr	r3, [pc, #144]	@ (800489c <HAL_RCC_OscConfig+0x244>)
 800480c:	2200      	movs	r2, #0
 800480e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004810:	f7fc fce0 	bl	80011d4 <HAL_GetTick>
 8004814:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004816:	e008      	b.n	800482a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004818:	f7fc fcdc 	bl	80011d4 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e187      	b.n	8004b3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800482a:	4b1b      	ldr	r3, [pc, #108]	@ (8004898 <HAL_RCC_OscConfig+0x240>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1f0      	bne.n	8004818 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0308 	and.w	r3, r3, #8
 800483e:	2b00      	cmp	r3, #0
 8004840:	d036      	beq.n	80048b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d016      	beq.n	8004878 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800484a:	4b15      	ldr	r3, [pc, #84]	@ (80048a0 <HAL_RCC_OscConfig+0x248>)
 800484c:	2201      	movs	r2, #1
 800484e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004850:	f7fc fcc0 	bl	80011d4 <HAL_GetTick>
 8004854:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004856:	e008      	b.n	800486a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004858:	f7fc fcbc 	bl	80011d4 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b02      	cmp	r3, #2
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e167      	b.n	8004b3a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800486a:	4b0b      	ldr	r3, [pc, #44]	@ (8004898 <HAL_RCC_OscConfig+0x240>)
 800486c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d0f0      	beq.n	8004858 <HAL_RCC_OscConfig+0x200>
 8004876:	e01b      	b.n	80048b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004878:	4b09      	ldr	r3, [pc, #36]	@ (80048a0 <HAL_RCC_OscConfig+0x248>)
 800487a:	2200      	movs	r2, #0
 800487c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800487e:	f7fc fca9 	bl	80011d4 <HAL_GetTick>
 8004882:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004884:	e00e      	b.n	80048a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004886:	f7fc fca5 	bl	80011d4 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	2b02      	cmp	r3, #2
 8004892:	d907      	bls.n	80048a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e150      	b.n	8004b3a <HAL_RCC_OscConfig+0x4e2>
 8004898:	40023800 	.word	0x40023800
 800489c:	42470000 	.word	0x42470000
 80048a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048a4:	4b88      	ldr	r3, [pc, #544]	@ (8004ac8 <HAL_RCC_OscConfig+0x470>)
 80048a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1ea      	bne.n	8004886 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0304 	and.w	r3, r3, #4
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f000 8097 	beq.w	80049ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048be:	2300      	movs	r3, #0
 80048c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048c2:	4b81      	ldr	r3, [pc, #516]	@ (8004ac8 <HAL_RCC_OscConfig+0x470>)
 80048c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10f      	bne.n	80048ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048ce:	2300      	movs	r3, #0
 80048d0:	60bb      	str	r3, [r7, #8]
 80048d2:	4b7d      	ldr	r3, [pc, #500]	@ (8004ac8 <HAL_RCC_OscConfig+0x470>)
 80048d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d6:	4a7c      	ldr	r2, [pc, #496]	@ (8004ac8 <HAL_RCC_OscConfig+0x470>)
 80048d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80048de:	4b7a      	ldr	r3, [pc, #488]	@ (8004ac8 <HAL_RCC_OscConfig+0x470>)
 80048e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048e6:	60bb      	str	r3, [r7, #8]
 80048e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048ea:	2301      	movs	r3, #1
 80048ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ee:	4b77      	ldr	r3, [pc, #476]	@ (8004acc <HAL_RCC_OscConfig+0x474>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d118      	bne.n	800492c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048fa:	4b74      	ldr	r3, [pc, #464]	@ (8004acc <HAL_RCC_OscConfig+0x474>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a73      	ldr	r2, [pc, #460]	@ (8004acc <HAL_RCC_OscConfig+0x474>)
 8004900:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004904:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004906:	f7fc fc65 	bl	80011d4 <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800490c:	e008      	b.n	8004920 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800490e:	f7fc fc61 	bl	80011d4 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e10c      	b.n	8004b3a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004920:	4b6a      	ldr	r3, [pc, #424]	@ (8004acc <HAL_RCC_OscConfig+0x474>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0f0      	beq.n	800490e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d106      	bne.n	8004942 <HAL_RCC_OscConfig+0x2ea>
 8004934:	4b64      	ldr	r3, [pc, #400]	@ (8004ac8 <HAL_RCC_OscConfig+0x470>)
 8004936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004938:	4a63      	ldr	r2, [pc, #396]	@ (8004ac8 <HAL_RCC_OscConfig+0x470>)
 800493a:	f043 0301 	orr.w	r3, r3, #1
 800493e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004940:	e01c      	b.n	800497c <HAL_RCC_OscConfig+0x324>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	2b05      	cmp	r3, #5
 8004948:	d10c      	bne.n	8004964 <HAL_RCC_OscConfig+0x30c>
 800494a:	4b5f      	ldr	r3, [pc, #380]	@ (8004ac8 <HAL_RCC_OscConfig+0x470>)
 800494c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800494e:	4a5e      	ldr	r2, [pc, #376]	@ (8004ac8 <HAL_RCC_OscConfig+0x470>)
 8004950:	f043 0304 	orr.w	r3, r3, #4
 8004954:	6713      	str	r3, [r2, #112]	@ 0x70
 8004956:	4b5c      	ldr	r3, [pc, #368]	@ (8004ac8 <HAL_RCC_OscConfig+0x470>)
 8004958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800495a:	4a5b      	ldr	r2, [pc, #364]	@ (8004ac8 <HAL_RCC_OscConfig+0x470>)
 800495c:	f043 0301 	orr.w	r3, r3, #1
 8004960:	6713      	str	r3, [r2, #112]	@ 0x70
 8004962:	e00b      	b.n	800497c <HAL_RCC_OscConfig+0x324>
 8004964:	4b58      	ldr	r3, [pc, #352]	@ (8004ac8 <HAL_RCC_OscConfig+0x470>)
 8004966:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004968:	4a57      	ldr	r2, [pc, #348]	@ (8004ac8 <HAL_RCC_OscConfig+0x470>)
 800496a:	f023 0301 	bic.w	r3, r3, #1
 800496e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004970:	4b55      	ldr	r3, [pc, #340]	@ (8004ac8 <HAL_RCC_OscConfig+0x470>)
 8004972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004974:	4a54      	ldr	r2, [pc, #336]	@ (8004ac8 <HAL_RCC_OscConfig+0x470>)
 8004976:	f023 0304 	bic.w	r3, r3, #4
 800497a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d015      	beq.n	80049b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004984:	f7fc fc26 	bl	80011d4 <HAL_GetTick>
 8004988:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800498a:	e00a      	b.n	80049a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800498c:	f7fc fc22 	bl	80011d4 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	f241 3288 	movw	r2, #5000	@ 0x1388
 800499a:	4293      	cmp	r3, r2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e0cb      	b.n	8004b3a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049a2:	4b49      	ldr	r3, [pc, #292]	@ (8004ac8 <HAL_RCC_OscConfig+0x470>)
 80049a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0ee      	beq.n	800498c <HAL_RCC_OscConfig+0x334>
 80049ae:	e014      	b.n	80049da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049b0:	f7fc fc10 	bl	80011d4 <HAL_GetTick>
 80049b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049b6:	e00a      	b.n	80049ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049b8:	f7fc fc0c 	bl	80011d4 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e0b5      	b.n	8004b3a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049ce:	4b3e      	ldr	r3, [pc, #248]	@ (8004ac8 <HAL_RCC_OscConfig+0x470>)
 80049d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1ee      	bne.n	80049b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80049da:	7dfb      	ldrb	r3, [r7, #23]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d105      	bne.n	80049ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049e0:	4b39      	ldr	r3, [pc, #228]	@ (8004ac8 <HAL_RCC_OscConfig+0x470>)
 80049e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e4:	4a38      	ldr	r2, [pc, #224]	@ (8004ac8 <HAL_RCC_OscConfig+0x470>)
 80049e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 80a1 	beq.w	8004b38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049f6:	4b34      	ldr	r3, [pc, #208]	@ (8004ac8 <HAL_RCC_OscConfig+0x470>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f003 030c 	and.w	r3, r3, #12
 80049fe:	2b08      	cmp	r3, #8
 8004a00:	d05c      	beq.n	8004abc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d141      	bne.n	8004a8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a0a:	4b31      	ldr	r3, [pc, #196]	@ (8004ad0 <HAL_RCC_OscConfig+0x478>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a10:	f7fc fbe0 	bl	80011d4 <HAL_GetTick>
 8004a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a16:	e008      	b.n	8004a2a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a18:	f7fc fbdc 	bl	80011d4 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e087      	b.n	8004b3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a2a:	4b27      	ldr	r3, [pc, #156]	@ (8004ac8 <HAL_RCC_OscConfig+0x470>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1f0      	bne.n	8004a18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	69da      	ldr	r2, [r3, #28]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a44:	019b      	lsls	r3, r3, #6
 8004a46:	431a      	orrs	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a4c:	085b      	lsrs	r3, r3, #1
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	041b      	lsls	r3, r3, #16
 8004a52:	431a      	orrs	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a58:	061b      	lsls	r3, r3, #24
 8004a5a:	491b      	ldr	r1, [pc, #108]	@ (8004ac8 <HAL_RCC_OscConfig+0x470>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a60:	4b1b      	ldr	r3, [pc, #108]	@ (8004ad0 <HAL_RCC_OscConfig+0x478>)
 8004a62:	2201      	movs	r2, #1
 8004a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a66:	f7fc fbb5 	bl	80011d4 <HAL_GetTick>
 8004a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a6c:	e008      	b.n	8004a80 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a6e:	f7fc fbb1 	bl	80011d4 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d901      	bls.n	8004a80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e05c      	b.n	8004b3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a80:	4b11      	ldr	r3, [pc, #68]	@ (8004ac8 <HAL_RCC_OscConfig+0x470>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d0f0      	beq.n	8004a6e <HAL_RCC_OscConfig+0x416>
 8004a8c:	e054      	b.n	8004b38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a8e:	4b10      	ldr	r3, [pc, #64]	@ (8004ad0 <HAL_RCC_OscConfig+0x478>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a94:	f7fc fb9e 	bl	80011d4 <HAL_GetTick>
 8004a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a9c:	f7fc fb9a 	bl	80011d4 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e045      	b.n	8004b3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aae:	4b06      	ldr	r3, [pc, #24]	@ (8004ac8 <HAL_RCC_OscConfig+0x470>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1f0      	bne.n	8004a9c <HAL_RCC_OscConfig+0x444>
 8004aba:	e03d      	b.n	8004b38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d107      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e038      	b.n	8004b3a <HAL_RCC_OscConfig+0x4e2>
 8004ac8:	40023800 	.word	0x40023800
 8004acc:	40007000 	.word	0x40007000
 8004ad0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ad4:	4b1b      	ldr	r3, [pc, #108]	@ (8004b44 <HAL_RCC_OscConfig+0x4ec>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d028      	beq.n	8004b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d121      	bne.n	8004b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d11a      	bne.n	8004b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004b04:	4013      	ands	r3, r2
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d111      	bne.n	8004b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b1a:	085b      	lsrs	r3, r3, #1
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d107      	bne.n	8004b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d001      	beq.n	8004b38 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e000      	b.n	8004b3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3718      	adds	r7, #24
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	40023800 	.word	0x40023800

08004b48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d101      	bne.n	8004b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e0cc      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b5c:	4b68      	ldr	r3, [pc, #416]	@ (8004d00 <HAL_RCC_ClockConfig+0x1b8>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d90c      	bls.n	8004b84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b6a:	4b65      	ldr	r3, [pc, #404]	@ (8004d00 <HAL_RCC_ClockConfig+0x1b8>)
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	b2d2      	uxtb	r2, r2
 8004b70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b72:	4b63      	ldr	r3, [pc, #396]	@ (8004d00 <HAL_RCC_ClockConfig+0x1b8>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0307 	and.w	r3, r3, #7
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d001      	beq.n	8004b84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e0b8      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d020      	beq.n	8004bd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0304 	and.w	r3, r3, #4
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d005      	beq.n	8004ba8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b9c:	4b59      	ldr	r3, [pc, #356]	@ (8004d04 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	4a58      	ldr	r2, [pc, #352]	@ (8004d04 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004ba6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0308 	and.w	r3, r3, #8
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d005      	beq.n	8004bc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bb4:	4b53      	ldr	r3, [pc, #332]	@ (8004d04 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	4a52      	ldr	r2, [pc, #328]	@ (8004d04 <HAL_RCC_ClockConfig+0x1bc>)
 8004bba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004bbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bc0:	4b50      	ldr	r3, [pc, #320]	@ (8004d04 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	494d      	ldr	r1, [pc, #308]	@ (8004d04 <HAL_RCC_ClockConfig+0x1bc>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d044      	beq.n	8004c68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d107      	bne.n	8004bf6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004be6:	4b47      	ldr	r3, [pc, #284]	@ (8004d04 <HAL_RCC_ClockConfig+0x1bc>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d119      	bne.n	8004c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e07f      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d003      	beq.n	8004c06 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c02:	2b03      	cmp	r3, #3
 8004c04:	d107      	bne.n	8004c16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c06:	4b3f      	ldr	r3, [pc, #252]	@ (8004d04 <HAL_RCC_ClockConfig+0x1bc>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d109      	bne.n	8004c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e06f      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c16:	4b3b      	ldr	r3, [pc, #236]	@ (8004d04 <HAL_RCC_ClockConfig+0x1bc>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e067      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c26:	4b37      	ldr	r3, [pc, #220]	@ (8004d04 <HAL_RCC_ClockConfig+0x1bc>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f023 0203 	bic.w	r2, r3, #3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	4934      	ldr	r1, [pc, #208]	@ (8004d04 <HAL_RCC_ClockConfig+0x1bc>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c38:	f7fc facc 	bl	80011d4 <HAL_GetTick>
 8004c3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c3e:	e00a      	b.n	8004c56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c40:	f7fc fac8 	bl	80011d4 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e04f      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c56:	4b2b      	ldr	r3, [pc, #172]	@ (8004d04 <HAL_RCC_ClockConfig+0x1bc>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f003 020c 	and.w	r2, r3, #12
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d1eb      	bne.n	8004c40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c68:	4b25      	ldr	r3, [pc, #148]	@ (8004d00 <HAL_RCC_ClockConfig+0x1b8>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0307 	and.w	r3, r3, #7
 8004c70:	683a      	ldr	r2, [r7, #0]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d20c      	bcs.n	8004c90 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c76:	4b22      	ldr	r3, [pc, #136]	@ (8004d00 <HAL_RCC_ClockConfig+0x1b8>)
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	b2d2      	uxtb	r2, r2
 8004c7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c7e:	4b20      	ldr	r3, [pc, #128]	@ (8004d00 <HAL_RCC_ClockConfig+0x1b8>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0307 	and.w	r3, r3, #7
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d001      	beq.n	8004c90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e032      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0304 	and.w	r3, r3, #4
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d008      	beq.n	8004cae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c9c:	4b19      	ldr	r3, [pc, #100]	@ (8004d04 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	4916      	ldr	r1, [pc, #88]	@ (8004d04 <HAL_RCC_ClockConfig+0x1bc>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0308 	and.w	r3, r3, #8
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d009      	beq.n	8004cce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cba:	4b12      	ldr	r3, [pc, #72]	@ (8004d04 <HAL_RCC_ClockConfig+0x1bc>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	490e      	ldr	r1, [pc, #56]	@ (8004d04 <HAL_RCC_ClockConfig+0x1bc>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004cce:	f000 f821 	bl	8004d14 <HAL_RCC_GetSysClockFreq>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8004d04 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	091b      	lsrs	r3, r3, #4
 8004cda:	f003 030f 	and.w	r3, r3, #15
 8004cde:	490a      	ldr	r1, [pc, #40]	@ (8004d08 <HAL_RCC_ClockConfig+0x1c0>)
 8004ce0:	5ccb      	ldrb	r3, [r1, r3]
 8004ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce6:	4a09      	ldr	r2, [pc, #36]	@ (8004d0c <HAL_RCC_ClockConfig+0x1c4>)
 8004ce8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004cea:	4b09      	ldr	r3, [pc, #36]	@ (8004d10 <HAL_RCC_ClockConfig+0x1c8>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fc fa2c 	bl	800114c <HAL_InitTick>

  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	40023c00 	.word	0x40023c00
 8004d04:	40023800 	.word	0x40023800
 8004d08:	0800a948 	.word	0x0800a948
 8004d0c:	20000000 	.word	0x20000000
 8004d10:	20000004 	.word	0x20000004

08004d14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d18:	b094      	sub	sp, #80	@ 0x50
 8004d1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004d20:	2300      	movs	r3, #0
 8004d22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d2c:	4b79      	ldr	r3, [pc, #484]	@ (8004f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f003 030c 	and.w	r3, r3, #12
 8004d34:	2b08      	cmp	r3, #8
 8004d36:	d00d      	beq.n	8004d54 <HAL_RCC_GetSysClockFreq+0x40>
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	f200 80e1 	bhi.w	8004f00 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <HAL_RCC_GetSysClockFreq+0x34>
 8004d42:	2b04      	cmp	r3, #4
 8004d44:	d003      	beq.n	8004d4e <HAL_RCC_GetSysClockFreq+0x3a>
 8004d46:	e0db      	b.n	8004f00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d48:	4b73      	ldr	r3, [pc, #460]	@ (8004f18 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d4a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d4c:	e0db      	b.n	8004f06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d4e:	4b73      	ldr	r3, [pc, #460]	@ (8004f1c <HAL_RCC_GetSysClockFreq+0x208>)
 8004d50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d52:	e0d8      	b.n	8004f06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d54:	4b6f      	ldr	r3, [pc, #444]	@ (8004f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d5c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d5e:	4b6d      	ldr	r3, [pc, #436]	@ (8004f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d063      	beq.n	8004e32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d6a:	4b6a      	ldr	r3, [pc, #424]	@ (8004f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	099b      	lsrs	r3, r3, #6
 8004d70:	2200      	movs	r2, #0
 8004d72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d74:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d7e:	2300      	movs	r3, #0
 8004d80:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004d86:	4622      	mov	r2, r4
 8004d88:	462b      	mov	r3, r5
 8004d8a:	f04f 0000 	mov.w	r0, #0
 8004d8e:	f04f 0100 	mov.w	r1, #0
 8004d92:	0159      	lsls	r1, r3, #5
 8004d94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d98:	0150      	lsls	r0, r2, #5
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	4621      	mov	r1, r4
 8004da0:	1a51      	subs	r1, r2, r1
 8004da2:	6139      	str	r1, [r7, #16]
 8004da4:	4629      	mov	r1, r5
 8004da6:	eb63 0301 	sbc.w	r3, r3, r1
 8004daa:	617b      	str	r3, [r7, #20]
 8004dac:	f04f 0200 	mov.w	r2, #0
 8004db0:	f04f 0300 	mov.w	r3, #0
 8004db4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004db8:	4659      	mov	r1, fp
 8004dba:	018b      	lsls	r3, r1, #6
 8004dbc:	4651      	mov	r1, sl
 8004dbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004dc2:	4651      	mov	r1, sl
 8004dc4:	018a      	lsls	r2, r1, #6
 8004dc6:	4651      	mov	r1, sl
 8004dc8:	ebb2 0801 	subs.w	r8, r2, r1
 8004dcc:	4659      	mov	r1, fp
 8004dce:	eb63 0901 	sbc.w	r9, r3, r1
 8004dd2:	f04f 0200 	mov.w	r2, #0
 8004dd6:	f04f 0300 	mov.w	r3, #0
 8004dda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004de2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004de6:	4690      	mov	r8, r2
 8004de8:	4699      	mov	r9, r3
 8004dea:	4623      	mov	r3, r4
 8004dec:	eb18 0303 	adds.w	r3, r8, r3
 8004df0:	60bb      	str	r3, [r7, #8]
 8004df2:	462b      	mov	r3, r5
 8004df4:	eb49 0303 	adc.w	r3, r9, r3
 8004df8:	60fb      	str	r3, [r7, #12]
 8004dfa:	f04f 0200 	mov.w	r2, #0
 8004dfe:	f04f 0300 	mov.w	r3, #0
 8004e02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e06:	4629      	mov	r1, r5
 8004e08:	024b      	lsls	r3, r1, #9
 8004e0a:	4621      	mov	r1, r4
 8004e0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e10:	4621      	mov	r1, r4
 8004e12:	024a      	lsls	r2, r1, #9
 8004e14:	4610      	mov	r0, r2
 8004e16:	4619      	mov	r1, r3
 8004e18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e24:	f7fb fa24 	bl	8000270 <__aeabi_uldivmod>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e30:	e058      	b.n	8004ee4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e32:	4b38      	ldr	r3, [pc, #224]	@ (8004f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	099b      	lsrs	r3, r3, #6
 8004e38:	2200      	movs	r2, #0
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	4611      	mov	r1, r2
 8004e3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e42:	623b      	str	r3, [r7, #32]
 8004e44:	2300      	movs	r3, #0
 8004e46:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e4c:	4642      	mov	r2, r8
 8004e4e:	464b      	mov	r3, r9
 8004e50:	f04f 0000 	mov.w	r0, #0
 8004e54:	f04f 0100 	mov.w	r1, #0
 8004e58:	0159      	lsls	r1, r3, #5
 8004e5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e5e:	0150      	lsls	r0, r2, #5
 8004e60:	4602      	mov	r2, r0
 8004e62:	460b      	mov	r3, r1
 8004e64:	4641      	mov	r1, r8
 8004e66:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e6a:	4649      	mov	r1, r9
 8004e6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e70:	f04f 0200 	mov.w	r2, #0
 8004e74:	f04f 0300 	mov.w	r3, #0
 8004e78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e84:	ebb2 040a 	subs.w	r4, r2, sl
 8004e88:	eb63 050b 	sbc.w	r5, r3, fp
 8004e8c:	f04f 0200 	mov.w	r2, #0
 8004e90:	f04f 0300 	mov.w	r3, #0
 8004e94:	00eb      	lsls	r3, r5, #3
 8004e96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e9a:	00e2      	lsls	r2, r4, #3
 8004e9c:	4614      	mov	r4, r2
 8004e9e:	461d      	mov	r5, r3
 8004ea0:	4643      	mov	r3, r8
 8004ea2:	18e3      	adds	r3, r4, r3
 8004ea4:	603b      	str	r3, [r7, #0]
 8004ea6:	464b      	mov	r3, r9
 8004ea8:	eb45 0303 	adc.w	r3, r5, r3
 8004eac:	607b      	str	r3, [r7, #4]
 8004eae:	f04f 0200 	mov.w	r2, #0
 8004eb2:	f04f 0300 	mov.w	r3, #0
 8004eb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004eba:	4629      	mov	r1, r5
 8004ebc:	028b      	lsls	r3, r1, #10
 8004ebe:	4621      	mov	r1, r4
 8004ec0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ec4:	4621      	mov	r1, r4
 8004ec6:	028a      	lsls	r2, r1, #10
 8004ec8:	4610      	mov	r0, r2
 8004eca:	4619      	mov	r1, r3
 8004ecc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ece:	2200      	movs	r2, #0
 8004ed0:	61bb      	str	r3, [r7, #24]
 8004ed2:	61fa      	str	r2, [r7, #28]
 8004ed4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ed8:	f7fb f9ca 	bl	8000270 <__aeabi_uldivmod>
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8004f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	0c1b      	lsrs	r3, r3, #16
 8004eea:	f003 0303 	and.w	r3, r3, #3
 8004eee:	3301      	adds	r3, #1
 8004ef0:	005b      	lsls	r3, r3, #1
 8004ef2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004ef4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ef6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004efc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004efe:	e002      	b.n	8004f06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f00:	4b05      	ldr	r3, [pc, #20]	@ (8004f18 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f02:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3750      	adds	r7, #80	@ 0x50
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f12:	bf00      	nop
 8004f14:	40023800 	.word	0x40023800
 8004f18:	00f42400 	.word	0x00f42400
 8004f1c:	007a1200 	.word	0x007a1200

08004f20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f20:	b480      	push	{r7}
 8004f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f24:	4b03      	ldr	r3, [pc, #12]	@ (8004f34 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f26:	681b      	ldr	r3, [r3, #0]
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	20000000 	.word	0x20000000

08004f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f3c:	f7ff fff0 	bl	8004f20 <HAL_RCC_GetHCLKFreq>
 8004f40:	4602      	mov	r2, r0
 8004f42:	4b05      	ldr	r3, [pc, #20]	@ (8004f58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	0a9b      	lsrs	r3, r3, #10
 8004f48:	f003 0307 	and.w	r3, r3, #7
 8004f4c:	4903      	ldr	r1, [pc, #12]	@ (8004f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f4e:	5ccb      	ldrb	r3, [r1, r3]
 8004f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	40023800 	.word	0x40023800
 8004f5c:	0800a958 	.word	0x0800a958

08004f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f64:	f7ff ffdc 	bl	8004f20 <HAL_RCC_GetHCLKFreq>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	4b05      	ldr	r3, [pc, #20]	@ (8004f80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	0b5b      	lsrs	r3, r3, #13
 8004f70:	f003 0307 	and.w	r3, r3, #7
 8004f74:	4903      	ldr	r1, [pc, #12]	@ (8004f84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f76:	5ccb      	ldrb	r3, [r1, r3]
 8004f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	40023800 	.word	0x40023800
 8004f84:	0800a958 	.word	0x0800a958

08004f88 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f90:	2300      	movs	r3, #0
 8004f92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004f94:	2300      	movs	r3, #0
 8004f96:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0301 	and.w	r3, r3, #1
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d105      	bne.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d035      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004fb0:	4b62      	ldr	r3, [pc, #392]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fb6:	f7fc f90d 	bl	80011d4 <HAL_GetTick>
 8004fba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fbc:	e008      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004fbe:	f7fc f909 	bl	80011d4 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d901      	bls.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e0b0      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fd0:	4b5b      	ldr	r3, [pc, #364]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1f0      	bne.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	019a      	lsls	r2, r3, #6
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	071b      	lsls	r3, r3, #28
 8004fe8:	4955      	ldr	r1, [pc, #340]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ff0:	4b52      	ldr	r3, [pc, #328]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ff6:	f7fc f8ed 	bl	80011d4 <HAL_GetTick>
 8004ffa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ffc:	e008      	b.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ffe:	f7fc f8e9 	bl	80011d4 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b02      	cmp	r3, #2
 800500a:	d901      	bls.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e090      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005010:	4b4b      	ldr	r3, [pc, #300]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d0f0      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0302 	and.w	r3, r3, #2
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 8083 	beq.w	8005130 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800502a:	2300      	movs	r3, #0
 800502c:	60fb      	str	r3, [r7, #12]
 800502e:	4b44      	ldr	r3, [pc, #272]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005032:	4a43      	ldr	r2, [pc, #268]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005034:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005038:	6413      	str	r3, [r2, #64]	@ 0x40
 800503a:	4b41      	ldr	r3, [pc, #260]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800503c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800503e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005042:	60fb      	str	r3, [r7, #12]
 8005044:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005046:	4b3f      	ldr	r3, [pc, #252]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a3e      	ldr	r2, [pc, #248]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800504c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005050:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005052:	f7fc f8bf 	bl	80011d4 <HAL_GetTick>
 8005056:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005058:	e008      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800505a:	f7fc f8bb 	bl	80011d4 <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d901      	bls.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e062      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800506c:	4b35      	ldr	r3, [pc, #212]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005074:	2b00      	cmp	r3, #0
 8005076:	d0f0      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005078:	4b31      	ldr	r3, [pc, #196]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800507a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800507c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005080:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d02f      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	429a      	cmp	r2, r3
 8005094:	d028      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005096:	4b2a      	ldr	r3, [pc, #168]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800509a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800509e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050a0:	4b29      	ldr	r3, [pc, #164]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80050a2:	2201      	movs	r2, #1
 80050a4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050a6:	4b28      	ldr	r3, [pc, #160]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80050ac:	4a24      	ldr	r2, [pc, #144]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80050b2:	4b23      	ldr	r3, [pc, #140]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d114      	bne.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80050be:	f7fc f889 	bl	80011d4 <HAL_GetTick>
 80050c2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050c4:	e00a      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050c6:	f7fc f885 	bl	80011d4 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d901      	bls.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e02a      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050dc:	4b18      	ldr	r3, [pc, #96]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0ee      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050f4:	d10d      	bne.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80050f6:	4b12      	ldr	r3, [pc, #72]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005106:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800510a:	490d      	ldr	r1, [pc, #52]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800510c:	4313      	orrs	r3, r2
 800510e:	608b      	str	r3, [r1, #8]
 8005110:	e005      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005112:	4b0b      	ldr	r3, [pc, #44]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	4a0a      	ldr	r2, [pc, #40]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005118:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800511c:	6093      	str	r3, [r2, #8]
 800511e:	4b08      	ldr	r3, [pc, #32]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005120:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800512a:	4905      	ldr	r1, [pc, #20]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800512c:	4313      	orrs	r3, r2
 800512e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3718      	adds	r7, #24
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	42470068 	.word	0x42470068
 8005140:	40023800 	.word	0x40023800
 8005144:	40007000 	.word	0x40007000
 8005148:	42470e40 	.word	0x42470e40

0800514c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800514c:	b480      	push	{r7}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005154:	2300      	movs	r3, #0
 8005156:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005158:	2300      	movs	r3, #0
 800515a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800515c:	2300      	movs	r3, #0
 800515e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005160:	2300      	movs	r3, #0
 8005162:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d13f      	bne.n	80051ea <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800516a:	4b24      	ldr	r3, [pc, #144]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d006      	beq.n	8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005180:	d12f      	bne.n	80051e2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005182:	4b1f      	ldr	r3, [pc, #124]	@ (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005184:	617b      	str	r3, [r7, #20]
          break;
 8005186:	e02f      	b.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005188:	4b1c      	ldr	r3, [pc, #112]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005190:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005194:	d108      	bne.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005196:	4b19      	ldr	r3, [pc, #100]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800519e:	4a19      	ldr	r2, [pc, #100]	@ (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80051a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a4:	613b      	str	r3, [r7, #16]
 80051a6:	e007      	b.n	80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80051a8:	4b14      	ldr	r3, [pc, #80]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051b0:	4a15      	ldr	r2, [pc, #84]	@ (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80051b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80051b8:	4b10      	ldr	r3, [pc, #64]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80051ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051be:	099b      	lsrs	r3, r3, #6
 80051c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	fb02 f303 	mul.w	r3, r2, r3
 80051ca:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80051cc:	4b0b      	ldr	r3, [pc, #44]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80051ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051d2:	0f1b      	lsrs	r3, r3, #28
 80051d4:	f003 0307 	and.w	r3, r3, #7
 80051d8:	68ba      	ldr	r2, [r7, #8]
 80051da:	fbb2 f3f3 	udiv	r3, r2, r3
 80051de:	617b      	str	r3, [r7, #20]
          break;
 80051e0:	e002      	b.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80051e2:	2300      	movs	r3, #0
 80051e4:	617b      	str	r3, [r7, #20]
          break;
 80051e6:	bf00      	nop
        }
      }
      break;
 80051e8:	e000      	b.n	80051ec <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80051ea:	bf00      	nop
    }
  }
  return frequency;
 80051ec:	697b      	ldr	r3, [r7, #20]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	371c      	adds	r7, #28
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	40023800 	.word	0x40023800
 8005200:	00bb8000 	.word	0x00bb8000
 8005204:	007a1200 	.word	0x007a1200
 8005208:	00f42400 	.word	0x00f42400

0800520c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e07b      	b.n	8005316 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005222:	2b00      	cmp	r3, #0
 8005224:	d108      	bne.n	8005238 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800522e:	d009      	beq.n	8005244 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	61da      	str	r2, [r3, #28]
 8005236:	e005      	b.n	8005244 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d106      	bne.n	8005264 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f7fb fd72 	bl	8000d48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2202      	movs	r2, #2
 8005268:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800527a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800528c:	431a      	orrs	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005296:	431a      	orrs	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	431a      	orrs	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	431a      	orrs	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052b4:	431a      	orrs	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052be:	431a      	orrs	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052c8:	ea42 0103 	orr.w	r1, r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	430a      	orrs	r2, r1
 80052da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	0c1b      	lsrs	r3, r3, #16
 80052e2:	f003 0104 	and.w	r1, r3, #4
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ea:	f003 0210 	and.w	r2, r3, #16
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	69da      	ldr	r2, [r3, #28]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005304:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b08a      	sub	sp, #40	@ 0x28
 8005322:	af00      	add	r7, sp, #0
 8005324:	60f8      	str	r0, [r7, #12]
 8005326:	60b9      	str	r1, [r7, #8]
 8005328:	607a      	str	r2, [r7, #4]
 800532a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800532c:	2301      	movs	r3, #1
 800532e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005330:	f7fb ff50 	bl	80011d4 <HAL_GetTick>
 8005334:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800533c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005344:	887b      	ldrh	r3, [r7, #2]
 8005346:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005348:	7ffb      	ldrb	r3, [r7, #31]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d00c      	beq.n	8005368 <HAL_SPI_TransmitReceive+0x4a>
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005354:	d106      	bne.n	8005364 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d102      	bne.n	8005364 <HAL_SPI_TransmitReceive+0x46>
 800535e:	7ffb      	ldrb	r3, [r7, #31]
 8005360:	2b04      	cmp	r3, #4
 8005362:	d001      	beq.n	8005368 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005364:	2302      	movs	r3, #2
 8005366:	e17f      	b.n	8005668 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d005      	beq.n	800537a <HAL_SPI_TransmitReceive+0x5c>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d002      	beq.n	800537a <HAL_SPI_TransmitReceive+0x5c>
 8005374:	887b      	ldrh	r3, [r7, #2]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e174      	b.n	8005668 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005384:	2b01      	cmp	r3, #1
 8005386:	d101      	bne.n	800538c <HAL_SPI_TransmitReceive+0x6e>
 8005388:	2302      	movs	r3, #2
 800538a:	e16d      	b.n	8005668 <HAL_SPI_TransmitReceive+0x34a>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800539a:	b2db      	uxtb	r3, r3
 800539c:	2b04      	cmp	r3, #4
 800539e:	d003      	beq.n	80053a8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2205      	movs	r2, #5
 80053a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	887a      	ldrh	r2, [r7, #2]
 80053b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	887a      	ldrh	r2, [r7, #2]
 80053be:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	887a      	ldrh	r2, [r7, #2]
 80053ca:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	887a      	ldrh	r2, [r7, #2]
 80053d0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053e8:	2b40      	cmp	r3, #64	@ 0x40
 80053ea:	d007      	beq.n	80053fc <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005404:	d17e      	bne.n	8005504 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d002      	beq.n	8005414 <HAL_SPI_TransmitReceive+0xf6>
 800540e:	8afb      	ldrh	r3, [r7, #22]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d16c      	bne.n	80054ee <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005418:	881a      	ldrh	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005424:	1c9a      	adds	r2, r3, #2
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800542e:	b29b      	uxth	r3, r3
 8005430:	3b01      	subs	r3, #1
 8005432:	b29a      	uxth	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005438:	e059      	b.n	80054ee <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b02      	cmp	r3, #2
 8005446:	d11b      	bne.n	8005480 <HAL_SPI_TransmitReceive+0x162>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800544c:	b29b      	uxth	r3, r3
 800544e:	2b00      	cmp	r3, #0
 8005450:	d016      	beq.n	8005480 <HAL_SPI_TransmitReceive+0x162>
 8005452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005454:	2b01      	cmp	r3, #1
 8005456:	d113      	bne.n	8005480 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800545c:	881a      	ldrh	r2, [r3, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005468:	1c9a      	adds	r2, r3, #2
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005472:	b29b      	uxth	r3, r3
 8005474:	3b01      	subs	r3, #1
 8005476:	b29a      	uxth	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800547c:	2300      	movs	r3, #0
 800547e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b01      	cmp	r3, #1
 800548c:	d119      	bne.n	80054c2 <HAL_SPI_TransmitReceive+0x1a4>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005492:	b29b      	uxth	r3, r3
 8005494:	2b00      	cmp	r3, #0
 8005496:	d014      	beq.n	80054c2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68da      	ldr	r2, [r3, #12]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a2:	b292      	uxth	r2, r2
 80054a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054aa:	1c9a      	adds	r2, r3, #2
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	3b01      	subs	r3, #1
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054be:	2301      	movs	r3, #1
 80054c0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80054c2:	f7fb fe87 	bl	80011d4 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d80d      	bhi.n	80054ee <HAL_SPI_TransmitReceive+0x1d0>
 80054d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d8:	d009      	beq.n	80054ee <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e0bc      	b.n	8005668 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1a0      	bne.n	800543a <HAL_SPI_TransmitReceive+0x11c>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d19b      	bne.n	800543a <HAL_SPI_TransmitReceive+0x11c>
 8005502:	e082      	b.n	800560a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d002      	beq.n	8005512 <HAL_SPI_TransmitReceive+0x1f4>
 800550c:	8afb      	ldrh	r3, [r7, #22]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d171      	bne.n	80055f6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	330c      	adds	r3, #12
 800551c:	7812      	ldrb	r2, [r2, #0]
 800551e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005524:	1c5a      	adds	r2, r3, #1
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800552e:	b29b      	uxth	r3, r3
 8005530:	3b01      	subs	r3, #1
 8005532:	b29a      	uxth	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005538:	e05d      	b.n	80055f6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	2b02      	cmp	r3, #2
 8005546:	d11c      	bne.n	8005582 <HAL_SPI_TransmitReceive+0x264>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800554c:	b29b      	uxth	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d017      	beq.n	8005582 <HAL_SPI_TransmitReceive+0x264>
 8005552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005554:	2b01      	cmp	r3, #1
 8005556:	d114      	bne.n	8005582 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	330c      	adds	r3, #12
 8005562:	7812      	ldrb	r2, [r2, #0]
 8005564:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800556a:	1c5a      	adds	r2, r3, #1
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005574:	b29b      	uxth	r3, r3
 8005576:	3b01      	subs	r3, #1
 8005578:	b29a      	uxth	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800557e:	2300      	movs	r3, #0
 8005580:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f003 0301 	and.w	r3, r3, #1
 800558c:	2b01      	cmp	r3, #1
 800558e:	d119      	bne.n	80055c4 <HAL_SPI_TransmitReceive+0x2a6>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005594:	b29b      	uxth	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d014      	beq.n	80055c4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68da      	ldr	r2, [r3, #12]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055a4:	b2d2      	uxtb	r2, r2
 80055a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ac:	1c5a      	adds	r2, r3, #1
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	3b01      	subs	r3, #1
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055c0:	2301      	movs	r3, #1
 80055c2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80055c4:	f7fb fe06 	bl	80011d4 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d803      	bhi.n	80055dc <HAL_SPI_TransmitReceive+0x2be>
 80055d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055da:	d102      	bne.n	80055e2 <HAL_SPI_TransmitReceive+0x2c4>
 80055dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d109      	bne.n	80055f6 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e038      	b.n	8005668 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d19c      	bne.n	800553a <HAL_SPI_TransmitReceive+0x21c>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005604:	b29b      	uxth	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d197      	bne.n	800553a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800560a:	6a3a      	ldr	r2, [r7, #32]
 800560c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f000 f8b6 	bl	8005780 <SPI_EndRxTxTransaction>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d008      	beq.n	800562c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2220      	movs	r2, #32
 800561e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e01d      	b.n	8005668 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10a      	bne.n	800564a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005634:	2300      	movs	r3, #0
 8005636:	613b      	str	r3, [r7, #16]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	613b      	str	r3, [r7, #16]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	613b      	str	r3, [r7, #16]
 8005648:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800565e:	2b00      	cmp	r3, #0
 8005660:	d001      	beq.n	8005666 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e000      	b.n	8005668 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005666:	2300      	movs	r3, #0
  }
}
 8005668:	4618      	mov	r0, r3
 800566a:	3728      	adds	r7, #40	@ 0x28
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b088      	sub	sp, #32
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	603b      	str	r3, [r7, #0]
 800567c:	4613      	mov	r3, r2
 800567e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005680:	f7fb fda8 	bl	80011d4 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005688:	1a9b      	subs	r3, r3, r2
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	4413      	add	r3, r2
 800568e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005690:	f7fb fda0 	bl	80011d4 <HAL_GetTick>
 8005694:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005696:	4b39      	ldr	r3, [pc, #228]	@ (800577c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	015b      	lsls	r3, r3, #5
 800569c:	0d1b      	lsrs	r3, r3, #20
 800569e:	69fa      	ldr	r2, [r7, #28]
 80056a0:	fb02 f303 	mul.w	r3, r2, r3
 80056a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056a6:	e055      	b.n	8005754 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ae:	d051      	beq.n	8005754 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056b0:	f7fb fd90 	bl	80011d4 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	69fa      	ldr	r2, [r7, #28]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d902      	bls.n	80056c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d13d      	bne.n	8005742 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80056d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056de:	d111      	bne.n	8005704 <SPI_WaitFlagStateUntilTimeout+0x94>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056e8:	d004      	beq.n	80056f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056f2:	d107      	bne.n	8005704 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005702:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005708:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800570c:	d10f      	bne.n	800572e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800572c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2201      	movs	r2, #1
 8005732:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e018      	b.n	8005774 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d102      	bne.n	800574e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8005748:	2300      	movs	r3, #0
 800574a:	61fb      	str	r3, [r7, #28]
 800574c:	e002      	b.n	8005754 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	3b01      	subs	r3, #1
 8005752:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689a      	ldr	r2, [r3, #8]
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	4013      	ands	r3, r2
 800575e:	68ba      	ldr	r2, [r7, #8]
 8005760:	429a      	cmp	r2, r3
 8005762:	bf0c      	ite	eq
 8005764:	2301      	moveq	r3, #1
 8005766:	2300      	movne	r3, #0
 8005768:	b2db      	uxtb	r3, r3
 800576a:	461a      	mov	r2, r3
 800576c:	79fb      	ldrb	r3, [r7, #7]
 800576e:	429a      	cmp	r2, r3
 8005770:	d19a      	bne.n	80056a8 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3720      	adds	r7, #32
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	20000000 	.word	0x20000000

08005780 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b088      	sub	sp, #32
 8005784:	af02      	add	r7, sp, #8
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	9300      	str	r3, [sp, #0]
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	2201      	movs	r2, #1
 8005794:	2102      	movs	r1, #2
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f7ff ff6a 	bl	8005670 <SPI_WaitFlagStateUntilTimeout>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d007      	beq.n	80057b2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057a6:	f043 0220 	orr.w	r2, r3, #32
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e032      	b.n	8005818 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80057b2:	4b1b      	ldr	r3, [pc, #108]	@ (8005820 <SPI_EndRxTxTransaction+0xa0>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a1b      	ldr	r2, [pc, #108]	@ (8005824 <SPI_EndRxTxTransaction+0xa4>)
 80057b8:	fba2 2303 	umull	r2, r3, r2, r3
 80057bc:	0d5b      	lsrs	r3, r3, #21
 80057be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80057c2:	fb02 f303 	mul.w	r3, r2, r3
 80057c6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057d0:	d112      	bne.n	80057f8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	9300      	str	r3, [sp, #0]
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	2200      	movs	r2, #0
 80057da:	2180      	movs	r1, #128	@ 0x80
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f7ff ff47 	bl	8005670 <SPI_WaitFlagStateUntilTimeout>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d016      	beq.n	8005816 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ec:	f043 0220 	orr.w	r2, r3, #32
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e00f      	b.n	8005818 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00a      	beq.n	8005814 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	3b01      	subs	r3, #1
 8005802:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800580e:	2b80      	cmp	r3, #128	@ 0x80
 8005810:	d0f2      	beq.n	80057f8 <SPI_EndRxTxTransaction+0x78>
 8005812:	e000      	b.n	8005816 <SPI_EndRxTxTransaction+0x96>
        break;
 8005814:	bf00      	nop
  }

  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3718      	adds	r7, #24
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	20000000 	.word	0x20000000
 8005824:	165e9f81 	.word	0x165e9f81

08005828 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e042      	b.n	80058c0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d106      	bne.n	8005854 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f7fb fbe8 	bl	8001024 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2224      	movs	r2, #36	@ 0x24
 8005858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68da      	ldr	r2, [r3, #12]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800586a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 f973 	bl	8005b58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	691a      	ldr	r2, [r3, #16]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005880:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	695a      	ldr	r2, [r3, #20]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005890:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68da      	ldr	r2, [r3, #12]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80058a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2220      	movs	r2, #32
 80058ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2220      	movs	r2, #32
 80058b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3708      	adds	r7, #8
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b08a      	sub	sp, #40	@ 0x28
 80058cc:	af02      	add	r7, sp, #8
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	603b      	str	r3, [r7, #0]
 80058d4:	4613      	mov	r3, r2
 80058d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80058d8:	2300      	movs	r3, #0
 80058da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b20      	cmp	r3, #32
 80058e6:	d175      	bne.n	80059d4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d002      	beq.n	80058f4 <HAL_UART_Transmit+0x2c>
 80058ee:	88fb      	ldrh	r3, [r7, #6]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d101      	bne.n	80058f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e06e      	b.n	80059d6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2221      	movs	r2, #33	@ 0x21
 8005902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005906:	f7fb fc65 	bl	80011d4 <HAL_GetTick>
 800590a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	88fa      	ldrh	r2, [r7, #6]
 8005910:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	88fa      	ldrh	r2, [r7, #6]
 8005916:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005920:	d108      	bne.n	8005934 <HAL_UART_Transmit+0x6c>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d104      	bne.n	8005934 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800592a:	2300      	movs	r3, #0
 800592c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	61bb      	str	r3, [r7, #24]
 8005932:	e003      	b.n	800593c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005938:	2300      	movs	r3, #0
 800593a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800593c:	e02e      	b.n	800599c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	2200      	movs	r2, #0
 8005946:	2180      	movs	r1, #128	@ 0x80
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 f848 	bl	80059de <UART_WaitOnFlagUntilTimeout>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d005      	beq.n	8005960 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2220      	movs	r2, #32
 8005958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e03a      	b.n	80059d6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10b      	bne.n	800597e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	881b      	ldrh	r3, [r3, #0]
 800596a:	461a      	mov	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005974:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	3302      	adds	r3, #2
 800597a:	61bb      	str	r3, [r7, #24]
 800597c:	e007      	b.n	800598e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	781a      	ldrb	r2, [r3, #0]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	3301      	adds	r3, #1
 800598c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005992:	b29b      	uxth	r3, r3
 8005994:	3b01      	subs	r3, #1
 8005996:	b29a      	uxth	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1cb      	bne.n	800593e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	9300      	str	r3, [sp, #0]
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	2200      	movs	r2, #0
 80059ae:	2140      	movs	r1, #64	@ 0x40
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f000 f814 	bl	80059de <UART_WaitOnFlagUntilTimeout>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d005      	beq.n	80059c8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2220      	movs	r2, #32
 80059c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e006      	b.n	80059d6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2220      	movs	r2, #32
 80059cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80059d0:	2300      	movs	r3, #0
 80059d2:	e000      	b.n	80059d6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80059d4:	2302      	movs	r3, #2
  }
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3720      	adds	r7, #32
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b086      	sub	sp, #24
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	60f8      	str	r0, [r7, #12]
 80059e6:	60b9      	str	r1, [r7, #8]
 80059e8:	603b      	str	r3, [r7, #0]
 80059ea:	4613      	mov	r3, r2
 80059ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ee:	e03b      	b.n	8005a68 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059f0:	6a3b      	ldr	r3, [r7, #32]
 80059f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f6:	d037      	beq.n	8005a68 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059f8:	f7fb fbec 	bl	80011d4 <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	6a3a      	ldr	r2, [r7, #32]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d302      	bcc.n	8005a0e <UART_WaitOnFlagUntilTimeout+0x30>
 8005a08:	6a3b      	ldr	r3, [r7, #32]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e03a      	b.n	8005a88 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	f003 0304 	and.w	r3, r3, #4
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d023      	beq.n	8005a68 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2b80      	cmp	r3, #128	@ 0x80
 8005a24:	d020      	beq.n	8005a68 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	2b40      	cmp	r3, #64	@ 0x40
 8005a2a:	d01d      	beq.n	8005a68 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0308 	and.w	r3, r3, #8
 8005a36:	2b08      	cmp	r3, #8
 8005a38:	d116      	bne.n	8005a68 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	617b      	str	r3, [r7, #20]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	617b      	str	r3, [r7, #20]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	617b      	str	r3, [r7, #20]
 8005a4e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f000 f81d 	bl	8005a90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2208      	movs	r2, #8
 8005a5a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e00f      	b.n	8005a88 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	4013      	ands	r3, r2
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	bf0c      	ite	eq
 8005a78:	2301      	moveq	r3, #1
 8005a7a:	2300      	movne	r3, #0
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	461a      	mov	r2, r3
 8005a80:	79fb      	ldrb	r3, [r7, #7]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d0b4      	beq.n	80059f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3718      	adds	r7, #24
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b095      	sub	sp, #84	@ 0x54
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	330c      	adds	r3, #12
 8005a9e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aa2:	e853 3f00 	ldrex	r3, [r3]
 8005aa6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aaa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005aae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	330c      	adds	r3, #12
 8005ab6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ab8:	643a      	str	r2, [r7, #64]	@ 0x40
 8005aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005abc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005abe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ac0:	e841 2300 	strex	r3, r2, [r1]
 8005ac4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1e5      	bne.n	8005a98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	3314      	adds	r3, #20
 8005ad2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad4:	6a3b      	ldr	r3, [r7, #32]
 8005ad6:	e853 3f00 	ldrex	r3, [r3]
 8005ada:	61fb      	str	r3, [r7, #28]
   return(result);
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	f023 0301 	bic.w	r3, r3, #1
 8005ae2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	3314      	adds	r3, #20
 8005aea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005aec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005aee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005af2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005af4:	e841 2300 	strex	r3, r2, [r1]
 8005af8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1e5      	bne.n	8005acc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d119      	bne.n	8005b3c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	330c      	adds	r3, #12
 8005b0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	e853 3f00 	ldrex	r3, [r3]
 8005b16:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	f023 0310 	bic.w	r3, r3, #16
 8005b1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	330c      	adds	r3, #12
 8005b26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b28:	61ba      	str	r2, [r7, #24]
 8005b2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2c:	6979      	ldr	r1, [r7, #20]
 8005b2e:	69ba      	ldr	r2, [r7, #24]
 8005b30:	e841 2300 	strex	r3, r2, [r1]
 8005b34:	613b      	str	r3, [r7, #16]
   return(result);
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1e5      	bne.n	8005b08 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2220      	movs	r2, #32
 8005b40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005b4a:	bf00      	nop
 8005b4c:	3754      	adds	r7, #84	@ 0x54
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
	...

08005b58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b5c:	b0c0      	sub	sp, #256	@ 0x100
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b74:	68d9      	ldr	r1, [r3, #12]
 8005b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	ea40 0301 	orr.w	r3, r0, r1
 8005b80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b86:	689a      	ldr	r2, [r3, #8]
 8005b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	431a      	orrs	r2, r3
 8005b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	431a      	orrs	r2, r3
 8005b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b9c:	69db      	ldr	r3, [r3, #28]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005bb0:	f021 010c 	bic.w	r1, r1, #12
 8005bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005bbe:	430b      	orrs	r3, r1
 8005bc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bd2:	6999      	ldr	r1, [r3, #24]
 8005bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	ea40 0301 	orr.w	r3, r0, r1
 8005bde:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	4b8f      	ldr	r3, [pc, #572]	@ (8005e24 <UART_SetConfig+0x2cc>)
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d005      	beq.n	8005bf8 <UART_SetConfig+0xa0>
 8005bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	4b8d      	ldr	r3, [pc, #564]	@ (8005e28 <UART_SetConfig+0x2d0>)
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d104      	bne.n	8005c02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005bf8:	f7ff f9b2 	bl	8004f60 <HAL_RCC_GetPCLK2Freq>
 8005bfc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005c00:	e003      	b.n	8005c0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c02:	f7ff f999 	bl	8004f38 <HAL_RCC_GetPCLK1Freq>
 8005c06:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c0e:	69db      	ldr	r3, [r3, #28]
 8005c10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c14:	f040 810c 	bne.w	8005e30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c22:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005c26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005c2a:	4622      	mov	r2, r4
 8005c2c:	462b      	mov	r3, r5
 8005c2e:	1891      	adds	r1, r2, r2
 8005c30:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005c32:	415b      	adcs	r3, r3
 8005c34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005c3a:	4621      	mov	r1, r4
 8005c3c:	eb12 0801 	adds.w	r8, r2, r1
 8005c40:	4629      	mov	r1, r5
 8005c42:	eb43 0901 	adc.w	r9, r3, r1
 8005c46:	f04f 0200 	mov.w	r2, #0
 8005c4a:	f04f 0300 	mov.w	r3, #0
 8005c4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c5a:	4690      	mov	r8, r2
 8005c5c:	4699      	mov	r9, r3
 8005c5e:	4623      	mov	r3, r4
 8005c60:	eb18 0303 	adds.w	r3, r8, r3
 8005c64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005c68:	462b      	mov	r3, r5
 8005c6a:	eb49 0303 	adc.w	r3, r9, r3
 8005c6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005c7e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005c82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005c86:	460b      	mov	r3, r1
 8005c88:	18db      	adds	r3, r3, r3
 8005c8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	eb42 0303 	adc.w	r3, r2, r3
 8005c92:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005c98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005c9c:	f7fa fae8 	bl	8000270 <__aeabi_uldivmod>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	4b61      	ldr	r3, [pc, #388]	@ (8005e2c <UART_SetConfig+0x2d4>)
 8005ca6:	fba3 2302 	umull	r2, r3, r3, r2
 8005caa:	095b      	lsrs	r3, r3, #5
 8005cac:	011c      	lsls	r4, r3, #4
 8005cae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005cb8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005cbc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005cc0:	4642      	mov	r2, r8
 8005cc2:	464b      	mov	r3, r9
 8005cc4:	1891      	adds	r1, r2, r2
 8005cc6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005cc8:	415b      	adcs	r3, r3
 8005cca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ccc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005cd0:	4641      	mov	r1, r8
 8005cd2:	eb12 0a01 	adds.w	sl, r2, r1
 8005cd6:	4649      	mov	r1, r9
 8005cd8:	eb43 0b01 	adc.w	fp, r3, r1
 8005cdc:	f04f 0200 	mov.w	r2, #0
 8005ce0:	f04f 0300 	mov.w	r3, #0
 8005ce4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ce8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005cec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cf0:	4692      	mov	sl, r2
 8005cf2:	469b      	mov	fp, r3
 8005cf4:	4643      	mov	r3, r8
 8005cf6:	eb1a 0303 	adds.w	r3, sl, r3
 8005cfa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005cfe:	464b      	mov	r3, r9
 8005d00:	eb4b 0303 	adc.w	r3, fp, r3
 8005d04:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d14:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005d18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	18db      	adds	r3, r3, r3
 8005d20:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d22:	4613      	mov	r3, r2
 8005d24:	eb42 0303 	adc.w	r3, r2, r3
 8005d28:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005d2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005d32:	f7fa fa9d 	bl	8000270 <__aeabi_uldivmod>
 8005d36:	4602      	mov	r2, r0
 8005d38:	460b      	mov	r3, r1
 8005d3a:	4611      	mov	r1, r2
 8005d3c:	4b3b      	ldr	r3, [pc, #236]	@ (8005e2c <UART_SetConfig+0x2d4>)
 8005d3e:	fba3 2301 	umull	r2, r3, r3, r1
 8005d42:	095b      	lsrs	r3, r3, #5
 8005d44:	2264      	movs	r2, #100	@ 0x64
 8005d46:	fb02 f303 	mul.w	r3, r2, r3
 8005d4a:	1acb      	subs	r3, r1, r3
 8005d4c:	00db      	lsls	r3, r3, #3
 8005d4e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005d52:	4b36      	ldr	r3, [pc, #216]	@ (8005e2c <UART_SetConfig+0x2d4>)
 8005d54:	fba3 2302 	umull	r2, r3, r3, r2
 8005d58:	095b      	lsrs	r3, r3, #5
 8005d5a:	005b      	lsls	r3, r3, #1
 8005d5c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005d60:	441c      	add	r4, r3
 8005d62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d66:	2200      	movs	r2, #0
 8005d68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d6c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005d70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005d74:	4642      	mov	r2, r8
 8005d76:	464b      	mov	r3, r9
 8005d78:	1891      	adds	r1, r2, r2
 8005d7a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005d7c:	415b      	adcs	r3, r3
 8005d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005d84:	4641      	mov	r1, r8
 8005d86:	1851      	adds	r1, r2, r1
 8005d88:	6339      	str	r1, [r7, #48]	@ 0x30
 8005d8a:	4649      	mov	r1, r9
 8005d8c:	414b      	adcs	r3, r1
 8005d8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d90:	f04f 0200 	mov.w	r2, #0
 8005d94:	f04f 0300 	mov.w	r3, #0
 8005d98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005d9c:	4659      	mov	r1, fp
 8005d9e:	00cb      	lsls	r3, r1, #3
 8005da0:	4651      	mov	r1, sl
 8005da2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005da6:	4651      	mov	r1, sl
 8005da8:	00ca      	lsls	r2, r1, #3
 8005daa:	4610      	mov	r0, r2
 8005dac:	4619      	mov	r1, r3
 8005dae:	4603      	mov	r3, r0
 8005db0:	4642      	mov	r2, r8
 8005db2:	189b      	adds	r3, r3, r2
 8005db4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005db8:	464b      	mov	r3, r9
 8005dba:	460a      	mov	r2, r1
 8005dbc:	eb42 0303 	adc.w	r3, r2, r3
 8005dc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005dd0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005dd4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005dd8:	460b      	mov	r3, r1
 8005dda:	18db      	adds	r3, r3, r3
 8005ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005dde:	4613      	mov	r3, r2
 8005de0:	eb42 0303 	adc.w	r3, r2, r3
 8005de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005de6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005dea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005dee:	f7fa fa3f 	bl	8000270 <__aeabi_uldivmod>
 8005df2:	4602      	mov	r2, r0
 8005df4:	460b      	mov	r3, r1
 8005df6:	4b0d      	ldr	r3, [pc, #52]	@ (8005e2c <UART_SetConfig+0x2d4>)
 8005df8:	fba3 1302 	umull	r1, r3, r3, r2
 8005dfc:	095b      	lsrs	r3, r3, #5
 8005dfe:	2164      	movs	r1, #100	@ 0x64
 8005e00:	fb01 f303 	mul.w	r3, r1, r3
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	00db      	lsls	r3, r3, #3
 8005e08:	3332      	adds	r3, #50	@ 0x32
 8005e0a:	4a08      	ldr	r2, [pc, #32]	@ (8005e2c <UART_SetConfig+0x2d4>)
 8005e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e10:	095b      	lsrs	r3, r3, #5
 8005e12:	f003 0207 	and.w	r2, r3, #7
 8005e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4422      	add	r2, r4
 8005e1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e20:	e106      	b.n	8006030 <UART_SetConfig+0x4d8>
 8005e22:	bf00      	nop
 8005e24:	40011000 	.word	0x40011000
 8005e28:	40011400 	.word	0x40011400
 8005e2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e34:	2200      	movs	r2, #0
 8005e36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005e3a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005e3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005e42:	4642      	mov	r2, r8
 8005e44:	464b      	mov	r3, r9
 8005e46:	1891      	adds	r1, r2, r2
 8005e48:	6239      	str	r1, [r7, #32]
 8005e4a:	415b      	adcs	r3, r3
 8005e4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e52:	4641      	mov	r1, r8
 8005e54:	1854      	adds	r4, r2, r1
 8005e56:	4649      	mov	r1, r9
 8005e58:	eb43 0501 	adc.w	r5, r3, r1
 8005e5c:	f04f 0200 	mov.w	r2, #0
 8005e60:	f04f 0300 	mov.w	r3, #0
 8005e64:	00eb      	lsls	r3, r5, #3
 8005e66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e6a:	00e2      	lsls	r2, r4, #3
 8005e6c:	4614      	mov	r4, r2
 8005e6e:	461d      	mov	r5, r3
 8005e70:	4643      	mov	r3, r8
 8005e72:	18e3      	adds	r3, r4, r3
 8005e74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005e78:	464b      	mov	r3, r9
 8005e7a:	eb45 0303 	adc.w	r3, r5, r3
 8005e7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e8e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005e92:	f04f 0200 	mov.w	r2, #0
 8005e96:	f04f 0300 	mov.w	r3, #0
 8005e9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005e9e:	4629      	mov	r1, r5
 8005ea0:	008b      	lsls	r3, r1, #2
 8005ea2:	4621      	mov	r1, r4
 8005ea4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ea8:	4621      	mov	r1, r4
 8005eaa:	008a      	lsls	r2, r1, #2
 8005eac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005eb0:	f7fa f9de 	bl	8000270 <__aeabi_uldivmod>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	4b60      	ldr	r3, [pc, #384]	@ (800603c <UART_SetConfig+0x4e4>)
 8005eba:	fba3 2302 	umull	r2, r3, r3, r2
 8005ebe:	095b      	lsrs	r3, r3, #5
 8005ec0:	011c      	lsls	r4, r3, #4
 8005ec2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005ecc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005ed0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005ed4:	4642      	mov	r2, r8
 8005ed6:	464b      	mov	r3, r9
 8005ed8:	1891      	adds	r1, r2, r2
 8005eda:	61b9      	str	r1, [r7, #24]
 8005edc:	415b      	adcs	r3, r3
 8005ede:	61fb      	str	r3, [r7, #28]
 8005ee0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ee4:	4641      	mov	r1, r8
 8005ee6:	1851      	adds	r1, r2, r1
 8005ee8:	6139      	str	r1, [r7, #16]
 8005eea:	4649      	mov	r1, r9
 8005eec:	414b      	adcs	r3, r1
 8005eee:	617b      	str	r3, [r7, #20]
 8005ef0:	f04f 0200 	mov.w	r2, #0
 8005ef4:	f04f 0300 	mov.w	r3, #0
 8005ef8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005efc:	4659      	mov	r1, fp
 8005efe:	00cb      	lsls	r3, r1, #3
 8005f00:	4651      	mov	r1, sl
 8005f02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f06:	4651      	mov	r1, sl
 8005f08:	00ca      	lsls	r2, r1, #3
 8005f0a:	4610      	mov	r0, r2
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	4603      	mov	r3, r0
 8005f10:	4642      	mov	r2, r8
 8005f12:	189b      	adds	r3, r3, r2
 8005f14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f18:	464b      	mov	r3, r9
 8005f1a:	460a      	mov	r2, r1
 8005f1c:	eb42 0303 	adc.w	r3, r2, r3
 8005f20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f2e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005f30:	f04f 0200 	mov.w	r2, #0
 8005f34:	f04f 0300 	mov.w	r3, #0
 8005f38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005f3c:	4649      	mov	r1, r9
 8005f3e:	008b      	lsls	r3, r1, #2
 8005f40:	4641      	mov	r1, r8
 8005f42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f46:	4641      	mov	r1, r8
 8005f48:	008a      	lsls	r2, r1, #2
 8005f4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005f4e:	f7fa f98f 	bl	8000270 <__aeabi_uldivmod>
 8005f52:	4602      	mov	r2, r0
 8005f54:	460b      	mov	r3, r1
 8005f56:	4611      	mov	r1, r2
 8005f58:	4b38      	ldr	r3, [pc, #224]	@ (800603c <UART_SetConfig+0x4e4>)
 8005f5a:	fba3 2301 	umull	r2, r3, r3, r1
 8005f5e:	095b      	lsrs	r3, r3, #5
 8005f60:	2264      	movs	r2, #100	@ 0x64
 8005f62:	fb02 f303 	mul.w	r3, r2, r3
 8005f66:	1acb      	subs	r3, r1, r3
 8005f68:	011b      	lsls	r3, r3, #4
 8005f6a:	3332      	adds	r3, #50	@ 0x32
 8005f6c:	4a33      	ldr	r2, [pc, #204]	@ (800603c <UART_SetConfig+0x4e4>)
 8005f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f72:	095b      	lsrs	r3, r3, #5
 8005f74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f78:	441c      	add	r4, r3
 8005f7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f7e:	2200      	movs	r2, #0
 8005f80:	673b      	str	r3, [r7, #112]	@ 0x70
 8005f82:	677a      	str	r2, [r7, #116]	@ 0x74
 8005f84:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005f88:	4642      	mov	r2, r8
 8005f8a:	464b      	mov	r3, r9
 8005f8c:	1891      	adds	r1, r2, r2
 8005f8e:	60b9      	str	r1, [r7, #8]
 8005f90:	415b      	adcs	r3, r3
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f98:	4641      	mov	r1, r8
 8005f9a:	1851      	adds	r1, r2, r1
 8005f9c:	6039      	str	r1, [r7, #0]
 8005f9e:	4649      	mov	r1, r9
 8005fa0:	414b      	adcs	r3, r1
 8005fa2:	607b      	str	r3, [r7, #4]
 8005fa4:	f04f 0200 	mov.w	r2, #0
 8005fa8:	f04f 0300 	mov.w	r3, #0
 8005fac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005fb0:	4659      	mov	r1, fp
 8005fb2:	00cb      	lsls	r3, r1, #3
 8005fb4:	4651      	mov	r1, sl
 8005fb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fba:	4651      	mov	r1, sl
 8005fbc:	00ca      	lsls	r2, r1, #3
 8005fbe:	4610      	mov	r0, r2
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	4642      	mov	r2, r8
 8005fc6:	189b      	adds	r3, r3, r2
 8005fc8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005fca:	464b      	mov	r3, r9
 8005fcc:	460a      	mov	r2, r1
 8005fce:	eb42 0303 	adc.w	r3, r2, r3
 8005fd2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	663b      	str	r3, [r7, #96]	@ 0x60
 8005fde:	667a      	str	r2, [r7, #100]	@ 0x64
 8005fe0:	f04f 0200 	mov.w	r2, #0
 8005fe4:	f04f 0300 	mov.w	r3, #0
 8005fe8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005fec:	4649      	mov	r1, r9
 8005fee:	008b      	lsls	r3, r1, #2
 8005ff0:	4641      	mov	r1, r8
 8005ff2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ff6:	4641      	mov	r1, r8
 8005ff8:	008a      	lsls	r2, r1, #2
 8005ffa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005ffe:	f7fa f937 	bl	8000270 <__aeabi_uldivmod>
 8006002:	4602      	mov	r2, r0
 8006004:	460b      	mov	r3, r1
 8006006:	4b0d      	ldr	r3, [pc, #52]	@ (800603c <UART_SetConfig+0x4e4>)
 8006008:	fba3 1302 	umull	r1, r3, r3, r2
 800600c:	095b      	lsrs	r3, r3, #5
 800600e:	2164      	movs	r1, #100	@ 0x64
 8006010:	fb01 f303 	mul.w	r3, r1, r3
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	011b      	lsls	r3, r3, #4
 8006018:	3332      	adds	r3, #50	@ 0x32
 800601a:	4a08      	ldr	r2, [pc, #32]	@ (800603c <UART_SetConfig+0x4e4>)
 800601c:	fba2 2303 	umull	r2, r3, r2, r3
 8006020:	095b      	lsrs	r3, r3, #5
 8006022:	f003 020f 	and.w	r2, r3, #15
 8006026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4422      	add	r2, r4
 800602e:	609a      	str	r2, [r3, #8]
}
 8006030:	bf00      	nop
 8006032:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006036:	46bd      	mov	sp, r7
 8006038:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800603c:	51eb851f 	.word	0x51eb851f

08006040 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006040:	b084      	sub	sp, #16
 8006042:	b580      	push	{r7, lr}
 8006044:	b084      	sub	sp, #16
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
 800604a:	f107 001c 	add.w	r0, r7, #28
 800604e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006052:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006056:	2b01      	cmp	r3, #1
 8006058:	d123      	bne.n	80060a2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800605e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800606e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006082:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006086:	2b01      	cmp	r3, #1
 8006088:	d105      	bne.n	8006096 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f9dc 	bl	8006454 <USB_CoreReset>
 800609c:	4603      	mov	r3, r0
 800609e:	73fb      	strb	r3, [r7, #15]
 80060a0:	e01b      	b.n	80060da <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 f9d0 	bl	8006454 <USB_CoreReset>
 80060b4:	4603      	mov	r3, r0
 80060b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80060b8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d106      	bne.n	80060ce <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060c4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	639a      	str	r2, [r3, #56]	@ 0x38
 80060cc:	e005      	b.n	80060da <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060d2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80060da:	7fbb      	ldrb	r3, [r7, #30]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d10b      	bne.n	80060f8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	f043 0206 	orr.w	r2, r3, #6
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f043 0220 	orr.w	r2, r3, #32
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80060f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006104:	b004      	add	sp, #16
 8006106:	4770      	bx	lr

08006108 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f043 0201 	orr.w	r2, r3, #1
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800612a:	b480      	push	{r7}
 800612c:	b083      	sub	sp, #12
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f023 0201 	bic.w	r2, r3, #1
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	460b      	mov	r3, r1
 8006156:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006158:	2300      	movs	r3, #0
 800615a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006168:	78fb      	ldrb	r3, [r7, #3]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d115      	bne.n	800619a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800617a:	200a      	movs	r0, #10
 800617c:	f7fb f836 	bl	80011ec <HAL_Delay>
      ms += 10U;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	330a      	adds	r3, #10
 8006184:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 f956 	bl	8006438 <USB_GetMode>
 800618c:	4603      	mov	r3, r0
 800618e:	2b01      	cmp	r3, #1
 8006190:	d01e      	beq.n	80061d0 <USB_SetCurrentMode+0x84>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2bc7      	cmp	r3, #199	@ 0xc7
 8006196:	d9f0      	bls.n	800617a <USB_SetCurrentMode+0x2e>
 8006198:	e01a      	b.n	80061d0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800619a:	78fb      	ldrb	r3, [r7, #3]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d115      	bne.n	80061cc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80061ac:	200a      	movs	r0, #10
 80061ae:	f7fb f81d 	bl	80011ec <HAL_Delay>
      ms += 10U;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	330a      	adds	r3, #10
 80061b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 f93d 	bl	8006438 <USB_GetMode>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d005      	beq.n	80061d0 <USB_SetCurrentMode+0x84>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2bc7      	cmp	r3, #199	@ 0xc7
 80061c8:	d9f0      	bls.n	80061ac <USB_SetCurrentMode+0x60>
 80061ca:	e001      	b.n	80061d0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e005      	b.n	80061dc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2bc8      	cmp	r3, #200	@ 0xc8
 80061d4:	d101      	bne.n	80061da <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e000      	b.n	80061dc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80061ee:	2300      	movs	r3, #0
 80061f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	3301      	adds	r3, #1
 80061f6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061fe:	d901      	bls.n	8006204 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	e01b      	b.n	800623c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	2b00      	cmp	r3, #0
 800620a:	daf2      	bge.n	80061f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800620c:	2300      	movs	r3, #0
 800620e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	019b      	lsls	r3, r3, #6
 8006214:	f043 0220 	orr.w	r2, r3, #32
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	3301      	adds	r3, #1
 8006220:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006228:	d901      	bls.n	800622e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e006      	b.n	800623c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	f003 0320 	and.w	r3, r3, #32
 8006236:	2b20      	cmp	r3, #32
 8006238:	d0f0      	beq.n	800621c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3714      	adds	r7, #20
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006250:	2300      	movs	r3, #0
 8006252:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	3301      	adds	r3, #1
 8006258:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006260:	d901      	bls.n	8006266 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006262:	2303      	movs	r3, #3
 8006264:	e018      	b.n	8006298 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	2b00      	cmp	r3, #0
 800626c:	daf2      	bge.n	8006254 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800626e:	2300      	movs	r3, #0
 8006270:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2210      	movs	r2, #16
 8006276:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	3301      	adds	r3, #1
 800627c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006284:	d901      	bls.n	800628a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e006      	b.n	8006298 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	f003 0310 	and.w	r3, r3, #16
 8006292:	2b10      	cmp	r3, #16
 8006294:	d0f0      	beq.n	8006278 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3714      	adds	r7, #20
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b089      	sub	sp, #36	@ 0x24
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	4611      	mov	r1, r2
 80062b0:	461a      	mov	r2, r3
 80062b2:	460b      	mov	r3, r1
 80062b4:	71fb      	strb	r3, [r7, #7]
 80062b6:	4613      	mov	r3, r2
 80062b8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80062c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d123      	bne.n	8006312 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80062ca:	88bb      	ldrh	r3, [r7, #4]
 80062cc:	3303      	adds	r3, #3
 80062ce:	089b      	lsrs	r3, r3, #2
 80062d0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80062d2:	2300      	movs	r3, #0
 80062d4:	61bb      	str	r3, [r7, #24]
 80062d6:	e018      	b.n	800630a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80062d8:	79fb      	ldrb	r3, [r7, #7]
 80062da:	031a      	lsls	r2, r3, #12
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	4413      	add	r3, r2
 80062e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062e4:	461a      	mov	r2, r3
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	6013      	str	r3, [r2, #0]
      pSrc++;
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	3301      	adds	r3, #1
 80062f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	3301      	adds	r3, #1
 80062f6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	3301      	adds	r3, #1
 80062fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	3301      	adds	r3, #1
 8006302:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	3301      	adds	r3, #1
 8006308:	61bb      	str	r3, [r7, #24]
 800630a:	69ba      	ldr	r2, [r7, #24]
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	429a      	cmp	r2, r3
 8006310:	d3e2      	bcc.n	80062d8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3724      	adds	r7, #36	@ 0x24
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006320:	b480      	push	{r7}
 8006322:	b08b      	sub	sp, #44	@ 0x2c
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	4613      	mov	r3, r2
 800632c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006336:	88fb      	ldrh	r3, [r7, #6]
 8006338:	089b      	lsrs	r3, r3, #2
 800633a:	b29b      	uxth	r3, r3
 800633c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800633e:	88fb      	ldrh	r3, [r7, #6]
 8006340:	f003 0303 	and.w	r3, r3, #3
 8006344:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006346:	2300      	movs	r3, #0
 8006348:	623b      	str	r3, [r7, #32]
 800634a:	e014      	b.n	8006376 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006356:	601a      	str	r2, [r3, #0]
    pDest++;
 8006358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635a:	3301      	adds	r3, #1
 800635c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800635e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006360:	3301      	adds	r3, #1
 8006362:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006366:	3301      	adds	r3, #1
 8006368:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800636a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636c:	3301      	adds	r3, #1
 800636e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006370:	6a3b      	ldr	r3, [r7, #32]
 8006372:	3301      	adds	r3, #1
 8006374:	623b      	str	r3, [r7, #32]
 8006376:	6a3a      	ldr	r2, [r7, #32]
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	429a      	cmp	r2, r3
 800637c:	d3e6      	bcc.n	800634c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800637e:	8bfb      	ldrh	r3, [r7, #30]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d01e      	beq.n	80063c2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006384:	2300      	movs	r3, #0
 8006386:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800638e:	461a      	mov	r2, r3
 8006390:	f107 0310 	add.w	r3, r7, #16
 8006394:	6812      	ldr	r2, [r2, #0]
 8006396:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	6a3b      	ldr	r3, [r7, #32]
 800639c:	b2db      	uxtb	r3, r3
 800639e:	00db      	lsls	r3, r3, #3
 80063a0:	fa22 f303 	lsr.w	r3, r2, r3
 80063a4:	b2da      	uxtb	r2, r3
 80063a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a8:	701a      	strb	r2, [r3, #0]
      i++;
 80063aa:	6a3b      	ldr	r3, [r7, #32]
 80063ac:	3301      	adds	r3, #1
 80063ae:	623b      	str	r3, [r7, #32]
      pDest++;
 80063b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b2:	3301      	adds	r3, #1
 80063b4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80063b6:	8bfb      	ldrh	r3, [r7, #30]
 80063b8:	3b01      	subs	r3, #1
 80063ba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80063bc:	8bfb      	ldrh	r3, [r7, #30]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1ea      	bne.n	8006398 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80063c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	372c      	adds	r7, #44	@ 0x2c
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	695b      	ldr	r3, [r3, #20]
 80063dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	4013      	ands	r3, r2
 80063e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80063e8:	68fb      	ldr	r3, [r7, #12]
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b085      	sub	sp, #20
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
 80063fe:	460b      	mov	r3, r1
 8006400:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006406:	78fb      	ldrb	r3, [r7, #3]
 8006408:	015a      	lsls	r2, r3, #5
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	4413      	add	r3, r2
 800640e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006416:	78fb      	ldrb	r3, [r7, #3]
 8006418:	015a      	lsls	r2, r3, #5
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	4413      	add	r3, r2
 800641e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	4013      	ands	r3, r2
 8006428:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800642a:	68bb      	ldr	r3, [r7, #8]
}
 800642c:	4618      	mov	r0, r3
 800642e:	3714      	adds	r7, #20
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	695b      	ldr	r3, [r3, #20]
 8006444:	f003 0301 	and.w	r3, r3, #1
}
 8006448:	4618      	mov	r0, r3
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800645c:	2300      	movs	r3, #0
 800645e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	3301      	adds	r3, #1
 8006464:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800646c:	d901      	bls.n	8006472 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e022      	b.n	80064b8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	2b00      	cmp	r3, #0
 8006478:	daf2      	bge.n	8006460 <USB_CoreReset+0xc>

  count = 10U;
 800647a:	230a      	movs	r3, #10
 800647c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800647e:	e002      	b.n	8006486 <USB_CoreReset+0x32>
  {
    count--;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	3b01      	subs	r3, #1
 8006484:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1f9      	bne.n	8006480 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	f043 0201 	orr.w	r2, r3, #1
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	3301      	adds	r3, #1
 800649c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064a4:	d901      	bls.n	80064aa <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e006      	b.n	80064b8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	f003 0301 	and.w	r3, r3, #1
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d0f0      	beq.n	8006498 <USB_CoreReset+0x44>

  return HAL_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3714      	adds	r7, #20
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064c4:	b084      	sub	sp, #16
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b086      	sub	sp, #24
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
 80064ce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80064d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80064d6:	2300      	movs	r3, #0
 80064d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80064e4:	461a      	mov	r2, r3
 80064e6:	2300      	movs	r3, #0
 80064e8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064fa:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006506:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006516:	2b00      	cmp	r3, #0
 8006518:	d119      	bne.n	800654e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800651a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800651e:	2b01      	cmp	r3, #1
 8006520:	d10a      	bne.n	8006538 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006530:	f043 0304 	orr.w	r3, r3, #4
 8006534:	6013      	str	r3, [r2, #0]
 8006536:	e014      	b.n	8006562 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006546:	f023 0304 	bic.w	r3, r3, #4
 800654a:	6013      	str	r3, [r2, #0]
 800654c:	e009      	b.n	8006562 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800655c:	f023 0304 	bic.w	r3, r3, #4
 8006560:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006562:	2110      	movs	r1, #16
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f7ff fe3d 	bl	80061e4 <USB_FlushTxFifo>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d001      	beq.n	8006574 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f7ff fe67 	bl	8006248 <USB_FlushRxFifo>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d001      	beq.n	8006584 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006584:	2300      	movs	r3, #0
 8006586:	613b      	str	r3, [r7, #16]
 8006588:	e015      	b.n	80065b6 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	015a      	lsls	r2, r3, #5
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	4413      	add	r3, r2
 8006592:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006596:	461a      	mov	r2, r3
 8006598:	f04f 33ff 	mov.w	r3, #4294967295
 800659c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	015a      	lsls	r2, r3, #5
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	4413      	add	r3, r2
 80065a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065aa:	461a      	mov	r2, r3
 80065ac:	2300      	movs	r3, #0
 80065ae:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	3301      	adds	r3, #1
 80065b4:	613b      	str	r3, [r7, #16]
 80065b6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80065ba:	461a      	mov	r2, r3
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	4293      	cmp	r3, r2
 80065c0:	d3e3      	bcc.n	800658a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f04f 32ff 	mov.w	r2, #4294967295
 80065ce:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a18      	ldr	r2, [pc, #96]	@ (8006634 <USB_HostInit+0x170>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d10b      	bne.n	80065f0 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065de:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a15      	ldr	r2, [pc, #84]	@ (8006638 <USB_HostInit+0x174>)
 80065e4:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a14      	ldr	r2, [pc, #80]	@ (800663c <USB_HostInit+0x178>)
 80065ea:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80065ee:	e009      	b.n	8006604 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2280      	movs	r2, #128	@ 0x80
 80065f4:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a11      	ldr	r2, [pc, #68]	@ (8006640 <USB_HostInit+0x17c>)
 80065fa:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a11      	ldr	r2, [pc, #68]	@ (8006644 <USB_HostInit+0x180>)
 8006600:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006604:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006608:	2b00      	cmp	r3, #0
 800660a:	d105      	bne.n	8006618 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	f043 0210 	orr.w	r2, r3, #16
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	699a      	ldr	r2, [r3, #24]
 800661c:	4b0a      	ldr	r3, [pc, #40]	@ (8006648 <USB_HostInit+0x184>)
 800661e:	4313      	orrs	r3, r2
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006624:	7dfb      	ldrb	r3, [r7, #23]
}
 8006626:	4618      	mov	r0, r3
 8006628:	3718      	adds	r7, #24
 800662a:	46bd      	mov	sp, r7
 800662c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006630:	b004      	add	sp, #16
 8006632:	4770      	bx	lr
 8006634:	40040000 	.word	0x40040000
 8006638:	01000200 	.word	0x01000200
 800663c:	00e00300 	.word	0x00e00300
 8006640:	00600080 	.word	0x00600080
 8006644:	004000e0 	.word	0x004000e0
 8006648:	a3200008 	.word	0xa3200008

0800664c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	460b      	mov	r3, r1
 8006656:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800666a:	f023 0303 	bic.w	r3, r3, #3
 800666e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	78fb      	ldrb	r3, [r7, #3]
 800667a:	f003 0303 	and.w	r3, r3, #3
 800667e:	68f9      	ldr	r1, [r7, #12]
 8006680:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006684:	4313      	orrs	r3, r2
 8006686:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006688:	78fb      	ldrb	r3, [r7, #3]
 800668a:	2b01      	cmp	r3, #1
 800668c:	d107      	bne.n	800669e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006694:	461a      	mov	r2, r3
 8006696:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800669a:	6053      	str	r3, [r2, #4]
 800669c:	e00c      	b.n	80066b8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800669e:	78fb      	ldrb	r3, [r7, #3]
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d107      	bne.n	80066b4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80066aa:	461a      	mov	r2, r3
 80066ac:	f241 7370 	movw	r3, #6000	@ 0x1770
 80066b0:	6053      	str	r3, [r2, #4]
 80066b2:	e001      	b.n	80066b8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e000      	b.n	80066ba <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3714      	adds	r7, #20
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr

080066c6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b084      	sub	sp, #16
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80066d2:	2300      	movs	r3, #0
 80066d4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80066e6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80066f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066f4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80066f6:	2064      	movs	r0, #100	@ 0x64
 80066f8:	f7fa fd78 	bl	80011ec <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006704:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006708:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800670a:	200a      	movs	r0, #10
 800670c:	f7fa fd6e 	bl	80011ec <HAL_Delay>

  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800671a:	b480      	push	{r7}
 800671c:	b085      	sub	sp, #20
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
 8006722:	460b      	mov	r3, r1
 8006724:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800672a:	2300      	movs	r3, #0
 800672c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800673e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d109      	bne.n	800675e <USB_DriveVbus+0x44>
 800674a:	78fb      	ldrb	r3, [r7, #3]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d106      	bne.n	800675e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006758:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800675c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006764:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006768:	d109      	bne.n	800677e <USB_DriveVbus+0x64>
 800676a:	78fb      	ldrb	r3, [r7, #3]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d106      	bne.n	800677e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006778:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800677c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3714      	adds	r7, #20
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006798:	2300      	movs	r3, #0
 800679a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	0c5b      	lsrs	r3, r3, #17
 80067aa:	f003 0303 	and.w	r3, r3, #3
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3714      	adds	r7, #20
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr

080067ba <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80067ba:	b480      	push	{r7}
 80067bc:	b085      	sub	sp, #20
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	b29b      	uxth	r3, r3
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b088      	sub	sp, #32
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	4608      	mov	r0, r1
 80067e6:	4611      	mov	r1, r2
 80067e8:	461a      	mov	r2, r3
 80067ea:	4603      	mov	r3, r0
 80067ec:	70fb      	strb	r3, [r7, #3]
 80067ee:	460b      	mov	r3, r1
 80067f0:	70bb      	strb	r3, [r7, #2]
 80067f2:	4613      	mov	r3, r2
 80067f4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80067f6:	2300      	movs	r3, #0
 80067f8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80067fe:	78fb      	ldrb	r3, [r7, #3]
 8006800:	015a      	lsls	r2, r3, #5
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	4413      	add	r3, r2
 8006806:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800680a:	461a      	mov	r2, r3
 800680c:	f04f 33ff 	mov.w	r3, #4294967295
 8006810:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006812:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006816:	2b03      	cmp	r3, #3
 8006818:	d87c      	bhi.n	8006914 <USB_HC_Init+0x138>
 800681a:	a201      	add	r2, pc, #4	@ (adr r2, 8006820 <USB_HC_Init+0x44>)
 800681c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006820:	08006831 	.word	0x08006831
 8006824:	080068d7 	.word	0x080068d7
 8006828:	08006831 	.word	0x08006831
 800682c:	08006899 	.word	0x08006899
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006830:	78fb      	ldrb	r3, [r7, #3]
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	4413      	add	r3, r2
 8006838:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800683c:	461a      	mov	r2, r3
 800683e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8006842:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006844:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006848:	2b00      	cmp	r3, #0
 800684a:	da10      	bge.n	800686e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800684c:	78fb      	ldrb	r3, [r7, #3]
 800684e:	015a      	lsls	r2, r3, #5
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	4413      	add	r3, r2
 8006854:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	78fa      	ldrb	r2, [r7, #3]
 800685c:	0151      	lsls	r1, r2, #5
 800685e:	693a      	ldr	r2, [r7, #16]
 8006860:	440a      	add	r2, r1
 8006862:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006866:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800686a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800686c:	e055      	b.n	800691a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a6f      	ldr	r2, [pc, #444]	@ (8006a30 <USB_HC_Init+0x254>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d151      	bne.n	800691a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006876:	78fb      	ldrb	r3, [r7, #3]
 8006878:	015a      	lsls	r2, r3, #5
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	4413      	add	r3, r2
 800687e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	78fa      	ldrb	r2, [r7, #3]
 8006886:	0151      	lsls	r1, r2, #5
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	440a      	add	r2, r1
 800688c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006890:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006894:	60d3      	str	r3, [r2, #12]
      break;
 8006896:	e040      	b.n	800691a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006898:	78fb      	ldrb	r3, [r7, #3]
 800689a:	015a      	lsls	r2, r3, #5
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	4413      	add	r3, r2
 80068a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068a4:	461a      	mov	r2, r3
 80068a6:	f240 639d 	movw	r3, #1693	@ 0x69d
 80068aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80068ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	da34      	bge.n	800691e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80068b4:	78fb      	ldrb	r3, [r7, #3]
 80068b6:	015a      	lsls	r2, r3, #5
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	4413      	add	r3, r2
 80068bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	78fa      	ldrb	r2, [r7, #3]
 80068c4:	0151      	lsls	r1, r2, #5
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	440a      	add	r2, r1
 80068ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068d2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80068d4:	e023      	b.n	800691e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80068d6:	78fb      	ldrb	r3, [r7, #3]
 80068d8:	015a      	lsls	r2, r3, #5
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	4413      	add	r3, r2
 80068de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068e2:	461a      	mov	r2, r3
 80068e4:	f240 2325 	movw	r3, #549	@ 0x225
 80068e8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80068ea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	da17      	bge.n	8006922 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80068f2:	78fb      	ldrb	r3, [r7, #3]
 80068f4:	015a      	lsls	r2, r3, #5
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	4413      	add	r3, r2
 80068fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	78fa      	ldrb	r2, [r7, #3]
 8006902:	0151      	lsls	r1, r2, #5
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	440a      	add	r2, r1
 8006908:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800690c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006910:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006912:	e006      	b.n	8006922 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	77fb      	strb	r3, [r7, #31]
      break;
 8006918:	e004      	b.n	8006924 <USB_HC_Init+0x148>
      break;
 800691a:	bf00      	nop
 800691c:	e002      	b.n	8006924 <USB_HC_Init+0x148>
      break;
 800691e:	bf00      	nop
 8006920:	e000      	b.n	8006924 <USB_HC_Init+0x148>
      break;
 8006922:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006924:	78fb      	ldrb	r3, [r7, #3]
 8006926:	015a      	lsls	r2, r3, #5
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	4413      	add	r3, r2
 800692c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006930:	461a      	mov	r2, r3
 8006932:	2300      	movs	r3, #0
 8006934:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006936:	78fb      	ldrb	r3, [r7, #3]
 8006938:	015a      	lsls	r2, r3, #5
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	4413      	add	r3, r2
 800693e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	78fa      	ldrb	r2, [r7, #3]
 8006946:	0151      	lsls	r1, r2, #5
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	440a      	add	r2, r1
 800694c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006950:	f043 0302 	orr.w	r3, r3, #2
 8006954:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800695c:	699a      	ldr	r2, [r3, #24]
 800695e:	78fb      	ldrb	r3, [r7, #3]
 8006960:	f003 030f 	and.w	r3, r3, #15
 8006964:	2101      	movs	r1, #1
 8006966:	fa01 f303 	lsl.w	r3, r1, r3
 800696a:	6939      	ldr	r1, [r7, #16]
 800696c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006970:	4313      	orrs	r3, r2
 8006972:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006980:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006984:	2b00      	cmp	r3, #0
 8006986:	da03      	bge.n	8006990 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006988:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800698c:	61bb      	str	r3, [r7, #24]
 800698e:	e001      	b.n	8006994 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8006990:	2300      	movs	r3, #0
 8006992:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f7ff fef9 	bl	800678c <USB_GetHostSpeed>
 800699a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800699c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d106      	bne.n	80069b2 <USB_HC_Init+0x1d6>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d003      	beq.n	80069b2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80069aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80069ae:	617b      	str	r3, [r7, #20]
 80069b0:	e001      	b.n	80069b6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80069b2:	2300      	movs	r3, #0
 80069b4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80069b6:	787b      	ldrb	r3, [r7, #1]
 80069b8:	059b      	lsls	r3, r3, #22
 80069ba:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80069be:	78bb      	ldrb	r3, [r7, #2]
 80069c0:	02db      	lsls	r3, r3, #11
 80069c2:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80069c6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80069c8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80069cc:	049b      	lsls	r3, r3, #18
 80069ce:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80069d2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80069d4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80069d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80069da:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	431a      	orrs	r2, r3
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80069e4:	78fa      	ldrb	r2, [r7, #3]
 80069e6:	0151      	lsls	r1, r2, #5
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	440a      	add	r2, r1
 80069ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80069f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80069f4:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80069f6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80069fa:	2b03      	cmp	r3, #3
 80069fc:	d003      	beq.n	8006a06 <USB_HC_Init+0x22a>
 80069fe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d10f      	bne.n	8006a26 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006a06:	78fb      	ldrb	r3, [r7, #3]
 8006a08:	015a      	lsls	r2, r3, #5
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	78fa      	ldrb	r2, [r7, #3]
 8006a16:	0151      	lsls	r1, r2, #5
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	440a      	add	r2, r1
 8006a1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a20:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006a24:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006a26:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3720      	adds	r7, #32
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	40040000 	.word	0x40040000

08006a34 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b08c      	sub	sp, #48	@ 0x30
 8006a38:	af02      	add	r7, sp, #8
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	785b      	ldrb	r3, [r3, #1]
 8006a4a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006a4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006a50:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	4a5d      	ldr	r2, [pc, #372]	@ (8006bcc <USB_HC_StartXfer+0x198>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d12f      	bne.n	8006aba <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8006a5a:	79fb      	ldrb	r3, [r7, #7]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d11c      	bne.n	8006a9a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	7c9b      	ldrb	r3, [r3, #18]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d003      	beq.n	8006a70 <USB_HC_StartXfer+0x3c>
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	7c9b      	ldrb	r3, [r3, #18]
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d124      	bne.n	8006aba <USB_HC_StartXfer+0x86>
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	799b      	ldrb	r3, [r3, #6]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d120      	bne.n	8006aba <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	015a      	lsls	r2, r3, #5
 8006a7c:	6a3b      	ldr	r3, [r7, #32]
 8006a7e:	4413      	add	r3, r2
 8006a80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	69fa      	ldr	r2, [r7, #28]
 8006a88:	0151      	lsls	r1, r2, #5
 8006a8a:	6a3a      	ldr	r2, [r7, #32]
 8006a8c:	440a      	add	r2, r1
 8006a8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a96:	60d3      	str	r3, [r2, #12]
 8006a98:	e00f      	b.n	8006aba <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	791b      	ldrb	r3, [r3, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d10b      	bne.n	8006aba <USB_HC_StartXfer+0x86>
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	795b      	ldrb	r3, [r3, #5]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d107      	bne.n	8006aba <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	785b      	ldrb	r3, [r3, #1]
 8006aae:	4619      	mov	r1, r3
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f000 fb6b 	bl	800718c <USB_DoPing>
        return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	e232      	b.n	8006f20 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	799b      	ldrb	r3, [r3, #6]
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d158      	bne.n	8006b74 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	78db      	ldrb	r3, [r3, #3]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d007      	beq.n	8006ade <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006ace:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006ad0:	68ba      	ldr	r2, [r7, #8]
 8006ad2:	8a92      	ldrh	r2, [r2, #20]
 8006ad4:	fb03 f202 	mul.w	r2, r3, r2
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	61da      	str	r2, [r3, #28]
 8006adc:	e07c      	b.n	8006bd8 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	7c9b      	ldrb	r3, [r3, #18]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d130      	bne.n	8006b48 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	6a1b      	ldr	r3, [r3, #32]
 8006aea:	2bbc      	cmp	r3, #188	@ 0xbc
 8006aec:	d918      	bls.n	8006b20 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	8a9b      	ldrh	r3, [r3, #20]
 8006af2:	461a      	mov	r2, r3
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	69da      	ldr	r2, [r3, #28]
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d003      	beq.n	8006b10 <USB_HC_StartXfer+0xdc>
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d103      	bne.n	8006b18 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	2202      	movs	r2, #2
 8006b14:	60da      	str	r2, [r3, #12]
 8006b16:	e05f      	b.n	8006bd8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	60da      	str	r2, [r3, #12]
 8006b1e:	e05b      	b.n	8006bd8 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	6a1a      	ldr	r2, [r3, #32]
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d007      	beq.n	8006b40 <USB_HC_StartXfer+0x10c>
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d003      	beq.n	8006b40 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	2204      	movs	r2, #4
 8006b3c:	60da      	str	r2, [r3, #12]
 8006b3e:	e04b      	b.n	8006bd8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	2203      	movs	r2, #3
 8006b44:	60da      	str	r2, [r3, #12]
 8006b46:	e047      	b.n	8006bd8 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006b48:	79fb      	ldrb	r3, [r7, #7]
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d10d      	bne.n	8006b6a <USB_HC_StartXfer+0x136>
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	6a1b      	ldr	r3, [r3, #32]
 8006b52:	68ba      	ldr	r2, [r7, #8]
 8006b54:	8a92      	ldrh	r2, [r2, #20]
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d907      	bls.n	8006b6a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006b5a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	8a92      	ldrh	r2, [r2, #20]
 8006b60:	fb03 f202 	mul.w	r2, r3, r2
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	61da      	str	r2, [r3, #28]
 8006b68:	e036      	b.n	8006bd8 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	6a1a      	ldr	r2, [r3, #32]
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	61da      	str	r2, [r3, #28]
 8006b72:	e031      	b.n	8006bd8 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	6a1b      	ldr	r3, [r3, #32]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d018      	beq.n	8006bae <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	6a1b      	ldr	r3, [r3, #32]
 8006b80:	68ba      	ldr	r2, [r7, #8]
 8006b82:	8a92      	ldrh	r2, [r2, #20]
 8006b84:	4413      	add	r3, r2
 8006b86:	3b01      	subs	r3, #1
 8006b88:	68ba      	ldr	r2, [r7, #8]
 8006b8a:	8a92      	ldrh	r2, [r2, #20]
 8006b8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b90:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8006b92:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006b94:	8b7b      	ldrh	r3, [r7, #26]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d90b      	bls.n	8006bb2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8006b9a:	8b7b      	ldrh	r3, [r7, #26]
 8006b9c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006b9e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006ba0:	68ba      	ldr	r2, [r7, #8]
 8006ba2:	8a92      	ldrh	r2, [r2, #20]
 8006ba4:	fb03 f202 	mul.w	r2, r3, r2
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	61da      	str	r2, [r3, #28]
 8006bac:	e001      	b.n	8006bb2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	78db      	ldrb	r3, [r3, #3]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00a      	beq.n	8006bd0 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006bba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	8a92      	ldrh	r2, [r2, #20]
 8006bc0:	fb03 f202 	mul.w	r2, r3, r2
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	61da      	str	r2, [r3, #28]
 8006bc8:	e006      	b.n	8006bd8 <USB_HC_StartXfer+0x1a4>
 8006bca:	bf00      	nop
 8006bcc:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	6a1a      	ldr	r2, [r3, #32]
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	69db      	ldr	r3, [r3, #28]
 8006bdc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006be0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006be2:	04d9      	lsls	r1, r3, #19
 8006be4:	4ba3      	ldr	r3, [pc, #652]	@ (8006e74 <USB_HC_StartXfer+0x440>)
 8006be6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006be8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	7d9b      	ldrb	r3, [r3, #22]
 8006bee:	075b      	lsls	r3, r3, #29
 8006bf0:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006bf4:	69f9      	ldr	r1, [r7, #28]
 8006bf6:	0148      	lsls	r0, r1, #5
 8006bf8:	6a39      	ldr	r1, [r7, #32]
 8006bfa:	4401      	add	r1, r0
 8006bfc:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006c00:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006c02:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006c04:	79fb      	ldrb	r3, [r7, #7]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d009      	beq.n	8006c1e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	6999      	ldr	r1, [r3, #24]
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	015a      	lsls	r2, r3, #5
 8006c12:	6a3b      	ldr	r3, [r7, #32]
 8006c14:	4413      	add	r3, r2
 8006c16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c1a:	460a      	mov	r2, r1
 8006c1c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006c1e:	6a3b      	ldr	r3, [r7, #32]
 8006c20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	f003 0301 	and.w	r3, r3, #1
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	bf0c      	ite	eq
 8006c2e:	2301      	moveq	r3, #1
 8006c30:	2300      	movne	r3, #0
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	015a      	lsls	r2, r3, #5
 8006c3a:	6a3b      	ldr	r3, [r7, #32]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	69fa      	ldr	r2, [r7, #28]
 8006c46:	0151      	lsls	r1, r2, #5
 8006c48:	6a3a      	ldr	r2, [r7, #32]
 8006c4a:	440a      	add	r2, r1
 8006c4c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c50:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006c54:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	015a      	lsls	r2, r3, #5
 8006c5a:	6a3b      	ldr	r3, [r7, #32]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	7e7b      	ldrb	r3, [r7, #25]
 8006c66:	075b      	lsls	r3, r3, #29
 8006c68:	69f9      	ldr	r1, [r7, #28]
 8006c6a:	0148      	lsls	r0, r1, #5
 8006c6c:	6a39      	ldr	r1, [r7, #32]
 8006c6e:	4401      	add	r1, r0
 8006c70:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006c74:	4313      	orrs	r3, r2
 8006c76:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	799b      	ldrb	r3, [r3, #6]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	f040 80c3 	bne.w	8006e08 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	7c5b      	ldrb	r3, [r3, #17]
 8006c86:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	69fa      	ldr	r2, [r7, #28]
 8006c90:	0151      	lsls	r1, r2, #5
 8006c92:	6a3a      	ldr	r2, [r7, #32]
 8006c94:	440a      	add	r2, r1
 8006c96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006c9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006c9e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	015a      	lsls	r2, r3, #5
 8006ca4:	6a3b      	ldr	r3, [r7, #32]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	69fa      	ldr	r2, [r7, #28]
 8006cb0:	0151      	lsls	r1, r2, #5
 8006cb2:	6a3a      	ldr	r2, [r7, #32]
 8006cb4:	440a      	add	r2, r1
 8006cb6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006cba:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006cbe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	79db      	ldrb	r3, [r3, #7]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d123      	bne.n	8006d10 <USB_HC_StartXfer+0x2dc>
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	78db      	ldrb	r3, [r3, #3]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d11f      	bne.n	8006d10 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	015a      	lsls	r2, r3, #5
 8006cd4:	6a3b      	ldr	r3, [r7, #32]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	69fa      	ldr	r2, [r7, #28]
 8006ce0:	0151      	lsls	r1, r2, #5
 8006ce2:	6a3a      	ldr	r2, [r7, #32]
 8006ce4:	440a      	add	r2, r1
 8006ce6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006cea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cee:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	015a      	lsls	r2, r3, #5
 8006cf4:	6a3b      	ldr	r3, [r7, #32]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	69fa      	ldr	r2, [r7, #28]
 8006d00:	0151      	lsls	r1, r2, #5
 8006d02:	6a3a      	ldr	r2, [r7, #32]
 8006d04:	440a      	add	r2, r1
 8006d06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d0e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	7c9b      	ldrb	r3, [r3, #18]
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d003      	beq.n	8006d20 <USB_HC_StartXfer+0x2ec>
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	7c9b      	ldrb	r3, [r3, #18]
 8006d1c:	2b03      	cmp	r3, #3
 8006d1e:	d117      	bne.n	8006d50 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d113      	bne.n	8006d50 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	78db      	ldrb	r3, [r3, #3]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d10f      	bne.n	8006d50 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	015a      	lsls	r2, r3, #5
 8006d34:	6a3b      	ldr	r3, [r7, #32]
 8006d36:	4413      	add	r3, r2
 8006d38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	69fa      	ldr	r2, [r7, #28]
 8006d40:	0151      	lsls	r1, r2, #5
 8006d42:	6a3a      	ldr	r2, [r7, #32]
 8006d44:	440a      	add	r2, r1
 8006d46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d4e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	7c9b      	ldrb	r3, [r3, #18]
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d162      	bne.n	8006e1e <USB_HC_StartXfer+0x3ea>
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	78db      	ldrb	r3, [r3, #3]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d15e      	bne.n	8006e1e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	3b01      	subs	r3, #1
 8006d66:	2b03      	cmp	r3, #3
 8006d68:	d858      	bhi.n	8006e1c <USB_HC_StartXfer+0x3e8>
 8006d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8006d70 <USB_HC_StartXfer+0x33c>)
 8006d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d70:	08006d81 	.word	0x08006d81
 8006d74:	08006da3 	.word	0x08006da3
 8006d78:	08006dc5 	.word	0x08006dc5
 8006d7c:	08006de7 	.word	0x08006de7
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	015a      	lsls	r2, r3, #5
 8006d84:	6a3b      	ldr	r3, [r7, #32]
 8006d86:	4413      	add	r3, r2
 8006d88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	69fa      	ldr	r2, [r7, #28]
 8006d90:	0151      	lsls	r1, r2, #5
 8006d92:	6a3a      	ldr	r2, [r7, #32]
 8006d94:	440a      	add	r2, r1
 8006d96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d9e:	6053      	str	r3, [r2, #4]
          break;
 8006da0:	e03d      	b.n	8006e1e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	015a      	lsls	r2, r3, #5
 8006da6:	6a3b      	ldr	r3, [r7, #32]
 8006da8:	4413      	add	r3, r2
 8006daa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	69fa      	ldr	r2, [r7, #28]
 8006db2:	0151      	lsls	r1, r2, #5
 8006db4:	6a3a      	ldr	r2, [r7, #32]
 8006db6:	440a      	add	r2, r1
 8006db8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006dbc:	f043 030e 	orr.w	r3, r3, #14
 8006dc0:	6053      	str	r3, [r2, #4]
          break;
 8006dc2:	e02c      	b.n	8006e1e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	015a      	lsls	r2, r3, #5
 8006dc8:	6a3b      	ldr	r3, [r7, #32]
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	69fa      	ldr	r2, [r7, #28]
 8006dd4:	0151      	lsls	r1, r2, #5
 8006dd6:	6a3a      	ldr	r2, [r7, #32]
 8006dd8:	440a      	add	r2, r1
 8006dda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006dde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006de2:	6053      	str	r3, [r2, #4]
          break;
 8006de4:	e01b      	b.n	8006e1e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	015a      	lsls	r2, r3, #5
 8006dea:	6a3b      	ldr	r3, [r7, #32]
 8006dec:	4413      	add	r3, r2
 8006dee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	69fa      	ldr	r2, [r7, #28]
 8006df6:	0151      	lsls	r1, r2, #5
 8006df8:	6a3a      	ldr	r2, [r7, #32]
 8006dfa:	440a      	add	r2, r1
 8006dfc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e04:	6053      	str	r3, [r2, #4]
          break;
 8006e06:	e00a      	b.n	8006e1e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	015a      	lsls	r2, r3, #5
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
 8006e0e:	4413      	add	r3, r2
 8006e10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e14:	461a      	mov	r2, r3
 8006e16:	2300      	movs	r3, #0
 8006e18:	6053      	str	r3, [r2, #4]
 8006e1a:	e000      	b.n	8006e1e <USB_HC_StartXfer+0x3ea>
          break;
 8006e1c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	015a      	lsls	r2, r3, #5
 8006e22:	6a3b      	ldr	r3, [r7, #32]
 8006e24:	4413      	add	r3, r2
 8006e26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006e34:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	78db      	ldrb	r3, [r3, #3]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d004      	beq.n	8006e48 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e44:	613b      	str	r3, [r7, #16]
 8006e46:	e003      	b.n	8006e50 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006e4e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006e56:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	015a      	lsls	r2, r3, #5
 8006e5c:	6a3b      	ldr	r3, [r7, #32]
 8006e5e:	4413      	add	r3, r2
 8006e60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e64:	461a      	mov	r2, r3
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006e6a:	79fb      	ldrb	r3, [r7, #7]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d003      	beq.n	8006e78 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006e70:	2300      	movs	r3, #0
 8006e72:	e055      	b.n	8006f20 <USB_HC_StartXfer+0x4ec>
 8006e74:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	78db      	ldrb	r3, [r3, #3]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d14e      	bne.n	8006f1e <USB_HC_StartXfer+0x4ea>
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	6a1b      	ldr	r3, [r3, #32]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d04a      	beq.n	8006f1e <USB_HC_StartXfer+0x4ea>
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	79db      	ldrb	r3, [r3, #7]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d146      	bne.n	8006f1e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	7c9b      	ldrb	r3, [r3, #18]
 8006e94:	2b03      	cmp	r3, #3
 8006e96:	d831      	bhi.n	8006efc <USB_HC_StartXfer+0x4c8>
 8006e98:	a201      	add	r2, pc, #4	@ (adr r2, 8006ea0 <USB_HC_StartXfer+0x46c>)
 8006e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e9e:	bf00      	nop
 8006ea0:	08006eb1 	.word	0x08006eb1
 8006ea4:	08006ed5 	.word	0x08006ed5
 8006ea8:	08006eb1 	.word	0x08006eb1
 8006eac:	08006ed5 	.word	0x08006ed5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	6a1b      	ldr	r3, [r3, #32]
 8006eb4:	3303      	adds	r3, #3
 8006eb6:	089b      	lsrs	r3, r3, #2
 8006eb8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006eba:	8afa      	ldrh	r2, [r7, #22]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d91c      	bls.n	8006f00 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	699b      	ldr	r3, [r3, #24]
 8006eca:	f043 0220 	orr.w	r2, r3, #32
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	619a      	str	r2, [r3, #24]
        }
        break;
 8006ed2:	e015      	b.n	8006f00 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	6a1b      	ldr	r3, [r3, #32]
 8006ed8:	3303      	adds	r3, #3
 8006eda:	089b      	lsrs	r3, r3, #2
 8006edc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006ede:	8afa      	ldrh	r2, [r7, #22]
 8006ee0:	6a3b      	ldr	r3, [r7, #32]
 8006ee2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d90a      	bls.n	8006f04 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	619a      	str	r2, [r3, #24]
        }
        break;
 8006efa:	e003      	b.n	8006f04 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006efc:	bf00      	nop
 8006efe:	e002      	b.n	8006f06 <USB_HC_StartXfer+0x4d2>
        break;
 8006f00:	bf00      	nop
 8006f02:	e000      	b.n	8006f06 <USB_HC_StartXfer+0x4d2>
        break;
 8006f04:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	6999      	ldr	r1, [r3, #24]
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	785a      	ldrb	r2, [r3, #1]
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	2000      	movs	r0, #0
 8006f16:	9000      	str	r0, [sp, #0]
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f7ff f9c3 	bl	80062a4 <USB_WritePacket>
  }

  return HAL_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3728      	adds	r7, #40	@ 0x28
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f3a:	695b      	ldr	r3, [r3, #20]
 8006f3c:	b29b      	uxth	r3, r3
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3714      	adds	r7, #20
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr

08006f4a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006f4a:	b480      	push	{r7}
 8006f4c:	b089      	sub	sp, #36	@ 0x24
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
 8006f52:	460b      	mov	r3, r1
 8006f54:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006f5a:	78fb      	ldrb	r3, [r7, #3]
 8006f5c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	015a      	lsls	r2, r3, #5
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	4413      	add	r3, r2
 8006f6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	0c9b      	lsrs	r3, r3, #18
 8006f72:	f003 0303 	and.w	r3, r3, #3
 8006f76:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	015a      	lsls	r2, r3, #5
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	4413      	add	r3, r2
 8006f80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	0fdb      	lsrs	r3, r3, #31
 8006f88:	f003 0301 	and.w	r3, r3, #1
 8006f8c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	015a      	lsls	r2, r3, #5
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	4413      	add	r3, r2
 8006f96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	0fdb      	lsrs	r3, r3, #31
 8006f9e:	f003 0301 	and.w	r3, r3, #1
 8006fa2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	f003 0320 	and.w	r3, r3, #32
 8006fac:	2b20      	cmp	r3, #32
 8006fae:	d10d      	bne.n	8006fcc <USB_HC_Halt+0x82>
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d10a      	bne.n	8006fcc <USB_HC_Halt+0x82>
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d005      	beq.n	8006fc8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d002      	beq.n	8006fc8 <USB_HC_Halt+0x7e>
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	2b03      	cmp	r3, #3
 8006fc6:	d101      	bne.n	8006fcc <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	e0d8      	b.n	800717e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d002      	beq.n	8006fd8 <USB_HC_Halt+0x8e>
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d173      	bne.n	80070c0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	015a      	lsls	r2, r3, #5
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	4413      	add	r3, r2
 8006fe0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	69ba      	ldr	r2, [r7, #24]
 8006fe8:	0151      	lsls	r1, r2, #5
 8006fea:	69fa      	ldr	r2, [r7, #28]
 8006fec:	440a      	add	r2, r1
 8006fee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ff2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ff6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	f003 0320 	and.w	r3, r3, #32
 8007000:	2b00      	cmp	r3, #0
 8007002:	d14a      	bne.n	800709a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007008:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d133      	bne.n	8007078 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	015a      	lsls	r2, r3, #5
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	4413      	add	r3, r2
 8007018:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	69ba      	ldr	r2, [r7, #24]
 8007020:	0151      	lsls	r1, r2, #5
 8007022:	69fa      	ldr	r2, [r7, #28]
 8007024:	440a      	add	r2, r1
 8007026:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800702a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800702e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	015a      	lsls	r2, r3, #5
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	4413      	add	r3, r2
 8007038:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	69ba      	ldr	r2, [r7, #24]
 8007040:	0151      	lsls	r1, r2, #5
 8007042:	69fa      	ldr	r2, [r7, #28]
 8007044:	440a      	add	r2, r1
 8007046:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800704a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800704e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	3301      	adds	r3, #1
 8007054:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800705c:	d82e      	bhi.n	80070bc <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	015a      	lsls	r2, r3, #5
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	4413      	add	r3, r2
 8007066:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007070:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007074:	d0ec      	beq.n	8007050 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007076:	e081      	b.n	800717c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	015a      	lsls	r2, r3, #5
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	4413      	add	r3, r2
 8007080:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	69ba      	ldr	r2, [r7, #24]
 8007088:	0151      	lsls	r1, r2, #5
 800708a:	69fa      	ldr	r2, [r7, #28]
 800708c:	440a      	add	r2, r1
 800708e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007092:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007096:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007098:	e070      	b.n	800717c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	015a      	lsls	r2, r3, #5
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	4413      	add	r3, r2
 80070a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	69ba      	ldr	r2, [r7, #24]
 80070aa:	0151      	lsls	r1, r2, #5
 80070ac:	69fa      	ldr	r2, [r7, #28]
 80070ae:	440a      	add	r2, r1
 80070b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80070b8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80070ba:	e05f      	b.n	800717c <USB_HC_Halt+0x232>
            break;
 80070bc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80070be:	e05d      	b.n	800717c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	015a      	lsls	r2, r3, #5
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	4413      	add	r3, r2
 80070c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	69ba      	ldr	r2, [r7, #24]
 80070d0:	0151      	lsls	r1, r2, #5
 80070d2:	69fa      	ldr	r2, [r7, #28]
 80070d4:	440a      	add	r2, r1
 80070d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80070de:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d133      	bne.n	8007158 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	015a      	lsls	r2, r3, #5
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	4413      	add	r3, r2
 80070f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	69ba      	ldr	r2, [r7, #24]
 8007100:	0151      	lsls	r1, r2, #5
 8007102:	69fa      	ldr	r2, [r7, #28]
 8007104:	440a      	add	r2, r1
 8007106:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800710a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800710e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	015a      	lsls	r2, r3, #5
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	4413      	add	r3, r2
 8007118:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	69ba      	ldr	r2, [r7, #24]
 8007120:	0151      	lsls	r1, r2, #5
 8007122:	69fa      	ldr	r2, [r7, #28]
 8007124:	440a      	add	r2, r1
 8007126:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800712a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800712e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	3301      	adds	r3, #1
 8007134:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800713c:	d81d      	bhi.n	800717a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	015a      	lsls	r2, r3, #5
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	4413      	add	r3, r2
 8007146:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007150:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007154:	d0ec      	beq.n	8007130 <USB_HC_Halt+0x1e6>
 8007156:	e011      	b.n	800717c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	015a      	lsls	r2, r3, #5
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	4413      	add	r3, r2
 8007160:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	69ba      	ldr	r2, [r7, #24]
 8007168:	0151      	lsls	r1, r2, #5
 800716a:	69fa      	ldr	r2, [r7, #28]
 800716c:	440a      	add	r2, r1
 800716e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007172:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007176:	6013      	str	r3, [r2, #0]
 8007178:	e000      	b.n	800717c <USB_HC_Halt+0x232>
          break;
 800717a:	bf00      	nop
    }
  }

  return HAL_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3724      	adds	r7, #36	@ 0x24
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
	...

0800718c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800718c:	b480      	push	{r7}
 800718e:	b087      	sub	sp, #28
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	460b      	mov	r3, r1
 8007196:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800719c:	78fb      	ldrb	r3, [r7, #3]
 800719e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80071a0:	2301      	movs	r3, #1
 80071a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	04da      	lsls	r2, r3, #19
 80071a8:	4b15      	ldr	r3, [pc, #84]	@ (8007200 <USB_DoPing+0x74>)
 80071aa:	4013      	ands	r3, r2
 80071ac:	693a      	ldr	r2, [r7, #16]
 80071ae:	0151      	lsls	r1, r2, #5
 80071b0:	697a      	ldr	r2, [r7, #20]
 80071b2:	440a      	add	r2, r1
 80071b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80071bc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	015a      	lsls	r2, r3, #5
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	4413      	add	r3, r2
 80071c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80071d4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80071dc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	015a      	lsls	r2, r3, #5
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	4413      	add	r3, r2
 80071e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071ea:	461a      	mov	r2, r3
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	371c      	adds	r7, #28
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop
 8007200:	1ff80000 	.word	0x1ff80000

08007204 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b088      	sub	sp, #32
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800720c:	2300      	movs	r3, #0
 800720e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007214:	2300      	movs	r3, #0
 8007216:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f7fe ff86 	bl	800612a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800721e:	2110      	movs	r1, #16
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f7fe ffdf 	bl	80061e4 <USB_FlushTxFifo>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d001      	beq.n	8007230 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f7ff f809 	bl	8006248 <USB_FlushRxFifo>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d001      	beq.n	8007240 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007240:	2300      	movs	r3, #0
 8007242:	61bb      	str	r3, [r7, #24]
 8007244:	e01f      	b.n	8007286 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	015a      	lsls	r2, r3, #5
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	4413      	add	r3, r2
 800724e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800725c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007264:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800726c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	015a      	lsls	r2, r3, #5
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	4413      	add	r3, r2
 8007276:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800727a:	461a      	mov	r2, r3
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	3301      	adds	r3, #1
 8007284:	61bb      	str	r3, [r7, #24]
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	2b0f      	cmp	r3, #15
 800728a:	d9dc      	bls.n	8007246 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800728c:	2300      	movs	r3, #0
 800728e:	61bb      	str	r3, [r7, #24]
 8007290:	e034      	b.n	80072fc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	015a      	lsls	r2, r3, #5
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	4413      	add	r3, r2
 800729a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80072a8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80072b0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80072b8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	015a      	lsls	r2, r3, #5
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	4413      	add	r3, r2
 80072c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072c6:	461a      	mov	r2, r3
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	3301      	adds	r3, #1
 80072d0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80072d8:	d80c      	bhi.n	80072f4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	015a      	lsls	r2, r3, #5
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	4413      	add	r3, r2
 80072e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072f0:	d0ec      	beq.n	80072cc <USB_StopHost+0xc8>
 80072f2:	e000      	b.n	80072f6 <USB_StopHost+0xf2>
        break;
 80072f4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	3301      	adds	r3, #1
 80072fa:	61bb      	str	r3, [r7, #24]
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	2b0f      	cmp	r3, #15
 8007300:	d9c7      	bls.n	8007292 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007308:	461a      	mov	r2, r3
 800730a:	f04f 33ff 	mov.w	r3, #4294967295
 800730e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f04f 32ff 	mov.w	r2, #4294967295
 8007316:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f7fe fef5 	bl	8006108 <USB_EnableGlobalInt>

  return ret;
 800731e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007320:	4618      	mov	r0, r3
 8007322:	3720      	adds	r7, #32
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007328:	b590      	push	{r4, r7, lr}
 800732a:	b089      	sub	sp, #36	@ 0x24
 800732c:	af04      	add	r7, sp, #16
 800732e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007330:	2301      	movs	r3, #1
 8007332:	2202      	movs	r2, #2
 8007334:	2102      	movs	r1, #2
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fc83 	bl	8007c42 <USBH_FindInterface>
 800733c:	4603      	mov	r3, r0
 800733e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007340:	7bfb      	ldrb	r3, [r7, #15]
 8007342:	2bff      	cmp	r3, #255	@ 0xff
 8007344:	d002      	beq.n	800734c <USBH_CDC_InterfaceInit+0x24>
 8007346:	7bfb      	ldrb	r3, [r7, #15]
 8007348:	2b01      	cmp	r3, #1
 800734a:	d901      	bls.n	8007350 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800734c:	2302      	movs	r3, #2
 800734e:	e13d      	b.n	80075cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007350:	7bfb      	ldrb	r3, [r7, #15]
 8007352:	4619      	mov	r1, r3
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 fc58 	bl	8007c0a <USBH_SelectInterface>
 800735a:	4603      	mov	r3, r0
 800735c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800735e:	7bbb      	ldrb	r3, [r7, #14]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d001      	beq.n	8007368 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007364:	2302      	movs	r3, #2
 8007366:	e131      	b.n	80075cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800736e:	2050      	movs	r0, #80	@ 0x50
 8007370:	f002 fb6a 	bl	8009a48 <malloc>
 8007374:	4603      	mov	r3, r0
 8007376:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800737e:	69db      	ldr	r3, [r3, #28]
 8007380:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d101      	bne.n	800738c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007388:	2302      	movs	r3, #2
 800738a:	e11f      	b.n	80075cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800738c:	2250      	movs	r2, #80	@ 0x50
 800738e:	2100      	movs	r1, #0
 8007390:	68b8      	ldr	r0, [r7, #8]
 8007392:	f002 fd2e 	bl	8009df2 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007396:	7bfb      	ldrb	r3, [r7, #15]
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	211a      	movs	r1, #26
 800739c:	fb01 f303 	mul.w	r3, r1, r3
 80073a0:	4413      	add	r3, r2
 80073a2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	b25b      	sxtb	r3, r3
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	da15      	bge.n	80073da <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80073ae:	7bfb      	ldrb	r3, [r7, #15]
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	211a      	movs	r1, #26
 80073b4:	fb01 f303 	mul.w	r3, r1, r3
 80073b8:	4413      	add	r3, r2
 80073ba:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80073be:	781a      	ldrb	r2, [r3, #0]
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80073c4:	7bfb      	ldrb	r3, [r7, #15]
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	211a      	movs	r1, #26
 80073ca:	fb01 f303 	mul.w	r3, r1, r3
 80073ce:	4413      	add	r3, r2
 80073d0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80073d4:	881a      	ldrh	r2, [r3, #0]
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	785b      	ldrb	r3, [r3, #1]
 80073de:	4619      	mov	r1, r3
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f001 ffc4 	bl	800936e <USBH_AllocPipe>
 80073e6:	4603      	mov	r3, r0
 80073e8:	461a      	mov	r2, r3
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	7819      	ldrb	r1, [r3, #0]
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	7858      	ldrb	r0, [r3, #1]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	8952      	ldrh	r2, [r2, #10]
 8007406:	9202      	str	r2, [sp, #8]
 8007408:	2203      	movs	r2, #3
 800740a:	9201      	str	r2, [sp, #4]
 800740c:	9300      	str	r3, [sp, #0]
 800740e:	4623      	mov	r3, r4
 8007410:	4602      	mov	r2, r0
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f001 ff7c 	bl	8009310 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	2200      	movs	r2, #0
 800741e:	4619      	mov	r1, r3
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f002 fa8b 	bl	800993c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007426:	2300      	movs	r3, #0
 8007428:	2200      	movs	r2, #0
 800742a:	210a      	movs	r1, #10
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 fc08 	bl	8007c42 <USBH_FindInterface>
 8007432:	4603      	mov	r3, r0
 8007434:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007436:	7bfb      	ldrb	r3, [r7, #15]
 8007438:	2bff      	cmp	r3, #255	@ 0xff
 800743a:	d002      	beq.n	8007442 <USBH_CDC_InterfaceInit+0x11a>
 800743c:	7bfb      	ldrb	r3, [r7, #15]
 800743e:	2b01      	cmp	r3, #1
 8007440:	d901      	bls.n	8007446 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007442:	2302      	movs	r3, #2
 8007444:	e0c2      	b.n	80075cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007446:	7bfb      	ldrb	r3, [r7, #15]
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	211a      	movs	r1, #26
 800744c:	fb01 f303 	mul.w	r3, r1, r3
 8007450:	4413      	add	r3, r2
 8007452:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	b25b      	sxtb	r3, r3
 800745a:	2b00      	cmp	r3, #0
 800745c:	da16      	bge.n	800748c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800745e:	7bfb      	ldrb	r3, [r7, #15]
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	211a      	movs	r1, #26
 8007464:	fb01 f303 	mul.w	r3, r1, r3
 8007468:	4413      	add	r3, r2
 800746a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800746e:	781a      	ldrb	r2, [r3, #0]
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007474:	7bfb      	ldrb	r3, [r7, #15]
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	211a      	movs	r1, #26
 800747a:	fb01 f303 	mul.w	r3, r1, r3
 800747e:	4413      	add	r3, r2
 8007480:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007484:	881a      	ldrh	r2, [r3, #0]
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	835a      	strh	r2, [r3, #26]
 800748a:	e015      	b.n	80074b8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800748c:	7bfb      	ldrb	r3, [r7, #15]
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	211a      	movs	r1, #26
 8007492:	fb01 f303 	mul.w	r3, r1, r3
 8007496:	4413      	add	r3, r2
 8007498:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800749c:	781a      	ldrb	r2, [r3, #0]
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80074a2:	7bfb      	ldrb	r3, [r7, #15]
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	211a      	movs	r1, #26
 80074a8:	fb01 f303 	mul.w	r3, r1, r3
 80074ac:	4413      	add	r3, r2
 80074ae:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80074b2:	881a      	ldrh	r2, [r3, #0]
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80074b8:	7bfb      	ldrb	r3, [r7, #15]
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	211a      	movs	r1, #26
 80074be:	fb01 f303 	mul.w	r3, r1, r3
 80074c2:	4413      	add	r3, r2
 80074c4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	b25b      	sxtb	r3, r3
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	da16      	bge.n	80074fe <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80074d0:	7bfb      	ldrb	r3, [r7, #15]
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	211a      	movs	r1, #26
 80074d6:	fb01 f303 	mul.w	r3, r1, r3
 80074da:	4413      	add	r3, r2
 80074dc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80074e0:	781a      	ldrb	r2, [r3, #0]
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80074e6:	7bfb      	ldrb	r3, [r7, #15]
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	211a      	movs	r1, #26
 80074ec:	fb01 f303 	mul.w	r3, r1, r3
 80074f0:	4413      	add	r3, r2
 80074f2:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80074f6:	881a      	ldrh	r2, [r3, #0]
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	835a      	strh	r2, [r3, #26]
 80074fc:	e015      	b.n	800752a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80074fe:	7bfb      	ldrb	r3, [r7, #15]
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	211a      	movs	r1, #26
 8007504:	fb01 f303 	mul.w	r3, r1, r3
 8007508:	4413      	add	r3, r2
 800750a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800750e:	781a      	ldrb	r2, [r3, #0]
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007514:	7bfb      	ldrb	r3, [r7, #15]
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	211a      	movs	r1, #26
 800751a:	fb01 f303 	mul.w	r3, r1, r3
 800751e:	4413      	add	r3, r2
 8007520:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007524:	881a      	ldrh	r2, [r3, #0]
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	7b9b      	ldrb	r3, [r3, #14]
 800752e:	4619      	mov	r1, r3
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f001 ff1c 	bl	800936e <USBH_AllocPipe>
 8007536:	4603      	mov	r3, r0
 8007538:	461a      	mov	r2, r3
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	7bdb      	ldrb	r3, [r3, #15]
 8007542:	4619      	mov	r1, r3
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f001 ff12 	bl	800936e <USBH_AllocPipe>
 800754a:	4603      	mov	r3, r0
 800754c:	461a      	mov	r2, r3
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	7b59      	ldrb	r1, [r3, #13]
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	7b98      	ldrb	r0, [r3, #14]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007566:	68ba      	ldr	r2, [r7, #8]
 8007568:	8b12      	ldrh	r2, [r2, #24]
 800756a:	9202      	str	r2, [sp, #8]
 800756c:	2202      	movs	r2, #2
 800756e:	9201      	str	r2, [sp, #4]
 8007570:	9300      	str	r3, [sp, #0]
 8007572:	4623      	mov	r3, r4
 8007574:	4602      	mov	r2, r0
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f001 feca 	bl	8009310 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	7b19      	ldrb	r1, [r3, #12]
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	7bd8      	ldrb	r0, [r3, #15]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007590:	68ba      	ldr	r2, [r7, #8]
 8007592:	8b52      	ldrh	r2, [r2, #26]
 8007594:	9202      	str	r2, [sp, #8]
 8007596:	2202      	movs	r2, #2
 8007598:	9201      	str	r2, [sp, #4]
 800759a:	9300      	str	r3, [sp, #0]
 800759c:	4623      	mov	r3, r4
 800759e:	4602      	mov	r2, r0
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f001 feb5 	bl	8009310 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	7b5b      	ldrb	r3, [r3, #13]
 80075b2:	2200      	movs	r2, #0
 80075b4:	4619      	mov	r1, r3
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f002 f9c0 	bl	800993c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	7b1b      	ldrb	r3, [r3, #12]
 80075c0:	2200      	movs	r2, #0
 80075c2:	4619      	mov	r1, r3
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f002 f9b9 	bl	800993c <USBH_LL_SetToggle>

  return USBH_OK;
 80075ca:	2300      	movs	r3, #0
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3714      	adds	r7, #20
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd90      	pop	{r4, r7, pc}

080075d4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075e2:	69db      	ldr	r3, [r3, #28]
 80075e4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00e      	beq.n	800760c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	4619      	mov	r1, r3
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f001 feaa 	bl	800934e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	4619      	mov	r1, r3
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f001 fed5 	bl	80093b0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2200      	movs	r2, #0
 800760a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	7b1b      	ldrb	r3, [r3, #12]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00e      	beq.n	8007632 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	7b1b      	ldrb	r3, [r3, #12]
 8007618:	4619      	mov	r1, r3
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f001 fe97 	bl	800934e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	7b1b      	ldrb	r3, [r3, #12]
 8007624:	4619      	mov	r1, r3
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f001 fec2 	bl	80093b0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2200      	movs	r2, #0
 8007630:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	7b5b      	ldrb	r3, [r3, #13]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00e      	beq.n	8007658 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	7b5b      	ldrb	r3, [r3, #13]
 800763e:	4619      	mov	r1, r3
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f001 fe84 	bl	800934e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	7b5b      	ldrb	r3, [r3, #13]
 800764a:	4619      	mov	r1, r3
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f001 feaf 	bl	80093b0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2200      	movs	r2, #0
 8007656:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800765e:	69db      	ldr	r3, [r3, #28]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00b      	beq.n	800767c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800766a:	69db      	ldr	r3, [r3, #28]
 800766c:	4618      	mov	r0, r3
 800766e:	f002 f9f3 	bl	8009a58 <free>
    phost->pActiveClass->pData = 0U;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007678:	2200      	movs	r2, #0
 800767a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b084      	sub	sp, #16
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007694:	69db      	ldr	r3, [r3, #28]
 8007696:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	3340      	adds	r3, #64	@ 0x40
 800769c:	4619      	mov	r1, r3
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f8b1 	bl	8007806 <GetLineCoding>
 80076a4:	4603      	mov	r3, r0
 80076a6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80076a8:	7afb      	ldrb	r3, [r7, #11]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d105      	bne.n	80076ba <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80076b4:	2102      	movs	r1, #2
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80076ba:	7afb      	ldrb	r3, [r7, #11]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80076cc:	2301      	movs	r3, #1
 80076ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80076d0:	2300      	movs	r3, #0
 80076d2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80076da:	69db      	ldr	r3, [r3, #28]
 80076dc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80076e4:	2b04      	cmp	r3, #4
 80076e6:	d877      	bhi.n	80077d8 <USBH_CDC_Process+0x114>
 80076e8:	a201      	add	r2, pc, #4	@ (adr r2, 80076f0 <USBH_CDC_Process+0x2c>)
 80076ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ee:	bf00      	nop
 80076f0:	08007705 	.word	0x08007705
 80076f4:	0800770b 	.word	0x0800770b
 80076f8:	0800773b 	.word	0x0800773b
 80076fc:	080077af 	.word	0x080077af
 8007700:	080077bd 	.word	0x080077bd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007704:	2300      	movs	r3, #0
 8007706:	73fb      	strb	r3, [r7, #15]
      break;
 8007708:	e06d      	b.n	80077e6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800770e:	4619      	mov	r1, r3
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 f897 	bl	8007844 <SetLineCoding>
 8007716:	4603      	mov	r3, r0
 8007718:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800771a:	7bbb      	ldrb	r3, [r7, #14]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d104      	bne.n	800772a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	2202      	movs	r2, #2
 8007724:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007728:	e058      	b.n	80077dc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800772a:	7bbb      	ldrb	r3, [r7, #14]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d055      	beq.n	80077dc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	2204      	movs	r2, #4
 8007734:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007738:	e050      	b.n	80077dc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	3340      	adds	r3, #64	@ 0x40
 800773e:	4619      	mov	r1, r3
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 f860 	bl	8007806 <GetLineCoding>
 8007746:	4603      	mov	r3, r0
 8007748:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800774a:	7bbb      	ldrb	r3, [r7, #14]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d126      	bne.n	800779e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	2200      	movs	r2, #0
 8007754:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007762:	791b      	ldrb	r3, [r3, #4]
 8007764:	429a      	cmp	r2, r3
 8007766:	d13b      	bne.n	80077e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007772:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007774:	429a      	cmp	r2, r3
 8007776:	d133      	bne.n	80077e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007782:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007784:	429a      	cmp	r2, r3
 8007786:	d12b      	bne.n	80077e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007790:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007792:	429a      	cmp	r2, r3
 8007794:	d124      	bne.n	80077e0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f958 	bl	8007a4c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800779c:	e020      	b.n	80077e0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800779e:	7bbb      	ldrb	r3, [r7, #14]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d01d      	beq.n	80077e0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	2204      	movs	r2, #4
 80077a8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80077ac:	e018      	b.n	80077e0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 f867 	bl	8007882 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 f8da 	bl	800796e <CDC_ProcessReception>
      break;
 80077ba:	e014      	b.n	80077e6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80077bc:	2100      	movs	r1, #0
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f001 f81e 	bl	8008800 <USBH_ClrFeature>
 80077c4:	4603      	mov	r3, r0
 80077c6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80077c8:	7bbb      	ldrb	r3, [r7, #14]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d10a      	bne.n	80077e4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80077d6:	e005      	b.n	80077e4 <USBH_CDC_Process+0x120>

    default:
      break;
 80077d8:	bf00      	nop
 80077da:	e004      	b.n	80077e6 <USBH_CDC_Process+0x122>
      break;
 80077dc:	bf00      	nop
 80077de:	e002      	b.n	80077e6 <USBH_CDC_Process+0x122>
      break;
 80077e0:	bf00      	nop
 80077e2:	e000      	b.n	80077e6 <USBH_CDC_Process+0x122>
      break;
 80077e4:	bf00      	nop

  }

  return status;
 80077e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	370c      	adds	r7, #12
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr

08007806 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b082      	sub	sp, #8
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
 800780e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	22a1      	movs	r2, #161	@ 0xa1
 8007814:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2221      	movs	r2, #33	@ 0x21
 800781a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2207      	movs	r2, #7
 800782c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	2207      	movs	r2, #7
 8007832:	4619      	mov	r1, r3
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f001 fb17 	bl	8008e68 <USBH_CtlReq>
 800783a:	4603      	mov	r3, r0
}
 800783c:	4618      	mov	r0, r3
 800783e:	3708      	adds	r7, #8
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2221      	movs	r2, #33	@ 0x21
 8007852:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2220      	movs	r2, #32
 8007858:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2207      	movs	r2, #7
 800786a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	2207      	movs	r2, #7
 8007870:	4619      	mov	r1, r3
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f001 faf8 	bl	8008e68 <USBH_CtlReq>
 8007878:	4603      	mov	r3, r0
}
 800787a:	4618      	mov	r0, r3
 800787c:	3708      	adds	r7, #8
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b086      	sub	sp, #24
 8007886:	af02      	add	r7, sp, #8
 8007888:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007890:	69db      	ldr	r3, [r3, #28]
 8007892:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007894:	2300      	movs	r3, #0
 8007896:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d002      	beq.n	80078a8 <CDC_ProcessTransmission+0x26>
 80078a2:	2b02      	cmp	r3, #2
 80078a4:	d023      	beq.n	80078ee <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80078a6:	e05e      	b.n	8007966 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	8b12      	ldrh	r2, [r2, #24]
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d90b      	bls.n	80078cc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	69d9      	ldr	r1, [r3, #28]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	8b1a      	ldrh	r2, [r3, #24]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	7b5b      	ldrb	r3, [r3, #13]
 80078c0:	2001      	movs	r0, #1
 80078c2:	9000      	str	r0, [sp, #0]
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f001 fce0 	bl	800928a <USBH_BulkSendData>
 80078ca:	e00b      	b.n	80078e4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	7b5b      	ldrb	r3, [r3, #13]
 80078da:	2001      	movs	r0, #1
 80078dc:	9000      	str	r0, [sp, #0]
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f001 fcd3 	bl	800928a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2202      	movs	r2, #2
 80078e8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80078ec:	e03b      	b.n	8007966 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	7b5b      	ldrb	r3, [r3, #13]
 80078f2:	4619      	mov	r1, r3
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f001 fff7 	bl	80098e8 <USBH_LL_GetURBState>
 80078fa:	4603      	mov	r3, r0
 80078fc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80078fe:	7afb      	ldrb	r3, [r7, #11]
 8007900:	2b01      	cmp	r3, #1
 8007902:	d128      	bne.n	8007956 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	8b12      	ldrh	r2, [r2, #24]
 800790c:	4293      	cmp	r3, r2
 800790e:	d90e      	bls.n	800792e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	8b12      	ldrh	r2, [r2, #24]
 8007918:	1a9a      	subs	r2, r3, r2
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	69db      	ldr	r3, [r3, #28]
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	8b12      	ldrh	r2, [r2, #24]
 8007926:	441a      	add	r2, r3
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	61da      	str	r2, [r3, #28]
 800792c:	e002      	b.n	8007934 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007938:	2b00      	cmp	r3, #0
 800793a:	d004      	beq.n	8007946 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007944:	e00e      	b.n	8007964 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 f868 	bl	8007a24 <USBH_CDC_TransmitCallback>
      break;
 8007954:	e006      	b.n	8007964 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007956:	7afb      	ldrb	r3, [r7, #11]
 8007958:	2b02      	cmp	r3, #2
 800795a:	d103      	bne.n	8007964 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007964:	bf00      	nop
  }
}
 8007966:	bf00      	nop
 8007968:	3710      	adds	r7, #16
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800796e:	b580      	push	{r7, lr}
 8007970:	b086      	sub	sp, #24
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800797c:	69db      	ldr	r3, [r3, #28]
 800797e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007980:	2300      	movs	r3, #0
 8007982:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800798a:	2b03      	cmp	r3, #3
 800798c:	d002      	beq.n	8007994 <CDC_ProcessReception+0x26>
 800798e:	2b04      	cmp	r3, #4
 8007990:	d00e      	beq.n	80079b0 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 8007992:	e043      	b.n	8007a1c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	6a19      	ldr	r1, [r3, #32]
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	8b5a      	ldrh	r2, [r3, #26]
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	7b1b      	ldrb	r3, [r3, #12]
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f001 fc97 	bl	80092d4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	2204      	movs	r2, #4
 80079aa:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80079ae:	e035      	b.n	8007a1c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	7b1b      	ldrb	r3, [r3, #12]
 80079b4:	4619      	mov	r1, r3
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f001 ff96 	bl	80098e8 <USBH_LL_GetURBState>
 80079bc:	4603      	mov	r3, r0
 80079be:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80079c0:	7cfb      	ldrb	r3, [r7, #19]
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d129      	bne.n	8007a1a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	7b1b      	ldrb	r3, [r3, #12]
 80079ca:	4619      	mov	r1, r3
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f001 fef9 	bl	80097c4 <USBH_LL_GetLastXferSize>
 80079d2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d016      	beq.n	8007a0c <CDC_ProcessReception+0x9e>
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	8b5b      	ldrh	r3, [r3, #26]
 80079e2:	461a      	mov	r2, r3
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d110      	bne.n	8007a0c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	1ad2      	subs	r2, r2, r3
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	6a1a      	ldr	r2, [r3, #32]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	441a      	add	r2, r3
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	2203      	movs	r2, #3
 8007a06:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007a0a:	e006      	b.n	8007a1a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 f80f 	bl	8007a38 <USBH_CDC_ReceiveCallback>
      break;
 8007a1a:	bf00      	nop
  }
}
 8007a1c:	bf00      	nop
 8007a1e:	3718      	adds	r7, #24
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007a2c:	bf00      	nop
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007a40:	bf00      	nop
 8007a42:	370c      	adds	r7, #12
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007a54:	bf00      	nop
 8007a56:	370c      	adds	r7, #12
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d101      	bne.n	8007a78 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007a74:	2302      	movs	r3, #2
 8007a76:	e029      	b.n	8007acc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	79fa      	ldrb	r2, [r7, #7]
 8007a7c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007a90:	68f8      	ldr	r0, [r7, #12]
 8007a92:	f000 f81f 	bl	8007ad4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d003      	beq.n	8007ac4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	68ba      	ldr	r2, [r7, #8]
 8007ac0:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f001 fdc9 	bl	800965c <USBH_LL_Init>

  return USBH_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3710      	adds	r7, #16
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007adc:	2300      	movs	r3, #0
 8007ade:	60fb      	str	r3, [r7, #12]
 8007ae0:	e009      	b.n	8007af6 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	33e0      	adds	r3, #224	@ 0xe0
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	4413      	add	r3, r2
 8007aec:	2200      	movs	r2, #0
 8007aee:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	3301      	adds	r3, #1
 8007af4:	60fb      	str	r3, [r7, #12]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2b0f      	cmp	r3, #15
 8007afa:	d9f2      	bls.n	8007ae2 <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007afc:	2300      	movs	r3, #0
 8007afe:	60fb      	str	r3, [r7, #12]
 8007b00:	e009      	b.n	8007b16 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	4413      	add	r3, r2
 8007b08:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	3301      	adds	r3, #1
 8007b14:	60fb      	str	r3, [r7, #12]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b1c:	d3f1      	bcc.n	8007b02 <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2240      	movs	r2, #64	@ 0x40
 8007b42:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2201      	movs	r2, #1
 8007b56:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	331c      	adds	r3, #28
 8007b6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007b72:	2100      	movs	r1, #0
 8007b74:	4618      	mov	r0, r3
 8007b76:	f002 f93c 	bl	8009df2 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007b80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b84:	2100      	movs	r1, #0
 8007b86:	4618      	mov	r0, r3
 8007b88:	f002 f933 	bl	8009df2 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007b92:	2212      	movs	r2, #18
 8007b94:	2100      	movs	r1, #0
 8007b96:	4618      	mov	r0, r3
 8007b98:	f002 f92b 	bl	8009df2 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007ba2:	223e      	movs	r2, #62	@ 0x3e
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f002 f923 	bl	8009df2 <memset>

  return USBH_OK;
 8007bac:	2300      	movs	r3, #0
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3710      	adds	r7, #16
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}

08007bb6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b085      	sub	sp, #20
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
 8007bbe:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d016      	beq.n	8007bf8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d10e      	bne.n	8007bf2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007bda:	1c59      	adds	r1, r3, #1
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	33de      	adds	r3, #222	@ 0xde
 8007be6:	6839      	ldr	r1, [r7, #0]
 8007be8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007bec:	2300      	movs	r3, #0
 8007bee:	73fb      	strb	r3, [r7, #15]
 8007bf0:	e004      	b.n	8007bfc <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007bf2:	2302      	movs	r3, #2
 8007bf4:	73fb      	strb	r3, [r7, #15]
 8007bf6:	e001      	b.n	8007bfc <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007bf8:	2302      	movs	r3, #2
 8007bfa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3714      	adds	r7, #20
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr

08007c0a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	b085      	sub	sp, #20
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
 8007c12:	460b      	mov	r3, r1
 8007c14:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007c16:	2300      	movs	r3, #0
 8007c18:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007c20:	78fa      	ldrb	r2, [r7, #3]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d204      	bcs.n	8007c30 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	78fa      	ldrb	r2, [r7, #3]
 8007c2a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007c2e:	e001      	b.n	8007c34 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007c30:	2302      	movs	r3, #2
 8007c32:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3714      	adds	r7, #20
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr

08007c42 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007c42:	b480      	push	{r7}
 8007c44:	b087      	sub	sp, #28
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
 8007c4a:	4608      	mov	r0, r1
 8007c4c:	4611      	mov	r1, r2
 8007c4e:	461a      	mov	r2, r3
 8007c50:	4603      	mov	r3, r0
 8007c52:	70fb      	strb	r3, [r7, #3]
 8007c54:	460b      	mov	r3, r1
 8007c56:	70bb      	strb	r3, [r7, #2]
 8007c58:	4613      	mov	r3, r2
 8007c5a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007c60:	2300      	movs	r3, #0
 8007c62:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007c6a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007c6c:	e025      	b.n	8007cba <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007c6e:	7dfb      	ldrb	r3, [r7, #23]
 8007c70:	221a      	movs	r2, #26
 8007c72:	fb02 f303 	mul.w	r3, r2, r3
 8007c76:	3308      	adds	r3, #8
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	3302      	adds	r3, #2
 8007c7e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	795b      	ldrb	r3, [r3, #5]
 8007c84:	78fa      	ldrb	r2, [r7, #3]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d002      	beq.n	8007c90 <USBH_FindInterface+0x4e>
 8007c8a:	78fb      	ldrb	r3, [r7, #3]
 8007c8c:	2bff      	cmp	r3, #255	@ 0xff
 8007c8e:	d111      	bne.n	8007cb4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007c94:	78ba      	ldrb	r2, [r7, #2]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d002      	beq.n	8007ca0 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007c9a:	78bb      	ldrb	r3, [r7, #2]
 8007c9c:	2bff      	cmp	r3, #255	@ 0xff
 8007c9e:	d109      	bne.n	8007cb4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007ca4:	787a      	ldrb	r2, [r7, #1]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d002      	beq.n	8007cb0 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007caa:	787b      	ldrb	r3, [r7, #1]
 8007cac:	2bff      	cmp	r3, #255	@ 0xff
 8007cae:	d101      	bne.n	8007cb4 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007cb0:	7dfb      	ldrb	r3, [r7, #23]
 8007cb2:	e006      	b.n	8007cc2 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007cb4:	7dfb      	ldrb	r3, [r7, #23]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007cba:	7dfb      	ldrb	r3, [r7, #23]
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d9d6      	bls.n	8007c6e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007cc0:	23ff      	movs	r3, #255	@ 0xff
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	371c      	adds	r7, #28
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr

08007cce <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b082      	sub	sp, #8
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f001 fcfc 	bl	80096d4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007cdc:	2101      	movs	r1, #1
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f001 fe15 	bl	800990e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3708      	adds	r7, #8
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
	...

08007cf0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b088      	sub	sp, #32
 8007cf4:	af04      	add	r7, sp, #16
 8007cf6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007cf8:	2302      	movs	r3, #2
 8007cfa:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d102      	bne.n	8007d12 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2203      	movs	r2, #3
 8007d10:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	2b0b      	cmp	r3, #11
 8007d1a:	f200 81bc 	bhi.w	8008096 <USBH_Process+0x3a6>
 8007d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d24 <USBH_Process+0x34>)
 8007d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d24:	08007d55 	.word	0x08007d55
 8007d28:	08007d87 	.word	0x08007d87
 8007d2c:	08007df1 	.word	0x08007df1
 8007d30:	08008031 	.word	0x08008031
 8007d34:	08008097 	.word	0x08008097
 8007d38:	08007e91 	.word	0x08007e91
 8007d3c:	08007fd7 	.word	0x08007fd7
 8007d40:	08007ec7 	.word	0x08007ec7
 8007d44:	08007ee7 	.word	0x08007ee7
 8007d48:	08007f05 	.word	0x08007f05
 8007d4c:	08007f49 	.word	0x08007f49
 8007d50:	08008019 	.word	0x08008019
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	f000 819c 	beq.w	800809a <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2201      	movs	r2, #1
 8007d66:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007d68:	20c8      	movs	r0, #200	@ 0xc8
 8007d6a:	f001 fe1a 	bl	80099a2 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f001 fd0d 	bl	800978e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8007d84:	e189      	b.n	800809a <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d107      	bne.n	8007da2 <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2202      	movs	r2, #2
 8007d9e:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007da0:	e18a      	b.n	80080b8 <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007da8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007dac:	d914      	bls.n	8007dd8 <USBH_Process+0xe8>
          phost->device.RstCnt++;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007db4:	3301      	adds	r3, #1
 8007db6:	b2da      	uxtb	r2, r3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007dc4:	2b03      	cmp	r3, #3
 8007dc6:	d903      	bls.n	8007dd0 <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	220d      	movs	r2, #13
 8007dcc:	701a      	strb	r2, [r3, #0]
      break;
 8007dce:	e173      	b.n	80080b8 <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	701a      	strb	r2, [r3, #0]
      break;
 8007dd6:	e16f      	b.n	80080b8 <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007dde:	f103 020a 	add.w	r2, r3, #10
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007de8:	200a      	movs	r0, #10
 8007dea:	f001 fdda 	bl	80099a2 <USBH_Delay>
      break;
 8007dee:	e163      	b.n	80080b8 <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d005      	beq.n	8007e06 <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007e00:	2104      	movs	r1, #4
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007e06:	2064      	movs	r0, #100	@ 0x64
 8007e08:	f001 fdcb 	bl	80099a2 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f001 fc97 	bl	8009740 <USBH_LL_GetSpeed>
 8007e12:	4603      	mov	r3, r0
 8007e14:	461a      	mov	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2205      	movs	r2, #5
 8007e20:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007e22:	2100      	movs	r1, #0
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f001 faa2 	bl	800936e <USBH_AllocPipe>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007e32:	2180      	movs	r1, #128	@ 0x80
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f001 fa9a 	bl	800936e <USBH_AllocPipe>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	7919      	ldrb	r1, [r3, #4]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007e56:	9202      	str	r2, [sp, #8]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	9201      	str	r2, [sp, #4]
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2280      	movs	r2, #128	@ 0x80
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f001 fa54 	bl	8009310 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	7959      	ldrb	r1, [r3, #5]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007e7c:	9202      	str	r2, [sp, #8]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	9201      	str	r2, [sp, #4]
 8007e82:	9300      	str	r3, [sp, #0]
 8007e84:	4603      	mov	r3, r0
 8007e86:	2200      	movs	r2, #0
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f001 fa41 	bl	8009310 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007e8e:	e113      	b.n	80080b8 <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 f917 	bl	80080c4 <USBH_HandleEnum>
 8007e96:	4603      	mov	r3, r0
 8007e98:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007e9a:	7bbb      	ldrb	r3, [r7, #14]
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	f040 80fd 	bne.w	800809e <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d103      	bne.n	8007ebe <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2208      	movs	r2, #8
 8007eba:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8007ebc:	e0ef      	b.n	800809e <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2207      	movs	r2, #7
 8007ec2:	701a      	strb	r2, [r3, #0]
      break;
 8007ec4:	e0eb      	b.n	800809e <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f000 80e8 	beq.w	80080a2 <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007ed8:	2101      	movs	r1, #1
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2208      	movs	r2, #8
 8007ee2:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 8007ee4:	e0dd      	b.n	80080a2 <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007eec:	4619      	mov	r1, r3
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 fc3f 	bl	8008772 <USBH_SetCfg>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	f040 80d5 	bne.w	80080a6 <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2209      	movs	r2, #9
 8007f00:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007f02:	e0d0      	b.n	80080a6 <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007f0a:	f003 0320 	and.w	r3, r3, #32
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d016      	beq.n	8007f40 <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007f12:	2101      	movs	r1, #1
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 fc4f 	bl	80087b8 <USBH_SetFeature>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007f1e:	7bbb      	ldrb	r3, [r7, #14]
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d103      	bne.n	8007f2e <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	220a      	movs	r2, #10
 8007f2a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007f2c:	e0bd      	b.n	80080aa <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 8007f2e:	7bbb      	ldrb	r3, [r7, #14]
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	2b03      	cmp	r3, #3
 8007f34:	f040 80b9 	bne.w	80080aa <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	220a      	movs	r2, #10
 8007f3c:	701a      	strb	r2, [r3, #0]
      break;
 8007f3e:	e0b4      	b.n	80080aa <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	220a      	movs	r2, #10
 8007f44:	701a      	strb	r2, [r3, #0]
      break;
 8007f46:	e0b0      	b.n	80080aa <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	f000 80ad 	beq.w	80080ae <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	73fb      	strb	r3, [r7, #15]
 8007f60:	e016      	b.n	8007f90 <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007f62:	7bfa      	ldrb	r2, [r7, #15]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	32de      	adds	r2, #222	@ 0xde
 8007f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f6c:	791a      	ldrb	r2, [r3, #4]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d108      	bne.n	8007f8a <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007f78:	7bfa      	ldrb	r2, [r7, #15]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	32de      	adds	r2, #222	@ 0xde
 8007f7e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007f88:	e005      	b.n	8007f96 <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007f8a:	7bfb      	ldrb	r3, [r7, #15]
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	73fb      	strb	r3, [r7, #15]
 8007f90:	7bfb      	ldrb	r3, [r7, #15]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d0e5      	beq.n	8007f62 <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d016      	beq.n	8007fce <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	4798      	blx	r3
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d109      	bne.n	8007fc6 <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2206      	movs	r2, #6
 8007fb6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007fbe:	2103      	movs	r1, #3
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007fc4:	e073      	b.n	80080ae <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	220d      	movs	r2, #13
 8007fca:	701a      	strb	r2, [r3, #0]
      break;
 8007fcc:	e06f      	b.n	80080ae <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	220d      	movs	r2, #13
 8007fd2:	701a      	strb	r2, [r3, #0]
      break;
 8007fd4:	e06b      	b.n	80080ae <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d017      	beq.n	8008010 <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	4798      	blx	r3
 8007fec:	4603      	mov	r3, r0
 8007fee:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007ff0:	7bbb      	ldrb	r3, [r7, #14]
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d103      	bne.n	8008000 <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	220b      	movs	r2, #11
 8007ffc:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007ffe:	e058      	b.n	80080b2 <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 8008000:	7bbb      	ldrb	r3, [r7, #14]
 8008002:	b2db      	uxtb	r3, r3
 8008004:	2b02      	cmp	r3, #2
 8008006:	d154      	bne.n	80080b2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	220d      	movs	r2, #13
 800800c:	701a      	strb	r2, [r3, #0]
      break;
 800800e:	e050      	b.n	80080b2 <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	220d      	movs	r2, #13
 8008014:	701a      	strb	r2, [r3, #0]
      break;
 8008016:	e04c      	b.n	80080b2 <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800801e:	2b00      	cmp	r3, #0
 8008020:	d049      	beq.n	80080b6 <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008028:	695b      	ldr	r3, [r3, #20]
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	4798      	blx	r3
      }
      break;
 800802e:	e042      	b.n	80080b6 <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f7ff fd4b 	bl	8007ad4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008044:	2b00      	cmp	r3, #0
 8008046:	d009      	beq.n	800805c <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008062:	2b00      	cmp	r3, #0
 8008064:	d005      	beq.n	8008072 <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800806c:	2105      	movs	r1, #5
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008078:	b2db      	uxtb	r3, r3
 800807a:	2b01      	cmp	r3, #1
 800807c:	d107      	bne.n	800808e <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f7ff fe21 	bl	8007cce <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800808c:	e014      	b.n	80080b8 <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f001 fb20 	bl	80096d4 <USBH_LL_Start>
      break;
 8008094:	e010      	b.n	80080b8 <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 8008096:	bf00      	nop
 8008098:	e00e      	b.n	80080b8 <USBH_Process+0x3c8>
      break;
 800809a:	bf00      	nop
 800809c:	e00c      	b.n	80080b8 <USBH_Process+0x3c8>
      break;
 800809e:	bf00      	nop
 80080a0:	e00a      	b.n	80080b8 <USBH_Process+0x3c8>
    break;
 80080a2:	bf00      	nop
 80080a4:	e008      	b.n	80080b8 <USBH_Process+0x3c8>
      break;
 80080a6:	bf00      	nop
 80080a8:	e006      	b.n	80080b8 <USBH_Process+0x3c8>
      break;
 80080aa:	bf00      	nop
 80080ac:	e004      	b.n	80080b8 <USBH_Process+0x3c8>
      break;
 80080ae:	bf00      	nop
 80080b0:	e002      	b.n	80080b8 <USBH_Process+0x3c8>
      break;
 80080b2:	bf00      	nop
 80080b4:	e000      	b.n	80080b8 <USBH_Process+0x3c8>
      break;
 80080b6:	bf00      	nop
  }
  return USBH_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop

080080c4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b088      	sub	sp, #32
 80080c8:	af04      	add	r7, sp, #16
 80080ca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80080cc:	2301      	movs	r3, #1
 80080ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80080d0:	2301      	movs	r3, #1
 80080d2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	785b      	ldrb	r3, [r3, #1]
 80080d8:	2b07      	cmp	r3, #7
 80080da:	f200 81bd 	bhi.w	8008458 <USBH_HandleEnum+0x394>
 80080de:	a201      	add	r2, pc, #4	@ (adr r2, 80080e4 <USBH_HandleEnum+0x20>)
 80080e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e4:	08008105 	.word	0x08008105
 80080e8:	080081bf 	.word	0x080081bf
 80080ec:	08008229 	.word	0x08008229
 80080f0:	080082b3 	.word	0x080082b3
 80080f4:	0800831d 	.word	0x0800831d
 80080f8:	0800838d 	.word	0x0800838d
 80080fc:	080083d3 	.word	0x080083d3
 8008100:	08008419 	.word	0x08008419
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008104:	2108      	movs	r1, #8
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fa50 	bl	80085ac <USBH_Get_DevDesc>
 800810c:	4603      	mov	r3, r0
 800810e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008110:	7bbb      	ldrb	r3, [r7, #14]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d12e      	bne.n	8008174 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	7919      	ldrb	r1, [r3, #4]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800813a:	9202      	str	r2, [sp, #8]
 800813c:	2200      	movs	r2, #0
 800813e:	9201      	str	r2, [sp, #4]
 8008140:	9300      	str	r3, [sp, #0]
 8008142:	4603      	mov	r3, r0
 8008144:	2280      	movs	r2, #128	@ 0x80
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f001 f8e2 	bl	8009310 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	7959      	ldrb	r1, [r3, #5]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008160:	9202      	str	r2, [sp, #8]
 8008162:	2200      	movs	r2, #0
 8008164:	9201      	str	r2, [sp, #4]
 8008166:	9300      	str	r3, [sp, #0]
 8008168:	4603      	mov	r3, r0
 800816a:	2200      	movs	r2, #0
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f001 f8cf 	bl	8009310 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008172:	e173      	b.n	800845c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008174:	7bbb      	ldrb	r3, [r7, #14]
 8008176:	2b03      	cmp	r3, #3
 8008178:	f040 8170 	bne.w	800845c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008182:	3301      	adds	r3, #1
 8008184:	b2da      	uxtb	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008192:	2b03      	cmp	r3, #3
 8008194:	d903      	bls.n	800819e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	220d      	movs	r2, #13
 800819a:	701a      	strb	r2, [r3, #0]
      break;
 800819c:	e15e      	b.n	800845c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	795b      	ldrb	r3, [r3, #5]
 80081a2:	4619      	mov	r1, r3
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f001 f903 	bl	80093b0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	791b      	ldrb	r3, [r3, #4]
 80081ae:	4619      	mov	r1, r3
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f001 f8fd 	bl	80093b0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	701a      	strb	r2, [r3, #0]
      break;
 80081bc:	e14e      	b.n	800845c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80081be:	2112      	movs	r1, #18
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 f9f3 	bl	80085ac <USBH_Get_DevDesc>
 80081c6:	4603      	mov	r3, r0
 80081c8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80081ca:	7bbb      	ldrb	r3, [r7, #14]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d103      	bne.n	80081d8 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2202      	movs	r2, #2
 80081d4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80081d6:	e143      	b.n	8008460 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081d8:	7bbb      	ldrb	r3, [r7, #14]
 80081da:	2b03      	cmp	r3, #3
 80081dc:	f040 8140 	bne.w	8008460 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80081e6:	3301      	adds	r3, #1
 80081e8:	b2da      	uxtb	r2, r3
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80081f6:	2b03      	cmp	r3, #3
 80081f8:	d903      	bls.n	8008202 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	220d      	movs	r2, #13
 80081fe:	701a      	strb	r2, [r3, #0]
      break;
 8008200:	e12e      	b.n	8008460 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	795b      	ldrb	r3, [r3, #5]
 8008206:	4619      	mov	r1, r3
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f001 f8d1 	bl	80093b0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	791b      	ldrb	r3, [r3, #4]
 8008212:	4619      	mov	r1, r3
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f001 f8cb 	bl	80093b0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	701a      	strb	r2, [r3, #0]
      break;
 8008226:	e11b      	b.n	8008460 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008228:	2101      	movs	r1, #1
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 fa7d 	bl	800872a <USBH_SetAddress>
 8008230:	4603      	mov	r3, r0
 8008232:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008234:	7bbb      	ldrb	r3, [r7, #14]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d130      	bne.n	800829c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800823a:	2002      	movs	r0, #2
 800823c:	f001 fbb1 	bl	80099a2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2203      	movs	r2, #3
 800824c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	7919      	ldrb	r1, [r3, #4]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008262:	9202      	str	r2, [sp, #8]
 8008264:	2200      	movs	r2, #0
 8008266:	9201      	str	r2, [sp, #4]
 8008268:	9300      	str	r3, [sp, #0]
 800826a:	4603      	mov	r3, r0
 800826c:	2280      	movs	r2, #128	@ 0x80
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f001 f84e 	bl	8009310 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	7959      	ldrb	r1, [r3, #5]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008288:	9202      	str	r2, [sp, #8]
 800828a:	2200      	movs	r2, #0
 800828c:	9201      	str	r2, [sp, #4]
 800828e:	9300      	str	r3, [sp, #0]
 8008290:	4603      	mov	r3, r0
 8008292:	2200      	movs	r2, #0
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f001 f83b 	bl	8009310 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800829a:	e0e3      	b.n	8008464 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800829c:	7bbb      	ldrb	r3, [r7, #14]
 800829e:	2b03      	cmp	r3, #3
 80082a0:	f040 80e0 	bne.w	8008464 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	220d      	movs	r2, #13
 80082a8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	705a      	strb	r2, [r3, #1]
      break;
 80082b0:	e0d8      	b.n	8008464 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80082b2:	2109      	movs	r1, #9
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 f9a5 	bl	8008604 <USBH_Get_CfgDesc>
 80082ba:	4603      	mov	r3, r0
 80082bc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80082be:	7bbb      	ldrb	r3, [r7, #14]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d103      	bne.n	80082cc <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2204      	movs	r2, #4
 80082c8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80082ca:	e0cd      	b.n	8008468 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082cc:	7bbb      	ldrb	r3, [r7, #14]
 80082ce:	2b03      	cmp	r3, #3
 80082d0:	f040 80ca 	bne.w	8008468 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80082da:	3301      	adds	r3, #1
 80082dc:	b2da      	uxtb	r2, r3
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80082ea:	2b03      	cmp	r3, #3
 80082ec:	d903      	bls.n	80082f6 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	220d      	movs	r2, #13
 80082f2:	701a      	strb	r2, [r3, #0]
      break;
 80082f4:	e0b8      	b.n	8008468 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	795b      	ldrb	r3, [r3, #5]
 80082fa:	4619      	mov	r1, r3
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f001 f857 	bl	80093b0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	791b      	ldrb	r3, [r3, #4]
 8008306:	4619      	mov	r1, r3
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f001 f851 	bl	80093b0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	701a      	strb	r2, [r3, #0]
      break;
 800831a:	e0a5      	b.n	8008468 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8008322:	4619      	mov	r1, r3
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 f96d 	bl	8008604 <USBH_Get_CfgDesc>
 800832a:	4603      	mov	r3, r0
 800832c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800832e:	7bbb      	ldrb	r3, [r7, #14]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d103      	bne.n	800833c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2205      	movs	r2, #5
 8008338:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800833a:	e097      	b.n	800846c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800833c:	7bbb      	ldrb	r3, [r7, #14]
 800833e:	2b03      	cmp	r3, #3
 8008340:	f040 8094 	bne.w	800846c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800834a:	3301      	adds	r3, #1
 800834c:	b2da      	uxtb	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800835a:	2b03      	cmp	r3, #3
 800835c:	d903      	bls.n	8008366 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	220d      	movs	r2, #13
 8008362:	701a      	strb	r2, [r3, #0]
      break;
 8008364:	e082      	b.n	800846c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	795b      	ldrb	r3, [r3, #5]
 800836a:	4619      	mov	r1, r3
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f001 f81f 	bl	80093b0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	791b      	ldrb	r3, [r3, #4]
 8008376:	4619      	mov	r1, r3
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f001 f819 	bl	80093b0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	701a      	strb	r2, [r3, #0]
      break;
 800838a:	e06f      	b.n	800846c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8008392:	2b00      	cmp	r3, #0
 8008394:	d019      	beq.n	80083ca <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80083a2:	23ff      	movs	r3, #255	@ 0xff
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 f957 	bl	8008658 <USBH_Get_StringDesc>
 80083aa:	4603      	mov	r3, r0
 80083ac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80083ae:	7bbb      	ldrb	r3, [r7, #14]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d103      	bne.n	80083bc <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2206      	movs	r2, #6
 80083b8:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80083ba:	e059      	b.n	8008470 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083bc:	7bbb      	ldrb	r3, [r7, #14]
 80083be:	2b03      	cmp	r3, #3
 80083c0:	d156      	bne.n	8008470 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2206      	movs	r2, #6
 80083c6:	705a      	strb	r2, [r3, #1]
      break;
 80083c8:	e052      	b.n	8008470 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2206      	movs	r2, #6
 80083ce:	705a      	strb	r2, [r3, #1]
      break;
 80083d0:	e04e      	b.n	8008470 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d019      	beq.n	8008410 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80083e8:	23ff      	movs	r3, #255	@ 0xff
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 f934 	bl	8008658 <USBH_Get_StringDesc>
 80083f0:	4603      	mov	r3, r0
 80083f2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80083f4:	7bbb      	ldrb	r3, [r7, #14]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d103      	bne.n	8008402 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2207      	movs	r2, #7
 80083fe:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8008400:	e038      	b.n	8008474 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008402:	7bbb      	ldrb	r3, [r7, #14]
 8008404:	2b03      	cmp	r3, #3
 8008406:	d135      	bne.n	8008474 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2207      	movs	r2, #7
 800840c:	705a      	strb	r2, [r3, #1]
      break;
 800840e:	e031      	b.n	8008474 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2207      	movs	r2, #7
 8008414:	705a      	strb	r2, [r3, #1]
      break;
 8008416:	e02d      	b.n	8008474 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800841e:	2b00      	cmp	r3, #0
 8008420:	d017      	beq.n	8008452 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800842e:	23ff      	movs	r3, #255	@ 0xff
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 f911 	bl	8008658 <USBH_Get_StringDesc>
 8008436:	4603      	mov	r3, r0
 8008438:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800843a:	7bbb      	ldrb	r3, [r7, #14]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d102      	bne.n	8008446 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008440:	2300      	movs	r3, #0
 8008442:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008444:	e018      	b.n	8008478 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008446:	7bbb      	ldrb	r3, [r7, #14]
 8008448:	2b03      	cmp	r3, #3
 800844a:	d115      	bne.n	8008478 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800844c:	2300      	movs	r3, #0
 800844e:	73fb      	strb	r3, [r7, #15]
      break;
 8008450:	e012      	b.n	8008478 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8008452:	2300      	movs	r3, #0
 8008454:	73fb      	strb	r3, [r7, #15]
      break;
 8008456:	e00f      	b.n	8008478 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008458:	bf00      	nop
 800845a:	e00e      	b.n	800847a <USBH_HandleEnum+0x3b6>
      break;
 800845c:	bf00      	nop
 800845e:	e00c      	b.n	800847a <USBH_HandleEnum+0x3b6>
      break;
 8008460:	bf00      	nop
 8008462:	e00a      	b.n	800847a <USBH_HandleEnum+0x3b6>
      break;
 8008464:	bf00      	nop
 8008466:	e008      	b.n	800847a <USBH_HandleEnum+0x3b6>
      break;
 8008468:	bf00      	nop
 800846a:	e006      	b.n	800847a <USBH_HandleEnum+0x3b6>
      break;
 800846c:	bf00      	nop
 800846e:	e004      	b.n	800847a <USBH_HandleEnum+0x3b6>
      break;
 8008470:	bf00      	nop
 8008472:	e002      	b.n	800847a <USBH_HandleEnum+0x3b6>
      break;
 8008474:	bf00      	nop
 8008476:	e000      	b.n	800847a <USBH_HandleEnum+0x3b6>
      break;
 8008478:	bf00      	nop
  }
  return Status;
 800847a:	7bfb      	ldrb	r3, [r7, #15]
}
 800847c:	4618      	mov	r0, r3
 800847e:	3710      	adds	r7, #16
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	683a      	ldr	r2, [r7, #0]
 8008492:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8008496:	bf00      	nop
 8008498:	370c      	adds	r7, #12
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr

080084a2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80084a2:	b580      	push	{r7, lr}
 80084a4:	b082      	sub	sp, #8
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80084b0:	1c5a      	adds	r2, r3, #1
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 f804 	bl	80084c6 <USBH_HandleSof>
}
 80084be:	bf00      	nop
 80084c0:	3708      	adds	r7, #8
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b082      	sub	sp, #8
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	2b0b      	cmp	r3, #11
 80084d6:	d10a      	bne.n	80084ee <USBH_HandleSof+0x28>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d005      	beq.n	80084ee <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80084e8:	699b      	ldr	r3, [r3, #24]
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	4798      	blx	r3
  }
}
 80084ee:	bf00      	nop
 80084f0:	3708      	adds	r7, #8
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80084f6:	b480      	push	{r7}
 80084f8:	b083      	sub	sp, #12
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2201      	movs	r2, #1
 8008502:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 8008506:	bf00      	nop
}
 8008508:	370c      	adds	r7, #12
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr

08008512 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008512:	b480      	push	{r7}
 8008514:	b083      	sub	sp, #12
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2201      	movs	r2, #1
 8008526:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 800852a:	bf00      	nop
}
 800852c:	370c      	adds	r7, #12
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr

08008536 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008536:	b480      	push	{r7}
 8008538:	b083      	sub	sp, #12
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2201      	movs	r2, #1
 8008542:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2200      	movs	r2, #0
 800854a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8008556:	2300      	movs	r3, #0
}
 8008558:	4618      	mov	r0, r3
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2201      	movs	r2, #1
 8008570:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f001 f8c0 	bl	800970a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	791b      	ldrb	r3, [r3, #4]
 800858e:	4619      	mov	r1, r3
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 ff0d 	bl	80093b0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	795b      	ldrb	r3, [r3, #5]
 800859a:	4619      	mov	r1, r3
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 ff07 	bl	80093b0 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 80085a2:	2300      	movs	r3, #0
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3708      	adds	r7, #8
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b086      	sub	sp, #24
 80085b0:	af02      	add	r7, sp, #8
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	460b      	mov	r3, r1
 80085b6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80085b8:	887b      	ldrh	r3, [r7, #2]
 80085ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085be:	d901      	bls.n	80085c4 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80085c0:	2303      	movs	r3, #3
 80085c2:	e01b      	b.n	80085fc <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80085ca:	887b      	ldrh	r3, [r7, #2]
 80085cc:	9300      	str	r3, [sp, #0]
 80085ce:	4613      	mov	r3, r2
 80085d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80085d4:	2100      	movs	r1, #0
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 f872 	bl	80086c0 <USBH_GetDescriptor>
 80085dc:	4603      	mov	r3, r0
 80085de:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80085e0:	7bfb      	ldrb	r3, [r7, #15]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d109      	bne.n	80085fa <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80085ec:	887a      	ldrh	r2, [r7, #2]
 80085ee:	4619      	mov	r1, r3
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 f929 	bl	8008848 <USBH_ParseDevDesc>
 80085f6:	4603      	mov	r3, r0
 80085f8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80085fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3710      	adds	r7, #16
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b086      	sub	sp, #24
 8008608:	af02      	add	r7, sp, #8
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	460b      	mov	r3, r1
 800860e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	331c      	adds	r3, #28
 8008614:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008616:	887b      	ldrh	r3, [r7, #2]
 8008618:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800861c:	d901      	bls.n	8008622 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800861e:	2303      	movs	r3, #3
 8008620:	e016      	b.n	8008650 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008622:	887b      	ldrh	r3, [r7, #2]
 8008624:	9300      	str	r3, [sp, #0]
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800862c:	2100      	movs	r1, #0
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 f846 	bl	80086c0 <USBH_GetDescriptor>
 8008634:	4603      	mov	r3, r0
 8008636:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008638:	7bfb      	ldrb	r3, [r7, #15]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d107      	bne.n	800864e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800863e:	887b      	ldrh	r3, [r7, #2]
 8008640:	461a      	mov	r2, r3
 8008642:	68b9      	ldr	r1, [r7, #8]
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 f9af 	bl	80089a8 <USBH_ParseCfgDesc>
 800864a:	4603      	mov	r3, r0
 800864c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800864e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008650:	4618      	mov	r0, r3
 8008652:	3710      	adds	r7, #16
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b088      	sub	sp, #32
 800865c:	af02      	add	r7, sp, #8
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	607a      	str	r2, [r7, #4]
 8008662:	461a      	mov	r2, r3
 8008664:	460b      	mov	r3, r1
 8008666:	72fb      	strb	r3, [r7, #11]
 8008668:	4613      	mov	r3, r2
 800866a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800866c:	893b      	ldrh	r3, [r7, #8]
 800866e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008672:	d802      	bhi.n	800867a <USBH_Get_StringDesc+0x22>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d101      	bne.n	800867e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800867a:	2303      	movs	r3, #3
 800867c:	e01c      	b.n	80086b8 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800867e:	7afb      	ldrb	r3, [r7, #11]
 8008680:	b29b      	uxth	r3, r3
 8008682:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008686:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800868e:	893b      	ldrh	r3, [r7, #8]
 8008690:	9300      	str	r3, [sp, #0]
 8008692:	460b      	mov	r3, r1
 8008694:	2100      	movs	r1, #0
 8008696:	68f8      	ldr	r0, [r7, #12]
 8008698:	f000 f812 	bl	80086c0 <USBH_GetDescriptor>
 800869c:	4603      	mov	r3, r0
 800869e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80086a0:	7dfb      	ldrb	r3, [r7, #23]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d107      	bne.n	80086b6 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80086ac:	893a      	ldrh	r2, [r7, #8]
 80086ae:	6879      	ldr	r1, [r7, #4]
 80086b0:	4618      	mov	r0, r3
 80086b2:	f000 fb8c 	bl	8008dce <USBH_ParseStringDesc>
  }

  return status;
 80086b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3718      	adds	r7, #24
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	607b      	str	r3, [r7, #4]
 80086ca:	460b      	mov	r3, r1
 80086cc:	72fb      	strb	r3, [r7, #11]
 80086ce:	4613      	mov	r3, r2
 80086d0:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	789b      	ldrb	r3, [r3, #2]
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d11c      	bne.n	8008714 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80086da:	7afb      	ldrb	r3, [r7, #11]
 80086dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80086e0:	b2da      	uxtb	r2, r3
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2206      	movs	r2, #6
 80086ea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	893a      	ldrh	r2, [r7, #8]
 80086f0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80086f2:	893b      	ldrh	r3, [r7, #8]
 80086f4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80086f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80086fc:	d104      	bne.n	8008708 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f240 4209 	movw	r2, #1033	@ 0x409
 8008704:	829a      	strh	r2, [r3, #20]
 8008706:	e002      	b.n	800870e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2200      	movs	r2, #0
 800870c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	8b3a      	ldrh	r2, [r7, #24]
 8008712:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008714:	8b3b      	ldrh	r3, [r7, #24]
 8008716:	461a      	mov	r2, r3
 8008718:	6879      	ldr	r1, [r7, #4]
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	f000 fba4 	bl	8008e68 <USBH_CtlReq>
 8008720:	4603      	mov	r3, r0
}
 8008722:	4618      	mov	r0, r3
 8008724:	3710      	adds	r7, #16
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}

0800872a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800872a:	b580      	push	{r7, lr}
 800872c:	b082      	sub	sp, #8
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
 8008732:	460b      	mov	r3, r1
 8008734:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	789b      	ldrb	r3, [r3, #2]
 800873a:	2b01      	cmp	r3, #1
 800873c:	d10f      	bne.n	800875e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2205      	movs	r2, #5
 8008748:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800874a:	78fb      	ldrb	r3, [r7, #3]
 800874c:	b29a      	uxth	r2, r3
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800875e:	2200      	movs	r2, #0
 8008760:	2100      	movs	r1, #0
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 fb80 	bl	8008e68 <USBH_CtlReq>
 8008768:	4603      	mov	r3, r0
}
 800876a:	4618      	mov	r0, r3
 800876c:	3708      	adds	r7, #8
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}

08008772 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008772:	b580      	push	{r7, lr}
 8008774:	b082      	sub	sp, #8
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
 800877a:	460b      	mov	r3, r1
 800877c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	789b      	ldrb	r3, [r3, #2]
 8008782:	2b01      	cmp	r3, #1
 8008784:	d10e      	bne.n	80087a4 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2209      	movs	r2, #9
 8008790:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	887a      	ldrh	r2, [r7, #2]
 8008796:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80087a4:	2200      	movs	r2, #0
 80087a6:	2100      	movs	r1, #0
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 fb5d 	bl	8008e68 <USBH_CtlReq>
 80087ae:	4603      	mov	r3, r0
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	460b      	mov	r3, r1
 80087c2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	789b      	ldrb	r3, [r3, #2]
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d10f      	bne.n	80087ec <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2203      	movs	r2, #3
 80087d6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80087d8:	78fb      	ldrb	r3, [r7, #3]
 80087da:	b29a      	uxth	r2, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80087ec:	2200      	movs	r2, #0
 80087ee:	2100      	movs	r1, #0
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 fb39 	bl	8008e68 <USBH_CtlReq>
 80087f6:	4603      	mov	r3, r0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3708      	adds	r7, #8
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	460b      	mov	r3, r1
 800880a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	789b      	ldrb	r3, [r3, #2]
 8008810:	2b01      	cmp	r3, #1
 8008812:	d10f      	bne.n	8008834 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2202      	movs	r2, #2
 8008818:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2201      	movs	r2, #1
 800881e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008826:	78fb      	ldrb	r3, [r7, #3]
 8008828:	b29a      	uxth	r2, r3
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008834:	2200      	movs	r2, #0
 8008836:	2100      	movs	r1, #0
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 fb15 	bl	8008e68 <USBH_CtlReq>
 800883e:	4603      	mov	r3, r0
}
 8008840:	4618      	mov	r0, r3
 8008842:	3708      	adds	r7, #8
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008848:	b480      	push	{r7}
 800884a:	b087      	sub	sp, #28
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	4613      	mov	r3, r2
 8008854:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800885c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800885e:	2300      	movs	r3, #0
 8008860:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d101      	bne.n	800886c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008868:	2302      	movs	r3, #2
 800886a:	e094      	b.n	8008996 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	781a      	ldrb	r2, [r3, #0]
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	785a      	ldrb	r2, [r3, #1]
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	3302      	adds	r3, #2
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	461a      	mov	r2, r3
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	3303      	adds	r3, #3
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	021b      	lsls	r3, r3, #8
 800888c:	b29b      	uxth	r3, r3
 800888e:	4313      	orrs	r3, r2
 8008890:	b29a      	uxth	r2, r3
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	791a      	ldrb	r2, [r3, #4]
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	795a      	ldrb	r2, [r3, #5]
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	799a      	ldrb	r2, [r3, #6]
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	79da      	ldrb	r2, [r3, #7]
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d004      	beq.n	80088ca <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d11b      	bne.n	8008902 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	79db      	ldrb	r3, [r3, #7]
 80088ce:	2b20      	cmp	r3, #32
 80088d0:	dc0f      	bgt.n	80088f2 <USBH_ParseDevDesc+0xaa>
 80088d2:	2b08      	cmp	r3, #8
 80088d4:	db0f      	blt.n	80088f6 <USBH_ParseDevDesc+0xae>
 80088d6:	3b08      	subs	r3, #8
 80088d8:	4a32      	ldr	r2, [pc, #200]	@ (80089a4 <USBH_ParseDevDesc+0x15c>)
 80088da:	fa22 f303 	lsr.w	r3, r2, r3
 80088de:	f003 0301 	and.w	r3, r3, #1
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	bf14      	ite	ne
 80088e6:	2301      	movne	r3, #1
 80088e8:	2300      	moveq	r3, #0
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d106      	bne.n	80088fe <USBH_ParseDevDesc+0xb6>
 80088f0:	e001      	b.n	80088f6 <USBH_ParseDevDesc+0xae>
 80088f2:	2b40      	cmp	r3, #64	@ 0x40
 80088f4:	d003      	beq.n	80088fe <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	2208      	movs	r2, #8
 80088fa:	71da      	strb	r2, [r3, #7]
        break;
 80088fc:	e000      	b.n	8008900 <USBH_ParseDevDesc+0xb8>
        break;
 80088fe:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008900:	e00e      	b.n	8008920 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008908:	2b02      	cmp	r3, #2
 800890a:	d107      	bne.n	800891c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	79db      	ldrb	r3, [r3, #7]
 8008910:	2b08      	cmp	r3, #8
 8008912:	d005      	beq.n	8008920 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	2208      	movs	r2, #8
 8008918:	71da      	strb	r2, [r3, #7]
 800891a:	e001      	b.n	8008920 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800891c:	2303      	movs	r3, #3
 800891e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008920:	88fb      	ldrh	r3, [r7, #6]
 8008922:	2b08      	cmp	r3, #8
 8008924:	d936      	bls.n	8008994 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	3308      	adds	r3, #8
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	461a      	mov	r2, r3
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	3309      	adds	r3, #9
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	021b      	lsls	r3, r3, #8
 8008936:	b29b      	uxth	r3, r3
 8008938:	4313      	orrs	r3, r2
 800893a:	b29a      	uxth	r2, r3
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	330a      	adds	r3, #10
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	461a      	mov	r2, r3
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	330b      	adds	r3, #11
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	021b      	lsls	r3, r3, #8
 8008950:	b29b      	uxth	r3, r3
 8008952:	4313      	orrs	r3, r2
 8008954:	b29a      	uxth	r2, r3
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	330c      	adds	r3, #12
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	461a      	mov	r2, r3
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	330d      	adds	r3, #13
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	021b      	lsls	r3, r3, #8
 800896a:	b29b      	uxth	r3, r3
 800896c:	4313      	orrs	r3, r2
 800896e:	b29a      	uxth	r2, r3
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	7b9a      	ldrb	r2, [r3, #14]
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	7bda      	ldrb	r2, [r3, #15]
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	7c1a      	ldrb	r2, [r3, #16]
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	7c5a      	ldrb	r2, [r3, #17]
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008994:	7dfb      	ldrb	r3, [r7, #23]
}
 8008996:	4618      	mov	r0, r3
 8008998:	371c      	adds	r7, #28
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	01000101 	.word	0x01000101

080089a8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b08c      	sub	sp, #48	@ 0x30
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	60f8      	str	r0, [r7, #12]
 80089b0:	60b9      	str	r1, [r7, #8]
 80089b2:	4613      	mov	r3, r2
 80089b4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80089bc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80089be:	2300      	movs	r3, #0
 80089c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80089c4:	2300      	movs	r3, #0
 80089c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80089ca:	2300      	movs	r3, #0
 80089cc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d101      	bne.n	80089da <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80089d6:	2302      	movs	r3, #2
 80089d8:	e0de      	b.n	8008b98 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80089de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	2b09      	cmp	r3, #9
 80089e4:	d002      	beq.n	80089ec <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80089e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089e8:	2209      	movs	r2, #9
 80089ea:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	781a      	ldrb	r2, [r3, #0]
 80089f0:	6a3b      	ldr	r3, [r7, #32]
 80089f2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	785a      	ldrb	r2, [r3, #1]
 80089f8:	6a3b      	ldr	r3, [r7, #32]
 80089fa:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	3302      	adds	r3, #2
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	461a      	mov	r2, r3
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	3303      	adds	r3, #3
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	021b      	lsls	r3, r3, #8
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a16:	bf28      	it	cs
 8008a18:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008a1c:	b29a      	uxth	r2, r3
 8008a1e:	6a3b      	ldr	r3, [r7, #32]
 8008a20:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	791a      	ldrb	r2, [r3, #4]
 8008a26:	6a3b      	ldr	r3, [r7, #32]
 8008a28:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	795a      	ldrb	r2, [r3, #5]
 8008a2e:	6a3b      	ldr	r3, [r7, #32]
 8008a30:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	799a      	ldrb	r2, [r3, #6]
 8008a36:	6a3b      	ldr	r3, [r7, #32]
 8008a38:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	79da      	ldrb	r2, [r3, #7]
 8008a3e:	6a3b      	ldr	r3, [r7, #32]
 8008a40:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	7a1a      	ldrb	r2, [r3, #8]
 8008a46:	6a3b      	ldr	r3, [r7, #32]
 8008a48:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008a4a:	88fb      	ldrh	r3, [r7, #6]
 8008a4c:	2b09      	cmp	r3, #9
 8008a4e:	f240 80a1 	bls.w	8008b94 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 8008a52:	2309      	movs	r3, #9
 8008a54:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008a56:	2300      	movs	r3, #0
 8008a58:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008a5a:	e085      	b.n	8008b68 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008a5c:	f107 0316 	add.w	r3, r7, #22
 8008a60:	4619      	mov	r1, r3
 8008a62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a64:	f000 f9e6 	bl	8008e34 <USBH_GetNextDesc>
 8008a68:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a6c:	785b      	ldrb	r3, [r3, #1]
 8008a6e:	2b04      	cmp	r3, #4
 8008a70:	d17a      	bne.n	8008b68 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	2b09      	cmp	r3, #9
 8008a78:	d002      	beq.n	8008a80 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a7c:	2209      	movs	r2, #9
 8008a7e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008a80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a84:	221a      	movs	r2, #26
 8008a86:	fb02 f303 	mul.w	r3, r2, r3
 8008a8a:	3308      	adds	r3, #8
 8008a8c:	6a3a      	ldr	r2, [r7, #32]
 8008a8e:	4413      	add	r3, r2
 8008a90:	3302      	adds	r3, #2
 8008a92:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008a94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a96:	69f8      	ldr	r0, [r7, #28]
 8008a98:	f000 f882 	bl	8008ba0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008aa6:	e043      	b.n	8008b30 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008aa8:	f107 0316 	add.w	r3, r7, #22
 8008aac:	4619      	mov	r1, r3
 8008aae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ab0:	f000 f9c0 	bl	8008e34 <USBH_GetNextDesc>
 8008ab4:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ab8:	785b      	ldrb	r3, [r3, #1]
 8008aba:	2b05      	cmp	r3, #5
 8008abc:	d138      	bne.n	8008b30 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	795b      	ldrb	r3, [r3, #5]
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	d113      	bne.n	8008aee <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d003      	beq.n	8008ad6 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008ace:	69fb      	ldr	r3, [r7, #28]
 8008ad0:	799b      	ldrb	r3, [r3, #6]
 8008ad2:	2b03      	cmp	r3, #3
 8008ad4:	d10b      	bne.n	8008aee <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	79db      	ldrb	r3, [r3, #7]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d10b      	bne.n	8008af6 <USBH_ParseCfgDesc+0x14e>
 8008ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	2b09      	cmp	r3, #9
 8008ae4:	d007      	beq.n	8008af6 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8008ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ae8:	2209      	movs	r2, #9
 8008aea:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008aec:	e003      	b.n	8008af6 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008af0:	2207      	movs	r2, #7
 8008af2:	701a      	strb	r2, [r3, #0]
 8008af4:	e000      	b.n	8008af8 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008af6:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008af8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008afc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008b00:	3201      	adds	r2, #1
 8008b02:	00d2      	lsls	r2, r2, #3
 8008b04:	211a      	movs	r1, #26
 8008b06:	fb01 f303 	mul.w	r3, r1, r3
 8008b0a:	4413      	add	r3, r2
 8008b0c:	3308      	adds	r3, #8
 8008b0e:	6a3a      	ldr	r2, [r7, #32]
 8008b10:	4413      	add	r3, r2
 8008b12:	3304      	adds	r3, #4
 8008b14:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008b16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b18:	69b9      	ldr	r1, [r7, #24]
 8008b1a:	68f8      	ldr	r0, [r7, #12]
 8008b1c:	f000 f86f 	bl	8008bfe <USBH_ParseEPDesc>
 8008b20:	4603      	mov	r3, r0
 8008b22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8008b26:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008b30:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d80a      	bhi.n	8008b4e <USBH_ParseCfgDesc+0x1a6>
 8008b38:	69fb      	ldr	r3, [r7, #28]
 8008b3a:	791b      	ldrb	r3, [r3, #4]
 8008b3c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d204      	bcs.n	8008b4e <USBH_ParseCfgDesc+0x1a6>
 8008b44:	6a3b      	ldr	r3, [r7, #32]
 8008b46:	885a      	ldrh	r2, [r3, #2]
 8008b48:	8afb      	ldrh	r3, [r7, #22]
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d8ac      	bhi.n	8008aa8 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	791b      	ldrb	r3, [r3, #4]
 8008b52:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d201      	bcs.n	8008b5e <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	e01c      	b.n	8008b98 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 8008b5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b62:	3301      	adds	r3, #1
 8008b64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008b68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d805      	bhi.n	8008b7c <USBH_ParseCfgDesc+0x1d4>
 8008b70:	6a3b      	ldr	r3, [r7, #32]
 8008b72:	885a      	ldrh	r2, [r3, #2]
 8008b74:	8afb      	ldrh	r3, [r7, #22]
 8008b76:	429a      	cmp	r2, r3
 8008b78:	f63f af70 	bhi.w	8008a5c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008b7c:	6a3b      	ldr	r3, [r7, #32]
 8008b7e:	791b      	ldrb	r3, [r3, #4]
 8008b80:	2b02      	cmp	r3, #2
 8008b82:	bf28      	it	cs
 8008b84:	2302      	movcs	r3, #2
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d201      	bcs.n	8008b94 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 8008b90:	2303      	movs	r3, #3
 8008b92:	e001      	b.n	8008b98 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 8008b94:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3730      	adds	r7, #48	@ 0x30
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	781a      	ldrb	r2, [r3, #0]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	785a      	ldrb	r2, [r3, #1]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	789a      	ldrb	r2, [r3, #2]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	78da      	ldrb	r2, [r3, #3]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	791a      	ldrb	r2, [r3, #4]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	795a      	ldrb	r2, [r3, #5]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	799a      	ldrb	r2, [r3, #6]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	79da      	ldrb	r2, [r3, #7]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	7a1a      	ldrb	r2, [r3, #8]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	721a      	strb	r2, [r3, #8]
}
 8008bf2:	bf00      	nop
 8008bf4:	370c      	adds	r7, #12
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr

08008bfe <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008bfe:	b480      	push	{r7}
 8008c00:	b087      	sub	sp, #28
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	60f8      	str	r0, [r7, #12]
 8008c06:	60b9      	str	r1, [r7, #8]
 8008c08:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	781a      	ldrb	r2, [r3, #0]
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	785a      	ldrb	r2, [r3, #1]
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	789a      	ldrb	r2, [r3, #2]
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	78da      	ldrb	r2, [r3, #3]
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	3304      	adds	r3, #4
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	461a      	mov	r2, r3
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	3305      	adds	r3, #5
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	021b      	lsls	r3, r3, #8
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	4313      	orrs	r3, r2
 8008c42:	b29a      	uxth	r2, r3
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	799a      	ldrb	r2, [r3, #6]
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	889b      	ldrh	r3, [r3, #4]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d009      	beq.n	8008c6c <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008c5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c60:	d804      	bhi.n	8008c6c <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008c66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c6a:	d901      	bls.n	8008c70 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8008c6c:	2303      	movs	r3, #3
 8008c6e:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d136      	bne.n	8008ce8 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	78db      	ldrb	r3, [r3, #3]
 8008c7e:	f003 0303 	and.w	r3, r3, #3
 8008c82:	2b02      	cmp	r3, #2
 8008c84:	d108      	bne.n	8008c98 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	889b      	ldrh	r3, [r3, #4]
 8008c8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c8e:	f240 8097 	bls.w	8008dc0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008c92:	2303      	movs	r3, #3
 8008c94:	75fb      	strb	r3, [r7, #23]
 8008c96:	e093      	b.n	8008dc0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	78db      	ldrb	r3, [r3, #3]
 8008c9c:	f003 0303 	and.w	r3, r3, #3
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d107      	bne.n	8008cb4 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	889b      	ldrh	r3, [r3, #4]
 8008ca8:	2b40      	cmp	r3, #64	@ 0x40
 8008caa:	f240 8089 	bls.w	8008dc0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008cae:	2303      	movs	r3, #3
 8008cb0:	75fb      	strb	r3, [r7, #23]
 8008cb2:	e085      	b.n	8008dc0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	78db      	ldrb	r3, [r3, #3]
 8008cb8:	f003 0303 	and.w	r3, r3, #3
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d005      	beq.n	8008ccc <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	78db      	ldrb	r3, [r3, #3]
 8008cc4:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008cc8:	2b03      	cmp	r3, #3
 8008cca:	d10a      	bne.n	8008ce2 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	799b      	ldrb	r3, [r3, #6]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d003      	beq.n	8008cdc <USBH_ParseEPDesc+0xde>
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	799b      	ldrb	r3, [r3, #6]
 8008cd8:	2b10      	cmp	r3, #16
 8008cda:	d970      	bls.n	8008dbe <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008cdc:	2303      	movs	r3, #3
 8008cde:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008ce0:	e06d      	b.n	8008dbe <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008ce2:	2303      	movs	r3, #3
 8008ce4:	75fb      	strb	r3, [r7, #23]
 8008ce6:	e06b      	b.n	8008dc0 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d13c      	bne.n	8008d6c <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	78db      	ldrb	r3, [r3, #3]
 8008cf6:	f003 0303 	and.w	r3, r3, #3
 8008cfa:	2b02      	cmp	r3, #2
 8008cfc:	d005      	beq.n	8008d0a <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	78db      	ldrb	r3, [r3, #3]
 8008d02:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d106      	bne.n	8008d18 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	889b      	ldrh	r3, [r3, #4]
 8008d0e:	2b40      	cmp	r3, #64	@ 0x40
 8008d10:	d956      	bls.n	8008dc0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008d12:	2303      	movs	r3, #3
 8008d14:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008d16:	e053      	b.n	8008dc0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	78db      	ldrb	r3, [r3, #3]
 8008d1c:	f003 0303 	and.w	r3, r3, #3
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d10e      	bne.n	8008d42 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	799b      	ldrb	r3, [r3, #6]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d007      	beq.n	8008d3c <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008d30:	2b10      	cmp	r3, #16
 8008d32:	d803      	bhi.n	8008d3c <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008d38:	2b40      	cmp	r3, #64	@ 0x40
 8008d3a:	d941      	bls.n	8008dc0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008d3c:	2303      	movs	r3, #3
 8008d3e:	75fb      	strb	r3, [r7, #23]
 8008d40:	e03e      	b.n	8008dc0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	78db      	ldrb	r3, [r3, #3]
 8008d46:	f003 0303 	and.w	r3, r3, #3
 8008d4a:	2b03      	cmp	r3, #3
 8008d4c:	d10b      	bne.n	8008d66 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	799b      	ldrb	r3, [r3, #6]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d004      	beq.n	8008d60 <USBH_ParseEPDesc+0x162>
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	889b      	ldrh	r3, [r3, #4]
 8008d5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d5e:	d32f      	bcc.n	8008dc0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008d60:	2303      	movs	r3, #3
 8008d62:	75fb      	strb	r3, [r7, #23]
 8008d64:	e02c      	b.n	8008dc0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008d66:	2303      	movs	r3, #3
 8008d68:	75fb      	strb	r3, [r7, #23]
 8008d6a:	e029      	b.n	8008dc0 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008d72:	2b02      	cmp	r3, #2
 8008d74:	d120      	bne.n	8008db8 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	78db      	ldrb	r3, [r3, #3]
 8008d7a:	f003 0303 	and.w	r3, r3, #3
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d106      	bne.n	8008d90 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	889b      	ldrh	r3, [r3, #4]
 8008d86:	2b08      	cmp	r3, #8
 8008d88:	d01a      	beq.n	8008dc0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008d8a:	2303      	movs	r3, #3
 8008d8c:	75fb      	strb	r3, [r7, #23]
 8008d8e:	e017      	b.n	8008dc0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	78db      	ldrb	r3, [r3, #3]
 8008d94:	f003 0303 	and.w	r3, r3, #3
 8008d98:	2b03      	cmp	r3, #3
 8008d9a:	d10a      	bne.n	8008db2 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	799b      	ldrb	r3, [r3, #6]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d003      	beq.n	8008dac <USBH_ParseEPDesc+0x1ae>
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	889b      	ldrh	r3, [r3, #4]
 8008da8:	2b08      	cmp	r3, #8
 8008daa:	d909      	bls.n	8008dc0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008dac:	2303      	movs	r3, #3
 8008dae:	75fb      	strb	r3, [r7, #23]
 8008db0:	e006      	b.n	8008dc0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008db2:	2303      	movs	r3, #3
 8008db4:	75fb      	strb	r3, [r7, #23]
 8008db6:	e003      	b.n	8008dc0 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008db8:	2303      	movs	r3, #3
 8008dba:	75fb      	strb	r3, [r7, #23]
 8008dbc:	e000      	b.n	8008dc0 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008dbe:	bf00      	nop
  }

  return status;
 8008dc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	371c      	adds	r7, #28
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr

08008dce <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008dce:	b480      	push	{r7}
 8008dd0:	b087      	sub	sp, #28
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	60f8      	str	r0, [r7, #12]
 8008dd6:	60b9      	str	r1, [r7, #8]
 8008dd8:	4613      	mov	r3, r2
 8008dda:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	3301      	adds	r3, #1
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	2b03      	cmp	r3, #3
 8008de4:	d120      	bne.n	8008e28 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	1e9a      	subs	r2, r3, #2
 8008dec:	88fb      	ldrh	r3, [r7, #6]
 8008dee:	4293      	cmp	r3, r2
 8008df0:	bf28      	it	cs
 8008df2:	4613      	movcs	r3, r2
 8008df4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	3302      	adds	r3, #2
 8008dfa:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	82fb      	strh	r3, [r7, #22]
 8008e00:	e00b      	b.n	8008e1a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008e02:	8afb      	ldrh	r3, [r7, #22]
 8008e04:	68fa      	ldr	r2, [r7, #12]
 8008e06:	4413      	add	r3, r2
 8008e08:	781a      	ldrb	r2, [r3, #0]
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	3301      	adds	r3, #1
 8008e12:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008e14:	8afb      	ldrh	r3, [r7, #22]
 8008e16:	3302      	adds	r3, #2
 8008e18:	82fb      	strh	r3, [r7, #22]
 8008e1a:	8afa      	ldrh	r2, [r7, #22]
 8008e1c:	8abb      	ldrh	r3, [r7, #20]
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d3ef      	bcc.n	8008e02 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	2200      	movs	r2, #0
 8008e26:	701a      	strb	r2, [r3, #0]
  }
}
 8008e28:	bf00      	nop
 8008e2a:	371c      	adds	r7, #28
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b085      	sub	sp, #20
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	881b      	ldrh	r3, [r3, #0]
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	7812      	ldrb	r2, [r2, #0]
 8008e46:	4413      	add	r3, r2
 8008e48:	b29a      	uxth	r2, r3
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	4413      	add	r3, r2
 8008e58:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3714      	adds	r7, #20
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b086      	sub	sp, #24
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	60b9      	str	r1, [r7, #8]
 8008e72:	4613      	mov	r3, r2
 8008e74:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008e76:	2301      	movs	r3, #1
 8008e78:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	789b      	ldrb	r3, [r3, #2]
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d002      	beq.n	8008e88 <USBH_CtlReq+0x20>
 8008e82:	2b02      	cmp	r3, #2
 8008e84:	d00f      	beq.n	8008ea6 <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 8008e86:	e027      	b.n	8008ed8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	68ba      	ldr	r2, [r7, #8]
 8008e8c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	88fa      	ldrh	r2, [r7, #6]
 8008e92:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2201      	movs	r2, #1
 8008e98:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2202      	movs	r2, #2
 8008e9e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ea4:	e018      	b.n	8008ed8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008ea6:	68f8      	ldr	r0, [r7, #12]
 8008ea8:	f000 f81c 	bl	8008ee4 <USBH_HandleControl>
 8008eac:	4603      	mov	r3, r0
 8008eae:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008eb0:	7dfb      	ldrb	r3, [r7, #23]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d002      	beq.n	8008ebc <USBH_CtlReq+0x54>
 8008eb6:	7dfb      	ldrb	r3, [r7, #23]
 8008eb8:	2b03      	cmp	r3, #3
 8008eba:	d106      	bne.n	8008eca <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	761a      	strb	r2, [r3, #24]
      break;
 8008ec8:	e005      	b.n	8008ed6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008eca:	7dfb      	ldrb	r3, [r7, #23]
 8008ecc:	2b02      	cmp	r3, #2
 8008ece:	d102      	bne.n	8008ed6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	709a      	strb	r2, [r3, #2]
      break;
 8008ed6:	bf00      	nop
  }
  return status;
 8008ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3718      	adds	r7, #24
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
	...

08008ee4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b086      	sub	sp, #24
 8008ee8:	af02      	add	r7, sp, #8
 8008eea:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008eec:	2301      	movs	r3, #1
 8008eee:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	7e1b      	ldrb	r3, [r3, #24]
 8008ef8:	3b01      	subs	r3, #1
 8008efa:	2b0a      	cmp	r3, #10
 8008efc:	f200 8157 	bhi.w	80091ae <USBH_HandleControl+0x2ca>
 8008f00:	a201      	add	r2, pc, #4	@ (adr r2, 8008f08 <USBH_HandleControl+0x24>)
 8008f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f06:	bf00      	nop
 8008f08:	08008f35 	.word	0x08008f35
 8008f0c:	08008f4f 	.word	0x08008f4f
 8008f10:	08008fb9 	.word	0x08008fb9
 8008f14:	08008fdf 	.word	0x08008fdf
 8008f18:	08009019 	.word	0x08009019
 8008f1c:	08009043 	.word	0x08009043
 8008f20:	08009095 	.word	0x08009095
 8008f24:	080090b7 	.word	0x080090b7
 8008f28:	080090f3 	.word	0x080090f3
 8008f2c:	08009119 	.word	0x08009119
 8008f30:	08009157 	.word	0x08009157
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f103 0110 	add.w	r1, r3, #16
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	795b      	ldrb	r3, [r3, #5]
 8008f3e:	461a      	mov	r2, r3
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 f945 	bl	80091d0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2202      	movs	r2, #2
 8008f4a:	761a      	strb	r2, [r3, #24]
      break;
 8008f4c:	e13a      	b.n	80091c4 <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	795b      	ldrb	r3, [r3, #5]
 8008f52:	4619      	mov	r1, r3
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 fcc7 	bl	80098e8 <USBH_LL_GetURBState>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008f5e:	7bbb      	ldrb	r3, [r7, #14]
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d11e      	bne.n	8008fa2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	7c1b      	ldrb	r3, [r3, #16]
 8008f68:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008f6c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	8adb      	ldrh	r3, [r3, #22]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00a      	beq.n	8008f8c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008f76:	7b7b      	ldrb	r3, [r7, #13]
 8008f78:	2b80      	cmp	r3, #128	@ 0x80
 8008f7a:	d103      	bne.n	8008f84 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2203      	movs	r2, #3
 8008f80:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8008f82:	e116      	b.n	80091b2 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2205      	movs	r2, #5
 8008f88:	761a      	strb	r2, [r3, #24]
      break;
 8008f8a:	e112      	b.n	80091b2 <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 8008f8c:	7b7b      	ldrb	r3, [r7, #13]
 8008f8e:	2b80      	cmp	r3, #128	@ 0x80
 8008f90:	d103      	bne.n	8008f9a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2209      	movs	r2, #9
 8008f96:	761a      	strb	r2, [r3, #24]
      break;
 8008f98:	e10b      	b.n	80091b2 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2207      	movs	r2, #7
 8008f9e:	761a      	strb	r2, [r3, #24]
      break;
 8008fa0:	e107      	b.n	80091b2 <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008fa2:	7bbb      	ldrb	r3, [r7, #14]
 8008fa4:	2b04      	cmp	r3, #4
 8008fa6:	d003      	beq.n	8008fb0 <USBH_HandleControl+0xcc>
 8008fa8:	7bbb      	ldrb	r3, [r7, #14]
 8008faa:	2b02      	cmp	r3, #2
 8008fac:	f040 8101 	bne.w	80091b2 <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	220b      	movs	r2, #11
 8008fb4:	761a      	strb	r2, [r3, #24]
      break;
 8008fb6:	e0fc      	b.n	80091b2 <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008fbe:	b29a      	uxth	r2, r3
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6899      	ldr	r1, [r3, #8]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	899a      	ldrh	r2, [r3, #12]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	791b      	ldrb	r3, [r3, #4]
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 f93c 	bl	800924e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2204      	movs	r2, #4
 8008fda:	761a      	strb	r2, [r3, #24]
      break;
 8008fdc:	e0f2      	b.n	80091c4 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	791b      	ldrb	r3, [r3, #4]
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 fc7f 	bl	80098e8 <USBH_LL_GetURBState>
 8008fea:	4603      	mov	r3, r0
 8008fec:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008fee:	7bbb      	ldrb	r3, [r7, #14]
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d103      	bne.n	8008ffc <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2209      	movs	r2, #9
 8008ff8:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8008ffa:	e0dc      	b.n	80091b6 <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 8008ffc:	7bbb      	ldrb	r3, [r7, #14]
 8008ffe:	2b05      	cmp	r3, #5
 8009000:	d102      	bne.n	8009008 <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 8009002:	2303      	movs	r3, #3
 8009004:	73fb      	strb	r3, [r7, #15]
      break;
 8009006:	e0d6      	b.n	80091b6 <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 8009008:	7bbb      	ldrb	r3, [r7, #14]
 800900a:	2b04      	cmp	r3, #4
 800900c:	f040 80d3 	bne.w	80091b6 <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	220b      	movs	r2, #11
 8009014:	761a      	strb	r2, [r3, #24]
      break;
 8009016:	e0ce      	b.n	80091b6 <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6899      	ldr	r1, [r3, #8]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	899a      	ldrh	r2, [r3, #12]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	795b      	ldrb	r3, [r3, #5]
 8009024:	2001      	movs	r0, #1
 8009026:	9000      	str	r0, [sp, #0]
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 f8eb 	bl	8009204 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009034:	b29a      	uxth	r2, r3
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2206      	movs	r2, #6
 800903e:	761a      	strb	r2, [r3, #24]
      break;
 8009040:	e0c0      	b.n	80091c4 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	795b      	ldrb	r3, [r3, #5]
 8009046:	4619      	mov	r1, r3
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 fc4d 	bl	80098e8 <USBH_LL_GetURBState>
 800904e:	4603      	mov	r3, r0
 8009050:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009052:	7bbb      	ldrb	r3, [r7, #14]
 8009054:	2b01      	cmp	r3, #1
 8009056:	d103      	bne.n	8009060 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2207      	movs	r2, #7
 800905c:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800905e:	e0ac      	b.n	80091ba <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 8009060:	7bbb      	ldrb	r3, [r7, #14]
 8009062:	2b05      	cmp	r3, #5
 8009064:	d105      	bne.n	8009072 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	220c      	movs	r2, #12
 800906a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800906c:	2303      	movs	r3, #3
 800906e:	73fb      	strb	r3, [r7, #15]
      break;
 8009070:	e0a3      	b.n	80091ba <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009072:	7bbb      	ldrb	r3, [r7, #14]
 8009074:	2b02      	cmp	r3, #2
 8009076:	d103      	bne.n	8009080 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2205      	movs	r2, #5
 800907c:	761a      	strb	r2, [r3, #24]
      break;
 800907e:	e09c      	b.n	80091ba <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 8009080:	7bbb      	ldrb	r3, [r7, #14]
 8009082:	2b04      	cmp	r3, #4
 8009084:	f040 8099 	bne.w	80091ba <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	220b      	movs	r2, #11
 800908c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800908e:	2302      	movs	r3, #2
 8009090:	73fb      	strb	r3, [r7, #15]
      break;
 8009092:	e092      	b.n	80091ba <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	791b      	ldrb	r3, [r3, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	2100      	movs	r1, #0
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 f8d6 	bl	800924e <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80090a8:	b29a      	uxth	r2, r3
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2208      	movs	r2, #8
 80090b2:	761a      	strb	r2, [r3, #24]

      break;
 80090b4:	e086      	b.n	80091c4 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	791b      	ldrb	r3, [r3, #4]
 80090ba:	4619      	mov	r1, r3
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 fc13 	bl	80098e8 <USBH_LL_GetURBState>
 80090c2:	4603      	mov	r3, r0
 80090c4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80090c6:	7bbb      	ldrb	r3, [r7, #14]
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d105      	bne.n	80090d8 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	220d      	movs	r2, #13
 80090d0:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80090d2:	2300      	movs	r3, #0
 80090d4:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80090d6:	e072      	b.n	80091be <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 80090d8:	7bbb      	ldrb	r3, [r7, #14]
 80090da:	2b04      	cmp	r3, #4
 80090dc:	d103      	bne.n	80090e6 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	220b      	movs	r2, #11
 80090e2:	761a      	strb	r2, [r3, #24]
      break;
 80090e4:	e06b      	b.n	80091be <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 80090e6:	7bbb      	ldrb	r3, [r7, #14]
 80090e8:	2b05      	cmp	r3, #5
 80090ea:	d168      	bne.n	80091be <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 80090ec:	2303      	movs	r3, #3
 80090ee:	73fb      	strb	r3, [r7, #15]
      break;
 80090f0:	e065      	b.n	80091be <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	795b      	ldrb	r3, [r3, #5]
 80090f6:	2201      	movs	r2, #1
 80090f8:	9200      	str	r2, [sp, #0]
 80090fa:	2200      	movs	r2, #0
 80090fc:	2100      	movs	r1, #0
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 f880 	bl	8009204 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800910a:	b29a      	uxth	r2, r3
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	220a      	movs	r2, #10
 8009114:	761a      	strb	r2, [r3, #24]
      break;
 8009116:	e055      	b.n	80091c4 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	795b      	ldrb	r3, [r3, #5]
 800911c:	4619      	mov	r1, r3
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 fbe2 	bl	80098e8 <USBH_LL_GetURBState>
 8009124:	4603      	mov	r3, r0
 8009126:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009128:	7bbb      	ldrb	r3, [r7, #14]
 800912a:	2b01      	cmp	r3, #1
 800912c:	d105      	bne.n	800913a <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 800912e:	2300      	movs	r3, #0
 8009130:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	220d      	movs	r2, #13
 8009136:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8009138:	e043      	b.n	80091c2 <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 800913a:	7bbb      	ldrb	r3, [r7, #14]
 800913c:	2b02      	cmp	r3, #2
 800913e:	d103      	bne.n	8009148 <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2209      	movs	r2, #9
 8009144:	761a      	strb	r2, [r3, #24]
      break;
 8009146:	e03c      	b.n	80091c2 <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 8009148:	7bbb      	ldrb	r3, [r7, #14]
 800914a:	2b04      	cmp	r3, #4
 800914c:	d139      	bne.n	80091c2 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	220b      	movs	r2, #11
 8009152:	761a      	strb	r2, [r3, #24]
      break;
 8009154:	e035      	b.n	80091c2 <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	7e5b      	ldrb	r3, [r3, #25]
 800915a:	3301      	adds	r3, #1
 800915c:	b2da      	uxtb	r2, r3
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	765a      	strb	r2, [r3, #25]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	7e5b      	ldrb	r3, [r3, #25]
 8009166:	2b02      	cmp	r3, #2
 8009168:	d806      	bhi.n	8009178 <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2201      	movs	r2, #1
 800916e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2201      	movs	r2, #1
 8009174:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009176:	e025      	b.n	80091c4 <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800917e:	2106      	movs	r1, #6
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	795b      	ldrb	r3, [r3, #5]
 800918e:	4619      	mov	r1, r3
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 f90d 	bl	80093b0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	791b      	ldrb	r3, [r3, #4]
 800919a:	4619      	mov	r1, r3
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 f907 	bl	80093b0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80091a8:	2302      	movs	r3, #2
 80091aa:	73fb      	strb	r3, [r7, #15]
      break;
 80091ac:	e00a      	b.n	80091c4 <USBH_HandleControl+0x2e0>

    default:
      break;
 80091ae:	bf00      	nop
 80091b0:	e008      	b.n	80091c4 <USBH_HandleControl+0x2e0>
      break;
 80091b2:	bf00      	nop
 80091b4:	e006      	b.n	80091c4 <USBH_HandleControl+0x2e0>
      break;
 80091b6:	bf00      	nop
 80091b8:	e004      	b.n	80091c4 <USBH_HandleControl+0x2e0>
      break;
 80091ba:	bf00      	nop
 80091bc:	e002      	b.n	80091c4 <USBH_HandleControl+0x2e0>
      break;
 80091be:	bf00      	nop
 80091c0:	e000      	b.n	80091c4 <USBH_HandleControl+0x2e0>
      break;
 80091c2:	bf00      	nop
  }

  return status;
 80091c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3710      	adds	r7, #16
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop

080091d0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b088      	sub	sp, #32
 80091d4:	af04      	add	r7, sp, #16
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	60b9      	str	r1, [r7, #8]
 80091da:	4613      	mov	r3, r2
 80091dc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80091de:	79f9      	ldrb	r1, [r7, #7]
 80091e0:	2300      	movs	r3, #0
 80091e2:	9303      	str	r3, [sp, #12]
 80091e4:	2308      	movs	r3, #8
 80091e6:	9302      	str	r3, [sp, #8]
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	9301      	str	r3, [sp, #4]
 80091ec:	2300      	movs	r3, #0
 80091ee:	9300      	str	r3, [sp, #0]
 80091f0:	2300      	movs	r3, #0
 80091f2:	2200      	movs	r2, #0
 80091f4:	68f8      	ldr	r0, [r7, #12]
 80091f6:	f000 fb46 	bl	8009886 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80091fa:	2300      	movs	r3, #0
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3710      	adds	r7, #16
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b088      	sub	sp, #32
 8009208:	af04      	add	r7, sp, #16
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	60b9      	str	r1, [r7, #8]
 800920e:	4611      	mov	r1, r2
 8009210:	461a      	mov	r2, r3
 8009212:	460b      	mov	r3, r1
 8009214:	80fb      	strh	r3, [r7, #6]
 8009216:	4613      	mov	r3, r2
 8009218:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009220:	2b00      	cmp	r3, #0
 8009222:	d001      	beq.n	8009228 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009224:	2300      	movs	r3, #0
 8009226:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009228:	7979      	ldrb	r1, [r7, #5]
 800922a:	7e3b      	ldrb	r3, [r7, #24]
 800922c:	9303      	str	r3, [sp, #12]
 800922e:	88fb      	ldrh	r3, [r7, #6]
 8009230:	9302      	str	r3, [sp, #8]
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	9301      	str	r3, [sp, #4]
 8009236:	2301      	movs	r3, #1
 8009238:	9300      	str	r3, [sp, #0]
 800923a:	2300      	movs	r3, #0
 800923c:	2200      	movs	r2, #0
 800923e:	68f8      	ldr	r0, [r7, #12]
 8009240:	f000 fb21 	bl	8009886 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009244:	2300      	movs	r3, #0
}
 8009246:	4618      	mov	r0, r3
 8009248:	3710      	adds	r7, #16
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}

0800924e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800924e:	b580      	push	{r7, lr}
 8009250:	b088      	sub	sp, #32
 8009252:	af04      	add	r7, sp, #16
 8009254:	60f8      	str	r0, [r7, #12]
 8009256:	60b9      	str	r1, [r7, #8]
 8009258:	4611      	mov	r1, r2
 800925a:	461a      	mov	r2, r3
 800925c:	460b      	mov	r3, r1
 800925e:	80fb      	strh	r3, [r7, #6]
 8009260:	4613      	mov	r3, r2
 8009262:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009264:	7979      	ldrb	r1, [r7, #5]
 8009266:	2300      	movs	r3, #0
 8009268:	9303      	str	r3, [sp, #12]
 800926a:	88fb      	ldrh	r3, [r7, #6]
 800926c:	9302      	str	r3, [sp, #8]
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	9301      	str	r3, [sp, #4]
 8009272:	2301      	movs	r3, #1
 8009274:	9300      	str	r3, [sp, #0]
 8009276:	2300      	movs	r3, #0
 8009278:	2201      	movs	r2, #1
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f000 fb03 	bl	8009886 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009280:	2300      	movs	r3, #0

}
 8009282:	4618      	mov	r0, r3
 8009284:	3710      	adds	r7, #16
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}

0800928a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800928a:	b580      	push	{r7, lr}
 800928c:	b088      	sub	sp, #32
 800928e:	af04      	add	r7, sp, #16
 8009290:	60f8      	str	r0, [r7, #12]
 8009292:	60b9      	str	r1, [r7, #8]
 8009294:	4611      	mov	r1, r2
 8009296:	461a      	mov	r2, r3
 8009298:	460b      	mov	r3, r1
 800929a:	80fb      	strh	r3, [r7, #6]
 800929c:	4613      	mov	r3, r2
 800929e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d001      	beq.n	80092ae <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80092aa:	2300      	movs	r3, #0
 80092ac:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80092ae:	7979      	ldrb	r1, [r7, #5]
 80092b0:	7e3b      	ldrb	r3, [r7, #24]
 80092b2:	9303      	str	r3, [sp, #12]
 80092b4:	88fb      	ldrh	r3, [r7, #6]
 80092b6:	9302      	str	r3, [sp, #8]
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	9301      	str	r3, [sp, #4]
 80092bc:	2301      	movs	r3, #1
 80092be:	9300      	str	r3, [sp, #0]
 80092c0:	2302      	movs	r3, #2
 80092c2:	2200      	movs	r2, #0
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f000 fade 	bl	8009886 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80092ca:	2300      	movs	r3, #0
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3710      	adds	r7, #16
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b088      	sub	sp, #32
 80092d8:	af04      	add	r7, sp, #16
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	4611      	mov	r1, r2
 80092e0:	461a      	mov	r2, r3
 80092e2:	460b      	mov	r3, r1
 80092e4:	80fb      	strh	r3, [r7, #6]
 80092e6:	4613      	mov	r3, r2
 80092e8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80092ea:	7979      	ldrb	r1, [r7, #5]
 80092ec:	2300      	movs	r3, #0
 80092ee:	9303      	str	r3, [sp, #12]
 80092f0:	88fb      	ldrh	r3, [r7, #6]
 80092f2:	9302      	str	r3, [sp, #8]
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	9301      	str	r3, [sp, #4]
 80092f8:	2301      	movs	r3, #1
 80092fa:	9300      	str	r3, [sp, #0]
 80092fc:	2302      	movs	r3, #2
 80092fe:	2201      	movs	r2, #1
 8009300:	68f8      	ldr	r0, [r7, #12]
 8009302:	f000 fac0 	bl	8009886 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009306:	2300      	movs	r3, #0
}
 8009308:	4618      	mov	r0, r3
 800930a:	3710      	adds	r7, #16
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b086      	sub	sp, #24
 8009314:	af04      	add	r7, sp, #16
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	4608      	mov	r0, r1
 800931a:	4611      	mov	r1, r2
 800931c:	461a      	mov	r2, r3
 800931e:	4603      	mov	r3, r0
 8009320:	70fb      	strb	r3, [r7, #3]
 8009322:	460b      	mov	r3, r1
 8009324:	70bb      	strb	r3, [r7, #2]
 8009326:	4613      	mov	r3, r2
 8009328:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800932a:	7878      	ldrb	r0, [r7, #1]
 800932c:	78ba      	ldrb	r2, [r7, #2]
 800932e:	78f9      	ldrb	r1, [r7, #3]
 8009330:	8b3b      	ldrh	r3, [r7, #24]
 8009332:	9302      	str	r3, [sp, #8]
 8009334:	7d3b      	ldrb	r3, [r7, #20]
 8009336:	9301      	str	r3, [sp, #4]
 8009338:	7c3b      	ldrb	r3, [r7, #16]
 800933a:	9300      	str	r3, [sp, #0]
 800933c:	4603      	mov	r3, r0
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 fa53 	bl	80097ea <USBH_LL_OpenPipe>

  return USBH_OK;
 8009344:	2300      	movs	r3, #0
}
 8009346:	4618      	mov	r0, r3
 8009348:	3708      	adds	r7, #8
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b082      	sub	sp, #8
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
 8009356:	460b      	mov	r3, r1
 8009358:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800935a:	78fb      	ldrb	r3, [r7, #3]
 800935c:	4619      	mov	r1, r3
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 fa72 	bl	8009848 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009364:	2300      	movs	r3, #0
}
 8009366:	4618      	mov	r0, r3
 8009368:	3708      	adds	r7, #8
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}

0800936e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800936e:	b580      	push	{r7, lr}
 8009370:	b084      	sub	sp, #16
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
 8009376:	460b      	mov	r3, r1
 8009378:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 f836 	bl	80093ec <USBH_GetFreePipe>
 8009380:	4603      	mov	r3, r0
 8009382:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009384:	89fb      	ldrh	r3, [r7, #14]
 8009386:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800938a:	4293      	cmp	r3, r2
 800938c:	d00a      	beq.n	80093a4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800938e:	78fa      	ldrb	r2, [r7, #3]
 8009390:	89fb      	ldrh	r3, [r7, #14]
 8009392:	f003 030f 	and.w	r3, r3, #15
 8009396:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800939a:	6879      	ldr	r1, [r7, #4]
 800939c:	33e0      	adds	r3, #224	@ 0xe0
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	440b      	add	r3, r1
 80093a2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80093a4:	89fb      	ldrh	r3, [r7, #14]
 80093a6:	b2db      	uxtb	r3, r3
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3710      	adds	r7, #16
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	460b      	mov	r3, r1
 80093ba:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80093bc:	78fb      	ldrb	r3, [r7, #3]
 80093be:	2b0f      	cmp	r3, #15
 80093c0:	d80d      	bhi.n	80093de <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80093c2:	78fb      	ldrb	r3, [r7, #3]
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	33e0      	adds	r3, #224	@ 0xe0
 80093c8:	009b      	lsls	r3, r3, #2
 80093ca:	4413      	add	r3, r2
 80093cc:	685a      	ldr	r2, [r3, #4]
 80093ce:	78fb      	ldrb	r3, [r7, #3]
 80093d0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80093d4:	6879      	ldr	r1, [r7, #4]
 80093d6:	33e0      	adds	r3, #224	@ 0xe0
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	440b      	add	r3, r1
 80093dc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80093de:	2300      	movs	r3, #0
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	370c      	adds	r7, #12
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr

080093ec <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b085      	sub	sp, #20
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80093f4:	2300      	movs	r3, #0
 80093f6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80093f8:	2300      	movs	r3, #0
 80093fa:	73fb      	strb	r3, [r7, #15]
 80093fc:	e00f      	b.n	800941e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80093fe:	7bfb      	ldrb	r3, [r7, #15]
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	33e0      	adds	r3, #224	@ 0xe0
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	4413      	add	r3, r2
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800940e:	2b00      	cmp	r3, #0
 8009410:	d102      	bne.n	8009418 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009412:	7bfb      	ldrb	r3, [r7, #15]
 8009414:	b29b      	uxth	r3, r3
 8009416:	e007      	b.n	8009428 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009418:	7bfb      	ldrb	r3, [r7, #15]
 800941a:	3301      	adds	r3, #1
 800941c:	73fb      	strb	r3, [r7, #15]
 800941e:	7bfb      	ldrb	r3, [r7, #15]
 8009420:	2b0f      	cmp	r3, #15
 8009422:	d9ec      	bls.n	80093fe <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009424:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009428:	4618      	mov	r0, r3
 800942a:	3714      	adds	r7, #20
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009438:	2201      	movs	r2, #1
 800943a:	490e      	ldr	r1, [pc, #56]	@ (8009474 <MX_USB_HOST_Init+0x40>)
 800943c:	480e      	ldr	r0, [pc, #56]	@ (8009478 <MX_USB_HOST_Init+0x44>)
 800943e:	f7fe fb0f 	bl	8007a60 <USBH_Init>
 8009442:	4603      	mov	r3, r0
 8009444:	2b00      	cmp	r3, #0
 8009446:	d001      	beq.n	800944c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009448:	f7f7 fc42 	bl	8000cd0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800944c:	490b      	ldr	r1, [pc, #44]	@ (800947c <MX_USB_HOST_Init+0x48>)
 800944e:	480a      	ldr	r0, [pc, #40]	@ (8009478 <MX_USB_HOST_Init+0x44>)
 8009450:	f7fe fbb1 	bl	8007bb6 <USBH_RegisterClass>
 8009454:	4603      	mov	r3, r0
 8009456:	2b00      	cmp	r3, #0
 8009458:	d001      	beq.n	800945e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800945a:	f7f7 fc39 	bl	8000cd0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800945e:	4806      	ldr	r0, [pc, #24]	@ (8009478 <MX_USB_HOST_Init+0x44>)
 8009460:	f7fe fc35 	bl	8007cce <USBH_Start>
 8009464:	4603      	mov	r3, r0
 8009466:	2b00      	cmp	r3, #0
 8009468:	d001      	beq.n	800946e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800946a:	f7f7 fc31 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800946e:	bf00      	nop
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	08009495 	.word	0x08009495
 8009478:	200001e8 	.word	0x200001e8
 800947c:	2000000c 	.word	0x2000000c

08009480 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009484:	4802      	ldr	r0, [pc, #8]	@ (8009490 <MX_USB_HOST_Process+0x10>)
 8009486:	f7fe fc33 	bl	8007cf0 <USBH_Process>
}
 800948a:	bf00      	nop
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	200001e8 	.word	0x200001e8

08009494 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	460b      	mov	r3, r1
 800949e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80094a0:	78fb      	ldrb	r3, [r7, #3]
 80094a2:	3b01      	subs	r3, #1
 80094a4:	2b04      	cmp	r3, #4
 80094a6:	d819      	bhi.n	80094dc <USBH_UserProcess+0x48>
 80094a8:	a201      	add	r2, pc, #4	@ (adr r2, 80094b0 <USBH_UserProcess+0x1c>)
 80094aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ae:	bf00      	nop
 80094b0:	080094dd 	.word	0x080094dd
 80094b4:	080094cd 	.word	0x080094cd
 80094b8:	080094dd 	.word	0x080094dd
 80094bc:	080094d5 	.word	0x080094d5
 80094c0:	080094c5 	.word	0x080094c5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80094c4:	4b09      	ldr	r3, [pc, #36]	@ (80094ec <USBH_UserProcess+0x58>)
 80094c6:	2203      	movs	r2, #3
 80094c8:	701a      	strb	r2, [r3, #0]
  break;
 80094ca:	e008      	b.n	80094de <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80094cc:	4b07      	ldr	r3, [pc, #28]	@ (80094ec <USBH_UserProcess+0x58>)
 80094ce:	2202      	movs	r2, #2
 80094d0:	701a      	strb	r2, [r3, #0]
  break;
 80094d2:	e004      	b.n	80094de <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80094d4:	4b05      	ldr	r3, [pc, #20]	@ (80094ec <USBH_UserProcess+0x58>)
 80094d6:	2201      	movs	r2, #1
 80094d8:	701a      	strb	r2, [r3, #0]
  break;
 80094da:	e000      	b.n	80094de <USBH_UserProcess+0x4a>

  default:
  break;
 80094dc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80094de:	bf00      	nop
 80094e0:	370c      	adds	r7, #12
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr
 80094ea:	bf00      	nop
 80094ec:	200005c0 	.word	0x200005c0

080094f0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b08a      	sub	sp, #40	@ 0x28
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80094f8:	f107 0314 	add.w	r3, r7, #20
 80094fc:	2200      	movs	r2, #0
 80094fe:	601a      	str	r2, [r3, #0]
 8009500:	605a      	str	r2, [r3, #4]
 8009502:	609a      	str	r2, [r3, #8]
 8009504:	60da      	str	r2, [r3, #12]
 8009506:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009510:	d147      	bne.n	80095a2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009512:	2300      	movs	r3, #0
 8009514:	613b      	str	r3, [r7, #16]
 8009516:	4b25      	ldr	r3, [pc, #148]	@ (80095ac <HAL_HCD_MspInit+0xbc>)
 8009518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800951a:	4a24      	ldr	r2, [pc, #144]	@ (80095ac <HAL_HCD_MspInit+0xbc>)
 800951c:	f043 0301 	orr.w	r3, r3, #1
 8009520:	6313      	str	r3, [r2, #48]	@ 0x30
 8009522:	4b22      	ldr	r3, [pc, #136]	@ (80095ac <HAL_HCD_MspInit+0xbc>)
 8009524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009526:	f003 0301 	and.w	r3, r3, #1
 800952a:	613b      	str	r3, [r7, #16]
 800952c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800952e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009534:	2300      	movs	r3, #0
 8009536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009538:	2300      	movs	r3, #0
 800953a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800953c:	f107 0314 	add.w	r3, r7, #20
 8009540:	4619      	mov	r1, r3
 8009542:	481b      	ldr	r0, [pc, #108]	@ (80095b0 <HAL_HCD_MspInit+0xc0>)
 8009544:	f7f7 ff88 	bl	8001458 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009548:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800954c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800954e:	2302      	movs	r3, #2
 8009550:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009552:	2300      	movs	r3, #0
 8009554:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009556:	2300      	movs	r3, #0
 8009558:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800955a:	230a      	movs	r3, #10
 800955c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800955e:	f107 0314 	add.w	r3, r7, #20
 8009562:	4619      	mov	r1, r3
 8009564:	4812      	ldr	r0, [pc, #72]	@ (80095b0 <HAL_HCD_MspInit+0xc0>)
 8009566:	f7f7 ff77 	bl	8001458 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800956a:	4b10      	ldr	r3, [pc, #64]	@ (80095ac <HAL_HCD_MspInit+0xbc>)
 800956c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800956e:	4a0f      	ldr	r2, [pc, #60]	@ (80095ac <HAL_HCD_MspInit+0xbc>)
 8009570:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009574:	6353      	str	r3, [r2, #52]	@ 0x34
 8009576:	2300      	movs	r3, #0
 8009578:	60fb      	str	r3, [r7, #12]
 800957a:	4b0c      	ldr	r3, [pc, #48]	@ (80095ac <HAL_HCD_MspInit+0xbc>)
 800957c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800957e:	4a0b      	ldr	r2, [pc, #44]	@ (80095ac <HAL_HCD_MspInit+0xbc>)
 8009580:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009584:	6453      	str	r3, [r2, #68]	@ 0x44
 8009586:	4b09      	ldr	r3, [pc, #36]	@ (80095ac <HAL_HCD_MspInit+0xbc>)
 8009588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800958a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800958e:	60fb      	str	r3, [r7, #12]
 8009590:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009592:	2200      	movs	r2, #0
 8009594:	2100      	movs	r1, #0
 8009596:	2043      	movs	r0, #67	@ 0x43
 8009598:	f7f7 ff27 	bl	80013ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800959c:	2043      	movs	r0, #67	@ 0x43
 800959e:	f7f7 ff40 	bl	8001422 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80095a2:	bf00      	nop
 80095a4:	3728      	adds	r7, #40	@ 0x28
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	40023800 	.word	0x40023800
 80095b0:	40020000 	.word	0x40020000

080095b4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7fe ff6d 	bl	80084a2 <USBH_LL_IncTimer>
}
 80095c8:	bf00      	nop
 80095ca:	3708      	adds	r7, #8
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80095de:	4618      	mov	r0, r3
 80095e0:	f7fe ffa9 	bl	8008536 <USBH_LL_Connect>
}
 80095e4:	bf00      	nop
 80095e6:	3708      	adds	r7, #8
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7fe ffb2 	bl	8008564 <USBH_LL_Disconnect>
}
 8009600:	bf00      	nop
 8009602:	3708      	adds	r7, #8
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	460b      	mov	r3, r1
 8009612:	70fb      	strb	r3, [r7, #3]
 8009614:	4613      	mov	r3, r2
 8009616:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009618:	bf00      	nop
 800961a:	370c      	adds	r7, #12
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr

08009624 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b082      	sub	sp, #8
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009632:	4618      	mov	r0, r3
 8009634:	f7fe ff5f 	bl	80084f6 <USBH_LL_PortEnabled>
}
 8009638:	bf00      	nop
 800963a:	3708      	adds	r7, #8
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b082      	sub	sp, #8
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800964e:	4618      	mov	r0, r3
 8009650:	f7fe ff5f 	bl	8008512 <USBH_LL_PortDisabled>
}
 8009654:	bf00      	nop
 8009656:	3708      	adds	r7, #8
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800966a:	2b01      	cmp	r3, #1
 800966c:	d12a      	bne.n	80096c4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800966e:	4a18      	ldr	r2, [pc, #96]	@ (80096d0 <USBH_LL_Init+0x74>)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	4a15      	ldr	r2, [pc, #84]	@ (80096d0 <USBH_LL_Init+0x74>)
 800967a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800967e:	4b14      	ldr	r3, [pc, #80]	@ (80096d0 <USBH_LL_Init+0x74>)
 8009680:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009684:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009686:	4b12      	ldr	r3, [pc, #72]	@ (80096d0 <USBH_LL_Init+0x74>)
 8009688:	2208      	movs	r2, #8
 800968a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800968c:	4b10      	ldr	r3, [pc, #64]	@ (80096d0 <USBH_LL_Init+0x74>)
 800968e:	2201      	movs	r2, #1
 8009690:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009692:	4b0f      	ldr	r3, [pc, #60]	@ (80096d0 <USBH_LL_Init+0x74>)
 8009694:	2200      	movs	r2, #0
 8009696:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009698:	4b0d      	ldr	r3, [pc, #52]	@ (80096d0 <USBH_LL_Init+0x74>)
 800969a:	2202      	movs	r2, #2
 800969c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800969e:	4b0c      	ldr	r3, [pc, #48]	@ (80096d0 <USBH_LL_Init+0x74>)
 80096a0:	2200      	movs	r2, #0
 80096a2:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80096a4:	480a      	ldr	r0, [pc, #40]	@ (80096d0 <USBH_LL_Init+0x74>)
 80096a6:	f7f8 f8be 	bl	8001826 <HAL_HCD_Init>
 80096aa:	4603      	mov	r3, r0
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d001      	beq.n	80096b4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80096b0:	f7f7 fb0e 	bl	8000cd0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80096b4:	4806      	ldr	r0, [pc, #24]	@ (80096d0 <USBH_LL_Init+0x74>)
 80096b6:	f7f8 fd1f 	bl	80020f8 <HAL_HCD_GetCurrentFrame>
 80096ba:	4603      	mov	r3, r0
 80096bc:	4619      	mov	r1, r3
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f7fe fee0 	bl	8008484 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80096c4:	2300      	movs	r3, #0
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3708      	adds	r7, #8
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	200005c4 	.word	0x200005c4

080096d4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096dc:	2300      	movs	r3, #0
 80096de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80096e0:	2300      	movs	r3, #0
 80096e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80096ea:	4618      	mov	r0, r3
 80096ec:	f7f8 fc8c 	bl	8002008 <HAL_HCD_Start>
 80096f0:	4603      	mov	r3, r0
 80096f2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80096f4:	7bfb      	ldrb	r3, [r7, #15]
 80096f6:	4618      	mov	r0, r3
 80096f8:	f000 f95e 	bl	80099b8 <USBH_Get_USB_Status>
 80096fc:	4603      	mov	r3, r0
 80096fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009700:	7bbb      	ldrb	r3, [r7, #14]
}
 8009702:	4618      	mov	r0, r3
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}

0800970a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800970a:	b580      	push	{r7, lr}
 800970c:	b084      	sub	sp, #16
 800970e:	af00      	add	r7, sp, #0
 8009710:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009712:	2300      	movs	r3, #0
 8009714:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009716:	2300      	movs	r3, #0
 8009718:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009720:	4618      	mov	r0, r3
 8009722:	f7f8 fc94 	bl	800204e <HAL_HCD_Stop>
 8009726:	4603      	mov	r3, r0
 8009728:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800972a:	7bfb      	ldrb	r3, [r7, #15]
 800972c:	4618      	mov	r0, r3
 800972e:	f000 f943 	bl	80099b8 <USBH_Get_USB_Status>
 8009732:	4603      	mov	r3, r0
 8009734:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009736:	7bbb      	ldrb	r3, [r7, #14]
}
 8009738:	4618      	mov	r0, r3
 800973a:	3710      	adds	r7, #16
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009748:	2301      	movs	r3, #1
 800974a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009752:	4618      	mov	r0, r3
 8009754:	f7f8 fcde 	bl	8002114 <HAL_HCD_GetCurrentSpeed>
 8009758:	4603      	mov	r3, r0
 800975a:	2b02      	cmp	r3, #2
 800975c:	d00c      	beq.n	8009778 <USBH_LL_GetSpeed+0x38>
 800975e:	2b02      	cmp	r3, #2
 8009760:	d80d      	bhi.n	800977e <USBH_LL_GetSpeed+0x3e>
 8009762:	2b00      	cmp	r3, #0
 8009764:	d002      	beq.n	800976c <USBH_LL_GetSpeed+0x2c>
 8009766:	2b01      	cmp	r3, #1
 8009768:	d003      	beq.n	8009772 <USBH_LL_GetSpeed+0x32>
 800976a:	e008      	b.n	800977e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800976c:	2300      	movs	r3, #0
 800976e:	73fb      	strb	r3, [r7, #15]
    break;
 8009770:	e008      	b.n	8009784 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009772:	2301      	movs	r3, #1
 8009774:	73fb      	strb	r3, [r7, #15]
    break;
 8009776:	e005      	b.n	8009784 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009778:	2302      	movs	r3, #2
 800977a:	73fb      	strb	r3, [r7, #15]
    break;
 800977c:	e002      	b.n	8009784 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800977e:	2301      	movs	r3, #1
 8009780:	73fb      	strb	r3, [r7, #15]
    break;
 8009782:	bf00      	nop
  }
  return  speed;
 8009784:	7bfb      	ldrb	r3, [r7, #15]
}
 8009786:	4618      	mov	r0, r3
 8009788:	3710      	adds	r7, #16
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}

0800978e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800978e:	b580      	push	{r7, lr}
 8009790:	b084      	sub	sp, #16
 8009792:	af00      	add	r7, sp, #0
 8009794:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009796:	2300      	movs	r3, #0
 8009798:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800979a:	2300      	movs	r3, #0
 800979c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80097a4:	4618      	mov	r0, r3
 80097a6:	f7f8 fc6f 	bl	8002088 <HAL_HCD_ResetPort>
 80097aa:	4603      	mov	r3, r0
 80097ac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80097ae:	7bfb      	ldrb	r3, [r7, #15]
 80097b0:	4618      	mov	r0, r3
 80097b2:	f000 f901 	bl	80099b8 <USBH_Get_USB_Status>
 80097b6:	4603      	mov	r3, r0
 80097b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3710      	adds	r7, #16
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	460b      	mov	r3, r1
 80097ce:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80097d6:	78fa      	ldrb	r2, [r7, #3]
 80097d8:	4611      	mov	r1, r2
 80097da:	4618      	mov	r0, r3
 80097dc:	f7f8 fc77 	bl	80020ce <HAL_HCD_HC_GetXferCount>
 80097e0:	4603      	mov	r3, r0
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3708      	adds	r7, #8
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}

080097ea <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80097ea:	b590      	push	{r4, r7, lr}
 80097ec:	b089      	sub	sp, #36	@ 0x24
 80097ee:	af04      	add	r7, sp, #16
 80097f0:	6078      	str	r0, [r7, #4]
 80097f2:	4608      	mov	r0, r1
 80097f4:	4611      	mov	r1, r2
 80097f6:	461a      	mov	r2, r3
 80097f8:	4603      	mov	r3, r0
 80097fa:	70fb      	strb	r3, [r7, #3]
 80097fc:	460b      	mov	r3, r1
 80097fe:	70bb      	strb	r3, [r7, #2]
 8009800:	4613      	mov	r3, r2
 8009802:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009804:	2300      	movs	r3, #0
 8009806:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009808:	2300      	movs	r3, #0
 800980a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009812:	787c      	ldrb	r4, [r7, #1]
 8009814:	78ba      	ldrb	r2, [r7, #2]
 8009816:	78f9      	ldrb	r1, [r7, #3]
 8009818:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800981a:	9302      	str	r3, [sp, #8]
 800981c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009820:	9301      	str	r3, [sp, #4]
 8009822:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009826:	9300      	str	r3, [sp, #0]
 8009828:	4623      	mov	r3, r4
 800982a:	f7f8 f863 	bl	80018f4 <HAL_HCD_HC_Init>
 800982e:	4603      	mov	r3, r0
 8009830:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009832:	7bfb      	ldrb	r3, [r7, #15]
 8009834:	4618      	mov	r0, r3
 8009836:	f000 f8bf 	bl	80099b8 <USBH_Get_USB_Status>
 800983a:	4603      	mov	r3, r0
 800983c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800983e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009840:	4618      	mov	r0, r3
 8009842:	3714      	adds	r7, #20
 8009844:	46bd      	mov	sp, r7
 8009846:	bd90      	pop	{r4, r7, pc}

08009848 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	460b      	mov	r3, r1
 8009852:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009854:	2300      	movs	r3, #0
 8009856:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009858:	2300      	movs	r3, #0
 800985a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009862:	78fa      	ldrb	r2, [r7, #3]
 8009864:	4611      	mov	r1, r2
 8009866:	4618      	mov	r0, r3
 8009868:	f7f8 f8fc 	bl	8001a64 <HAL_HCD_HC_Halt>
 800986c:	4603      	mov	r3, r0
 800986e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009870:	7bfb      	ldrb	r3, [r7, #15]
 8009872:	4618      	mov	r0, r3
 8009874:	f000 f8a0 	bl	80099b8 <USBH_Get_USB_Status>
 8009878:	4603      	mov	r3, r0
 800987a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800987c:	7bbb      	ldrb	r3, [r7, #14]
}
 800987e:	4618      	mov	r0, r3
 8009880:	3710      	adds	r7, #16
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}

08009886 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009886:	b590      	push	{r4, r7, lr}
 8009888:	b089      	sub	sp, #36	@ 0x24
 800988a:	af04      	add	r7, sp, #16
 800988c:	6078      	str	r0, [r7, #4]
 800988e:	4608      	mov	r0, r1
 8009890:	4611      	mov	r1, r2
 8009892:	461a      	mov	r2, r3
 8009894:	4603      	mov	r3, r0
 8009896:	70fb      	strb	r3, [r7, #3]
 8009898:	460b      	mov	r3, r1
 800989a:	70bb      	strb	r3, [r7, #2]
 800989c:	4613      	mov	r3, r2
 800989e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098a0:	2300      	movs	r3, #0
 80098a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80098a4:	2300      	movs	r3, #0
 80098a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80098ae:	787c      	ldrb	r4, [r7, #1]
 80098b0:	78ba      	ldrb	r2, [r7, #2]
 80098b2:	78f9      	ldrb	r1, [r7, #3]
 80098b4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80098b8:	9303      	str	r3, [sp, #12]
 80098ba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80098bc:	9302      	str	r3, [sp, #8]
 80098be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098c0:	9301      	str	r3, [sp, #4]
 80098c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80098c6:	9300      	str	r3, [sp, #0]
 80098c8:	4623      	mov	r3, r4
 80098ca:	f7f8 f8ef 	bl	8001aac <HAL_HCD_HC_SubmitRequest>
 80098ce:	4603      	mov	r3, r0
 80098d0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80098d2:	7bfb      	ldrb	r3, [r7, #15]
 80098d4:	4618      	mov	r0, r3
 80098d6:	f000 f86f 	bl	80099b8 <USBH_Get_USB_Status>
 80098da:	4603      	mov	r3, r0
 80098dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098de:	7bbb      	ldrb	r3, [r7, #14]
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3714      	adds	r7, #20
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd90      	pop	{r4, r7, pc}

080098e8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	460b      	mov	r3, r1
 80098f2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80098fa:	78fa      	ldrb	r2, [r7, #3]
 80098fc:	4611      	mov	r1, r2
 80098fe:	4618      	mov	r0, r3
 8009900:	f7f8 fbd0 	bl	80020a4 <HAL_HCD_HC_GetURBState>
 8009904:	4603      	mov	r3, r0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3708      	adds	r7, #8
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800990e:	b580      	push	{r7, lr}
 8009910:	b082      	sub	sp, #8
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
 8009916:	460b      	mov	r3, r1
 8009918:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009920:	2b01      	cmp	r3, #1
 8009922:	d103      	bne.n	800992c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009924:	78fb      	ldrb	r3, [r7, #3]
 8009926:	4618      	mov	r0, r3
 8009928:	f000 f872 	bl	8009a10 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800992c:	20c8      	movs	r0, #200	@ 0xc8
 800992e:	f7f7 fc5d 	bl	80011ec <HAL_Delay>
  return USBH_OK;
 8009932:	2300      	movs	r3, #0
}
 8009934:	4618      	mov	r0, r3
 8009936:	3708      	adds	r7, #8
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800993c:	b480      	push	{r7}
 800993e:	b085      	sub	sp, #20
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	460b      	mov	r3, r1
 8009946:	70fb      	strb	r3, [r7, #3]
 8009948:	4613      	mov	r3, r2
 800994a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009952:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009954:	78fa      	ldrb	r2, [r7, #3]
 8009956:	68f9      	ldr	r1, [r7, #12]
 8009958:	4613      	mov	r3, r2
 800995a:	011b      	lsls	r3, r3, #4
 800995c:	1a9b      	subs	r3, r3, r2
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	440b      	add	r3, r1
 8009962:	3317      	adds	r3, #23
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d00a      	beq.n	8009980 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800996a:	78fa      	ldrb	r2, [r7, #3]
 800996c:	68f9      	ldr	r1, [r7, #12]
 800996e:	4613      	mov	r3, r2
 8009970:	011b      	lsls	r3, r3, #4
 8009972:	1a9b      	subs	r3, r3, r2
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	440b      	add	r3, r1
 8009978:	333c      	adds	r3, #60	@ 0x3c
 800997a:	78ba      	ldrb	r2, [r7, #2]
 800997c:	701a      	strb	r2, [r3, #0]
 800997e:	e009      	b.n	8009994 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009980:	78fa      	ldrb	r2, [r7, #3]
 8009982:	68f9      	ldr	r1, [r7, #12]
 8009984:	4613      	mov	r3, r2
 8009986:	011b      	lsls	r3, r3, #4
 8009988:	1a9b      	subs	r3, r3, r2
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	440b      	add	r3, r1
 800998e:	333d      	adds	r3, #61	@ 0x3d
 8009990:	78ba      	ldrb	r2, [r7, #2]
 8009992:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009994:	2300      	movs	r3, #0
}
 8009996:	4618      	mov	r0, r3
 8009998:	3714      	adds	r7, #20
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr

080099a2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80099a2:	b580      	push	{r7, lr}
 80099a4:	b082      	sub	sp, #8
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f7f7 fc1e 	bl	80011ec <HAL_Delay>
}
 80099b0:	bf00      	nop
 80099b2:	3708      	adds	r7, #8
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b085      	sub	sp, #20
 80099bc:	af00      	add	r7, sp, #0
 80099be:	4603      	mov	r3, r0
 80099c0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80099c2:	2300      	movs	r3, #0
 80099c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80099c6:	79fb      	ldrb	r3, [r7, #7]
 80099c8:	2b03      	cmp	r3, #3
 80099ca:	d817      	bhi.n	80099fc <USBH_Get_USB_Status+0x44>
 80099cc:	a201      	add	r2, pc, #4	@ (adr r2, 80099d4 <USBH_Get_USB_Status+0x1c>)
 80099ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d2:	bf00      	nop
 80099d4:	080099e5 	.word	0x080099e5
 80099d8:	080099eb 	.word	0x080099eb
 80099dc:	080099f1 	.word	0x080099f1
 80099e0:	080099f7 	.word	0x080099f7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80099e4:	2300      	movs	r3, #0
 80099e6:	73fb      	strb	r3, [r7, #15]
    break;
 80099e8:	e00b      	b.n	8009a02 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80099ea:	2302      	movs	r3, #2
 80099ec:	73fb      	strb	r3, [r7, #15]
    break;
 80099ee:	e008      	b.n	8009a02 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80099f0:	2301      	movs	r3, #1
 80099f2:	73fb      	strb	r3, [r7, #15]
    break;
 80099f4:	e005      	b.n	8009a02 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80099f6:	2302      	movs	r3, #2
 80099f8:	73fb      	strb	r3, [r7, #15]
    break;
 80099fa:	e002      	b.n	8009a02 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80099fc:	2302      	movs	r3, #2
 80099fe:	73fb      	strb	r3, [r7, #15]
    break;
 8009a00:	bf00      	nop
  }
  return usb_status;
 8009a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3714      	adds	r7, #20
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr

08009a10 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	4603      	mov	r3, r0
 8009a18:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009a1a:	79fb      	ldrb	r3, [r7, #7]
 8009a1c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009a1e:	79fb      	ldrb	r3, [r7, #7]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d102      	bne.n	8009a2a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009a24:	2300      	movs	r3, #0
 8009a26:	73fb      	strb	r3, [r7, #15]
 8009a28:	e001      	b.n	8009a2e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009a2e:	7bfb      	ldrb	r3, [r7, #15]
 8009a30:	461a      	mov	r2, r3
 8009a32:	2101      	movs	r1, #1
 8009a34:	4803      	ldr	r0, [pc, #12]	@ (8009a44 <MX_DriverVbusFS+0x34>)
 8009a36:	f7f7 fec3 	bl	80017c0 <HAL_GPIO_WritePin>
}
 8009a3a:	bf00      	nop
 8009a3c:	3710      	adds	r7, #16
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	40020800 	.word	0x40020800

08009a48 <malloc>:
 8009a48:	4b02      	ldr	r3, [pc, #8]	@ (8009a54 <malloc+0xc>)
 8009a4a:	4601      	mov	r1, r0
 8009a4c:	6818      	ldr	r0, [r3, #0]
 8009a4e:	f000 b82d 	b.w	8009aac <_malloc_r>
 8009a52:	bf00      	nop
 8009a54:	20000038 	.word	0x20000038

08009a58 <free>:
 8009a58:	4b02      	ldr	r3, [pc, #8]	@ (8009a64 <free+0xc>)
 8009a5a:	4601      	mov	r1, r0
 8009a5c:	6818      	ldr	r0, [r3, #0]
 8009a5e:	f000 ba55 	b.w	8009f0c <_free_r>
 8009a62:	bf00      	nop
 8009a64:	20000038 	.word	0x20000038

08009a68 <sbrk_aligned>:
 8009a68:	b570      	push	{r4, r5, r6, lr}
 8009a6a:	4e0f      	ldr	r6, [pc, #60]	@ (8009aa8 <sbrk_aligned+0x40>)
 8009a6c:	460c      	mov	r4, r1
 8009a6e:	6831      	ldr	r1, [r6, #0]
 8009a70:	4605      	mov	r5, r0
 8009a72:	b911      	cbnz	r1, 8009a7a <sbrk_aligned+0x12>
 8009a74:	f000 f9fa 	bl	8009e6c <_sbrk_r>
 8009a78:	6030      	str	r0, [r6, #0]
 8009a7a:	4621      	mov	r1, r4
 8009a7c:	4628      	mov	r0, r5
 8009a7e:	f000 f9f5 	bl	8009e6c <_sbrk_r>
 8009a82:	1c43      	adds	r3, r0, #1
 8009a84:	d103      	bne.n	8009a8e <sbrk_aligned+0x26>
 8009a86:	f04f 34ff 	mov.w	r4, #4294967295
 8009a8a:	4620      	mov	r0, r4
 8009a8c:	bd70      	pop	{r4, r5, r6, pc}
 8009a8e:	1cc4      	adds	r4, r0, #3
 8009a90:	f024 0403 	bic.w	r4, r4, #3
 8009a94:	42a0      	cmp	r0, r4
 8009a96:	d0f8      	beq.n	8009a8a <sbrk_aligned+0x22>
 8009a98:	1a21      	subs	r1, r4, r0
 8009a9a:	4628      	mov	r0, r5
 8009a9c:	f000 f9e6 	bl	8009e6c <_sbrk_r>
 8009aa0:	3001      	adds	r0, #1
 8009aa2:	d1f2      	bne.n	8009a8a <sbrk_aligned+0x22>
 8009aa4:	e7ef      	b.n	8009a86 <sbrk_aligned+0x1e>
 8009aa6:	bf00      	nop
 8009aa8:	200009a4 	.word	0x200009a4

08009aac <_malloc_r>:
 8009aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ab0:	1ccd      	adds	r5, r1, #3
 8009ab2:	f025 0503 	bic.w	r5, r5, #3
 8009ab6:	3508      	adds	r5, #8
 8009ab8:	2d0c      	cmp	r5, #12
 8009aba:	bf38      	it	cc
 8009abc:	250c      	movcc	r5, #12
 8009abe:	2d00      	cmp	r5, #0
 8009ac0:	4606      	mov	r6, r0
 8009ac2:	db01      	blt.n	8009ac8 <_malloc_r+0x1c>
 8009ac4:	42a9      	cmp	r1, r5
 8009ac6:	d904      	bls.n	8009ad2 <_malloc_r+0x26>
 8009ac8:	230c      	movs	r3, #12
 8009aca:	6033      	str	r3, [r6, #0]
 8009acc:	2000      	movs	r0, #0
 8009ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ad2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009ba8 <_malloc_r+0xfc>
 8009ad6:	f000 f869 	bl	8009bac <__malloc_lock>
 8009ada:	f8d8 3000 	ldr.w	r3, [r8]
 8009ade:	461c      	mov	r4, r3
 8009ae0:	bb44      	cbnz	r4, 8009b34 <_malloc_r+0x88>
 8009ae2:	4629      	mov	r1, r5
 8009ae4:	4630      	mov	r0, r6
 8009ae6:	f7ff ffbf 	bl	8009a68 <sbrk_aligned>
 8009aea:	1c43      	adds	r3, r0, #1
 8009aec:	4604      	mov	r4, r0
 8009aee:	d158      	bne.n	8009ba2 <_malloc_r+0xf6>
 8009af0:	f8d8 4000 	ldr.w	r4, [r8]
 8009af4:	4627      	mov	r7, r4
 8009af6:	2f00      	cmp	r7, #0
 8009af8:	d143      	bne.n	8009b82 <_malloc_r+0xd6>
 8009afa:	2c00      	cmp	r4, #0
 8009afc:	d04b      	beq.n	8009b96 <_malloc_r+0xea>
 8009afe:	6823      	ldr	r3, [r4, #0]
 8009b00:	4639      	mov	r1, r7
 8009b02:	4630      	mov	r0, r6
 8009b04:	eb04 0903 	add.w	r9, r4, r3
 8009b08:	f000 f9b0 	bl	8009e6c <_sbrk_r>
 8009b0c:	4581      	cmp	r9, r0
 8009b0e:	d142      	bne.n	8009b96 <_malloc_r+0xea>
 8009b10:	6821      	ldr	r1, [r4, #0]
 8009b12:	1a6d      	subs	r5, r5, r1
 8009b14:	4629      	mov	r1, r5
 8009b16:	4630      	mov	r0, r6
 8009b18:	f7ff ffa6 	bl	8009a68 <sbrk_aligned>
 8009b1c:	3001      	adds	r0, #1
 8009b1e:	d03a      	beq.n	8009b96 <_malloc_r+0xea>
 8009b20:	6823      	ldr	r3, [r4, #0]
 8009b22:	442b      	add	r3, r5
 8009b24:	6023      	str	r3, [r4, #0]
 8009b26:	f8d8 3000 	ldr.w	r3, [r8]
 8009b2a:	685a      	ldr	r2, [r3, #4]
 8009b2c:	bb62      	cbnz	r2, 8009b88 <_malloc_r+0xdc>
 8009b2e:	f8c8 7000 	str.w	r7, [r8]
 8009b32:	e00f      	b.n	8009b54 <_malloc_r+0xa8>
 8009b34:	6822      	ldr	r2, [r4, #0]
 8009b36:	1b52      	subs	r2, r2, r5
 8009b38:	d420      	bmi.n	8009b7c <_malloc_r+0xd0>
 8009b3a:	2a0b      	cmp	r2, #11
 8009b3c:	d917      	bls.n	8009b6e <_malloc_r+0xc2>
 8009b3e:	1961      	adds	r1, r4, r5
 8009b40:	42a3      	cmp	r3, r4
 8009b42:	6025      	str	r5, [r4, #0]
 8009b44:	bf18      	it	ne
 8009b46:	6059      	strne	r1, [r3, #4]
 8009b48:	6863      	ldr	r3, [r4, #4]
 8009b4a:	bf08      	it	eq
 8009b4c:	f8c8 1000 	streq.w	r1, [r8]
 8009b50:	5162      	str	r2, [r4, r5]
 8009b52:	604b      	str	r3, [r1, #4]
 8009b54:	4630      	mov	r0, r6
 8009b56:	f000 f82f 	bl	8009bb8 <__malloc_unlock>
 8009b5a:	f104 000b 	add.w	r0, r4, #11
 8009b5e:	1d23      	adds	r3, r4, #4
 8009b60:	f020 0007 	bic.w	r0, r0, #7
 8009b64:	1ac2      	subs	r2, r0, r3
 8009b66:	bf1c      	itt	ne
 8009b68:	1a1b      	subne	r3, r3, r0
 8009b6a:	50a3      	strne	r3, [r4, r2]
 8009b6c:	e7af      	b.n	8009ace <_malloc_r+0x22>
 8009b6e:	6862      	ldr	r2, [r4, #4]
 8009b70:	42a3      	cmp	r3, r4
 8009b72:	bf0c      	ite	eq
 8009b74:	f8c8 2000 	streq.w	r2, [r8]
 8009b78:	605a      	strne	r2, [r3, #4]
 8009b7a:	e7eb      	b.n	8009b54 <_malloc_r+0xa8>
 8009b7c:	4623      	mov	r3, r4
 8009b7e:	6864      	ldr	r4, [r4, #4]
 8009b80:	e7ae      	b.n	8009ae0 <_malloc_r+0x34>
 8009b82:	463c      	mov	r4, r7
 8009b84:	687f      	ldr	r7, [r7, #4]
 8009b86:	e7b6      	b.n	8009af6 <_malloc_r+0x4a>
 8009b88:	461a      	mov	r2, r3
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	42a3      	cmp	r3, r4
 8009b8e:	d1fb      	bne.n	8009b88 <_malloc_r+0xdc>
 8009b90:	2300      	movs	r3, #0
 8009b92:	6053      	str	r3, [r2, #4]
 8009b94:	e7de      	b.n	8009b54 <_malloc_r+0xa8>
 8009b96:	230c      	movs	r3, #12
 8009b98:	6033      	str	r3, [r6, #0]
 8009b9a:	4630      	mov	r0, r6
 8009b9c:	f000 f80c 	bl	8009bb8 <__malloc_unlock>
 8009ba0:	e794      	b.n	8009acc <_malloc_r+0x20>
 8009ba2:	6005      	str	r5, [r0, #0]
 8009ba4:	e7d6      	b.n	8009b54 <_malloc_r+0xa8>
 8009ba6:	bf00      	nop
 8009ba8:	200009a8 	.word	0x200009a8

08009bac <__malloc_lock>:
 8009bac:	4801      	ldr	r0, [pc, #4]	@ (8009bb4 <__malloc_lock+0x8>)
 8009bae:	f000 b9aa 	b.w	8009f06 <__retarget_lock_acquire_recursive>
 8009bb2:	bf00      	nop
 8009bb4:	20000aec 	.word	0x20000aec

08009bb8 <__malloc_unlock>:
 8009bb8:	4801      	ldr	r0, [pc, #4]	@ (8009bc0 <__malloc_unlock+0x8>)
 8009bba:	f000 b9a5 	b.w	8009f08 <__retarget_lock_release_recursive>
 8009bbe:	bf00      	nop
 8009bc0:	20000aec 	.word	0x20000aec

08009bc4 <std>:
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	b510      	push	{r4, lr}
 8009bc8:	4604      	mov	r4, r0
 8009bca:	e9c0 3300 	strd	r3, r3, [r0]
 8009bce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009bd2:	6083      	str	r3, [r0, #8]
 8009bd4:	8181      	strh	r1, [r0, #12]
 8009bd6:	6643      	str	r3, [r0, #100]	@ 0x64
 8009bd8:	81c2      	strh	r2, [r0, #14]
 8009bda:	6183      	str	r3, [r0, #24]
 8009bdc:	4619      	mov	r1, r3
 8009bde:	2208      	movs	r2, #8
 8009be0:	305c      	adds	r0, #92	@ 0x5c
 8009be2:	f000 f906 	bl	8009df2 <memset>
 8009be6:	4b0d      	ldr	r3, [pc, #52]	@ (8009c1c <std+0x58>)
 8009be8:	6263      	str	r3, [r4, #36]	@ 0x24
 8009bea:	4b0d      	ldr	r3, [pc, #52]	@ (8009c20 <std+0x5c>)
 8009bec:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009bee:	4b0d      	ldr	r3, [pc, #52]	@ (8009c24 <std+0x60>)
 8009bf0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8009c28 <std+0x64>)
 8009bf4:	6323      	str	r3, [r4, #48]	@ 0x30
 8009bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8009c2c <std+0x68>)
 8009bf8:	6224      	str	r4, [r4, #32]
 8009bfa:	429c      	cmp	r4, r3
 8009bfc:	d006      	beq.n	8009c0c <std+0x48>
 8009bfe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009c02:	4294      	cmp	r4, r2
 8009c04:	d002      	beq.n	8009c0c <std+0x48>
 8009c06:	33d0      	adds	r3, #208	@ 0xd0
 8009c08:	429c      	cmp	r4, r3
 8009c0a:	d105      	bne.n	8009c18 <std+0x54>
 8009c0c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c14:	f000 b976 	b.w	8009f04 <__retarget_lock_init_recursive>
 8009c18:	bd10      	pop	{r4, pc}
 8009c1a:	bf00      	nop
 8009c1c:	08009d6d 	.word	0x08009d6d
 8009c20:	08009d8f 	.word	0x08009d8f
 8009c24:	08009dc7 	.word	0x08009dc7
 8009c28:	08009deb 	.word	0x08009deb
 8009c2c:	200009ac 	.word	0x200009ac

08009c30 <stdio_exit_handler>:
 8009c30:	4a02      	ldr	r2, [pc, #8]	@ (8009c3c <stdio_exit_handler+0xc>)
 8009c32:	4903      	ldr	r1, [pc, #12]	@ (8009c40 <stdio_exit_handler+0x10>)
 8009c34:	4803      	ldr	r0, [pc, #12]	@ (8009c44 <stdio_exit_handler+0x14>)
 8009c36:	f000 b869 	b.w	8009d0c <_fwalk_sglue>
 8009c3a:	bf00      	nop
 8009c3c:	2000002c 	.word	0x2000002c
 8009c40:	0800a649 	.word	0x0800a649
 8009c44:	2000003c 	.word	0x2000003c

08009c48 <cleanup_stdio>:
 8009c48:	6841      	ldr	r1, [r0, #4]
 8009c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8009c7c <cleanup_stdio+0x34>)
 8009c4c:	4299      	cmp	r1, r3
 8009c4e:	b510      	push	{r4, lr}
 8009c50:	4604      	mov	r4, r0
 8009c52:	d001      	beq.n	8009c58 <cleanup_stdio+0x10>
 8009c54:	f000 fcf8 	bl	800a648 <_fflush_r>
 8009c58:	68a1      	ldr	r1, [r4, #8]
 8009c5a:	4b09      	ldr	r3, [pc, #36]	@ (8009c80 <cleanup_stdio+0x38>)
 8009c5c:	4299      	cmp	r1, r3
 8009c5e:	d002      	beq.n	8009c66 <cleanup_stdio+0x1e>
 8009c60:	4620      	mov	r0, r4
 8009c62:	f000 fcf1 	bl	800a648 <_fflush_r>
 8009c66:	68e1      	ldr	r1, [r4, #12]
 8009c68:	4b06      	ldr	r3, [pc, #24]	@ (8009c84 <cleanup_stdio+0x3c>)
 8009c6a:	4299      	cmp	r1, r3
 8009c6c:	d004      	beq.n	8009c78 <cleanup_stdio+0x30>
 8009c6e:	4620      	mov	r0, r4
 8009c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c74:	f000 bce8 	b.w	800a648 <_fflush_r>
 8009c78:	bd10      	pop	{r4, pc}
 8009c7a:	bf00      	nop
 8009c7c:	200009ac 	.word	0x200009ac
 8009c80:	20000a14 	.word	0x20000a14
 8009c84:	20000a7c 	.word	0x20000a7c

08009c88 <global_stdio_init.part.0>:
 8009c88:	b510      	push	{r4, lr}
 8009c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8009cb8 <global_stdio_init.part.0+0x30>)
 8009c8c:	4c0b      	ldr	r4, [pc, #44]	@ (8009cbc <global_stdio_init.part.0+0x34>)
 8009c8e:	4a0c      	ldr	r2, [pc, #48]	@ (8009cc0 <global_stdio_init.part.0+0x38>)
 8009c90:	601a      	str	r2, [r3, #0]
 8009c92:	4620      	mov	r0, r4
 8009c94:	2200      	movs	r2, #0
 8009c96:	2104      	movs	r1, #4
 8009c98:	f7ff ff94 	bl	8009bc4 <std>
 8009c9c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	2109      	movs	r1, #9
 8009ca4:	f7ff ff8e 	bl	8009bc4 <std>
 8009ca8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009cac:	2202      	movs	r2, #2
 8009cae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cb2:	2112      	movs	r1, #18
 8009cb4:	f7ff bf86 	b.w	8009bc4 <std>
 8009cb8:	20000ae4 	.word	0x20000ae4
 8009cbc:	200009ac 	.word	0x200009ac
 8009cc0:	08009c31 	.word	0x08009c31

08009cc4 <__sfp_lock_acquire>:
 8009cc4:	4801      	ldr	r0, [pc, #4]	@ (8009ccc <__sfp_lock_acquire+0x8>)
 8009cc6:	f000 b91e 	b.w	8009f06 <__retarget_lock_acquire_recursive>
 8009cca:	bf00      	nop
 8009ccc:	20000aed 	.word	0x20000aed

08009cd0 <__sfp_lock_release>:
 8009cd0:	4801      	ldr	r0, [pc, #4]	@ (8009cd8 <__sfp_lock_release+0x8>)
 8009cd2:	f000 b919 	b.w	8009f08 <__retarget_lock_release_recursive>
 8009cd6:	bf00      	nop
 8009cd8:	20000aed 	.word	0x20000aed

08009cdc <__sinit>:
 8009cdc:	b510      	push	{r4, lr}
 8009cde:	4604      	mov	r4, r0
 8009ce0:	f7ff fff0 	bl	8009cc4 <__sfp_lock_acquire>
 8009ce4:	6a23      	ldr	r3, [r4, #32]
 8009ce6:	b11b      	cbz	r3, 8009cf0 <__sinit+0x14>
 8009ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cec:	f7ff bff0 	b.w	8009cd0 <__sfp_lock_release>
 8009cf0:	4b04      	ldr	r3, [pc, #16]	@ (8009d04 <__sinit+0x28>)
 8009cf2:	6223      	str	r3, [r4, #32]
 8009cf4:	4b04      	ldr	r3, [pc, #16]	@ (8009d08 <__sinit+0x2c>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d1f5      	bne.n	8009ce8 <__sinit+0xc>
 8009cfc:	f7ff ffc4 	bl	8009c88 <global_stdio_init.part.0>
 8009d00:	e7f2      	b.n	8009ce8 <__sinit+0xc>
 8009d02:	bf00      	nop
 8009d04:	08009c49 	.word	0x08009c49
 8009d08:	20000ae4 	.word	0x20000ae4

08009d0c <_fwalk_sglue>:
 8009d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d10:	4607      	mov	r7, r0
 8009d12:	4688      	mov	r8, r1
 8009d14:	4614      	mov	r4, r2
 8009d16:	2600      	movs	r6, #0
 8009d18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d1c:	f1b9 0901 	subs.w	r9, r9, #1
 8009d20:	d505      	bpl.n	8009d2e <_fwalk_sglue+0x22>
 8009d22:	6824      	ldr	r4, [r4, #0]
 8009d24:	2c00      	cmp	r4, #0
 8009d26:	d1f7      	bne.n	8009d18 <_fwalk_sglue+0xc>
 8009d28:	4630      	mov	r0, r6
 8009d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d2e:	89ab      	ldrh	r3, [r5, #12]
 8009d30:	2b01      	cmp	r3, #1
 8009d32:	d907      	bls.n	8009d44 <_fwalk_sglue+0x38>
 8009d34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d38:	3301      	adds	r3, #1
 8009d3a:	d003      	beq.n	8009d44 <_fwalk_sglue+0x38>
 8009d3c:	4629      	mov	r1, r5
 8009d3e:	4638      	mov	r0, r7
 8009d40:	47c0      	blx	r8
 8009d42:	4306      	orrs	r6, r0
 8009d44:	3568      	adds	r5, #104	@ 0x68
 8009d46:	e7e9      	b.n	8009d1c <_fwalk_sglue+0x10>

08009d48 <iprintf>:
 8009d48:	b40f      	push	{r0, r1, r2, r3}
 8009d4a:	b507      	push	{r0, r1, r2, lr}
 8009d4c:	4906      	ldr	r1, [pc, #24]	@ (8009d68 <iprintf+0x20>)
 8009d4e:	ab04      	add	r3, sp, #16
 8009d50:	6808      	ldr	r0, [r1, #0]
 8009d52:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d56:	6881      	ldr	r1, [r0, #8]
 8009d58:	9301      	str	r3, [sp, #4]
 8009d5a:	f000 f94b 	bl	8009ff4 <_vfiprintf_r>
 8009d5e:	b003      	add	sp, #12
 8009d60:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d64:	b004      	add	sp, #16
 8009d66:	4770      	bx	lr
 8009d68:	20000038 	.word	0x20000038

08009d6c <__sread>:
 8009d6c:	b510      	push	{r4, lr}
 8009d6e:	460c      	mov	r4, r1
 8009d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d74:	f000 f868 	bl	8009e48 <_read_r>
 8009d78:	2800      	cmp	r0, #0
 8009d7a:	bfab      	itete	ge
 8009d7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009d7e:	89a3      	ldrhlt	r3, [r4, #12]
 8009d80:	181b      	addge	r3, r3, r0
 8009d82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009d86:	bfac      	ite	ge
 8009d88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009d8a:	81a3      	strhlt	r3, [r4, #12]
 8009d8c:	bd10      	pop	{r4, pc}

08009d8e <__swrite>:
 8009d8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d92:	461f      	mov	r7, r3
 8009d94:	898b      	ldrh	r3, [r1, #12]
 8009d96:	05db      	lsls	r3, r3, #23
 8009d98:	4605      	mov	r5, r0
 8009d9a:	460c      	mov	r4, r1
 8009d9c:	4616      	mov	r6, r2
 8009d9e:	d505      	bpl.n	8009dac <__swrite+0x1e>
 8009da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009da4:	2302      	movs	r3, #2
 8009da6:	2200      	movs	r2, #0
 8009da8:	f000 f83c 	bl	8009e24 <_lseek_r>
 8009dac:	89a3      	ldrh	r3, [r4, #12]
 8009dae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009db2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009db6:	81a3      	strh	r3, [r4, #12]
 8009db8:	4632      	mov	r2, r6
 8009dba:	463b      	mov	r3, r7
 8009dbc:	4628      	mov	r0, r5
 8009dbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009dc2:	f000 b863 	b.w	8009e8c <_write_r>

08009dc6 <__sseek>:
 8009dc6:	b510      	push	{r4, lr}
 8009dc8:	460c      	mov	r4, r1
 8009dca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dce:	f000 f829 	bl	8009e24 <_lseek_r>
 8009dd2:	1c43      	adds	r3, r0, #1
 8009dd4:	89a3      	ldrh	r3, [r4, #12]
 8009dd6:	bf15      	itete	ne
 8009dd8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009dda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009dde:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009de2:	81a3      	strheq	r3, [r4, #12]
 8009de4:	bf18      	it	ne
 8009de6:	81a3      	strhne	r3, [r4, #12]
 8009de8:	bd10      	pop	{r4, pc}

08009dea <__sclose>:
 8009dea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dee:	f000 b809 	b.w	8009e04 <_close_r>

08009df2 <memset>:
 8009df2:	4402      	add	r2, r0
 8009df4:	4603      	mov	r3, r0
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d100      	bne.n	8009dfc <memset+0xa>
 8009dfa:	4770      	bx	lr
 8009dfc:	f803 1b01 	strb.w	r1, [r3], #1
 8009e00:	e7f9      	b.n	8009df6 <memset+0x4>
	...

08009e04 <_close_r>:
 8009e04:	b538      	push	{r3, r4, r5, lr}
 8009e06:	4d06      	ldr	r5, [pc, #24]	@ (8009e20 <_close_r+0x1c>)
 8009e08:	2300      	movs	r3, #0
 8009e0a:	4604      	mov	r4, r0
 8009e0c:	4608      	mov	r0, r1
 8009e0e:	602b      	str	r3, [r5, #0]
 8009e10:	f7f7 f861 	bl	8000ed6 <_close>
 8009e14:	1c43      	adds	r3, r0, #1
 8009e16:	d102      	bne.n	8009e1e <_close_r+0x1a>
 8009e18:	682b      	ldr	r3, [r5, #0]
 8009e1a:	b103      	cbz	r3, 8009e1e <_close_r+0x1a>
 8009e1c:	6023      	str	r3, [r4, #0]
 8009e1e:	bd38      	pop	{r3, r4, r5, pc}
 8009e20:	20000ae8 	.word	0x20000ae8

08009e24 <_lseek_r>:
 8009e24:	b538      	push	{r3, r4, r5, lr}
 8009e26:	4d07      	ldr	r5, [pc, #28]	@ (8009e44 <_lseek_r+0x20>)
 8009e28:	4604      	mov	r4, r0
 8009e2a:	4608      	mov	r0, r1
 8009e2c:	4611      	mov	r1, r2
 8009e2e:	2200      	movs	r2, #0
 8009e30:	602a      	str	r2, [r5, #0]
 8009e32:	461a      	mov	r2, r3
 8009e34:	f7f7 f876 	bl	8000f24 <_lseek>
 8009e38:	1c43      	adds	r3, r0, #1
 8009e3a:	d102      	bne.n	8009e42 <_lseek_r+0x1e>
 8009e3c:	682b      	ldr	r3, [r5, #0]
 8009e3e:	b103      	cbz	r3, 8009e42 <_lseek_r+0x1e>
 8009e40:	6023      	str	r3, [r4, #0]
 8009e42:	bd38      	pop	{r3, r4, r5, pc}
 8009e44:	20000ae8 	.word	0x20000ae8

08009e48 <_read_r>:
 8009e48:	b538      	push	{r3, r4, r5, lr}
 8009e4a:	4d07      	ldr	r5, [pc, #28]	@ (8009e68 <_read_r+0x20>)
 8009e4c:	4604      	mov	r4, r0
 8009e4e:	4608      	mov	r0, r1
 8009e50:	4611      	mov	r1, r2
 8009e52:	2200      	movs	r2, #0
 8009e54:	602a      	str	r2, [r5, #0]
 8009e56:	461a      	mov	r2, r3
 8009e58:	f7f7 f820 	bl	8000e9c <_read>
 8009e5c:	1c43      	adds	r3, r0, #1
 8009e5e:	d102      	bne.n	8009e66 <_read_r+0x1e>
 8009e60:	682b      	ldr	r3, [r5, #0]
 8009e62:	b103      	cbz	r3, 8009e66 <_read_r+0x1e>
 8009e64:	6023      	str	r3, [r4, #0]
 8009e66:	bd38      	pop	{r3, r4, r5, pc}
 8009e68:	20000ae8 	.word	0x20000ae8

08009e6c <_sbrk_r>:
 8009e6c:	b538      	push	{r3, r4, r5, lr}
 8009e6e:	4d06      	ldr	r5, [pc, #24]	@ (8009e88 <_sbrk_r+0x1c>)
 8009e70:	2300      	movs	r3, #0
 8009e72:	4604      	mov	r4, r0
 8009e74:	4608      	mov	r0, r1
 8009e76:	602b      	str	r3, [r5, #0]
 8009e78:	f7f7 f862 	bl	8000f40 <_sbrk>
 8009e7c:	1c43      	adds	r3, r0, #1
 8009e7e:	d102      	bne.n	8009e86 <_sbrk_r+0x1a>
 8009e80:	682b      	ldr	r3, [r5, #0]
 8009e82:	b103      	cbz	r3, 8009e86 <_sbrk_r+0x1a>
 8009e84:	6023      	str	r3, [r4, #0]
 8009e86:	bd38      	pop	{r3, r4, r5, pc}
 8009e88:	20000ae8 	.word	0x20000ae8

08009e8c <_write_r>:
 8009e8c:	b538      	push	{r3, r4, r5, lr}
 8009e8e:	4d07      	ldr	r5, [pc, #28]	@ (8009eac <_write_r+0x20>)
 8009e90:	4604      	mov	r4, r0
 8009e92:	4608      	mov	r0, r1
 8009e94:	4611      	mov	r1, r2
 8009e96:	2200      	movs	r2, #0
 8009e98:	602a      	str	r2, [r5, #0]
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	f7f6 fe76 	bl	8000b8c <_write>
 8009ea0:	1c43      	adds	r3, r0, #1
 8009ea2:	d102      	bne.n	8009eaa <_write_r+0x1e>
 8009ea4:	682b      	ldr	r3, [r5, #0]
 8009ea6:	b103      	cbz	r3, 8009eaa <_write_r+0x1e>
 8009ea8:	6023      	str	r3, [r4, #0]
 8009eaa:	bd38      	pop	{r3, r4, r5, pc}
 8009eac:	20000ae8 	.word	0x20000ae8

08009eb0 <__errno>:
 8009eb0:	4b01      	ldr	r3, [pc, #4]	@ (8009eb8 <__errno+0x8>)
 8009eb2:	6818      	ldr	r0, [r3, #0]
 8009eb4:	4770      	bx	lr
 8009eb6:	bf00      	nop
 8009eb8:	20000038 	.word	0x20000038

08009ebc <__libc_init_array>:
 8009ebc:	b570      	push	{r4, r5, r6, lr}
 8009ebe:	4d0d      	ldr	r5, [pc, #52]	@ (8009ef4 <__libc_init_array+0x38>)
 8009ec0:	4c0d      	ldr	r4, [pc, #52]	@ (8009ef8 <__libc_init_array+0x3c>)
 8009ec2:	1b64      	subs	r4, r4, r5
 8009ec4:	10a4      	asrs	r4, r4, #2
 8009ec6:	2600      	movs	r6, #0
 8009ec8:	42a6      	cmp	r6, r4
 8009eca:	d109      	bne.n	8009ee0 <__libc_init_array+0x24>
 8009ecc:	4d0b      	ldr	r5, [pc, #44]	@ (8009efc <__libc_init_array+0x40>)
 8009ece:	4c0c      	ldr	r4, [pc, #48]	@ (8009f00 <__libc_init_array+0x44>)
 8009ed0:	f000 fcfa 	bl	800a8c8 <_init>
 8009ed4:	1b64      	subs	r4, r4, r5
 8009ed6:	10a4      	asrs	r4, r4, #2
 8009ed8:	2600      	movs	r6, #0
 8009eda:	42a6      	cmp	r6, r4
 8009edc:	d105      	bne.n	8009eea <__libc_init_array+0x2e>
 8009ede:	bd70      	pop	{r4, r5, r6, pc}
 8009ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ee4:	4798      	blx	r3
 8009ee6:	3601      	adds	r6, #1
 8009ee8:	e7ee      	b.n	8009ec8 <__libc_init_array+0xc>
 8009eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8009eee:	4798      	blx	r3
 8009ef0:	3601      	adds	r6, #1
 8009ef2:	e7f2      	b.n	8009eda <__libc_init_array+0x1e>
 8009ef4:	0800a99c 	.word	0x0800a99c
 8009ef8:	0800a99c 	.word	0x0800a99c
 8009efc:	0800a99c 	.word	0x0800a99c
 8009f00:	0800a9a0 	.word	0x0800a9a0

08009f04 <__retarget_lock_init_recursive>:
 8009f04:	4770      	bx	lr

08009f06 <__retarget_lock_acquire_recursive>:
 8009f06:	4770      	bx	lr

08009f08 <__retarget_lock_release_recursive>:
 8009f08:	4770      	bx	lr
	...

08009f0c <_free_r>:
 8009f0c:	b538      	push	{r3, r4, r5, lr}
 8009f0e:	4605      	mov	r5, r0
 8009f10:	2900      	cmp	r1, #0
 8009f12:	d041      	beq.n	8009f98 <_free_r+0x8c>
 8009f14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f18:	1f0c      	subs	r4, r1, #4
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	bfb8      	it	lt
 8009f1e:	18e4      	addlt	r4, r4, r3
 8009f20:	f7ff fe44 	bl	8009bac <__malloc_lock>
 8009f24:	4a1d      	ldr	r2, [pc, #116]	@ (8009f9c <_free_r+0x90>)
 8009f26:	6813      	ldr	r3, [r2, #0]
 8009f28:	b933      	cbnz	r3, 8009f38 <_free_r+0x2c>
 8009f2a:	6063      	str	r3, [r4, #4]
 8009f2c:	6014      	str	r4, [r2, #0]
 8009f2e:	4628      	mov	r0, r5
 8009f30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f34:	f7ff be40 	b.w	8009bb8 <__malloc_unlock>
 8009f38:	42a3      	cmp	r3, r4
 8009f3a:	d908      	bls.n	8009f4e <_free_r+0x42>
 8009f3c:	6820      	ldr	r0, [r4, #0]
 8009f3e:	1821      	adds	r1, r4, r0
 8009f40:	428b      	cmp	r3, r1
 8009f42:	bf01      	itttt	eq
 8009f44:	6819      	ldreq	r1, [r3, #0]
 8009f46:	685b      	ldreq	r3, [r3, #4]
 8009f48:	1809      	addeq	r1, r1, r0
 8009f4a:	6021      	streq	r1, [r4, #0]
 8009f4c:	e7ed      	b.n	8009f2a <_free_r+0x1e>
 8009f4e:	461a      	mov	r2, r3
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	b10b      	cbz	r3, 8009f58 <_free_r+0x4c>
 8009f54:	42a3      	cmp	r3, r4
 8009f56:	d9fa      	bls.n	8009f4e <_free_r+0x42>
 8009f58:	6811      	ldr	r1, [r2, #0]
 8009f5a:	1850      	adds	r0, r2, r1
 8009f5c:	42a0      	cmp	r0, r4
 8009f5e:	d10b      	bne.n	8009f78 <_free_r+0x6c>
 8009f60:	6820      	ldr	r0, [r4, #0]
 8009f62:	4401      	add	r1, r0
 8009f64:	1850      	adds	r0, r2, r1
 8009f66:	4283      	cmp	r3, r0
 8009f68:	6011      	str	r1, [r2, #0]
 8009f6a:	d1e0      	bne.n	8009f2e <_free_r+0x22>
 8009f6c:	6818      	ldr	r0, [r3, #0]
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	6053      	str	r3, [r2, #4]
 8009f72:	4408      	add	r0, r1
 8009f74:	6010      	str	r0, [r2, #0]
 8009f76:	e7da      	b.n	8009f2e <_free_r+0x22>
 8009f78:	d902      	bls.n	8009f80 <_free_r+0x74>
 8009f7a:	230c      	movs	r3, #12
 8009f7c:	602b      	str	r3, [r5, #0]
 8009f7e:	e7d6      	b.n	8009f2e <_free_r+0x22>
 8009f80:	6820      	ldr	r0, [r4, #0]
 8009f82:	1821      	adds	r1, r4, r0
 8009f84:	428b      	cmp	r3, r1
 8009f86:	bf04      	itt	eq
 8009f88:	6819      	ldreq	r1, [r3, #0]
 8009f8a:	685b      	ldreq	r3, [r3, #4]
 8009f8c:	6063      	str	r3, [r4, #4]
 8009f8e:	bf04      	itt	eq
 8009f90:	1809      	addeq	r1, r1, r0
 8009f92:	6021      	streq	r1, [r4, #0]
 8009f94:	6054      	str	r4, [r2, #4]
 8009f96:	e7ca      	b.n	8009f2e <_free_r+0x22>
 8009f98:	bd38      	pop	{r3, r4, r5, pc}
 8009f9a:	bf00      	nop
 8009f9c:	200009a8 	.word	0x200009a8

08009fa0 <__sfputc_r>:
 8009fa0:	6893      	ldr	r3, [r2, #8]
 8009fa2:	3b01      	subs	r3, #1
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	b410      	push	{r4}
 8009fa8:	6093      	str	r3, [r2, #8]
 8009faa:	da08      	bge.n	8009fbe <__sfputc_r+0x1e>
 8009fac:	6994      	ldr	r4, [r2, #24]
 8009fae:	42a3      	cmp	r3, r4
 8009fb0:	db01      	blt.n	8009fb6 <__sfputc_r+0x16>
 8009fb2:	290a      	cmp	r1, #10
 8009fb4:	d103      	bne.n	8009fbe <__sfputc_r+0x1e>
 8009fb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fba:	f000 bb6d 	b.w	800a698 <__swbuf_r>
 8009fbe:	6813      	ldr	r3, [r2, #0]
 8009fc0:	1c58      	adds	r0, r3, #1
 8009fc2:	6010      	str	r0, [r2, #0]
 8009fc4:	7019      	strb	r1, [r3, #0]
 8009fc6:	4608      	mov	r0, r1
 8009fc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fcc:	4770      	bx	lr

08009fce <__sfputs_r>:
 8009fce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fd0:	4606      	mov	r6, r0
 8009fd2:	460f      	mov	r7, r1
 8009fd4:	4614      	mov	r4, r2
 8009fd6:	18d5      	adds	r5, r2, r3
 8009fd8:	42ac      	cmp	r4, r5
 8009fda:	d101      	bne.n	8009fe0 <__sfputs_r+0x12>
 8009fdc:	2000      	movs	r0, #0
 8009fde:	e007      	b.n	8009ff0 <__sfputs_r+0x22>
 8009fe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fe4:	463a      	mov	r2, r7
 8009fe6:	4630      	mov	r0, r6
 8009fe8:	f7ff ffda 	bl	8009fa0 <__sfputc_r>
 8009fec:	1c43      	adds	r3, r0, #1
 8009fee:	d1f3      	bne.n	8009fd8 <__sfputs_r+0xa>
 8009ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ff4 <_vfiprintf_r>:
 8009ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff8:	460d      	mov	r5, r1
 8009ffa:	b09d      	sub	sp, #116	@ 0x74
 8009ffc:	4614      	mov	r4, r2
 8009ffe:	4698      	mov	r8, r3
 800a000:	4606      	mov	r6, r0
 800a002:	b118      	cbz	r0, 800a00c <_vfiprintf_r+0x18>
 800a004:	6a03      	ldr	r3, [r0, #32]
 800a006:	b90b      	cbnz	r3, 800a00c <_vfiprintf_r+0x18>
 800a008:	f7ff fe68 	bl	8009cdc <__sinit>
 800a00c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a00e:	07d9      	lsls	r1, r3, #31
 800a010:	d405      	bmi.n	800a01e <_vfiprintf_r+0x2a>
 800a012:	89ab      	ldrh	r3, [r5, #12]
 800a014:	059a      	lsls	r2, r3, #22
 800a016:	d402      	bmi.n	800a01e <_vfiprintf_r+0x2a>
 800a018:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a01a:	f7ff ff74 	bl	8009f06 <__retarget_lock_acquire_recursive>
 800a01e:	89ab      	ldrh	r3, [r5, #12]
 800a020:	071b      	lsls	r3, r3, #28
 800a022:	d501      	bpl.n	800a028 <_vfiprintf_r+0x34>
 800a024:	692b      	ldr	r3, [r5, #16]
 800a026:	b99b      	cbnz	r3, 800a050 <_vfiprintf_r+0x5c>
 800a028:	4629      	mov	r1, r5
 800a02a:	4630      	mov	r0, r6
 800a02c:	f000 fb72 	bl	800a714 <__swsetup_r>
 800a030:	b170      	cbz	r0, 800a050 <_vfiprintf_r+0x5c>
 800a032:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a034:	07dc      	lsls	r4, r3, #31
 800a036:	d504      	bpl.n	800a042 <_vfiprintf_r+0x4e>
 800a038:	f04f 30ff 	mov.w	r0, #4294967295
 800a03c:	b01d      	add	sp, #116	@ 0x74
 800a03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a042:	89ab      	ldrh	r3, [r5, #12]
 800a044:	0598      	lsls	r0, r3, #22
 800a046:	d4f7      	bmi.n	800a038 <_vfiprintf_r+0x44>
 800a048:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a04a:	f7ff ff5d 	bl	8009f08 <__retarget_lock_release_recursive>
 800a04e:	e7f3      	b.n	800a038 <_vfiprintf_r+0x44>
 800a050:	2300      	movs	r3, #0
 800a052:	9309      	str	r3, [sp, #36]	@ 0x24
 800a054:	2320      	movs	r3, #32
 800a056:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a05a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a05e:	2330      	movs	r3, #48	@ 0x30
 800a060:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a210 <_vfiprintf_r+0x21c>
 800a064:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a068:	f04f 0901 	mov.w	r9, #1
 800a06c:	4623      	mov	r3, r4
 800a06e:	469a      	mov	sl, r3
 800a070:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a074:	b10a      	cbz	r2, 800a07a <_vfiprintf_r+0x86>
 800a076:	2a25      	cmp	r2, #37	@ 0x25
 800a078:	d1f9      	bne.n	800a06e <_vfiprintf_r+0x7a>
 800a07a:	ebba 0b04 	subs.w	fp, sl, r4
 800a07e:	d00b      	beq.n	800a098 <_vfiprintf_r+0xa4>
 800a080:	465b      	mov	r3, fp
 800a082:	4622      	mov	r2, r4
 800a084:	4629      	mov	r1, r5
 800a086:	4630      	mov	r0, r6
 800a088:	f7ff ffa1 	bl	8009fce <__sfputs_r>
 800a08c:	3001      	adds	r0, #1
 800a08e:	f000 80a7 	beq.w	800a1e0 <_vfiprintf_r+0x1ec>
 800a092:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a094:	445a      	add	r2, fp
 800a096:	9209      	str	r2, [sp, #36]	@ 0x24
 800a098:	f89a 3000 	ldrb.w	r3, [sl]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	f000 809f 	beq.w	800a1e0 <_vfiprintf_r+0x1ec>
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a0a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0ac:	f10a 0a01 	add.w	sl, sl, #1
 800a0b0:	9304      	str	r3, [sp, #16]
 800a0b2:	9307      	str	r3, [sp, #28]
 800a0b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a0b8:	931a      	str	r3, [sp, #104]	@ 0x68
 800a0ba:	4654      	mov	r4, sl
 800a0bc:	2205      	movs	r2, #5
 800a0be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0c2:	4853      	ldr	r0, [pc, #332]	@ (800a210 <_vfiprintf_r+0x21c>)
 800a0c4:	f7f6 f884 	bl	80001d0 <memchr>
 800a0c8:	9a04      	ldr	r2, [sp, #16]
 800a0ca:	b9d8      	cbnz	r0, 800a104 <_vfiprintf_r+0x110>
 800a0cc:	06d1      	lsls	r1, r2, #27
 800a0ce:	bf44      	itt	mi
 800a0d0:	2320      	movmi	r3, #32
 800a0d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0d6:	0713      	lsls	r3, r2, #28
 800a0d8:	bf44      	itt	mi
 800a0da:	232b      	movmi	r3, #43	@ 0x2b
 800a0dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0e0:	f89a 3000 	ldrb.w	r3, [sl]
 800a0e4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0e6:	d015      	beq.n	800a114 <_vfiprintf_r+0x120>
 800a0e8:	9a07      	ldr	r2, [sp, #28]
 800a0ea:	4654      	mov	r4, sl
 800a0ec:	2000      	movs	r0, #0
 800a0ee:	f04f 0c0a 	mov.w	ip, #10
 800a0f2:	4621      	mov	r1, r4
 800a0f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0f8:	3b30      	subs	r3, #48	@ 0x30
 800a0fa:	2b09      	cmp	r3, #9
 800a0fc:	d94b      	bls.n	800a196 <_vfiprintf_r+0x1a2>
 800a0fe:	b1b0      	cbz	r0, 800a12e <_vfiprintf_r+0x13a>
 800a100:	9207      	str	r2, [sp, #28]
 800a102:	e014      	b.n	800a12e <_vfiprintf_r+0x13a>
 800a104:	eba0 0308 	sub.w	r3, r0, r8
 800a108:	fa09 f303 	lsl.w	r3, r9, r3
 800a10c:	4313      	orrs	r3, r2
 800a10e:	9304      	str	r3, [sp, #16]
 800a110:	46a2      	mov	sl, r4
 800a112:	e7d2      	b.n	800a0ba <_vfiprintf_r+0xc6>
 800a114:	9b03      	ldr	r3, [sp, #12]
 800a116:	1d19      	adds	r1, r3, #4
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	9103      	str	r1, [sp, #12]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	bfbb      	ittet	lt
 800a120:	425b      	neglt	r3, r3
 800a122:	f042 0202 	orrlt.w	r2, r2, #2
 800a126:	9307      	strge	r3, [sp, #28]
 800a128:	9307      	strlt	r3, [sp, #28]
 800a12a:	bfb8      	it	lt
 800a12c:	9204      	strlt	r2, [sp, #16]
 800a12e:	7823      	ldrb	r3, [r4, #0]
 800a130:	2b2e      	cmp	r3, #46	@ 0x2e
 800a132:	d10a      	bne.n	800a14a <_vfiprintf_r+0x156>
 800a134:	7863      	ldrb	r3, [r4, #1]
 800a136:	2b2a      	cmp	r3, #42	@ 0x2a
 800a138:	d132      	bne.n	800a1a0 <_vfiprintf_r+0x1ac>
 800a13a:	9b03      	ldr	r3, [sp, #12]
 800a13c:	1d1a      	adds	r2, r3, #4
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	9203      	str	r2, [sp, #12]
 800a142:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a146:	3402      	adds	r4, #2
 800a148:	9305      	str	r3, [sp, #20]
 800a14a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a220 <_vfiprintf_r+0x22c>
 800a14e:	7821      	ldrb	r1, [r4, #0]
 800a150:	2203      	movs	r2, #3
 800a152:	4650      	mov	r0, sl
 800a154:	f7f6 f83c 	bl	80001d0 <memchr>
 800a158:	b138      	cbz	r0, 800a16a <_vfiprintf_r+0x176>
 800a15a:	9b04      	ldr	r3, [sp, #16]
 800a15c:	eba0 000a 	sub.w	r0, r0, sl
 800a160:	2240      	movs	r2, #64	@ 0x40
 800a162:	4082      	lsls	r2, r0
 800a164:	4313      	orrs	r3, r2
 800a166:	3401      	adds	r4, #1
 800a168:	9304      	str	r3, [sp, #16]
 800a16a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a16e:	4829      	ldr	r0, [pc, #164]	@ (800a214 <_vfiprintf_r+0x220>)
 800a170:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a174:	2206      	movs	r2, #6
 800a176:	f7f6 f82b 	bl	80001d0 <memchr>
 800a17a:	2800      	cmp	r0, #0
 800a17c:	d03f      	beq.n	800a1fe <_vfiprintf_r+0x20a>
 800a17e:	4b26      	ldr	r3, [pc, #152]	@ (800a218 <_vfiprintf_r+0x224>)
 800a180:	bb1b      	cbnz	r3, 800a1ca <_vfiprintf_r+0x1d6>
 800a182:	9b03      	ldr	r3, [sp, #12]
 800a184:	3307      	adds	r3, #7
 800a186:	f023 0307 	bic.w	r3, r3, #7
 800a18a:	3308      	adds	r3, #8
 800a18c:	9303      	str	r3, [sp, #12]
 800a18e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a190:	443b      	add	r3, r7
 800a192:	9309      	str	r3, [sp, #36]	@ 0x24
 800a194:	e76a      	b.n	800a06c <_vfiprintf_r+0x78>
 800a196:	fb0c 3202 	mla	r2, ip, r2, r3
 800a19a:	460c      	mov	r4, r1
 800a19c:	2001      	movs	r0, #1
 800a19e:	e7a8      	b.n	800a0f2 <_vfiprintf_r+0xfe>
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	3401      	adds	r4, #1
 800a1a4:	9305      	str	r3, [sp, #20]
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	f04f 0c0a 	mov.w	ip, #10
 800a1ac:	4620      	mov	r0, r4
 800a1ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1b2:	3a30      	subs	r2, #48	@ 0x30
 800a1b4:	2a09      	cmp	r2, #9
 800a1b6:	d903      	bls.n	800a1c0 <_vfiprintf_r+0x1cc>
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d0c6      	beq.n	800a14a <_vfiprintf_r+0x156>
 800a1bc:	9105      	str	r1, [sp, #20]
 800a1be:	e7c4      	b.n	800a14a <_vfiprintf_r+0x156>
 800a1c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1c4:	4604      	mov	r4, r0
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	e7f0      	b.n	800a1ac <_vfiprintf_r+0x1b8>
 800a1ca:	ab03      	add	r3, sp, #12
 800a1cc:	9300      	str	r3, [sp, #0]
 800a1ce:	462a      	mov	r2, r5
 800a1d0:	4b12      	ldr	r3, [pc, #72]	@ (800a21c <_vfiprintf_r+0x228>)
 800a1d2:	a904      	add	r1, sp, #16
 800a1d4:	4630      	mov	r0, r6
 800a1d6:	f3af 8000 	nop.w
 800a1da:	4607      	mov	r7, r0
 800a1dc:	1c78      	adds	r0, r7, #1
 800a1de:	d1d6      	bne.n	800a18e <_vfiprintf_r+0x19a>
 800a1e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a1e2:	07d9      	lsls	r1, r3, #31
 800a1e4:	d405      	bmi.n	800a1f2 <_vfiprintf_r+0x1fe>
 800a1e6:	89ab      	ldrh	r3, [r5, #12]
 800a1e8:	059a      	lsls	r2, r3, #22
 800a1ea:	d402      	bmi.n	800a1f2 <_vfiprintf_r+0x1fe>
 800a1ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a1ee:	f7ff fe8b 	bl	8009f08 <__retarget_lock_release_recursive>
 800a1f2:	89ab      	ldrh	r3, [r5, #12]
 800a1f4:	065b      	lsls	r3, r3, #25
 800a1f6:	f53f af1f 	bmi.w	800a038 <_vfiprintf_r+0x44>
 800a1fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a1fc:	e71e      	b.n	800a03c <_vfiprintf_r+0x48>
 800a1fe:	ab03      	add	r3, sp, #12
 800a200:	9300      	str	r3, [sp, #0]
 800a202:	462a      	mov	r2, r5
 800a204:	4b05      	ldr	r3, [pc, #20]	@ (800a21c <_vfiprintf_r+0x228>)
 800a206:	a904      	add	r1, sp, #16
 800a208:	4630      	mov	r0, r6
 800a20a:	f000 f879 	bl	800a300 <_printf_i>
 800a20e:	e7e4      	b.n	800a1da <_vfiprintf_r+0x1e6>
 800a210:	0800a960 	.word	0x0800a960
 800a214:	0800a96a 	.word	0x0800a96a
 800a218:	00000000 	.word	0x00000000
 800a21c:	08009fcf 	.word	0x08009fcf
 800a220:	0800a966 	.word	0x0800a966

0800a224 <_printf_common>:
 800a224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a228:	4616      	mov	r6, r2
 800a22a:	4698      	mov	r8, r3
 800a22c:	688a      	ldr	r2, [r1, #8]
 800a22e:	690b      	ldr	r3, [r1, #16]
 800a230:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a234:	4293      	cmp	r3, r2
 800a236:	bfb8      	it	lt
 800a238:	4613      	movlt	r3, r2
 800a23a:	6033      	str	r3, [r6, #0]
 800a23c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a240:	4607      	mov	r7, r0
 800a242:	460c      	mov	r4, r1
 800a244:	b10a      	cbz	r2, 800a24a <_printf_common+0x26>
 800a246:	3301      	adds	r3, #1
 800a248:	6033      	str	r3, [r6, #0]
 800a24a:	6823      	ldr	r3, [r4, #0]
 800a24c:	0699      	lsls	r1, r3, #26
 800a24e:	bf42      	ittt	mi
 800a250:	6833      	ldrmi	r3, [r6, #0]
 800a252:	3302      	addmi	r3, #2
 800a254:	6033      	strmi	r3, [r6, #0]
 800a256:	6825      	ldr	r5, [r4, #0]
 800a258:	f015 0506 	ands.w	r5, r5, #6
 800a25c:	d106      	bne.n	800a26c <_printf_common+0x48>
 800a25e:	f104 0a19 	add.w	sl, r4, #25
 800a262:	68e3      	ldr	r3, [r4, #12]
 800a264:	6832      	ldr	r2, [r6, #0]
 800a266:	1a9b      	subs	r3, r3, r2
 800a268:	42ab      	cmp	r3, r5
 800a26a:	dc26      	bgt.n	800a2ba <_printf_common+0x96>
 800a26c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a270:	6822      	ldr	r2, [r4, #0]
 800a272:	3b00      	subs	r3, #0
 800a274:	bf18      	it	ne
 800a276:	2301      	movne	r3, #1
 800a278:	0692      	lsls	r2, r2, #26
 800a27a:	d42b      	bmi.n	800a2d4 <_printf_common+0xb0>
 800a27c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a280:	4641      	mov	r1, r8
 800a282:	4638      	mov	r0, r7
 800a284:	47c8      	blx	r9
 800a286:	3001      	adds	r0, #1
 800a288:	d01e      	beq.n	800a2c8 <_printf_common+0xa4>
 800a28a:	6823      	ldr	r3, [r4, #0]
 800a28c:	6922      	ldr	r2, [r4, #16]
 800a28e:	f003 0306 	and.w	r3, r3, #6
 800a292:	2b04      	cmp	r3, #4
 800a294:	bf02      	ittt	eq
 800a296:	68e5      	ldreq	r5, [r4, #12]
 800a298:	6833      	ldreq	r3, [r6, #0]
 800a29a:	1aed      	subeq	r5, r5, r3
 800a29c:	68a3      	ldr	r3, [r4, #8]
 800a29e:	bf0c      	ite	eq
 800a2a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2a4:	2500      	movne	r5, #0
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	bfc4      	itt	gt
 800a2aa:	1a9b      	subgt	r3, r3, r2
 800a2ac:	18ed      	addgt	r5, r5, r3
 800a2ae:	2600      	movs	r6, #0
 800a2b0:	341a      	adds	r4, #26
 800a2b2:	42b5      	cmp	r5, r6
 800a2b4:	d11a      	bne.n	800a2ec <_printf_common+0xc8>
 800a2b6:	2000      	movs	r0, #0
 800a2b8:	e008      	b.n	800a2cc <_printf_common+0xa8>
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	4652      	mov	r2, sl
 800a2be:	4641      	mov	r1, r8
 800a2c0:	4638      	mov	r0, r7
 800a2c2:	47c8      	blx	r9
 800a2c4:	3001      	adds	r0, #1
 800a2c6:	d103      	bne.n	800a2d0 <_printf_common+0xac>
 800a2c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2d0:	3501      	adds	r5, #1
 800a2d2:	e7c6      	b.n	800a262 <_printf_common+0x3e>
 800a2d4:	18e1      	adds	r1, r4, r3
 800a2d6:	1c5a      	adds	r2, r3, #1
 800a2d8:	2030      	movs	r0, #48	@ 0x30
 800a2da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a2de:	4422      	add	r2, r4
 800a2e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a2e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a2e8:	3302      	adds	r3, #2
 800a2ea:	e7c7      	b.n	800a27c <_printf_common+0x58>
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	4622      	mov	r2, r4
 800a2f0:	4641      	mov	r1, r8
 800a2f2:	4638      	mov	r0, r7
 800a2f4:	47c8      	blx	r9
 800a2f6:	3001      	adds	r0, #1
 800a2f8:	d0e6      	beq.n	800a2c8 <_printf_common+0xa4>
 800a2fa:	3601      	adds	r6, #1
 800a2fc:	e7d9      	b.n	800a2b2 <_printf_common+0x8e>
	...

0800a300 <_printf_i>:
 800a300:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a304:	7e0f      	ldrb	r7, [r1, #24]
 800a306:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a308:	2f78      	cmp	r7, #120	@ 0x78
 800a30a:	4691      	mov	r9, r2
 800a30c:	4680      	mov	r8, r0
 800a30e:	460c      	mov	r4, r1
 800a310:	469a      	mov	sl, r3
 800a312:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a316:	d807      	bhi.n	800a328 <_printf_i+0x28>
 800a318:	2f62      	cmp	r7, #98	@ 0x62
 800a31a:	d80a      	bhi.n	800a332 <_printf_i+0x32>
 800a31c:	2f00      	cmp	r7, #0
 800a31e:	f000 80d2 	beq.w	800a4c6 <_printf_i+0x1c6>
 800a322:	2f58      	cmp	r7, #88	@ 0x58
 800a324:	f000 80b9 	beq.w	800a49a <_printf_i+0x19a>
 800a328:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a32c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a330:	e03a      	b.n	800a3a8 <_printf_i+0xa8>
 800a332:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a336:	2b15      	cmp	r3, #21
 800a338:	d8f6      	bhi.n	800a328 <_printf_i+0x28>
 800a33a:	a101      	add	r1, pc, #4	@ (adr r1, 800a340 <_printf_i+0x40>)
 800a33c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a340:	0800a399 	.word	0x0800a399
 800a344:	0800a3ad 	.word	0x0800a3ad
 800a348:	0800a329 	.word	0x0800a329
 800a34c:	0800a329 	.word	0x0800a329
 800a350:	0800a329 	.word	0x0800a329
 800a354:	0800a329 	.word	0x0800a329
 800a358:	0800a3ad 	.word	0x0800a3ad
 800a35c:	0800a329 	.word	0x0800a329
 800a360:	0800a329 	.word	0x0800a329
 800a364:	0800a329 	.word	0x0800a329
 800a368:	0800a329 	.word	0x0800a329
 800a36c:	0800a4ad 	.word	0x0800a4ad
 800a370:	0800a3d7 	.word	0x0800a3d7
 800a374:	0800a467 	.word	0x0800a467
 800a378:	0800a329 	.word	0x0800a329
 800a37c:	0800a329 	.word	0x0800a329
 800a380:	0800a4cf 	.word	0x0800a4cf
 800a384:	0800a329 	.word	0x0800a329
 800a388:	0800a3d7 	.word	0x0800a3d7
 800a38c:	0800a329 	.word	0x0800a329
 800a390:	0800a329 	.word	0x0800a329
 800a394:	0800a46f 	.word	0x0800a46f
 800a398:	6833      	ldr	r3, [r6, #0]
 800a39a:	1d1a      	adds	r2, r3, #4
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	6032      	str	r2, [r6, #0]
 800a3a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a3a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	e09d      	b.n	800a4e8 <_printf_i+0x1e8>
 800a3ac:	6833      	ldr	r3, [r6, #0]
 800a3ae:	6820      	ldr	r0, [r4, #0]
 800a3b0:	1d19      	adds	r1, r3, #4
 800a3b2:	6031      	str	r1, [r6, #0]
 800a3b4:	0606      	lsls	r6, r0, #24
 800a3b6:	d501      	bpl.n	800a3bc <_printf_i+0xbc>
 800a3b8:	681d      	ldr	r5, [r3, #0]
 800a3ba:	e003      	b.n	800a3c4 <_printf_i+0xc4>
 800a3bc:	0645      	lsls	r5, r0, #25
 800a3be:	d5fb      	bpl.n	800a3b8 <_printf_i+0xb8>
 800a3c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a3c4:	2d00      	cmp	r5, #0
 800a3c6:	da03      	bge.n	800a3d0 <_printf_i+0xd0>
 800a3c8:	232d      	movs	r3, #45	@ 0x2d
 800a3ca:	426d      	negs	r5, r5
 800a3cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a3d0:	4859      	ldr	r0, [pc, #356]	@ (800a538 <_printf_i+0x238>)
 800a3d2:	230a      	movs	r3, #10
 800a3d4:	e011      	b.n	800a3fa <_printf_i+0xfa>
 800a3d6:	6821      	ldr	r1, [r4, #0]
 800a3d8:	6833      	ldr	r3, [r6, #0]
 800a3da:	0608      	lsls	r0, r1, #24
 800a3dc:	f853 5b04 	ldr.w	r5, [r3], #4
 800a3e0:	d402      	bmi.n	800a3e8 <_printf_i+0xe8>
 800a3e2:	0649      	lsls	r1, r1, #25
 800a3e4:	bf48      	it	mi
 800a3e6:	b2ad      	uxthmi	r5, r5
 800a3e8:	2f6f      	cmp	r7, #111	@ 0x6f
 800a3ea:	4853      	ldr	r0, [pc, #332]	@ (800a538 <_printf_i+0x238>)
 800a3ec:	6033      	str	r3, [r6, #0]
 800a3ee:	bf14      	ite	ne
 800a3f0:	230a      	movne	r3, #10
 800a3f2:	2308      	moveq	r3, #8
 800a3f4:	2100      	movs	r1, #0
 800a3f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a3fa:	6866      	ldr	r6, [r4, #4]
 800a3fc:	60a6      	str	r6, [r4, #8]
 800a3fe:	2e00      	cmp	r6, #0
 800a400:	bfa2      	ittt	ge
 800a402:	6821      	ldrge	r1, [r4, #0]
 800a404:	f021 0104 	bicge.w	r1, r1, #4
 800a408:	6021      	strge	r1, [r4, #0]
 800a40a:	b90d      	cbnz	r5, 800a410 <_printf_i+0x110>
 800a40c:	2e00      	cmp	r6, #0
 800a40e:	d04b      	beq.n	800a4a8 <_printf_i+0x1a8>
 800a410:	4616      	mov	r6, r2
 800a412:	fbb5 f1f3 	udiv	r1, r5, r3
 800a416:	fb03 5711 	mls	r7, r3, r1, r5
 800a41a:	5dc7      	ldrb	r7, [r0, r7]
 800a41c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a420:	462f      	mov	r7, r5
 800a422:	42bb      	cmp	r3, r7
 800a424:	460d      	mov	r5, r1
 800a426:	d9f4      	bls.n	800a412 <_printf_i+0x112>
 800a428:	2b08      	cmp	r3, #8
 800a42a:	d10b      	bne.n	800a444 <_printf_i+0x144>
 800a42c:	6823      	ldr	r3, [r4, #0]
 800a42e:	07df      	lsls	r7, r3, #31
 800a430:	d508      	bpl.n	800a444 <_printf_i+0x144>
 800a432:	6923      	ldr	r3, [r4, #16]
 800a434:	6861      	ldr	r1, [r4, #4]
 800a436:	4299      	cmp	r1, r3
 800a438:	bfde      	ittt	le
 800a43a:	2330      	movle	r3, #48	@ 0x30
 800a43c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a440:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a444:	1b92      	subs	r2, r2, r6
 800a446:	6122      	str	r2, [r4, #16]
 800a448:	f8cd a000 	str.w	sl, [sp]
 800a44c:	464b      	mov	r3, r9
 800a44e:	aa03      	add	r2, sp, #12
 800a450:	4621      	mov	r1, r4
 800a452:	4640      	mov	r0, r8
 800a454:	f7ff fee6 	bl	800a224 <_printf_common>
 800a458:	3001      	adds	r0, #1
 800a45a:	d14a      	bne.n	800a4f2 <_printf_i+0x1f2>
 800a45c:	f04f 30ff 	mov.w	r0, #4294967295
 800a460:	b004      	add	sp, #16
 800a462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a466:	6823      	ldr	r3, [r4, #0]
 800a468:	f043 0320 	orr.w	r3, r3, #32
 800a46c:	6023      	str	r3, [r4, #0]
 800a46e:	4833      	ldr	r0, [pc, #204]	@ (800a53c <_printf_i+0x23c>)
 800a470:	2778      	movs	r7, #120	@ 0x78
 800a472:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a476:	6823      	ldr	r3, [r4, #0]
 800a478:	6831      	ldr	r1, [r6, #0]
 800a47a:	061f      	lsls	r7, r3, #24
 800a47c:	f851 5b04 	ldr.w	r5, [r1], #4
 800a480:	d402      	bmi.n	800a488 <_printf_i+0x188>
 800a482:	065f      	lsls	r7, r3, #25
 800a484:	bf48      	it	mi
 800a486:	b2ad      	uxthmi	r5, r5
 800a488:	6031      	str	r1, [r6, #0]
 800a48a:	07d9      	lsls	r1, r3, #31
 800a48c:	bf44      	itt	mi
 800a48e:	f043 0320 	orrmi.w	r3, r3, #32
 800a492:	6023      	strmi	r3, [r4, #0]
 800a494:	b11d      	cbz	r5, 800a49e <_printf_i+0x19e>
 800a496:	2310      	movs	r3, #16
 800a498:	e7ac      	b.n	800a3f4 <_printf_i+0xf4>
 800a49a:	4827      	ldr	r0, [pc, #156]	@ (800a538 <_printf_i+0x238>)
 800a49c:	e7e9      	b.n	800a472 <_printf_i+0x172>
 800a49e:	6823      	ldr	r3, [r4, #0]
 800a4a0:	f023 0320 	bic.w	r3, r3, #32
 800a4a4:	6023      	str	r3, [r4, #0]
 800a4a6:	e7f6      	b.n	800a496 <_printf_i+0x196>
 800a4a8:	4616      	mov	r6, r2
 800a4aa:	e7bd      	b.n	800a428 <_printf_i+0x128>
 800a4ac:	6833      	ldr	r3, [r6, #0]
 800a4ae:	6825      	ldr	r5, [r4, #0]
 800a4b0:	6961      	ldr	r1, [r4, #20]
 800a4b2:	1d18      	adds	r0, r3, #4
 800a4b4:	6030      	str	r0, [r6, #0]
 800a4b6:	062e      	lsls	r6, r5, #24
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	d501      	bpl.n	800a4c0 <_printf_i+0x1c0>
 800a4bc:	6019      	str	r1, [r3, #0]
 800a4be:	e002      	b.n	800a4c6 <_printf_i+0x1c6>
 800a4c0:	0668      	lsls	r0, r5, #25
 800a4c2:	d5fb      	bpl.n	800a4bc <_printf_i+0x1bc>
 800a4c4:	8019      	strh	r1, [r3, #0]
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	6123      	str	r3, [r4, #16]
 800a4ca:	4616      	mov	r6, r2
 800a4cc:	e7bc      	b.n	800a448 <_printf_i+0x148>
 800a4ce:	6833      	ldr	r3, [r6, #0]
 800a4d0:	1d1a      	adds	r2, r3, #4
 800a4d2:	6032      	str	r2, [r6, #0]
 800a4d4:	681e      	ldr	r6, [r3, #0]
 800a4d6:	6862      	ldr	r2, [r4, #4]
 800a4d8:	2100      	movs	r1, #0
 800a4da:	4630      	mov	r0, r6
 800a4dc:	f7f5 fe78 	bl	80001d0 <memchr>
 800a4e0:	b108      	cbz	r0, 800a4e6 <_printf_i+0x1e6>
 800a4e2:	1b80      	subs	r0, r0, r6
 800a4e4:	6060      	str	r0, [r4, #4]
 800a4e6:	6863      	ldr	r3, [r4, #4]
 800a4e8:	6123      	str	r3, [r4, #16]
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a4f0:	e7aa      	b.n	800a448 <_printf_i+0x148>
 800a4f2:	6923      	ldr	r3, [r4, #16]
 800a4f4:	4632      	mov	r2, r6
 800a4f6:	4649      	mov	r1, r9
 800a4f8:	4640      	mov	r0, r8
 800a4fa:	47d0      	blx	sl
 800a4fc:	3001      	adds	r0, #1
 800a4fe:	d0ad      	beq.n	800a45c <_printf_i+0x15c>
 800a500:	6823      	ldr	r3, [r4, #0]
 800a502:	079b      	lsls	r3, r3, #30
 800a504:	d413      	bmi.n	800a52e <_printf_i+0x22e>
 800a506:	68e0      	ldr	r0, [r4, #12]
 800a508:	9b03      	ldr	r3, [sp, #12]
 800a50a:	4298      	cmp	r0, r3
 800a50c:	bfb8      	it	lt
 800a50e:	4618      	movlt	r0, r3
 800a510:	e7a6      	b.n	800a460 <_printf_i+0x160>
 800a512:	2301      	movs	r3, #1
 800a514:	4632      	mov	r2, r6
 800a516:	4649      	mov	r1, r9
 800a518:	4640      	mov	r0, r8
 800a51a:	47d0      	blx	sl
 800a51c:	3001      	adds	r0, #1
 800a51e:	d09d      	beq.n	800a45c <_printf_i+0x15c>
 800a520:	3501      	adds	r5, #1
 800a522:	68e3      	ldr	r3, [r4, #12]
 800a524:	9903      	ldr	r1, [sp, #12]
 800a526:	1a5b      	subs	r3, r3, r1
 800a528:	42ab      	cmp	r3, r5
 800a52a:	dcf2      	bgt.n	800a512 <_printf_i+0x212>
 800a52c:	e7eb      	b.n	800a506 <_printf_i+0x206>
 800a52e:	2500      	movs	r5, #0
 800a530:	f104 0619 	add.w	r6, r4, #25
 800a534:	e7f5      	b.n	800a522 <_printf_i+0x222>
 800a536:	bf00      	nop
 800a538:	0800a971 	.word	0x0800a971
 800a53c:	0800a982 	.word	0x0800a982

0800a540 <__sflush_r>:
 800a540:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a548:	0716      	lsls	r6, r2, #28
 800a54a:	4605      	mov	r5, r0
 800a54c:	460c      	mov	r4, r1
 800a54e:	d454      	bmi.n	800a5fa <__sflush_r+0xba>
 800a550:	684b      	ldr	r3, [r1, #4]
 800a552:	2b00      	cmp	r3, #0
 800a554:	dc02      	bgt.n	800a55c <__sflush_r+0x1c>
 800a556:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a558:	2b00      	cmp	r3, #0
 800a55a:	dd48      	ble.n	800a5ee <__sflush_r+0xae>
 800a55c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a55e:	2e00      	cmp	r6, #0
 800a560:	d045      	beq.n	800a5ee <__sflush_r+0xae>
 800a562:	2300      	movs	r3, #0
 800a564:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a568:	682f      	ldr	r7, [r5, #0]
 800a56a:	6a21      	ldr	r1, [r4, #32]
 800a56c:	602b      	str	r3, [r5, #0]
 800a56e:	d030      	beq.n	800a5d2 <__sflush_r+0x92>
 800a570:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a572:	89a3      	ldrh	r3, [r4, #12]
 800a574:	0759      	lsls	r1, r3, #29
 800a576:	d505      	bpl.n	800a584 <__sflush_r+0x44>
 800a578:	6863      	ldr	r3, [r4, #4]
 800a57a:	1ad2      	subs	r2, r2, r3
 800a57c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a57e:	b10b      	cbz	r3, 800a584 <__sflush_r+0x44>
 800a580:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a582:	1ad2      	subs	r2, r2, r3
 800a584:	2300      	movs	r3, #0
 800a586:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a588:	6a21      	ldr	r1, [r4, #32]
 800a58a:	4628      	mov	r0, r5
 800a58c:	47b0      	blx	r6
 800a58e:	1c43      	adds	r3, r0, #1
 800a590:	89a3      	ldrh	r3, [r4, #12]
 800a592:	d106      	bne.n	800a5a2 <__sflush_r+0x62>
 800a594:	6829      	ldr	r1, [r5, #0]
 800a596:	291d      	cmp	r1, #29
 800a598:	d82b      	bhi.n	800a5f2 <__sflush_r+0xb2>
 800a59a:	4a2a      	ldr	r2, [pc, #168]	@ (800a644 <__sflush_r+0x104>)
 800a59c:	410a      	asrs	r2, r1
 800a59e:	07d6      	lsls	r6, r2, #31
 800a5a0:	d427      	bmi.n	800a5f2 <__sflush_r+0xb2>
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	6062      	str	r2, [r4, #4]
 800a5a6:	04d9      	lsls	r1, r3, #19
 800a5a8:	6922      	ldr	r2, [r4, #16]
 800a5aa:	6022      	str	r2, [r4, #0]
 800a5ac:	d504      	bpl.n	800a5b8 <__sflush_r+0x78>
 800a5ae:	1c42      	adds	r2, r0, #1
 800a5b0:	d101      	bne.n	800a5b6 <__sflush_r+0x76>
 800a5b2:	682b      	ldr	r3, [r5, #0]
 800a5b4:	b903      	cbnz	r3, 800a5b8 <__sflush_r+0x78>
 800a5b6:	6560      	str	r0, [r4, #84]	@ 0x54
 800a5b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a5ba:	602f      	str	r7, [r5, #0]
 800a5bc:	b1b9      	cbz	r1, 800a5ee <__sflush_r+0xae>
 800a5be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a5c2:	4299      	cmp	r1, r3
 800a5c4:	d002      	beq.n	800a5cc <__sflush_r+0x8c>
 800a5c6:	4628      	mov	r0, r5
 800a5c8:	f7ff fca0 	bl	8009f0c <_free_r>
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	6363      	str	r3, [r4, #52]	@ 0x34
 800a5d0:	e00d      	b.n	800a5ee <__sflush_r+0xae>
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	4628      	mov	r0, r5
 800a5d6:	47b0      	blx	r6
 800a5d8:	4602      	mov	r2, r0
 800a5da:	1c50      	adds	r0, r2, #1
 800a5dc:	d1c9      	bne.n	800a572 <__sflush_r+0x32>
 800a5de:	682b      	ldr	r3, [r5, #0]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d0c6      	beq.n	800a572 <__sflush_r+0x32>
 800a5e4:	2b1d      	cmp	r3, #29
 800a5e6:	d001      	beq.n	800a5ec <__sflush_r+0xac>
 800a5e8:	2b16      	cmp	r3, #22
 800a5ea:	d11e      	bne.n	800a62a <__sflush_r+0xea>
 800a5ec:	602f      	str	r7, [r5, #0]
 800a5ee:	2000      	movs	r0, #0
 800a5f0:	e022      	b.n	800a638 <__sflush_r+0xf8>
 800a5f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5f6:	b21b      	sxth	r3, r3
 800a5f8:	e01b      	b.n	800a632 <__sflush_r+0xf2>
 800a5fa:	690f      	ldr	r7, [r1, #16]
 800a5fc:	2f00      	cmp	r7, #0
 800a5fe:	d0f6      	beq.n	800a5ee <__sflush_r+0xae>
 800a600:	0793      	lsls	r3, r2, #30
 800a602:	680e      	ldr	r6, [r1, #0]
 800a604:	bf08      	it	eq
 800a606:	694b      	ldreq	r3, [r1, #20]
 800a608:	600f      	str	r7, [r1, #0]
 800a60a:	bf18      	it	ne
 800a60c:	2300      	movne	r3, #0
 800a60e:	eba6 0807 	sub.w	r8, r6, r7
 800a612:	608b      	str	r3, [r1, #8]
 800a614:	f1b8 0f00 	cmp.w	r8, #0
 800a618:	dde9      	ble.n	800a5ee <__sflush_r+0xae>
 800a61a:	6a21      	ldr	r1, [r4, #32]
 800a61c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a61e:	4643      	mov	r3, r8
 800a620:	463a      	mov	r2, r7
 800a622:	4628      	mov	r0, r5
 800a624:	47b0      	blx	r6
 800a626:	2800      	cmp	r0, #0
 800a628:	dc08      	bgt.n	800a63c <__sflush_r+0xfc>
 800a62a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a62e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a632:	81a3      	strh	r3, [r4, #12]
 800a634:	f04f 30ff 	mov.w	r0, #4294967295
 800a638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a63c:	4407      	add	r7, r0
 800a63e:	eba8 0800 	sub.w	r8, r8, r0
 800a642:	e7e7      	b.n	800a614 <__sflush_r+0xd4>
 800a644:	dfbffffe 	.word	0xdfbffffe

0800a648 <_fflush_r>:
 800a648:	b538      	push	{r3, r4, r5, lr}
 800a64a:	690b      	ldr	r3, [r1, #16]
 800a64c:	4605      	mov	r5, r0
 800a64e:	460c      	mov	r4, r1
 800a650:	b913      	cbnz	r3, 800a658 <_fflush_r+0x10>
 800a652:	2500      	movs	r5, #0
 800a654:	4628      	mov	r0, r5
 800a656:	bd38      	pop	{r3, r4, r5, pc}
 800a658:	b118      	cbz	r0, 800a662 <_fflush_r+0x1a>
 800a65a:	6a03      	ldr	r3, [r0, #32]
 800a65c:	b90b      	cbnz	r3, 800a662 <_fflush_r+0x1a>
 800a65e:	f7ff fb3d 	bl	8009cdc <__sinit>
 800a662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d0f3      	beq.n	800a652 <_fflush_r+0xa>
 800a66a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a66c:	07d0      	lsls	r0, r2, #31
 800a66e:	d404      	bmi.n	800a67a <_fflush_r+0x32>
 800a670:	0599      	lsls	r1, r3, #22
 800a672:	d402      	bmi.n	800a67a <_fflush_r+0x32>
 800a674:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a676:	f7ff fc46 	bl	8009f06 <__retarget_lock_acquire_recursive>
 800a67a:	4628      	mov	r0, r5
 800a67c:	4621      	mov	r1, r4
 800a67e:	f7ff ff5f 	bl	800a540 <__sflush_r>
 800a682:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a684:	07da      	lsls	r2, r3, #31
 800a686:	4605      	mov	r5, r0
 800a688:	d4e4      	bmi.n	800a654 <_fflush_r+0xc>
 800a68a:	89a3      	ldrh	r3, [r4, #12]
 800a68c:	059b      	lsls	r3, r3, #22
 800a68e:	d4e1      	bmi.n	800a654 <_fflush_r+0xc>
 800a690:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a692:	f7ff fc39 	bl	8009f08 <__retarget_lock_release_recursive>
 800a696:	e7dd      	b.n	800a654 <_fflush_r+0xc>

0800a698 <__swbuf_r>:
 800a698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a69a:	460e      	mov	r6, r1
 800a69c:	4614      	mov	r4, r2
 800a69e:	4605      	mov	r5, r0
 800a6a0:	b118      	cbz	r0, 800a6aa <__swbuf_r+0x12>
 800a6a2:	6a03      	ldr	r3, [r0, #32]
 800a6a4:	b90b      	cbnz	r3, 800a6aa <__swbuf_r+0x12>
 800a6a6:	f7ff fb19 	bl	8009cdc <__sinit>
 800a6aa:	69a3      	ldr	r3, [r4, #24]
 800a6ac:	60a3      	str	r3, [r4, #8]
 800a6ae:	89a3      	ldrh	r3, [r4, #12]
 800a6b0:	071a      	lsls	r2, r3, #28
 800a6b2:	d501      	bpl.n	800a6b8 <__swbuf_r+0x20>
 800a6b4:	6923      	ldr	r3, [r4, #16]
 800a6b6:	b943      	cbnz	r3, 800a6ca <__swbuf_r+0x32>
 800a6b8:	4621      	mov	r1, r4
 800a6ba:	4628      	mov	r0, r5
 800a6bc:	f000 f82a 	bl	800a714 <__swsetup_r>
 800a6c0:	b118      	cbz	r0, 800a6ca <__swbuf_r+0x32>
 800a6c2:	f04f 37ff 	mov.w	r7, #4294967295
 800a6c6:	4638      	mov	r0, r7
 800a6c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6ca:	6823      	ldr	r3, [r4, #0]
 800a6cc:	6922      	ldr	r2, [r4, #16]
 800a6ce:	1a98      	subs	r0, r3, r2
 800a6d0:	6963      	ldr	r3, [r4, #20]
 800a6d2:	b2f6      	uxtb	r6, r6
 800a6d4:	4283      	cmp	r3, r0
 800a6d6:	4637      	mov	r7, r6
 800a6d8:	dc05      	bgt.n	800a6e6 <__swbuf_r+0x4e>
 800a6da:	4621      	mov	r1, r4
 800a6dc:	4628      	mov	r0, r5
 800a6de:	f7ff ffb3 	bl	800a648 <_fflush_r>
 800a6e2:	2800      	cmp	r0, #0
 800a6e4:	d1ed      	bne.n	800a6c2 <__swbuf_r+0x2a>
 800a6e6:	68a3      	ldr	r3, [r4, #8]
 800a6e8:	3b01      	subs	r3, #1
 800a6ea:	60a3      	str	r3, [r4, #8]
 800a6ec:	6823      	ldr	r3, [r4, #0]
 800a6ee:	1c5a      	adds	r2, r3, #1
 800a6f0:	6022      	str	r2, [r4, #0]
 800a6f2:	701e      	strb	r6, [r3, #0]
 800a6f4:	6962      	ldr	r2, [r4, #20]
 800a6f6:	1c43      	adds	r3, r0, #1
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d004      	beq.n	800a706 <__swbuf_r+0x6e>
 800a6fc:	89a3      	ldrh	r3, [r4, #12]
 800a6fe:	07db      	lsls	r3, r3, #31
 800a700:	d5e1      	bpl.n	800a6c6 <__swbuf_r+0x2e>
 800a702:	2e0a      	cmp	r6, #10
 800a704:	d1df      	bne.n	800a6c6 <__swbuf_r+0x2e>
 800a706:	4621      	mov	r1, r4
 800a708:	4628      	mov	r0, r5
 800a70a:	f7ff ff9d 	bl	800a648 <_fflush_r>
 800a70e:	2800      	cmp	r0, #0
 800a710:	d0d9      	beq.n	800a6c6 <__swbuf_r+0x2e>
 800a712:	e7d6      	b.n	800a6c2 <__swbuf_r+0x2a>

0800a714 <__swsetup_r>:
 800a714:	b538      	push	{r3, r4, r5, lr}
 800a716:	4b29      	ldr	r3, [pc, #164]	@ (800a7bc <__swsetup_r+0xa8>)
 800a718:	4605      	mov	r5, r0
 800a71a:	6818      	ldr	r0, [r3, #0]
 800a71c:	460c      	mov	r4, r1
 800a71e:	b118      	cbz	r0, 800a728 <__swsetup_r+0x14>
 800a720:	6a03      	ldr	r3, [r0, #32]
 800a722:	b90b      	cbnz	r3, 800a728 <__swsetup_r+0x14>
 800a724:	f7ff fada 	bl	8009cdc <__sinit>
 800a728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a72c:	0719      	lsls	r1, r3, #28
 800a72e:	d422      	bmi.n	800a776 <__swsetup_r+0x62>
 800a730:	06da      	lsls	r2, r3, #27
 800a732:	d407      	bmi.n	800a744 <__swsetup_r+0x30>
 800a734:	2209      	movs	r2, #9
 800a736:	602a      	str	r2, [r5, #0]
 800a738:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a73c:	81a3      	strh	r3, [r4, #12]
 800a73e:	f04f 30ff 	mov.w	r0, #4294967295
 800a742:	e033      	b.n	800a7ac <__swsetup_r+0x98>
 800a744:	0758      	lsls	r0, r3, #29
 800a746:	d512      	bpl.n	800a76e <__swsetup_r+0x5a>
 800a748:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a74a:	b141      	cbz	r1, 800a75e <__swsetup_r+0x4a>
 800a74c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a750:	4299      	cmp	r1, r3
 800a752:	d002      	beq.n	800a75a <__swsetup_r+0x46>
 800a754:	4628      	mov	r0, r5
 800a756:	f7ff fbd9 	bl	8009f0c <_free_r>
 800a75a:	2300      	movs	r3, #0
 800a75c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a75e:	89a3      	ldrh	r3, [r4, #12]
 800a760:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a764:	81a3      	strh	r3, [r4, #12]
 800a766:	2300      	movs	r3, #0
 800a768:	6063      	str	r3, [r4, #4]
 800a76a:	6923      	ldr	r3, [r4, #16]
 800a76c:	6023      	str	r3, [r4, #0]
 800a76e:	89a3      	ldrh	r3, [r4, #12]
 800a770:	f043 0308 	orr.w	r3, r3, #8
 800a774:	81a3      	strh	r3, [r4, #12]
 800a776:	6923      	ldr	r3, [r4, #16]
 800a778:	b94b      	cbnz	r3, 800a78e <__swsetup_r+0x7a>
 800a77a:	89a3      	ldrh	r3, [r4, #12]
 800a77c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a780:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a784:	d003      	beq.n	800a78e <__swsetup_r+0x7a>
 800a786:	4621      	mov	r1, r4
 800a788:	4628      	mov	r0, r5
 800a78a:	f000 f83f 	bl	800a80c <__smakebuf_r>
 800a78e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a792:	f013 0201 	ands.w	r2, r3, #1
 800a796:	d00a      	beq.n	800a7ae <__swsetup_r+0x9a>
 800a798:	2200      	movs	r2, #0
 800a79a:	60a2      	str	r2, [r4, #8]
 800a79c:	6962      	ldr	r2, [r4, #20]
 800a79e:	4252      	negs	r2, r2
 800a7a0:	61a2      	str	r2, [r4, #24]
 800a7a2:	6922      	ldr	r2, [r4, #16]
 800a7a4:	b942      	cbnz	r2, 800a7b8 <__swsetup_r+0xa4>
 800a7a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a7aa:	d1c5      	bne.n	800a738 <__swsetup_r+0x24>
 800a7ac:	bd38      	pop	{r3, r4, r5, pc}
 800a7ae:	0799      	lsls	r1, r3, #30
 800a7b0:	bf58      	it	pl
 800a7b2:	6962      	ldrpl	r2, [r4, #20]
 800a7b4:	60a2      	str	r2, [r4, #8]
 800a7b6:	e7f4      	b.n	800a7a2 <__swsetup_r+0x8e>
 800a7b8:	2000      	movs	r0, #0
 800a7ba:	e7f7      	b.n	800a7ac <__swsetup_r+0x98>
 800a7bc:	20000038 	.word	0x20000038

0800a7c0 <__swhatbuf_r>:
 800a7c0:	b570      	push	{r4, r5, r6, lr}
 800a7c2:	460c      	mov	r4, r1
 800a7c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7c8:	2900      	cmp	r1, #0
 800a7ca:	b096      	sub	sp, #88	@ 0x58
 800a7cc:	4615      	mov	r5, r2
 800a7ce:	461e      	mov	r6, r3
 800a7d0:	da0d      	bge.n	800a7ee <__swhatbuf_r+0x2e>
 800a7d2:	89a3      	ldrh	r3, [r4, #12]
 800a7d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a7d8:	f04f 0100 	mov.w	r1, #0
 800a7dc:	bf14      	ite	ne
 800a7de:	2340      	movne	r3, #64	@ 0x40
 800a7e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a7e4:	2000      	movs	r0, #0
 800a7e6:	6031      	str	r1, [r6, #0]
 800a7e8:	602b      	str	r3, [r5, #0]
 800a7ea:	b016      	add	sp, #88	@ 0x58
 800a7ec:	bd70      	pop	{r4, r5, r6, pc}
 800a7ee:	466a      	mov	r2, sp
 800a7f0:	f000 f848 	bl	800a884 <_fstat_r>
 800a7f4:	2800      	cmp	r0, #0
 800a7f6:	dbec      	blt.n	800a7d2 <__swhatbuf_r+0x12>
 800a7f8:	9901      	ldr	r1, [sp, #4]
 800a7fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a7fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a802:	4259      	negs	r1, r3
 800a804:	4159      	adcs	r1, r3
 800a806:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a80a:	e7eb      	b.n	800a7e4 <__swhatbuf_r+0x24>

0800a80c <__smakebuf_r>:
 800a80c:	898b      	ldrh	r3, [r1, #12]
 800a80e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a810:	079d      	lsls	r5, r3, #30
 800a812:	4606      	mov	r6, r0
 800a814:	460c      	mov	r4, r1
 800a816:	d507      	bpl.n	800a828 <__smakebuf_r+0x1c>
 800a818:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a81c:	6023      	str	r3, [r4, #0]
 800a81e:	6123      	str	r3, [r4, #16]
 800a820:	2301      	movs	r3, #1
 800a822:	6163      	str	r3, [r4, #20]
 800a824:	b003      	add	sp, #12
 800a826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a828:	ab01      	add	r3, sp, #4
 800a82a:	466a      	mov	r2, sp
 800a82c:	f7ff ffc8 	bl	800a7c0 <__swhatbuf_r>
 800a830:	9f00      	ldr	r7, [sp, #0]
 800a832:	4605      	mov	r5, r0
 800a834:	4639      	mov	r1, r7
 800a836:	4630      	mov	r0, r6
 800a838:	f7ff f938 	bl	8009aac <_malloc_r>
 800a83c:	b948      	cbnz	r0, 800a852 <__smakebuf_r+0x46>
 800a83e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a842:	059a      	lsls	r2, r3, #22
 800a844:	d4ee      	bmi.n	800a824 <__smakebuf_r+0x18>
 800a846:	f023 0303 	bic.w	r3, r3, #3
 800a84a:	f043 0302 	orr.w	r3, r3, #2
 800a84e:	81a3      	strh	r3, [r4, #12]
 800a850:	e7e2      	b.n	800a818 <__smakebuf_r+0xc>
 800a852:	89a3      	ldrh	r3, [r4, #12]
 800a854:	6020      	str	r0, [r4, #0]
 800a856:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a85a:	81a3      	strh	r3, [r4, #12]
 800a85c:	9b01      	ldr	r3, [sp, #4]
 800a85e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a862:	b15b      	cbz	r3, 800a87c <__smakebuf_r+0x70>
 800a864:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a868:	4630      	mov	r0, r6
 800a86a:	f000 f81d 	bl	800a8a8 <_isatty_r>
 800a86e:	b128      	cbz	r0, 800a87c <__smakebuf_r+0x70>
 800a870:	89a3      	ldrh	r3, [r4, #12]
 800a872:	f023 0303 	bic.w	r3, r3, #3
 800a876:	f043 0301 	orr.w	r3, r3, #1
 800a87a:	81a3      	strh	r3, [r4, #12]
 800a87c:	89a3      	ldrh	r3, [r4, #12]
 800a87e:	431d      	orrs	r5, r3
 800a880:	81a5      	strh	r5, [r4, #12]
 800a882:	e7cf      	b.n	800a824 <__smakebuf_r+0x18>

0800a884 <_fstat_r>:
 800a884:	b538      	push	{r3, r4, r5, lr}
 800a886:	4d07      	ldr	r5, [pc, #28]	@ (800a8a4 <_fstat_r+0x20>)
 800a888:	2300      	movs	r3, #0
 800a88a:	4604      	mov	r4, r0
 800a88c:	4608      	mov	r0, r1
 800a88e:	4611      	mov	r1, r2
 800a890:	602b      	str	r3, [r5, #0]
 800a892:	f7f6 fb2c 	bl	8000eee <_fstat>
 800a896:	1c43      	adds	r3, r0, #1
 800a898:	d102      	bne.n	800a8a0 <_fstat_r+0x1c>
 800a89a:	682b      	ldr	r3, [r5, #0]
 800a89c:	b103      	cbz	r3, 800a8a0 <_fstat_r+0x1c>
 800a89e:	6023      	str	r3, [r4, #0]
 800a8a0:	bd38      	pop	{r3, r4, r5, pc}
 800a8a2:	bf00      	nop
 800a8a4:	20000ae8 	.word	0x20000ae8

0800a8a8 <_isatty_r>:
 800a8a8:	b538      	push	{r3, r4, r5, lr}
 800a8aa:	4d06      	ldr	r5, [pc, #24]	@ (800a8c4 <_isatty_r+0x1c>)
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	4604      	mov	r4, r0
 800a8b0:	4608      	mov	r0, r1
 800a8b2:	602b      	str	r3, [r5, #0]
 800a8b4:	f7f6 fb2b 	bl	8000f0e <_isatty>
 800a8b8:	1c43      	adds	r3, r0, #1
 800a8ba:	d102      	bne.n	800a8c2 <_isatty_r+0x1a>
 800a8bc:	682b      	ldr	r3, [r5, #0]
 800a8be:	b103      	cbz	r3, 800a8c2 <_isatty_r+0x1a>
 800a8c0:	6023      	str	r3, [r4, #0]
 800a8c2:	bd38      	pop	{r3, r4, r5, pc}
 800a8c4:	20000ae8 	.word	0x20000ae8

0800a8c8 <_init>:
 800a8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ca:	bf00      	nop
 800a8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8ce:	bc08      	pop	{r3}
 800a8d0:	469e      	mov	lr, r3
 800a8d2:	4770      	bx	lr

0800a8d4 <_fini>:
 800a8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8d6:	bf00      	nop
 800a8d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8da:	bc08      	pop	{r3}
 800a8dc:	469e      	mov	lr, r3
 800a8de:	4770      	bx	lr
