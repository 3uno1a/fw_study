
f407_discovery_base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097d0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08009958  08009958  0000a958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009984  08009984  0000b088  2**0
                  CONTENTS
  4 .ARM          00000008  08009984  08009984  0000a984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800998c  0800998c  0000b088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800998c  0800998c  0000a98c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009990  08009990  0000a990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08009994  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b088  2**0
                  CONTENTS
 10 .bss          00000a68  20000088  20000088  0000b088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000af0  20000af0  0000b088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b088  2**0
                  CONTENTS, READONLY
 13 .debug_info   000190d1  00000000  00000000  0000b0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000448c  00000000  00000000  00024189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001480  00000000  00000000  00028618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fa8  00000000  00000000  00029a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025b2b  00000000  00000000  0002aa40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e1b0  00000000  00000000  0005056b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfb39  00000000  00000000  0006e71b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013e254  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a98  00000000  00000000  0013e298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00143d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000088 	.word	0x20000088
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009940 	.word	0x08009940

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000008c 	.word	0x2000008c
 80001c4:	08009940 	.word	0x08009940

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b08c      	sub	sp, #48	@ 0x30
 80004bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004be:	f107 031c 	add.w	r3, r7, #28
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
 80004cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004ce:	2300      	movs	r3, #0
 80004d0:	61bb      	str	r3, [r7, #24]
 80004d2:	4b72      	ldr	r3, [pc, #456]	@ (800069c <MX_GPIO_Init+0x1e4>)
 80004d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d6:	4a71      	ldr	r2, [pc, #452]	@ (800069c <MX_GPIO_Init+0x1e4>)
 80004d8:	f043 0310 	orr.w	r3, r3, #16
 80004dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80004de:	4b6f      	ldr	r3, [pc, #444]	@ (800069c <MX_GPIO_Init+0x1e4>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e2:	f003 0310 	and.w	r3, r3, #16
 80004e6:	61bb      	str	r3, [r7, #24]
 80004e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ea:	2300      	movs	r3, #0
 80004ec:	617b      	str	r3, [r7, #20]
 80004ee:	4b6b      	ldr	r3, [pc, #428]	@ (800069c <MX_GPIO_Init+0x1e4>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f2:	4a6a      	ldr	r2, [pc, #424]	@ (800069c <MX_GPIO_Init+0x1e4>)
 80004f4:	f043 0304 	orr.w	r3, r3, #4
 80004f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80004fa:	4b68      	ldr	r3, [pc, #416]	@ (800069c <MX_GPIO_Init+0x1e4>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fe:	f003 0304 	and.w	r3, r3, #4
 8000502:	617b      	str	r3, [r7, #20]
 8000504:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000506:	2300      	movs	r3, #0
 8000508:	613b      	str	r3, [r7, #16]
 800050a:	4b64      	ldr	r3, [pc, #400]	@ (800069c <MX_GPIO_Init+0x1e4>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050e:	4a63      	ldr	r2, [pc, #396]	@ (800069c <MX_GPIO_Init+0x1e4>)
 8000510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000514:	6313      	str	r3, [r2, #48]	@ 0x30
 8000516:	4b61      	ldr	r3, [pc, #388]	@ (800069c <MX_GPIO_Init+0x1e4>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800051e:	613b      	str	r3, [r7, #16]
 8000520:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	4b5d      	ldr	r3, [pc, #372]	@ (800069c <MX_GPIO_Init+0x1e4>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	4a5c      	ldr	r2, [pc, #368]	@ (800069c <MX_GPIO_Init+0x1e4>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	6313      	str	r3, [r2, #48]	@ 0x30
 8000532:	4b5a      	ldr	r3, [pc, #360]	@ (800069c <MX_GPIO_Init+0x1e4>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053e:	2300      	movs	r3, #0
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	4b56      	ldr	r3, [pc, #344]	@ (800069c <MX_GPIO_Init+0x1e4>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000546:	4a55      	ldr	r2, [pc, #340]	@ (800069c <MX_GPIO_Init+0x1e4>)
 8000548:	f043 0302 	orr.w	r3, r3, #2
 800054c:	6313      	str	r3, [r2, #48]	@ 0x30
 800054e:	4b53      	ldr	r3, [pc, #332]	@ (800069c <MX_GPIO_Init+0x1e4>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000552:	f003 0302 	and.w	r3, r3, #2
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	4b4f      	ldr	r3, [pc, #316]	@ (800069c <MX_GPIO_Init+0x1e4>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000562:	4a4e      	ldr	r2, [pc, #312]	@ (800069c <MX_GPIO_Init+0x1e4>)
 8000564:	f043 0308 	orr.w	r3, r3, #8
 8000568:	6313      	str	r3, [r2, #48]	@ 0x30
 800056a:	4b4c      	ldr	r3, [pc, #304]	@ (800069c <MX_GPIO_Init+0x1e4>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056e:	f003 0308 	and.w	r3, r3, #8
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	2108      	movs	r1, #8
 800057a:	4849      	ldr	r0, [pc, #292]	@ (80006a0 <MX_GPIO_Init+0x1e8>)
 800057c:	f000 ffc6 	bl	800150c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000580:	2201      	movs	r2, #1
 8000582:	2101      	movs	r1, #1
 8000584:	4847      	ldr	r0, [pc, #284]	@ (80006a4 <MX_GPIO_Init+0x1ec>)
 8000586:	f000 ffc1 	bl	800150c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800058a:	2200      	movs	r2, #0
 800058c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000590:	4845      	ldr	r0, [pc, #276]	@ (80006a8 <MX_GPIO_Init+0x1f0>)
 8000592:	f000 ffbb 	bl	800150c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000596:	2308      	movs	r3, #8
 8000598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059a:	2301      	movs	r3, #1
 800059c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	2300      	movs	r3, #0
 80005a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a2:	2300      	movs	r3, #0
 80005a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005a6:	f107 031c 	add.w	r3, r7, #28
 80005aa:	4619      	mov	r1, r3
 80005ac:	483c      	ldr	r0, [pc, #240]	@ (80006a0 <MX_GPIO_Init+0x1e8>)
 80005ae:	f000 fe11 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80005b2:	2301      	movs	r3, #1
 80005b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b6:	2301      	movs	r3, #1
 80005b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005be:	2300      	movs	r3, #0
 80005c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005c2:	f107 031c 	add.w	r3, r7, #28
 80005c6:	4619      	mov	r1, r3
 80005c8:	4836      	ldr	r0, [pc, #216]	@ (80006a4 <MX_GPIO_Init+0x1ec>)
 80005ca:	f000 fe03 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80005ce:	2308      	movs	r3, #8
 80005d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d2:	2302      	movs	r3, #2
 80005d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005da:	2300      	movs	r3, #0
 80005dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005de:	2305      	movs	r3, #5
 80005e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80005e2:	f107 031c 	add.w	r3, r7, #28
 80005e6:	4619      	mov	r1, r3
 80005e8:	482e      	ldr	r0, [pc, #184]	@ (80006a4 <MX_GPIO_Init+0x1ec>)
 80005ea:	f000 fdf3 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005ee:	2301      	movs	r3, #1
 80005f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005f2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80005f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005fc:	f107 031c 	add.w	r3, r7, #28
 8000600:	4619      	mov	r1, r3
 8000602:	482a      	ldr	r0, [pc, #168]	@ (80006ac <MX_GPIO_Init+0x1f4>)
 8000604:	f000 fde6 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000608:	2304      	movs	r3, #4
 800060a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800060c:	2300      	movs	r3, #0
 800060e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000614:	f107 031c 	add.w	r3, r7, #28
 8000618:	4619      	mov	r1, r3
 800061a:	4825      	ldr	r0, [pc, #148]	@ (80006b0 <MX_GPIO_Init+0x1f8>)
 800061c:	f000 fdda 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000620:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000626:	2302      	movs	r3, #2
 8000628:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062e:	2300      	movs	r3, #0
 8000630:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000632:	2305      	movs	r3, #5
 8000634:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000636:	f107 031c 	add.w	r3, r7, #28
 800063a:	4619      	mov	r1, r3
 800063c:	481c      	ldr	r0, [pc, #112]	@ (80006b0 <MX_GPIO_Init+0x1f8>)
 800063e:	f000 fdc9 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000642:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000646:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000648:	2301      	movs	r3, #1
 800064a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000650:	2300      	movs	r3, #0
 8000652:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000654:	f107 031c 	add.w	r3, r7, #28
 8000658:	4619      	mov	r1, r3
 800065a:	4813      	ldr	r0, [pc, #76]	@ (80006a8 <MX_GPIO_Init+0x1f0>)
 800065c:	f000 fdba 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000660:	2320      	movs	r3, #32
 8000662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000664:	2300      	movs	r3, #0
 8000666:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800066c:	f107 031c 	add.w	r3, r7, #28
 8000670:	4619      	mov	r1, r3
 8000672:	480d      	ldr	r0, [pc, #52]	@ (80006a8 <MX_GPIO_Init+0x1f0>)
 8000674:	f000 fdae 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000678:	2302      	movs	r3, #2
 800067a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800067c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000680:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000686:	f107 031c 	add.w	r3, r7, #28
 800068a:	4619      	mov	r1, r3
 800068c:	4804      	ldr	r0, [pc, #16]	@ (80006a0 <MX_GPIO_Init+0x1e8>)
 800068e:	f000 fda1 	bl	80011d4 <HAL_GPIO_Init>

}
 8000692:	bf00      	nop
 8000694:	3730      	adds	r7, #48	@ 0x30
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800
 80006a0:	40021000 	.word	0x40021000
 80006a4:	40020800 	.word	0x40020800
 80006a8:	40020c00 	.word	0x40020c00
 80006ac:	40020000 	.word	0x40020000
 80006b0:	40020400 	.word	0x40020400

080006b4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006b8:	4b12      	ldr	r3, [pc, #72]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006ba:	4a13      	ldr	r2, [pc, #76]	@ (8000708 <MX_I2C1_Init+0x54>)
 80006bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006be:	4b11      	ldr	r3, [pc, #68]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006c0:	4a12      	ldr	r2, [pc, #72]	@ (800070c <MX_I2C1_Init+0x58>)
 80006c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006da:	2200      	movs	r2, #0
 80006dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006de:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e4:	4b07      	ldr	r3, [pc, #28]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ea:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f0:	4804      	ldr	r0, [pc, #16]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006f2:	f003 f859 	bl	80037a8 <HAL_I2C_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006fc:	f000 f98a 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	200000a4 	.word	0x200000a4
 8000708:	40005400 	.word	0x40005400
 800070c:	000186a0 	.word	0x000186a0

08000710 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08a      	sub	sp, #40	@ 0x28
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a19      	ldr	r2, [pc, #100]	@ (8000794 <HAL_I2C_MspInit+0x84>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d12c      	bne.n	800078c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	4b18      	ldr	r3, [pc, #96]	@ (8000798 <HAL_I2C_MspInit+0x88>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a17      	ldr	r2, [pc, #92]	@ (8000798 <HAL_I2C_MspInit+0x88>)
 800073c:	f043 0302 	orr.w	r3, r3, #2
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <HAL_I2C_MspInit+0x88>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800074e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000754:	2312      	movs	r3, #18
 8000756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000758:	2301      	movs	r3, #1
 800075a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075c:	2300      	movs	r3, #0
 800075e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000760:	2304      	movs	r3, #4
 8000762:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4619      	mov	r1, r3
 800076a:	480c      	ldr	r0, [pc, #48]	@ (800079c <HAL_I2C_MspInit+0x8c>)
 800076c:	f000 fd32 	bl	80011d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000770:	2300      	movs	r3, #0
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <HAL_I2C_MspInit+0x88>)
 8000776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000778:	4a07      	ldr	r2, [pc, #28]	@ (8000798 <HAL_I2C_MspInit+0x88>)
 800077a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800077e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000780:	4b05      	ldr	r3, [pc, #20]	@ (8000798 <HAL_I2C_MspInit+0x88>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000784:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800078c:	bf00      	nop
 800078e:	3728      	adds	r7, #40	@ 0x28
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40005400 	.word	0x40005400
 8000798:	40023800 	.word	0x40023800
 800079c:	40020400 	.word	0x40020400

080007a0 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007a4:	4b13      	ldr	r3, [pc, #76]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007a6:	4a14      	ldr	r2, [pc, #80]	@ (80007f8 <MX_I2S3_Init+0x58>)
 80007a8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007aa:	4b12      	ldr	r3, [pc, #72]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007b0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007b2:	4b10      	ldr	r3, [pc, #64]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007b8:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007be:	4b0d      	ldr	r3, [pc, #52]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007c4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007c8:	4a0c      	ldr	r2, [pc, #48]	@ (80007fc <MX_I2S3_Init+0x5c>)
 80007ca:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007cc:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007d2:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007d8:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007da:	2200      	movs	r2, #0
 80007dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007de:	4805      	ldr	r0, [pc, #20]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007e0:	f003 f926 	bl	8003a30 <HAL_I2S_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007ea:	f000 f913 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200000f8 	.word	0x200000f8
 80007f8:	40003c00 	.word	0x40003c00
 80007fc:	00017700 	.word	0x00017700

08000800 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08e      	sub	sp, #56	@ 0x38
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a31      	ldr	r2, [pc, #196]	@ (80008f0 <HAL_I2S_MspInit+0xf0>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d15a      	bne.n	80008e6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000830:	2301      	movs	r3, #1
 8000832:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000834:	23c0      	movs	r3, #192	@ 0xc0
 8000836:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000838:	2302      	movs	r3, #2
 800083a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4618      	mov	r0, r3
 8000842:	f004 fa2d 	bl	8004ca0 <HAL_RCCEx_PeriphCLKConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 800084c:	f000 f8e2 	bl	8000a14 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000850:	2300      	movs	r3, #0
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	4b27      	ldr	r3, [pc, #156]	@ (80008f4 <HAL_I2S_MspInit+0xf4>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000858:	4a26      	ldr	r2, [pc, #152]	@ (80008f4 <HAL_I2S_MspInit+0xf4>)
 800085a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800085e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000860:	4b24      	ldr	r3, [pc, #144]	@ (80008f4 <HAL_I2S_MspInit+0xf4>)
 8000862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000864:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000868:	613b      	str	r3, [r7, #16]
 800086a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086c:	2300      	movs	r3, #0
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	4b20      	ldr	r3, [pc, #128]	@ (80008f4 <HAL_I2S_MspInit+0xf4>)
 8000872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000874:	4a1f      	ldr	r2, [pc, #124]	@ (80008f4 <HAL_I2S_MspInit+0xf4>)
 8000876:	f043 0301 	orr.w	r3, r3, #1
 800087a:	6313      	str	r3, [r2, #48]	@ 0x30
 800087c:	4b1d      	ldr	r3, [pc, #116]	@ (80008f4 <HAL_I2S_MspInit+0xf4>)
 800087e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000888:	2300      	movs	r3, #0
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	4b19      	ldr	r3, [pc, #100]	@ (80008f4 <HAL_I2S_MspInit+0xf4>)
 800088e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000890:	4a18      	ldr	r2, [pc, #96]	@ (80008f4 <HAL_I2S_MspInit+0xf4>)
 8000892:	f043 0304 	orr.w	r3, r3, #4
 8000896:	6313      	str	r3, [r2, #48]	@ 0x30
 8000898:	4b16      	ldr	r3, [pc, #88]	@ (80008f4 <HAL_I2S_MspInit+0xf4>)
 800089a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089c:	f003 0304 	and.w	r3, r3, #4
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008a4:	2310      	movs	r3, #16
 80008a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	2302      	movs	r3, #2
 80008aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008b4:	2306      	movs	r3, #6
 80008b6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008bc:	4619      	mov	r1, r3
 80008be:	480e      	ldr	r0, [pc, #56]	@ (80008f8 <HAL_I2S_MspInit+0xf8>)
 80008c0:	f000 fc88 	bl	80011d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008c4:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80008c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008d6:	2306      	movs	r3, #6
 80008d8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008de:	4619      	mov	r1, r3
 80008e0:	4806      	ldr	r0, [pc, #24]	@ (80008fc <HAL_I2S_MspInit+0xfc>)
 80008e2:	f000 fc77 	bl	80011d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80008e6:	bf00      	nop
 80008e8:	3738      	adds	r7, #56	@ 0x38
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40003c00 	.word	0x40003c00
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40020000 	.word	0x40020000
 80008fc:	40020800 	.word	0x40020800

08000900 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000904:	f000 fabe 	bl	8000e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000908:	f000 f81a 	bl	8000940 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800090c:	f7ff fdd4 	bl	80004b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000910:	f7ff fed0 	bl	80006b4 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000914:	f7ff ff44 	bl	80007a0 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000918:	f000 f882 	bl	8000a20 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800091c:	f008 f84a 	bl	80089b4 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000920:	f000 fa14 	bl	8000d4c <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000924:	f008 f86c 	bl	8008a00 <MX_USB_HOST_Process>

    printf("Hello world!\r\n");
 8000928:	4804      	ldr	r0, [pc, #16]	@ (800093c <main+0x3c>)
 800092a:	f008 fd23 	bl	8009374 <puts>
    HAL_Delay(1000);
 800092e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000932:	f000 fb19 	bl	8000f68 <HAL_Delay>
    MX_USB_HOST_Process();
 8000936:	bf00      	nop
 8000938:	e7f4      	b.n	8000924 <main+0x24>
 800093a:	bf00      	nop
 800093c:	08009958 	.word	0x08009958

08000940 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b094      	sub	sp, #80	@ 0x50
 8000944:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000946:	f107 0320 	add.w	r3, r7, #32
 800094a:	2230      	movs	r2, #48	@ 0x30
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f008 fdf0 	bl	8009534 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000954:	f107 030c 	add.w	r3, r7, #12
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000964:	2300      	movs	r3, #0
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	4b28      	ldr	r3, [pc, #160]	@ (8000a0c <SystemClock_Config+0xcc>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096c:	4a27      	ldr	r2, [pc, #156]	@ (8000a0c <SystemClock_Config+0xcc>)
 800096e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000972:	6413      	str	r3, [r2, #64]	@ 0x40
 8000974:	4b25      	ldr	r3, [pc, #148]	@ (8000a0c <SystemClock_Config+0xcc>)
 8000976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000978:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000980:	2300      	movs	r3, #0
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	4b22      	ldr	r3, [pc, #136]	@ (8000a10 <SystemClock_Config+0xd0>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a21      	ldr	r2, [pc, #132]	@ (8000a10 <SystemClock_Config+0xd0>)
 800098a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800098e:	6013      	str	r3, [r2, #0]
 8000990:	4b1f      	ldr	r3, [pc, #124]	@ (8000a10 <SystemClock_Config+0xd0>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800099c:	2301      	movs	r3, #1
 800099e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a6:	2302      	movs	r3, #2
 80009a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009b0:	2308      	movs	r3, #8
 80009b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009b4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80009b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009ba:	2302      	movs	r3, #2
 80009bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009be:	2307      	movs	r3, #7
 80009c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c2:	f107 0320 	add.w	r3, r7, #32
 80009c6:	4618      	mov	r0, r3
 80009c8:	f003 fcd2 	bl	8004370 <HAL_RCC_OscConfig>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009d2:	f000 f81f 	bl	8000a14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d6:	230f      	movs	r3, #15
 80009d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009da:	2302      	movs	r3, #2
 80009dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009e2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009ee:	f107 030c 	add.w	r3, r7, #12
 80009f2:	2105      	movs	r1, #5
 80009f4:	4618      	mov	r0, r3
 80009f6:	f003 ff33 	bl	8004860 <HAL_RCC_ClockConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a00:	f000 f808 	bl	8000a14 <Error_Handler>
  }
}
 8000a04:	bf00      	nop
 8000a06:	3750      	adds	r7, #80	@ 0x50
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40007000 	.word	0x40007000

08000a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a18:	b672      	cpsid	i
}
 8000a1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <Error_Handler+0x8>

08000a20 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000a24:	4b17      	ldr	r3, [pc, #92]	@ (8000a84 <MX_SPI1_Init+0x64>)
 8000a26:	4a18      	ldr	r2, [pc, #96]	@ (8000a88 <MX_SPI1_Init+0x68>)
 8000a28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a2a:	4b16      	ldr	r3, [pc, #88]	@ (8000a84 <MX_SPI1_Init+0x64>)
 8000a2c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a32:	4b14      	ldr	r3, [pc, #80]	@ (8000a84 <MX_SPI1_Init+0x64>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a38:	4b12      	ldr	r3, [pc, #72]	@ (8000a84 <MX_SPI1_Init+0x64>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a3e:	4b11      	ldr	r3, [pc, #68]	@ (8000a84 <MX_SPI1_Init+0x64>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	@ (8000a84 <MX_SPI1_Init+0x64>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a84 <MX_SPI1_Init+0x64>)
 8000a4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a50:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a52:	4b0c      	ldr	r3, [pc, #48]	@ (8000a84 <MX_SPI1_Init+0x64>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a58:	4b0a      	ldr	r3, [pc, #40]	@ (8000a84 <MX_SPI1_Init+0x64>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a5e:	4b09      	ldr	r3, [pc, #36]	@ (8000a84 <MX_SPI1_Init+0x64>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a64:	4b07      	ldr	r3, [pc, #28]	@ (8000a84 <MX_SPI1_Init+0x64>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a6a:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <MX_SPI1_Init+0x64>)
 8000a6c:	220a      	movs	r2, #10
 8000a6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a70:	4804      	ldr	r0, [pc, #16]	@ (8000a84 <MX_SPI1_Init+0x64>)
 8000a72:	f004 fa57 	bl	8004f24 <HAL_SPI_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a7c:	f7ff ffca 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000140 	.word	0x20000140
 8000a88:	40013000 	.word	0x40013000

08000a8c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	@ 0x28
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a19      	ldr	r2, [pc, #100]	@ (8000b10 <HAL_SPI_MspInit+0x84>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d12b      	bne.n	8000b06 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	4b18      	ldr	r3, [pc, #96]	@ (8000b14 <HAL_SPI_MspInit+0x88>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab6:	4a17      	ldr	r2, [pc, #92]	@ (8000b14 <HAL_SPI_MspInit+0x88>)
 8000ab8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000abc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000abe:	4b15      	ldr	r3, [pc, #84]	@ (8000b14 <HAL_SPI_MspInit+0x88>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ac2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	4b11      	ldr	r3, [pc, #68]	@ (8000b14 <HAL_SPI_MspInit+0x88>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	4a10      	ldr	r2, [pc, #64]	@ (8000b14 <HAL_SPI_MspInit+0x88>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ada:	4b0e      	ldr	r3, [pc, #56]	@ (8000b14 <HAL_SPI_MspInit+0x88>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000ae6:	23e0      	movs	r3, #224	@ 0xe0
 8000ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	2302      	movs	r3, #2
 8000aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000af6:	2305      	movs	r3, #5
 8000af8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4619      	mov	r1, r3
 8000b00:	4805      	ldr	r0, [pc, #20]	@ (8000b18 <HAL_SPI_MspInit+0x8c>)
 8000b02:	f000 fb67 	bl	80011d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b06:	bf00      	nop
 8000b08:	3728      	adds	r7, #40	@ 0x28
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40013000 	.word	0x40013000
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40020000 	.word	0x40020000

08000b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	4b10      	ldr	r3, [pc, #64]	@ (8000b68 <HAL_MspInit+0x4c>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b2a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b68 <HAL_MspInit+0x4c>)
 8000b2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b32:	4b0d      	ldr	r3, [pc, #52]	@ (8000b68 <HAL_MspInit+0x4c>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	603b      	str	r3, [r7, #0]
 8000b42:	4b09      	ldr	r3, [pc, #36]	@ (8000b68 <HAL_MspInit+0x4c>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b46:	4a08      	ldr	r2, [pc, #32]	@ (8000b68 <HAL_MspInit+0x4c>)
 8000b48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b4e:	4b06      	ldr	r3, [pc, #24]	@ (8000b68 <HAL_MspInit+0x4c>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b5a:	2007      	movs	r0, #7
 8000b5c:	f000 faf8 	bl	8001150 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40023800 	.word	0x40023800

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <NMI_Handler+0x4>

08000b74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <HardFault_Handler+0x4>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <MemManage_Handler+0x4>

08000b84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <BusFault_Handler+0x4>

08000b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <UsageFault_Handler+0x4>

08000b94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc2:	f000 f9b1 	bl	8000f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000bd0:	4802      	ldr	r0, [pc, #8]	@ (8000bdc <OTG_FS_IRQHandler+0x10>)
 8000bd2:	f000 ff95 	bl	8001b00 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200005c4 	.word	0x200005c4

08000be0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	e00a      	b.n	8000c08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bf2:	f3af 8000 	nop.w
 8000bf6:	4601      	mov	r1, r0
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	1c5a      	adds	r2, r3, #1
 8000bfc:	60ba      	str	r2, [r7, #8]
 8000bfe:	b2ca      	uxtb	r2, r1
 8000c00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	3301      	adds	r3, #1
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	697a      	ldr	r2, [r7, #20]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	dbf0      	blt.n	8000bf2 <_read+0x12>
  }

  return len;
 8000c10:	687b      	ldr	r3, [r7, #4]
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3718      	adds	r7, #24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b086      	sub	sp, #24
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	60f8      	str	r0, [r7, #12]
 8000c22:	60b9      	str	r1, [r7, #8]
 8000c24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c26:	2300      	movs	r3, #0
 8000c28:	617b      	str	r3, [r7, #20]
 8000c2a:	e009      	b.n	8000c40 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	1c5a      	adds	r2, r3, #1
 8000c30:	60ba      	str	r2, [r7, #8]
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	697a      	ldr	r2, [r7, #20]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	dbf1      	blt.n	8000c2c <_write+0x12>
  }
  return len;
 8000c48:	687b      	ldr	r3, [r7, #4]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <_close>:

int _close(int file)
{
 8000c52:	b480      	push	{r7}
 8000c54:	b083      	sub	sp, #12
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b083      	sub	sp, #12
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
 8000c72:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c7a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <_isatty>:

int _isatty(int file)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c92:	2301      	movs	r3, #1
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3714      	adds	r7, #20
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
	...

08000cbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cc4:	4a14      	ldr	r2, [pc, #80]	@ (8000d18 <_sbrk+0x5c>)
 8000cc6:	4b15      	ldr	r3, [pc, #84]	@ (8000d1c <_sbrk+0x60>)
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cd0:	4b13      	ldr	r3, [pc, #76]	@ (8000d20 <_sbrk+0x64>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d102      	bne.n	8000cde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <_sbrk+0x64>)
 8000cda:	4a12      	ldr	r2, [pc, #72]	@ (8000d24 <_sbrk+0x68>)
 8000cdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cde:	4b10      	ldr	r3, [pc, #64]	@ (8000d20 <_sbrk+0x64>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d207      	bcs.n	8000cfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cec:	f008 fc80 	bl	80095f0 <__errno>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	220c      	movs	r2, #12
 8000cf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfa:	e009      	b.n	8000d10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cfc:	4b08      	ldr	r3, [pc, #32]	@ (8000d20 <_sbrk+0x64>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d02:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <_sbrk+0x64>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	4a05      	ldr	r2, [pc, #20]	@ (8000d20 <_sbrk+0x64>)
 8000d0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20020000 	.word	0x20020000
 8000d1c:	00000400 	.word	0x00000400
 8000d20:	20000198 	.word	0x20000198
 8000d24:	20000af0 	.word	0x20000af0

08000d28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d2c:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <SystemInit+0x20>)
 8000d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d32:	4a05      	ldr	r2, [pc, #20]	@ (8000d48 <SystemInit+0x20>)
 8000d34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d50:	4b11      	ldr	r3, [pc, #68]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d52:	4a12      	ldr	r2, [pc, #72]	@ (8000d9c <MX_USART2_UART_Init+0x50>)
 8000d54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d56:	4b10      	ldr	r3, [pc, #64]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d64:	4b0c      	ldr	r3, [pc, #48]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d70:	4b09      	ldr	r3, [pc, #36]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d72:	220c      	movs	r2, #12
 8000d74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d76:	4b08      	ldr	r3, [pc, #32]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d82:	4805      	ldr	r0, [pc, #20]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d84:	f004 f957 	bl	8005036 <HAL_UART_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d8e:	f7ff fe41 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	2000019c 	.word	0x2000019c
 8000d9c:	40004400 	.word	0x40004400

08000da0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08a      	sub	sp, #40	@ 0x28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a19      	ldr	r2, [pc, #100]	@ (8000e24 <HAL_UART_MspInit+0x84>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d12b      	bne.n	8000e1a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
 8000dc6:	4b18      	ldr	r3, [pc, #96]	@ (8000e28 <HAL_UART_MspInit+0x88>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dca:	4a17      	ldr	r2, [pc, #92]	@ (8000e28 <HAL_UART_MspInit+0x88>)
 8000dcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dd2:	4b15      	ldr	r3, [pc, #84]	@ (8000e28 <HAL_UART_MspInit+0x88>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <HAL_UART_MspInit+0x88>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	4a10      	ldr	r2, [pc, #64]	@ (8000e28 <HAL_UART_MspInit+0x88>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dee:	4b0e      	ldr	r3, [pc, #56]	@ (8000e28 <HAL_UART_MspInit+0x88>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dfa:	230c      	movs	r3, #12
 8000dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e06:	2303      	movs	r3, #3
 8000e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e0a:	2307      	movs	r3, #7
 8000e0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	4619      	mov	r1, r3
 8000e14:	4805      	ldr	r0, [pc, #20]	@ (8000e2c <HAL_UART_MspInit+0x8c>)
 8000e16:	f000 f9dd 	bl	80011d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e1a:	bf00      	nop
 8000e1c:	3728      	adds	r7, #40	@ 0x28
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40004400 	.word	0x40004400
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40020000 	.word	0x40020000

08000e30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e68 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e34:	f7ff ff78 	bl	8000d28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e38:	480c      	ldr	r0, [pc, #48]	@ (8000e6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e3a:	490d      	ldr	r1, [pc, #52]	@ (8000e70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e40:	e002      	b.n	8000e48 <LoopCopyDataInit>

08000e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e46:	3304      	adds	r3, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e4c:	d3f9      	bcc.n	8000e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e50:	4c0a      	ldr	r4, [pc, #40]	@ (8000e7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e54:	e001      	b.n	8000e5a <LoopFillZerobss>

08000e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e58:	3204      	adds	r2, #4

08000e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e5c:	d3fb      	bcc.n	8000e56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e5e:	f008 fbcd 	bl	80095fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e62:	f7ff fd4d 	bl	8000900 <main>
  bx  lr    
 8000e66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e70:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000e74:	08009994 	.word	0x08009994
  ldr r2, =_sbss
 8000e78:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000e7c:	20000af0 	.word	0x20000af0

08000e80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC_IRQHandler>
	...

08000e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e88:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec4 <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec4 <HAL_Init+0x40>)
 8000e8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e94:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec4 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec4 <HAL_Init+0x40>)
 8000e9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea0:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <HAL_Init+0x40>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a07      	ldr	r2, [pc, #28]	@ (8000ec4 <HAL_Init+0x40>)
 8000ea6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eac:	2003      	movs	r0, #3
 8000eae:	f000 f94f 	bl	8001150 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f000 f808 	bl	8000ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb8:	f7ff fe30 	bl	8000b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023c00 	.word	0x40023c00

08000ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed0:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <HAL_InitTick+0x54>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b12      	ldr	r3, [pc, #72]	@ (8000f20 <HAL_InitTick+0x58>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 f967 	bl	80011ba <HAL_SYSTICK_Config>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e00e      	b.n	8000f14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b0f      	cmp	r3, #15
 8000efa:	d80a      	bhi.n	8000f12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efc:	2200      	movs	r2, #0
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295
 8000f04:	f000 f92f 	bl	8001166 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f08:	4a06      	ldr	r2, [pc, #24]	@ (8000f24 <HAL_InitTick+0x5c>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	e000      	b.n	8000f14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	20000008 	.word	0x20000008
 8000f24:	20000004 	.word	0x20000004

08000f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <HAL_IncTick+0x20>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <HAL_IncTick+0x24>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	4a04      	ldr	r2, [pc, #16]	@ (8000f4c <HAL_IncTick+0x24>)
 8000f3a:	6013      	str	r3, [r2, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	200001e4 	.word	0x200001e4

08000f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return uwTick;
 8000f54:	4b03      	ldr	r3, [pc, #12]	@ (8000f64 <HAL_GetTick+0x14>)
 8000f56:	681b      	ldr	r3, [r3, #0]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	200001e4 	.word	0x200001e4

08000f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f70:	f7ff ffee 	bl	8000f50 <HAL_GetTick>
 8000f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f80:	d005      	beq.n	8000f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f82:	4b0a      	ldr	r3, [pc, #40]	@ (8000fac <HAL_Delay+0x44>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f8e:	bf00      	nop
 8000f90:	f7ff ffde 	bl	8000f50 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d8f7      	bhi.n	8000f90 <HAL_Delay+0x28>
  {
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000008 	.word	0x20000008

08000fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc6:	68ba      	ldr	r2, [r7, #8]
 8000fc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe2:	4a04      	ldr	r2, [pc, #16]	@ (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	60d3      	str	r3, [r2, #12]
}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ffc:	4b04      	ldr	r3, [pc, #16]	@ (8001010 <__NVIC_GetPriorityGrouping+0x18>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	0a1b      	lsrs	r3, r3, #8
 8001002:	f003 0307 	and.w	r3, r3, #7
}
 8001006:	4618      	mov	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	2b00      	cmp	r3, #0
 8001024:	db0b      	blt.n	800103e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	f003 021f 	and.w	r2, r3, #31
 800102c:	4907      	ldr	r1, [pc, #28]	@ (800104c <__NVIC_EnableIRQ+0x38>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	095b      	lsrs	r3, r3, #5
 8001034:	2001      	movs	r0, #1
 8001036:	fa00 f202 	lsl.w	r2, r0, r2
 800103a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000e100 	.word	0xe000e100

08001050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	2b00      	cmp	r3, #0
 8001062:	db0a      	blt.n	800107a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	b2da      	uxtb	r2, r3
 8001068:	490c      	ldr	r1, [pc, #48]	@ (800109c <__NVIC_SetPriority+0x4c>)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	0112      	lsls	r2, r2, #4
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	440b      	add	r3, r1
 8001074:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001078:	e00a      	b.n	8001090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4908      	ldr	r1, [pc, #32]	@ (80010a0 <__NVIC_SetPriority+0x50>)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	f003 030f 	and.w	r3, r3, #15
 8001086:	3b04      	subs	r3, #4
 8001088:	0112      	lsls	r2, r2, #4
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	440b      	add	r3, r1
 800108e:	761a      	strb	r2, [r3, #24]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000e100 	.word	0xe000e100
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	@ 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f1c3 0307 	rsb	r3, r3, #7
 80010be:	2b04      	cmp	r3, #4
 80010c0:	bf28      	it	cs
 80010c2:	2304      	movcs	r3, #4
 80010c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3304      	adds	r3, #4
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d902      	bls.n	80010d4 <NVIC_EncodePriority+0x30>
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3b03      	subs	r3, #3
 80010d2:	e000      	b.n	80010d6 <NVIC_EncodePriority+0x32>
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	f04f 32ff 	mov.w	r2, #4294967295
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43da      	mvns	r2, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	401a      	ands	r2, r3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ec:	f04f 31ff 	mov.w	r1, #4294967295
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	43d9      	mvns	r1, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	4313      	orrs	r3, r2
         );
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3724      	adds	r7, #36	@ 0x24
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
	...

0800110c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800111c:	d301      	bcc.n	8001122 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111e:	2301      	movs	r3, #1
 8001120:	e00f      	b.n	8001142 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001122:	4a0a      	ldr	r2, [pc, #40]	@ (800114c <SysTick_Config+0x40>)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112a:	210f      	movs	r1, #15
 800112c:	f04f 30ff 	mov.w	r0, #4294967295
 8001130:	f7ff ff8e 	bl	8001050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001134:	4b05      	ldr	r3, [pc, #20]	@ (800114c <SysTick_Config+0x40>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113a:	4b04      	ldr	r3, [pc, #16]	@ (800114c <SysTick_Config+0x40>)
 800113c:	2207      	movs	r2, #7
 800113e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	e000e010 	.word	0xe000e010

08001150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff ff29 	bl	8000fb0 <__NVIC_SetPriorityGrouping>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001166:	b580      	push	{r7, lr}
 8001168:	b086      	sub	sp, #24
 800116a:	af00      	add	r7, sp, #0
 800116c:	4603      	mov	r3, r0
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
 8001172:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001178:	f7ff ff3e 	bl	8000ff8 <__NVIC_GetPriorityGrouping>
 800117c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	6978      	ldr	r0, [r7, #20]
 8001184:	f7ff ff8e 	bl	80010a4 <NVIC_EncodePriority>
 8001188:	4602      	mov	r2, r0
 800118a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ff5d 	bl	8001050 <__NVIC_SetPriority>
}
 8001196:	bf00      	nop
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4603      	mov	r3, r0
 80011a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff31 	bl	8001014 <__NVIC_EnableIRQ>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ffa2 	bl	800110c <SysTick_Config>
 80011c8:	4603      	mov	r3, r0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b089      	sub	sp, #36	@ 0x24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
 80011ee:	e16b      	b.n	80014c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011f0:	2201      	movs	r2, #1
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	429a      	cmp	r2, r3
 800120a:	f040 815a 	bne.w	80014c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	2b01      	cmp	r3, #1
 8001218:	d005      	beq.n	8001226 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001222:	2b02      	cmp	r3, #2
 8001224:	d130      	bne.n	8001288 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	2203      	movs	r2, #3
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4013      	ands	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	68da      	ldr	r2, [r3, #12]
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4313      	orrs	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800125c:	2201      	movs	r2, #1
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	091b      	lsrs	r3, r3, #4
 8001272:	f003 0201 	and.w	r2, r3, #1
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	2b03      	cmp	r3, #3
 8001292:	d017      	beq.n	80012c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	2203      	movs	r2, #3
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 0303 	and.w	r3, r3, #3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d123      	bne.n	8001318 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	08da      	lsrs	r2, r3, #3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3208      	adds	r2, #8
 80012d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	f003 0307 	and.w	r3, r3, #7
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	220f      	movs	r2, #15
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	691a      	ldr	r2, [r3, #16]
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	08da      	lsrs	r2, r3, #3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3208      	adds	r2, #8
 8001312:	69b9      	ldr	r1, [r7, #24]
 8001314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	2203      	movs	r2, #3
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0203 	and.w	r2, r3, #3
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001354:	2b00      	cmp	r3, #0
 8001356:	f000 80b4 	beq.w	80014c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	4b60      	ldr	r3, [pc, #384]	@ (80014e0 <HAL_GPIO_Init+0x30c>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001362:	4a5f      	ldr	r2, [pc, #380]	@ (80014e0 <HAL_GPIO_Init+0x30c>)
 8001364:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001368:	6453      	str	r3, [r2, #68]	@ 0x44
 800136a:	4b5d      	ldr	r3, [pc, #372]	@ (80014e0 <HAL_GPIO_Init+0x30c>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001376:	4a5b      	ldr	r2, [pc, #364]	@ (80014e4 <HAL_GPIO_Init+0x310>)
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	089b      	lsrs	r3, r3, #2
 800137c:	3302      	adds	r3, #2
 800137e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f003 0303 	and.w	r3, r3, #3
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	220f      	movs	r2, #15
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a52      	ldr	r2, [pc, #328]	@ (80014e8 <HAL_GPIO_Init+0x314>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d02b      	beq.n	80013fa <HAL_GPIO_Init+0x226>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a51      	ldr	r2, [pc, #324]	@ (80014ec <HAL_GPIO_Init+0x318>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d025      	beq.n	80013f6 <HAL_GPIO_Init+0x222>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a50      	ldr	r2, [pc, #320]	@ (80014f0 <HAL_GPIO_Init+0x31c>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d01f      	beq.n	80013f2 <HAL_GPIO_Init+0x21e>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a4f      	ldr	r2, [pc, #316]	@ (80014f4 <HAL_GPIO_Init+0x320>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d019      	beq.n	80013ee <HAL_GPIO_Init+0x21a>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a4e      	ldr	r2, [pc, #312]	@ (80014f8 <HAL_GPIO_Init+0x324>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d013      	beq.n	80013ea <HAL_GPIO_Init+0x216>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a4d      	ldr	r2, [pc, #308]	@ (80014fc <HAL_GPIO_Init+0x328>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d00d      	beq.n	80013e6 <HAL_GPIO_Init+0x212>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a4c      	ldr	r2, [pc, #304]	@ (8001500 <HAL_GPIO_Init+0x32c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d007      	beq.n	80013e2 <HAL_GPIO_Init+0x20e>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a4b      	ldr	r2, [pc, #300]	@ (8001504 <HAL_GPIO_Init+0x330>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d101      	bne.n	80013de <HAL_GPIO_Init+0x20a>
 80013da:	2307      	movs	r3, #7
 80013dc:	e00e      	b.n	80013fc <HAL_GPIO_Init+0x228>
 80013de:	2308      	movs	r3, #8
 80013e0:	e00c      	b.n	80013fc <HAL_GPIO_Init+0x228>
 80013e2:	2306      	movs	r3, #6
 80013e4:	e00a      	b.n	80013fc <HAL_GPIO_Init+0x228>
 80013e6:	2305      	movs	r3, #5
 80013e8:	e008      	b.n	80013fc <HAL_GPIO_Init+0x228>
 80013ea:	2304      	movs	r3, #4
 80013ec:	e006      	b.n	80013fc <HAL_GPIO_Init+0x228>
 80013ee:	2303      	movs	r3, #3
 80013f0:	e004      	b.n	80013fc <HAL_GPIO_Init+0x228>
 80013f2:	2302      	movs	r3, #2
 80013f4:	e002      	b.n	80013fc <HAL_GPIO_Init+0x228>
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <HAL_GPIO_Init+0x228>
 80013fa:	2300      	movs	r3, #0
 80013fc:	69fa      	ldr	r2, [r7, #28]
 80013fe:	f002 0203 	and.w	r2, r2, #3
 8001402:	0092      	lsls	r2, r2, #2
 8001404:	4093      	lsls	r3, r2
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800140c:	4935      	ldr	r1, [pc, #212]	@ (80014e4 <HAL_GPIO_Init+0x310>)
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	089b      	lsrs	r3, r3, #2
 8001412:	3302      	adds	r3, #2
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800141a:	4b3b      	ldr	r3, [pc, #236]	@ (8001508 <HAL_GPIO_Init+0x334>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	43db      	mvns	r3, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4013      	ands	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800143e:	4a32      	ldr	r2, [pc, #200]	@ (8001508 <HAL_GPIO_Init+0x334>)
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001444:	4b30      	ldr	r3, [pc, #192]	@ (8001508 <HAL_GPIO_Init+0x334>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	43db      	mvns	r3, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d003      	beq.n	8001468 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001468:	4a27      	ldr	r2, [pc, #156]	@ (8001508 <HAL_GPIO_Init+0x334>)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800146e:	4b26      	ldr	r3, [pc, #152]	@ (8001508 <HAL_GPIO_Init+0x334>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	43db      	mvns	r3, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4013      	ands	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001492:	4a1d      	ldr	r2, [pc, #116]	@ (8001508 <HAL_GPIO_Init+0x334>)
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001498:	4b1b      	ldr	r3, [pc, #108]	@ (8001508 <HAL_GPIO_Init+0x334>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014bc:	4a12      	ldr	r2, [pc, #72]	@ (8001508 <HAL_GPIO_Init+0x334>)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3301      	adds	r3, #1
 80014c6:	61fb      	str	r3, [r7, #28]
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	2b0f      	cmp	r3, #15
 80014cc:	f67f ae90 	bls.w	80011f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014d0:	bf00      	nop
 80014d2:	bf00      	nop
 80014d4:	3724      	adds	r7, #36	@ 0x24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40013800 	.word	0x40013800
 80014e8:	40020000 	.word	0x40020000
 80014ec:	40020400 	.word	0x40020400
 80014f0:	40020800 	.word	0x40020800
 80014f4:	40020c00 	.word	0x40020c00
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40021400 	.word	0x40021400
 8001500:	40021800 	.word	0x40021800
 8001504:	40021c00 	.word	0x40021c00
 8001508:	40013c00 	.word	0x40013c00

0800150c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	807b      	strh	r3, [r7, #2]
 8001518:	4613      	mov	r3, r2
 800151a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800151c:	787b      	ldrb	r3, [r7, #1]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001522:	887a      	ldrh	r2, [r7, #2]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001528:	e003      	b.n	8001532 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800152a:	887b      	ldrh	r3, [r7, #2]
 800152c:	041a      	lsls	r2, r3, #16
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	619a      	str	r2, [r3, #24]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b086      	sub	sp, #24
 8001542:	af02      	add	r7, sp, #8
 8001544:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e059      	b.n	8001604 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b00      	cmp	r3, #0
 8001560:	d106      	bne.n	8001570 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f007 fa80 	bl	8008a70 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2203      	movs	r2, #3
 8001574:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800157e:	d102      	bne.n	8001586 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f004 f88d 	bl	80056aa <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6818      	ldr	r0, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	7c1a      	ldrb	r2, [r3, #16]
 8001598:	f88d 2000 	strb.w	r2, [sp]
 800159c:	3304      	adds	r3, #4
 800159e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015a0:	f004 f80e 	bl	80055c0 <USB_CoreInit>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d005      	beq.n	80015b6 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2202      	movs	r2, #2
 80015ae:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e026      	b.n	8001604 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2101      	movs	r1, #1
 80015bc:	4618      	mov	r0, r3
 80015be:	f004 f885 	bl	80056cc <USB_SetCurrentMode>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d005      	beq.n	80015d4 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2202      	movs	r2, #2
 80015cc:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e017      	b.n	8001604 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6818      	ldr	r0, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	7c1a      	ldrb	r2, [r3, #16]
 80015dc:	f88d 2000 	strb.w	r2, [sp]
 80015e0:	3304      	adds	r3, #4
 80015e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015e4:	f004 fa2e 	bl	8005a44 <USB_HostInit>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d005      	beq.n	80015fa <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2202      	movs	r2, #2
 80015f2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e004      	b.n	8001604 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2201      	movs	r2, #1
 80015fe:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800160c:	b590      	push	{r4, r7, lr}
 800160e:	b08b      	sub	sp, #44	@ 0x2c
 8001610:	af04      	add	r7, sp, #16
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	4608      	mov	r0, r1
 8001616:	4611      	mov	r1, r2
 8001618:	461a      	mov	r2, r3
 800161a:	4603      	mov	r3, r0
 800161c:	70fb      	strb	r3, [r7, #3]
 800161e:	460b      	mov	r3, r1
 8001620:	70bb      	strb	r3, [r7, #2]
 8001622:	4613      	mov	r3, r2
 8001624:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001626:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001628:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001630:	2b01      	cmp	r3, #1
 8001632:	d101      	bne.n	8001638 <HAL_HCD_HC_Init+0x2c>
 8001634:	2302      	movs	r3, #2
 8001636:	e09d      	b.n	8001774 <HAL_HCD_HC_Init+0x168>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001640:	78fa      	ldrb	r2, [r7, #3]
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	4613      	mov	r3, r2
 8001646:	011b      	lsls	r3, r3, #4
 8001648:	1a9b      	subs	r3, r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	440b      	add	r3, r1
 800164e:	3319      	adds	r3, #25
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001654:	78fa      	ldrb	r2, [r7, #3]
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	4613      	mov	r3, r2
 800165a:	011b      	lsls	r3, r3, #4
 800165c:	1a9b      	subs	r3, r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	440b      	add	r3, r1
 8001662:	3314      	adds	r3, #20
 8001664:	787a      	ldrb	r2, [r7, #1]
 8001666:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001668:	78fa      	ldrb	r2, [r7, #3]
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	4613      	mov	r3, r2
 800166e:	011b      	lsls	r3, r3, #4
 8001670:	1a9b      	subs	r3, r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	440b      	add	r3, r1
 8001676:	3315      	adds	r3, #21
 8001678:	78fa      	ldrb	r2, [r7, #3]
 800167a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800167c:	78fa      	ldrb	r2, [r7, #3]
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	4613      	mov	r3, r2
 8001682:	011b      	lsls	r3, r3, #4
 8001684:	1a9b      	subs	r3, r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	440b      	add	r3, r1
 800168a:	3326      	adds	r3, #38	@ 0x26
 800168c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001690:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001692:	78fa      	ldrb	r2, [r7, #3]
 8001694:	78bb      	ldrb	r3, [r7, #2]
 8001696:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800169a:	b2d8      	uxtb	r0, r3
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	4613      	mov	r3, r2
 80016a0:	011b      	lsls	r3, r3, #4
 80016a2:	1a9b      	subs	r3, r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	440b      	add	r3, r1
 80016a8:	3316      	adds	r3, #22
 80016aa:	4602      	mov	r2, r0
 80016ac:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80016ae:	78fb      	ldrb	r3, [r7, #3]
 80016b0:	4619      	mov	r1, r3
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 fbc8 	bl	8001e48 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80016b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	da0a      	bge.n	80016d6 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80016c0:	78fa      	ldrb	r2, [r7, #3]
 80016c2:	6879      	ldr	r1, [r7, #4]
 80016c4:	4613      	mov	r3, r2
 80016c6:	011b      	lsls	r3, r3, #4
 80016c8:	1a9b      	subs	r3, r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	440b      	add	r3, r1
 80016ce:	3317      	adds	r3, #23
 80016d0:	2201      	movs	r2, #1
 80016d2:	701a      	strb	r2, [r3, #0]
 80016d4:	e009      	b.n	80016ea <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80016d6:	78fa      	ldrb	r2, [r7, #3]
 80016d8:	6879      	ldr	r1, [r7, #4]
 80016da:	4613      	mov	r3, r2
 80016dc:	011b      	lsls	r3, r3, #4
 80016de:	1a9b      	subs	r3, r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	440b      	add	r3, r1
 80016e4:	3317      	adds	r3, #23
 80016e6:	2200      	movs	r2, #0
 80016e8:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f004 fb0c 	bl	8005d0c <USB_GetHostSpeed>
 80016f4:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80016f6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d10b      	bne.n	8001716 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80016fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001702:	2b01      	cmp	r3, #1
 8001704:	d107      	bne.n	8001716 <HAL_HCD_HC_Init+0x10a>
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d104      	bne.n	8001716 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	2bbc      	cmp	r3, #188	@ 0xbc
 8001710:	d901      	bls.n	8001716 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001712:	23bc      	movs	r3, #188	@ 0xbc
 8001714:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001716:	78fa      	ldrb	r2, [r7, #3]
 8001718:	6879      	ldr	r1, [r7, #4]
 800171a:	4613      	mov	r3, r2
 800171c:	011b      	lsls	r3, r3, #4
 800171e:	1a9b      	subs	r3, r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	440b      	add	r3, r1
 8001724:	3318      	adds	r3, #24
 8001726:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800172a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800172c:	78fa      	ldrb	r2, [r7, #3]
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	b298      	uxth	r0, r3
 8001732:	6879      	ldr	r1, [r7, #4]
 8001734:	4613      	mov	r3, r2
 8001736:	011b      	lsls	r3, r3, #4
 8001738:	1a9b      	subs	r3, r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	440b      	add	r3, r1
 800173e:	3328      	adds	r3, #40	@ 0x28
 8001740:	4602      	mov	r2, r0
 8001742:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6818      	ldr	r0, [r3, #0]
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	b29b      	uxth	r3, r3
 800174c:	787c      	ldrb	r4, [r7, #1]
 800174e:	78ba      	ldrb	r2, [r7, #2]
 8001750:	78f9      	ldrb	r1, [r7, #3]
 8001752:	9302      	str	r3, [sp, #8]
 8001754:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001758:	9301      	str	r3, [sp, #4]
 800175a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	4623      	mov	r3, r4
 8001762:	f004 fafb 	bl	8005d5c <USB_HC_Init>
 8001766:	4603      	mov	r3, r0
 8001768:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001772:	7bfb      	ldrb	r3, [r7, #15]
}
 8001774:	4618      	mov	r0, r3
 8001776:	371c      	adds	r7, #28
 8001778:	46bd      	mov	sp, r7
 800177a:	bd90      	pop	{r4, r7, pc}

0800177c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001788:	2300      	movs	r3, #0
 800178a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001792:	2b01      	cmp	r3, #1
 8001794:	d101      	bne.n	800179a <HAL_HCD_HC_Halt+0x1e>
 8001796:	2302      	movs	r3, #2
 8001798:	e00f      	b.n	80017ba <HAL_HCD_HC_Halt+0x3e>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2201      	movs	r2, #1
 800179e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	78fa      	ldrb	r2, [r7, #3]
 80017a8:	4611      	mov	r1, r2
 80017aa:	4618      	mov	r0, r3
 80017ac:	f004 fe8d 	bl	80064ca <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	4608      	mov	r0, r1
 80017ce:	4611      	mov	r1, r2
 80017d0:	461a      	mov	r2, r3
 80017d2:	4603      	mov	r3, r0
 80017d4:	70fb      	strb	r3, [r7, #3]
 80017d6:	460b      	mov	r3, r1
 80017d8:	70bb      	strb	r3, [r7, #2]
 80017da:	4613      	mov	r3, r2
 80017dc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80017de:	78fa      	ldrb	r2, [r7, #3]
 80017e0:	6879      	ldr	r1, [r7, #4]
 80017e2:	4613      	mov	r3, r2
 80017e4:	011b      	lsls	r3, r3, #4
 80017e6:	1a9b      	subs	r3, r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	440b      	add	r3, r1
 80017ec:	3317      	adds	r3, #23
 80017ee:	78ba      	ldrb	r2, [r7, #2]
 80017f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80017f2:	78fa      	ldrb	r2, [r7, #3]
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	011b      	lsls	r3, r3, #4
 80017fa:	1a9b      	subs	r3, r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	440b      	add	r3, r1
 8001800:	3326      	adds	r3, #38	@ 0x26
 8001802:	787a      	ldrb	r2, [r7, #1]
 8001804:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001806:	7c3b      	ldrb	r3, [r7, #16]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d114      	bne.n	8001836 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800180c:	78fa      	ldrb	r2, [r7, #3]
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	4613      	mov	r3, r2
 8001812:	011b      	lsls	r3, r3, #4
 8001814:	1a9b      	subs	r3, r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	332a      	adds	r3, #42	@ 0x2a
 800181c:	2203      	movs	r2, #3
 800181e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001820:	78fa      	ldrb	r2, [r7, #3]
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	4613      	mov	r3, r2
 8001826:	011b      	lsls	r3, r3, #4
 8001828:	1a9b      	subs	r3, r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	440b      	add	r3, r1
 800182e:	3319      	adds	r3, #25
 8001830:	7f3a      	ldrb	r2, [r7, #28]
 8001832:	701a      	strb	r2, [r3, #0]
 8001834:	e009      	b.n	800184a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001836:	78fa      	ldrb	r2, [r7, #3]
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	4613      	mov	r3, r2
 800183c:	011b      	lsls	r3, r3, #4
 800183e:	1a9b      	subs	r3, r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	440b      	add	r3, r1
 8001844:	332a      	adds	r3, #42	@ 0x2a
 8001846:	2202      	movs	r2, #2
 8001848:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800184a:	787b      	ldrb	r3, [r7, #1]
 800184c:	2b03      	cmp	r3, #3
 800184e:	f200 8102 	bhi.w	8001a56 <HAL_HCD_HC_SubmitRequest+0x292>
 8001852:	a201      	add	r2, pc, #4	@ (adr r2, 8001858 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001858:	08001869 	.word	0x08001869
 800185c:	08001a41 	.word	0x08001a41
 8001860:	0800192d 	.word	0x0800192d
 8001864:	080019b7 	.word	0x080019b7
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001868:	7c3b      	ldrb	r3, [r7, #16]
 800186a:	2b01      	cmp	r3, #1
 800186c:	f040 80f5 	bne.w	8001a5a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001870:	78bb      	ldrb	r3, [r7, #2]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d12d      	bne.n	80018d2 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001876:	8b3b      	ldrh	r3, [r7, #24]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d109      	bne.n	8001890 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 800187c:	78fa      	ldrb	r2, [r7, #3]
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	4613      	mov	r3, r2
 8001882:	011b      	lsls	r3, r3, #4
 8001884:	1a9b      	subs	r3, r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	440b      	add	r3, r1
 800188a:	333d      	adds	r3, #61	@ 0x3d
 800188c:	2201      	movs	r2, #1
 800188e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001890:	78fa      	ldrb	r2, [r7, #3]
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	4613      	mov	r3, r2
 8001896:	011b      	lsls	r3, r3, #4
 8001898:	1a9b      	subs	r3, r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	440b      	add	r3, r1
 800189e:	333d      	adds	r3, #61	@ 0x3d
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10a      	bne.n	80018bc <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018a6:	78fa      	ldrb	r2, [r7, #3]
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	4613      	mov	r3, r2
 80018ac:	011b      	lsls	r3, r3, #4
 80018ae:	1a9b      	subs	r3, r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	440b      	add	r3, r1
 80018b4:	332a      	adds	r3, #42	@ 0x2a
 80018b6:	2200      	movs	r2, #0
 80018b8:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80018ba:	e0ce      	b.n	8001a5a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018bc:	78fa      	ldrb	r2, [r7, #3]
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	4613      	mov	r3, r2
 80018c2:	011b      	lsls	r3, r3, #4
 80018c4:	1a9b      	subs	r3, r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	440b      	add	r3, r1
 80018ca:	332a      	adds	r3, #42	@ 0x2a
 80018cc:	2202      	movs	r2, #2
 80018ce:	701a      	strb	r2, [r3, #0]
      break;
 80018d0:	e0c3      	b.n	8001a5a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80018d2:	78fa      	ldrb	r2, [r7, #3]
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	4613      	mov	r3, r2
 80018d8:	011b      	lsls	r3, r3, #4
 80018da:	1a9b      	subs	r3, r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	440b      	add	r3, r1
 80018e0:	331a      	adds	r3, #26
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	f040 80b8 	bne.w	8001a5a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80018ea:	78fa      	ldrb	r2, [r7, #3]
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	4613      	mov	r3, r2
 80018f0:	011b      	lsls	r3, r3, #4
 80018f2:	1a9b      	subs	r3, r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	440b      	add	r3, r1
 80018f8:	333c      	adds	r3, #60	@ 0x3c
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d10a      	bne.n	8001916 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001900:	78fa      	ldrb	r2, [r7, #3]
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	4613      	mov	r3, r2
 8001906:	011b      	lsls	r3, r3, #4
 8001908:	1a9b      	subs	r3, r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	440b      	add	r3, r1
 800190e:	332a      	adds	r3, #42	@ 0x2a
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]
      break;
 8001914:	e0a1      	b.n	8001a5a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001916:	78fa      	ldrb	r2, [r7, #3]
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	4613      	mov	r3, r2
 800191c:	011b      	lsls	r3, r3, #4
 800191e:	1a9b      	subs	r3, r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	440b      	add	r3, r1
 8001924:	332a      	adds	r3, #42	@ 0x2a
 8001926:	2202      	movs	r2, #2
 8001928:	701a      	strb	r2, [r3, #0]
      break;
 800192a:	e096      	b.n	8001a5a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800192c:	78bb      	ldrb	r3, [r7, #2]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d120      	bne.n	8001974 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001932:	78fa      	ldrb	r2, [r7, #3]
 8001934:	6879      	ldr	r1, [r7, #4]
 8001936:	4613      	mov	r3, r2
 8001938:	011b      	lsls	r3, r3, #4
 800193a:	1a9b      	subs	r3, r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	440b      	add	r3, r1
 8001940:	333d      	adds	r3, #61	@ 0x3d
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d10a      	bne.n	800195e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001948:	78fa      	ldrb	r2, [r7, #3]
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	4613      	mov	r3, r2
 800194e:	011b      	lsls	r3, r3, #4
 8001950:	1a9b      	subs	r3, r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	332a      	adds	r3, #42	@ 0x2a
 8001958:	2200      	movs	r2, #0
 800195a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800195c:	e07e      	b.n	8001a5c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800195e:	78fa      	ldrb	r2, [r7, #3]
 8001960:	6879      	ldr	r1, [r7, #4]
 8001962:	4613      	mov	r3, r2
 8001964:	011b      	lsls	r3, r3, #4
 8001966:	1a9b      	subs	r3, r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	440b      	add	r3, r1
 800196c:	332a      	adds	r3, #42	@ 0x2a
 800196e:	2202      	movs	r2, #2
 8001970:	701a      	strb	r2, [r3, #0]
      break;
 8001972:	e073      	b.n	8001a5c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001974:	78fa      	ldrb	r2, [r7, #3]
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	4613      	mov	r3, r2
 800197a:	011b      	lsls	r3, r3, #4
 800197c:	1a9b      	subs	r3, r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	333c      	adds	r3, #60	@ 0x3c
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d10a      	bne.n	80019a0 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800198a:	78fa      	ldrb	r2, [r7, #3]
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	4613      	mov	r3, r2
 8001990:	011b      	lsls	r3, r3, #4
 8001992:	1a9b      	subs	r3, r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	440b      	add	r3, r1
 8001998:	332a      	adds	r3, #42	@ 0x2a
 800199a:	2200      	movs	r2, #0
 800199c:	701a      	strb	r2, [r3, #0]
      break;
 800199e:	e05d      	b.n	8001a5c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019a0:	78fa      	ldrb	r2, [r7, #3]
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	4613      	mov	r3, r2
 80019a6:	011b      	lsls	r3, r3, #4
 80019a8:	1a9b      	subs	r3, r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	440b      	add	r3, r1
 80019ae:	332a      	adds	r3, #42	@ 0x2a
 80019b0:	2202      	movs	r2, #2
 80019b2:	701a      	strb	r2, [r3, #0]
      break;
 80019b4:	e052      	b.n	8001a5c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80019b6:	78bb      	ldrb	r3, [r7, #2]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d120      	bne.n	80019fe <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019bc:	78fa      	ldrb	r2, [r7, #3]
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	4613      	mov	r3, r2
 80019c2:	011b      	lsls	r3, r3, #4
 80019c4:	1a9b      	subs	r3, r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	440b      	add	r3, r1
 80019ca:	333d      	adds	r3, #61	@ 0x3d
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10a      	bne.n	80019e8 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019d2:	78fa      	ldrb	r2, [r7, #3]
 80019d4:	6879      	ldr	r1, [r7, #4]
 80019d6:	4613      	mov	r3, r2
 80019d8:	011b      	lsls	r3, r3, #4
 80019da:	1a9b      	subs	r3, r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	440b      	add	r3, r1
 80019e0:	332a      	adds	r3, #42	@ 0x2a
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019e6:	e039      	b.n	8001a5c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019e8:	78fa      	ldrb	r2, [r7, #3]
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	4613      	mov	r3, r2
 80019ee:	011b      	lsls	r3, r3, #4
 80019f0:	1a9b      	subs	r3, r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	440b      	add	r3, r1
 80019f6:	332a      	adds	r3, #42	@ 0x2a
 80019f8:	2202      	movs	r2, #2
 80019fa:	701a      	strb	r2, [r3, #0]
      break;
 80019fc:	e02e      	b.n	8001a5c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019fe:	78fa      	ldrb	r2, [r7, #3]
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	4613      	mov	r3, r2
 8001a04:	011b      	lsls	r3, r3, #4
 8001a06:	1a9b      	subs	r3, r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	333c      	adds	r3, #60	@ 0x3c
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d10a      	bne.n	8001a2a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a14:	78fa      	ldrb	r2, [r7, #3]
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	011b      	lsls	r3, r3, #4
 8001a1c:	1a9b      	subs	r3, r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	440b      	add	r3, r1
 8001a22:	332a      	adds	r3, #42	@ 0x2a
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
      break;
 8001a28:	e018      	b.n	8001a5c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a2a:	78fa      	ldrb	r2, [r7, #3]
 8001a2c:	6879      	ldr	r1, [r7, #4]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	011b      	lsls	r3, r3, #4
 8001a32:	1a9b      	subs	r3, r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	440b      	add	r3, r1
 8001a38:	332a      	adds	r3, #42	@ 0x2a
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	701a      	strb	r2, [r3, #0]
      break;
 8001a3e:	e00d      	b.n	8001a5c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a40:	78fa      	ldrb	r2, [r7, #3]
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	4613      	mov	r3, r2
 8001a46:	011b      	lsls	r3, r3, #4
 8001a48:	1a9b      	subs	r3, r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	332a      	adds	r3, #42	@ 0x2a
 8001a50:	2200      	movs	r2, #0
 8001a52:	701a      	strb	r2, [r3, #0]
      break;
 8001a54:	e002      	b.n	8001a5c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001a56:	bf00      	nop
 8001a58:	e000      	b.n	8001a5c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001a5a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a5c:	78fa      	ldrb	r2, [r7, #3]
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	4613      	mov	r3, r2
 8001a62:	011b      	lsls	r3, r3, #4
 8001a64:	1a9b      	subs	r3, r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	332c      	adds	r3, #44	@ 0x2c
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a70:	78fa      	ldrb	r2, [r7, #3]
 8001a72:	8b39      	ldrh	r1, [r7, #24]
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	4613      	mov	r3, r2
 8001a78:	011b      	lsls	r3, r3, #4
 8001a7a:	1a9b      	subs	r3, r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4403      	add	r3, r0
 8001a80:	3334      	adds	r3, #52	@ 0x34
 8001a82:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a84:	78fa      	ldrb	r2, [r7, #3]
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	011b      	lsls	r3, r3, #4
 8001a8c:	1a9b      	subs	r3, r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	334c      	adds	r3, #76	@ 0x4c
 8001a94:	2200      	movs	r2, #0
 8001a96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a98:	78fa      	ldrb	r2, [r7, #3]
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	011b      	lsls	r3, r3, #4
 8001aa0:	1a9b      	subs	r3, r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	3338      	adds	r3, #56	@ 0x38
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001aac:	78fa      	ldrb	r2, [r7, #3]
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	011b      	lsls	r3, r3, #4
 8001ab4:	1a9b      	subs	r3, r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	440b      	add	r3, r1
 8001aba:	3315      	adds	r3, #21
 8001abc:	78fa      	ldrb	r2, [r7, #3]
 8001abe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001ac0:	78fa      	ldrb	r2, [r7, #3]
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	011b      	lsls	r3, r3, #4
 8001ac8:	1a9b      	subs	r3, r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	440b      	add	r3, r1
 8001ace:	334d      	adds	r3, #77	@ 0x4d
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6818      	ldr	r0, [r3, #0]
 8001ad8:	78fa      	ldrb	r2, [r7, #3]
 8001ada:	4613      	mov	r3, r2
 8001adc:	011b      	lsls	r3, r3, #4
 8001ade:	1a9b      	subs	r3, r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	3310      	adds	r3, #16
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	1d19      	adds	r1, r3, #4
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	799b      	ldrb	r3, [r3, #6]
 8001aee:	461a      	mov	r2, r3
 8001af0:	f004 fa60 	bl	8005fb4 <USB_HC_StartXfer>
 8001af4:	4603      	mov	r3, r0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop

08001b00 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f003 ff4e 	bl	80059b8 <USB_GetMode>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	f040 80fb 	bne.w	8001d1a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f003 ff11 	bl	8005950 <USB_ReadInterrupts>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 80f1 	beq.w	8001d18 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f003 ff08 	bl	8005950 <USB_ReadInterrupts>
 8001b40:	4603      	mov	r3, r0
 8001b42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001b4a:	d104      	bne.n	8001b56 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001b54:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f003 fef8 	bl	8005950 <USB_ReadInterrupts>
 8001b60:	4603      	mov	r3, r0
 8001b62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001b6a:	d104      	bne.n	8001b76 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001b74:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f003 fee8 	bl	8005950 <USB_ReadInterrupts>
 8001b80:	4603      	mov	r3, r0
 8001b82:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b86:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001b8a:	d104      	bne.n	8001b96 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001b94:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f003 fed8 	bl	8005950 <USB_ReadInterrupts>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d103      	bne.n	8001bb2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2202      	movs	r2, #2
 8001bb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f003 feca 	bl	8005950 <USB_ReadInterrupts>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001bc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001bc6:	d120      	bne.n	8001c0a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001bd0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d113      	bne.n	8001c0a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001be2:	2110      	movs	r1, #16
 8001be4:	6938      	ldr	r0, [r7, #16]
 8001be6:	f003 fdbd 	bl	8005764 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001bea:	6938      	ldr	r0, [r7, #16]
 8001bec:	f003 fdec 	bl	80057c8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	7a5b      	ldrb	r3, [r3, #9]
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d105      	bne.n	8001c04 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f003 ffe4 	bl	8005bcc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f006 ffb1 	bl	8008b6c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f003 fe9e 	bl	8005950 <USB_ReadInterrupts>
 8001c14:	4603      	mov	r3, r0
 8001c16:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c1e:	d102      	bne.n	8001c26 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f001 fd4d 	bl	80036c0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f003 fe90 	bl	8005950 <USB_ReadInterrupts>
 8001c30:	4603      	mov	r3, r0
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	d106      	bne.n	8001c48 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f006 ff7a 	bl	8008b34 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2208      	movs	r2, #8
 8001c46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f003 fe7f 	bl	8005950 <USB_ReadInterrupts>
 8001c52:	4603      	mov	r3, r0
 8001c54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c58:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001c5c:	d139      	bne.n	8001cd2 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f004 fc20 	bl	80064a8 <USB_HC_ReadInterrupt>
 8001c68:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	e025      	b.n	8001cbc <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d018      	beq.n	8001cb6 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	015a      	lsls	r2, r3, #5
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c9a:	d106      	bne.n	8001caa <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 f905 	bl	8001eb2 <HCD_HC_IN_IRQHandler>
 8001ca8:	e005      	b.n	8001cb6 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	4619      	mov	r1, r3
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 ff67 	bl	8002b84 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	795b      	ldrb	r3, [r3, #5]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d3d3      	bcc.n	8001c70 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f003 fe3a 	bl	8005950 <USB_ReadInterrupts>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	f003 0310 	and.w	r3, r3, #16
 8001ce2:	2b10      	cmp	r3, #16
 8001ce4:	d101      	bne.n	8001cea <HAL_HCD_IRQHandler+0x1ea>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e000      	b.n	8001cec <HAL_HCD_IRQHandler+0x1ec>
 8001cea:	2300      	movs	r3, #0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d014      	beq.n	8001d1a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	699a      	ldr	r2, [r3, #24]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 0210 	bic.w	r2, r2, #16
 8001cfe:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f001 fbfe 	bl	8003502 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	699a      	ldr	r2, [r3, #24]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f042 0210 	orr.w	r2, r2, #16
 8001d14:	619a      	str	r2, [r3, #24]
 8001d16:	e000      	b.n	8001d1a <HAL_HCD_IRQHandler+0x21a>
      return;
 8001d18:	bf00      	nop
    }
  }
}
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <HAL_HCD_Start+0x16>
 8001d32:	2302      	movs	r3, #2
 8001d34:	e013      	b.n	8001d5e <HAL_HCD_Start+0x3e>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2101      	movs	r1, #1
 8001d44:	4618      	mov	r0, r3
 8001d46:	f003 ffa8 	bl	8005c9a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f003 fc9a 	bl	8005688 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d101      	bne.n	8001d7c <HAL_HCD_Stop+0x16>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e00d      	b.n	8001d98 <HAL_HCD_Stop+0x32>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f004 fcfb 	bl	8006784 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f003 ff4a 	bl	8005c46 <USB_ResetPort>
 8001db2:	4603      	mov	r3, r0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001dc8:	78fa      	ldrb	r2, [r7, #3]
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	011b      	lsls	r3, r3, #4
 8001dd0:	1a9b      	subs	r3, r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	334c      	adds	r3, #76	@ 0x4c
 8001dd8:	781b      	ldrb	r3, [r3, #0]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
 8001dee:	460b      	mov	r3, r1
 8001df0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001df2:	78fa      	ldrb	r2, [r7, #3]
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	4613      	mov	r3, r2
 8001df8:	011b      	lsls	r3, r3, #4
 8001dfa:	1a9b      	subs	r3, r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	440b      	add	r3, r1
 8001e00:	3338      	adds	r3, #56	@ 0x38
 8001e02:	681b      	ldr	r3, [r3, #0]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f003 ff8c 	bl	8005d3a <USB_GetCurrentFrame>
 8001e22:	4603      	mov	r3, r0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f003 ff67 	bl	8005d0c <USB_GetHostSpeed>
 8001e3e:	4603      	mov	r3, r0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001e54:	78fa      	ldrb	r2, [r7, #3]
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	011b      	lsls	r3, r3, #4
 8001e5c:	1a9b      	subs	r3, r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	440b      	add	r3, r1
 8001e62:	331a      	adds	r3, #26
 8001e64:	2200      	movs	r2, #0
 8001e66:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001e68:	78fa      	ldrb	r2, [r7, #3]
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	011b      	lsls	r3, r3, #4
 8001e70:	1a9b      	subs	r3, r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	440b      	add	r3, r1
 8001e76:	331b      	adds	r3, #27
 8001e78:	2200      	movs	r2, #0
 8001e7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001e7c:	78fa      	ldrb	r2, [r7, #3]
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	4613      	mov	r3, r2
 8001e82:	011b      	lsls	r3, r3, #4
 8001e84:	1a9b      	subs	r3, r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	440b      	add	r3, r1
 8001e8a:	3325      	adds	r3, #37	@ 0x25
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001e90:	78fa      	ldrb	r2, [r7, #3]
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	011b      	lsls	r3, r3, #4
 8001e98:	1a9b      	subs	r3, r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	3324      	adds	r3, #36	@ 0x24
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b086      	sub	sp, #24
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
 8001eba:	460b      	mov	r3, r1
 8001ebc:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	78fa      	ldrb	r2, [r7, #3]
 8001ece:	4611      	mov	r1, r2
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f003 fd50 	bl	8005976 <USB_ReadChInterrupts>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	d11a      	bne.n	8001f16 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001ee0:	78fb      	ldrb	r3, [r7, #3]
 8001ee2:	015a      	lsls	r2, r3, #5
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001eec:	461a      	mov	r2, r3
 8001eee:	2304      	movs	r3, #4
 8001ef0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001ef2:	78fa      	ldrb	r2, [r7, #3]
 8001ef4:	6879      	ldr	r1, [r7, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	011b      	lsls	r3, r3, #4
 8001efa:	1a9b      	subs	r3, r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	440b      	add	r3, r1
 8001f00:	334d      	adds	r3, #77	@ 0x4d
 8001f02:	2207      	movs	r2, #7
 8001f04:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	78fa      	ldrb	r2, [r7, #3]
 8001f0c:	4611      	mov	r1, r2
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f004 fadb 	bl	80064ca <USB_HC_Halt>
 8001f14:	e09e      	b.n	8002054 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	78fa      	ldrb	r2, [r7, #3]
 8001f1c:	4611      	mov	r1, r2
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f003 fd29 	bl	8005976 <USB_ReadChInterrupts>
 8001f24:	4603      	mov	r3, r0
 8001f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f2e:	d11b      	bne.n	8001f68 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001f30:	78fb      	ldrb	r3, [r7, #3]
 8001f32:	015a      	lsls	r2, r3, #5
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4413      	add	r3, r2
 8001f38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f42:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001f44:	78fa      	ldrb	r2, [r7, #3]
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	011b      	lsls	r3, r3, #4
 8001f4c:	1a9b      	subs	r3, r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	334d      	adds	r3, #77	@ 0x4d
 8001f54:	2208      	movs	r2, #8
 8001f56:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	78fa      	ldrb	r2, [r7, #3]
 8001f5e:	4611      	mov	r1, r2
 8001f60:	4618      	mov	r0, r3
 8001f62:	f004 fab2 	bl	80064ca <USB_HC_Halt>
 8001f66:	e075      	b.n	8002054 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	78fa      	ldrb	r2, [r7, #3]
 8001f6e:	4611      	mov	r1, r2
 8001f70:	4618      	mov	r0, r3
 8001f72:	f003 fd00 	bl	8005976 <USB_ReadChInterrupts>
 8001f76:	4603      	mov	r3, r0
 8001f78:	f003 0308 	and.w	r3, r3, #8
 8001f7c:	2b08      	cmp	r3, #8
 8001f7e:	d11a      	bne.n	8001fb6 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001f80:	78fb      	ldrb	r3, [r7, #3]
 8001f82:	015a      	lsls	r2, r3, #5
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	4413      	add	r3, r2
 8001f88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	2308      	movs	r3, #8
 8001f90:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001f92:	78fa      	ldrb	r2, [r7, #3]
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	4613      	mov	r3, r2
 8001f98:	011b      	lsls	r3, r3, #4
 8001f9a:	1a9b      	subs	r3, r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	334d      	adds	r3, #77	@ 0x4d
 8001fa2:	2206      	movs	r2, #6
 8001fa4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	78fa      	ldrb	r2, [r7, #3]
 8001fac:	4611      	mov	r1, r2
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f004 fa8b 	bl	80064ca <USB_HC_Halt>
 8001fb4:	e04e      	b.n	8002054 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	78fa      	ldrb	r2, [r7, #3]
 8001fbc:	4611      	mov	r1, r2
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f003 fcd9 	bl	8005976 <USB_ReadChInterrupts>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fce:	d11b      	bne.n	8002008 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001fd0:	78fb      	ldrb	r3, [r7, #3]
 8001fd2:	015a      	lsls	r2, r3, #5
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fdc:	461a      	mov	r2, r3
 8001fde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fe2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001fe4:	78fa      	ldrb	r2, [r7, #3]
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	011b      	lsls	r3, r3, #4
 8001fec:	1a9b      	subs	r3, r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	334d      	adds	r3, #77	@ 0x4d
 8001ff4:	2209      	movs	r2, #9
 8001ff6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	78fa      	ldrb	r2, [r7, #3]
 8001ffe:	4611      	mov	r1, r2
 8002000:	4618      	mov	r0, r3
 8002002:	f004 fa62 	bl	80064ca <USB_HC_Halt>
 8002006:	e025      	b.n	8002054 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	78fa      	ldrb	r2, [r7, #3]
 800200e:	4611      	mov	r1, r2
 8002010:	4618      	mov	r0, r3
 8002012:	f003 fcb0 	bl	8005976 <USB_ReadChInterrupts>
 8002016:	4603      	mov	r3, r0
 8002018:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800201c:	2b80      	cmp	r3, #128	@ 0x80
 800201e:	d119      	bne.n	8002054 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002020:	78fb      	ldrb	r3, [r7, #3]
 8002022:	015a      	lsls	r2, r3, #5
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	4413      	add	r3, r2
 8002028:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800202c:	461a      	mov	r2, r3
 800202e:	2380      	movs	r3, #128	@ 0x80
 8002030:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002032:	78fa      	ldrb	r2, [r7, #3]
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	4613      	mov	r3, r2
 8002038:	011b      	lsls	r3, r3, #4
 800203a:	1a9b      	subs	r3, r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	440b      	add	r3, r1
 8002040:	334d      	adds	r3, #77	@ 0x4d
 8002042:	2207      	movs	r2, #7
 8002044:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	78fa      	ldrb	r2, [r7, #3]
 800204c:	4611      	mov	r1, r2
 800204e:	4618      	mov	r0, r3
 8002050:	f004 fa3b 	bl	80064ca <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	78fa      	ldrb	r2, [r7, #3]
 800205a:	4611      	mov	r1, r2
 800205c:	4618      	mov	r0, r3
 800205e:	f003 fc8a 	bl	8005976 <USB_ReadChInterrupts>
 8002062:	4603      	mov	r3, r0
 8002064:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002068:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800206c:	d112      	bne.n	8002094 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	78fa      	ldrb	r2, [r7, #3]
 8002074:	4611      	mov	r1, r2
 8002076:	4618      	mov	r0, r3
 8002078:	f004 fa27 	bl	80064ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800207c:	78fb      	ldrb	r3, [r7, #3]
 800207e:	015a      	lsls	r2, r3, #5
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	4413      	add	r3, r2
 8002084:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002088:	461a      	mov	r2, r3
 800208a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800208e:	6093      	str	r3, [r2, #8]
 8002090:	f000 bd75 	b.w	8002b7e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	78fa      	ldrb	r2, [r7, #3]
 800209a:	4611      	mov	r1, r2
 800209c:	4618      	mov	r0, r3
 800209e:	f003 fc6a 	bl	8005976 <USB_ReadChInterrupts>
 80020a2:	4603      	mov	r3, r0
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	f040 8128 	bne.w	80022fe <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80020ae:	78fb      	ldrb	r3, [r7, #3]
 80020b0:	015a      	lsls	r2, r3, #5
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	4413      	add	r3, r2
 80020b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020ba:	461a      	mov	r2, r3
 80020bc:	2320      	movs	r3, #32
 80020be:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80020c0:	78fa      	ldrb	r2, [r7, #3]
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	4613      	mov	r3, r2
 80020c6:	011b      	lsls	r3, r3, #4
 80020c8:	1a9b      	subs	r3, r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	331b      	adds	r3, #27
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d119      	bne.n	800210a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80020d6:	78fa      	ldrb	r2, [r7, #3]
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	011b      	lsls	r3, r3, #4
 80020de:	1a9b      	subs	r3, r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	331b      	adds	r3, #27
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80020ea:	78fb      	ldrb	r3, [r7, #3]
 80020ec:	015a      	lsls	r2, r3, #5
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4413      	add	r3, r2
 80020f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	78fa      	ldrb	r2, [r7, #3]
 80020fa:	0151      	lsls	r1, r2, #5
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	440a      	add	r2, r1
 8002100:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002104:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002108:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	799b      	ldrb	r3, [r3, #6]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d01b      	beq.n	800214a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002112:	78fa      	ldrb	r2, [r7, #3]
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	011b      	lsls	r3, r3, #4
 800211a:	1a9b      	subs	r3, r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	440b      	add	r3, r1
 8002120:	3330      	adds	r3, #48	@ 0x30
 8002122:	6819      	ldr	r1, [r3, #0]
 8002124:	78fb      	ldrb	r3, [r7, #3]
 8002126:	015a      	lsls	r2, r3, #5
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	4413      	add	r3, r2
 800212c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002136:	78fa      	ldrb	r2, [r7, #3]
 8002138:	1ac9      	subs	r1, r1, r3
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	4613      	mov	r3, r2
 800213e:	011b      	lsls	r3, r3, #4
 8002140:	1a9b      	subs	r3, r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4403      	add	r3, r0
 8002146:	3338      	adds	r3, #56	@ 0x38
 8002148:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800214a:	78fa      	ldrb	r2, [r7, #3]
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	011b      	lsls	r3, r3, #4
 8002152:	1a9b      	subs	r3, r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	440b      	add	r3, r1
 8002158:	334d      	adds	r3, #77	@ 0x4d
 800215a:	2201      	movs	r2, #1
 800215c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800215e:	78fa      	ldrb	r2, [r7, #3]
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	011b      	lsls	r3, r3, #4
 8002166:	1a9b      	subs	r3, r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	440b      	add	r3, r1
 800216c:	3344      	adds	r3, #68	@ 0x44
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002172:	78fb      	ldrb	r3, [r7, #3]
 8002174:	015a      	lsls	r2, r3, #5
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4413      	add	r3, r2
 800217a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800217e:	461a      	mov	r2, r3
 8002180:	2301      	movs	r3, #1
 8002182:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002184:	78fa      	ldrb	r2, [r7, #3]
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	4613      	mov	r3, r2
 800218a:	011b      	lsls	r3, r3, #4
 800218c:	1a9b      	subs	r3, r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	3326      	adds	r3, #38	@ 0x26
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00a      	beq.n	80021b0 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800219a:	78fa      	ldrb	r2, [r7, #3]
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	011b      	lsls	r3, r3, #4
 80021a2:	1a9b      	subs	r3, r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	440b      	add	r3, r1
 80021a8:	3326      	adds	r3, #38	@ 0x26
 80021aa:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d110      	bne.n	80021d2 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	78fa      	ldrb	r2, [r7, #3]
 80021b6:	4611      	mov	r1, r2
 80021b8:	4618      	mov	r0, r3
 80021ba:	f004 f986 	bl	80064ca <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80021be:	78fb      	ldrb	r3, [r7, #3]
 80021c0:	015a      	lsls	r2, r3, #5
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4413      	add	r3, r2
 80021c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021ca:	461a      	mov	r2, r3
 80021cc:	2310      	movs	r3, #16
 80021ce:	6093      	str	r3, [r2, #8]
 80021d0:	e03d      	b.n	800224e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80021d2:	78fa      	ldrb	r2, [r7, #3]
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	4613      	mov	r3, r2
 80021d8:	011b      	lsls	r3, r3, #4
 80021da:	1a9b      	subs	r3, r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	440b      	add	r3, r1
 80021e0:	3326      	adds	r3, #38	@ 0x26
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b03      	cmp	r3, #3
 80021e6:	d00a      	beq.n	80021fe <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80021e8:	78fa      	ldrb	r2, [r7, #3]
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	4613      	mov	r3, r2
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	1a9b      	subs	r3, r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	3326      	adds	r3, #38	@ 0x26
 80021f8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d127      	bne.n	800224e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80021fe:	78fb      	ldrb	r3, [r7, #3]
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4413      	add	r3, r2
 8002206:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	78fa      	ldrb	r2, [r7, #3]
 800220e:	0151      	lsls	r1, r2, #5
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	440a      	add	r2, r1
 8002214:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002218:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800221c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800221e:	78fa      	ldrb	r2, [r7, #3]
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	011b      	lsls	r3, r3, #4
 8002226:	1a9b      	subs	r3, r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	440b      	add	r3, r1
 800222c:	334c      	adds	r3, #76	@ 0x4c
 800222e:	2201      	movs	r2, #1
 8002230:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002232:	78fa      	ldrb	r2, [r7, #3]
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	4613      	mov	r3, r2
 8002238:	011b      	lsls	r3, r3, #4
 800223a:	1a9b      	subs	r3, r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	440b      	add	r3, r1
 8002240:	334c      	adds	r3, #76	@ 0x4c
 8002242:	781a      	ldrb	r2, [r3, #0]
 8002244:	78fb      	ldrb	r3, [r7, #3]
 8002246:	4619      	mov	r1, r3
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f006 fc9d 	bl	8008b88 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	799b      	ldrb	r3, [r3, #6]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d13b      	bne.n	80022ce <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002256:	78fa      	ldrb	r2, [r7, #3]
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	011b      	lsls	r3, r3, #4
 800225e:	1a9b      	subs	r3, r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	440b      	add	r3, r1
 8002264:	3338      	adds	r3, #56	@ 0x38
 8002266:	6819      	ldr	r1, [r3, #0]
 8002268:	78fa      	ldrb	r2, [r7, #3]
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	011b      	lsls	r3, r3, #4
 8002270:	1a9b      	subs	r3, r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4403      	add	r3, r0
 8002276:	3328      	adds	r3, #40	@ 0x28
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	440b      	add	r3, r1
 800227c:	1e59      	subs	r1, r3, #1
 800227e:	78fa      	ldrb	r2, [r7, #3]
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	4613      	mov	r3, r2
 8002284:	011b      	lsls	r3, r3, #4
 8002286:	1a9b      	subs	r3, r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4403      	add	r3, r0
 800228c:	3328      	adds	r3, #40	@ 0x28
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	fbb1 f3f3 	udiv	r3, r1, r3
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 8470 	beq.w	8002b7e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800229e:	78fa      	ldrb	r2, [r7, #3]
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	011b      	lsls	r3, r3, #4
 80022a6:	1a9b      	subs	r3, r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	440b      	add	r3, r1
 80022ac:	333c      	adds	r3, #60	@ 0x3c
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	78fa      	ldrb	r2, [r7, #3]
 80022b2:	f083 0301 	eor.w	r3, r3, #1
 80022b6:	b2d8      	uxtb	r0, r3
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	011b      	lsls	r3, r3, #4
 80022be:	1a9b      	subs	r3, r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	440b      	add	r3, r1
 80022c4:	333c      	adds	r3, #60	@ 0x3c
 80022c6:	4602      	mov	r2, r0
 80022c8:	701a      	strb	r2, [r3, #0]
 80022ca:	f000 bc58 	b.w	8002b7e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80022ce:	78fa      	ldrb	r2, [r7, #3]
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	011b      	lsls	r3, r3, #4
 80022d6:	1a9b      	subs	r3, r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	440b      	add	r3, r1
 80022dc:	333c      	adds	r3, #60	@ 0x3c
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	78fa      	ldrb	r2, [r7, #3]
 80022e2:	f083 0301 	eor.w	r3, r3, #1
 80022e6:	b2d8      	uxtb	r0, r3
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	011b      	lsls	r3, r3, #4
 80022ee:	1a9b      	subs	r3, r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	333c      	adds	r3, #60	@ 0x3c
 80022f6:	4602      	mov	r2, r0
 80022f8:	701a      	strb	r2, [r3, #0]
 80022fa:	f000 bc40 	b.w	8002b7e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	78fa      	ldrb	r2, [r7, #3]
 8002304:	4611      	mov	r1, r2
 8002306:	4618      	mov	r0, r3
 8002308:	f003 fb35 	bl	8005976 <USB_ReadChInterrupts>
 800230c:	4603      	mov	r3, r0
 800230e:	f003 0320 	and.w	r3, r3, #32
 8002312:	2b20      	cmp	r3, #32
 8002314:	d131      	bne.n	800237a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002316:	78fb      	ldrb	r3, [r7, #3]
 8002318:	015a      	lsls	r2, r3, #5
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4413      	add	r3, r2
 800231e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002322:	461a      	mov	r2, r3
 8002324:	2320      	movs	r3, #32
 8002326:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002328:	78fa      	ldrb	r2, [r7, #3]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	1a9b      	subs	r3, r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	331a      	adds	r3, #26
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b01      	cmp	r3, #1
 800233c:	f040 841f 	bne.w	8002b7e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002340:	78fa      	ldrb	r2, [r7, #3]
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	4613      	mov	r3, r2
 8002346:	011b      	lsls	r3, r3, #4
 8002348:	1a9b      	subs	r3, r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	331b      	adds	r3, #27
 8002350:	2201      	movs	r2, #1
 8002352:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002354:	78fa      	ldrb	r2, [r7, #3]
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	1a9b      	subs	r3, r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	334d      	adds	r3, #77	@ 0x4d
 8002364:	2203      	movs	r2, #3
 8002366:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	78fa      	ldrb	r2, [r7, #3]
 800236e:	4611      	mov	r1, r2
 8002370:	4618      	mov	r0, r3
 8002372:	f004 f8aa 	bl	80064ca <USB_HC_Halt>
 8002376:	f000 bc02 	b.w	8002b7e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	78fa      	ldrb	r2, [r7, #3]
 8002380:	4611      	mov	r1, r2
 8002382:	4618      	mov	r0, r3
 8002384:	f003 faf7 	bl	8005976 <USB_ReadChInterrupts>
 8002388:	4603      	mov	r3, r0
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b02      	cmp	r3, #2
 8002390:	f040 8305 	bne.w	800299e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	015a      	lsls	r2, r3, #5
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4413      	add	r3, r2
 800239c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023a0:	461a      	mov	r2, r3
 80023a2:	2302      	movs	r3, #2
 80023a4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80023a6:	78fa      	ldrb	r2, [r7, #3]
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	1a9b      	subs	r3, r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	440b      	add	r3, r1
 80023b4:	334d      	adds	r3, #77	@ 0x4d
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d114      	bne.n	80023e6 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023bc:	78fa      	ldrb	r2, [r7, #3]
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	011b      	lsls	r3, r3, #4
 80023c4:	1a9b      	subs	r3, r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	334d      	adds	r3, #77	@ 0x4d
 80023cc:	2202      	movs	r2, #2
 80023ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80023d0:	78fa      	ldrb	r2, [r7, #3]
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	4613      	mov	r3, r2
 80023d6:	011b      	lsls	r3, r3, #4
 80023d8:	1a9b      	subs	r3, r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	334c      	adds	r3, #76	@ 0x4c
 80023e0:	2201      	movs	r2, #1
 80023e2:	701a      	strb	r2, [r3, #0]
 80023e4:	e2cc      	b.n	8002980 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80023e6:	78fa      	ldrb	r2, [r7, #3]
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	011b      	lsls	r3, r3, #4
 80023ee:	1a9b      	subs	r3, r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	440b      	add	r3, r1
 80023f4:	334d      	adds	r3, #77	@ 0x4d
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b06      	cmp	r3, #6
 80023fa:	d114      	bne.n	8002426 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023fc:	78fa      	ldrb	r2, [r7, #3]
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	1a9b      	subs	r3, r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	334d      	adds	r3, #77	@ 0x4d
 800240c:	2202      	movs	r2, #2
 800240e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002410:	78fa      	ldrb	r2, [r7, #3]
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	1a9b      	subs	r3, r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	334c      	adds	r3, #76	@ 0x4c
 8002420:	2205      	movs	r2, #5
 8002422:	701a      	strb	r2, [r3, #0]
 8002424:	e2ac      	b.n	8002980 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002426:	78fa      	ldrb	r2, [r7, #3]
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	4613      	mov	r3, r2
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	1a9b      	subs	r3, r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	440b      	add	r3, r1
 8002434:	334d      	adds	r3, #77	@ 0x4d
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b07      	cmp	r3, #7
 800243a:	d00b      	beq.n	8002454 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800243c:	78fa      	ldrb	r2, [r7, #3]
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	011b      	lsls	r3, r3, #4
 8002444:	1a9b      	subs	r3, r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	334d      	adds	r3, #77	@ 0x4d
 800244c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800244e:	2b09      	cmp	r3, #9
 8002450:	f040 80a6 	bne.w	80025a0 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002454:	78fa      	ldrb	r2, [r7, #3]
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	011b      	lsls	r3, r3, #4
 800245c:	1a9b      	subs	r3, r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	334d      	adds	r3, #77	@ 0x4d
 8002464:	2202      	movs	r2, #2
 8002466:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002468:	78fa      	ldrb	r2, [r7, #3]
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	4613      	mov	r3, r2
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	1a9b      	subs	r3, r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	440b      	add	r3, r1
 8002476:	3344      	adds	r3, #68	@ 0x44
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	1c59      	adds	r1, r3, #1
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	1a9b      	subs	r3, r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4403      	add	r3, r0
 8002488:	3344      	adds	r3, #68	@ 0x44
 800248a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800248c:	78fa      	ldrb	r2, [r7, #3]
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	4613      	mov	r3, r2
 8002492:	011b      	lsls	r3, r3, #4
 8002494:	1a9b      	subs	r3, r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	440b      	add	r3, r1
 800249a:	3344      	adds	r3, #68	@ 0x44
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d943      	bls.n	800252a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80024a2:	78fa      	ldrb	r2, [r7, #3]
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	011b      	lsls	r3, r3, #4
 80024aa:	1a9b      	subs	r3, r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	440b      	add	r3, r1
 80024b0:	3344      	adds	r3, #68	@ 0x44
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80024b6:	78fa      	ldrb	r2, [r7, #3]
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	4613      	mov	r3, r2
 80024bc:	011b      	lsls	r3, r3, #4
 80024be:	1a9b      	subs	r3, r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	440b      	add	r3, r1
 80024c4:	331a      	adds	r3, #26
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d123      	bne.n	8002514 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80024cc:	78fa      	ldrb	r2, [r7, #3]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	011b      	lsls	r3, r3, #4
 80024d4:	1a9b      	subs	r3, r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	331b      	adds	r3, #27
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80024e0:	78fa      	ldrb	r2, [r7, #3]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	1a9b      	subs	r3, r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	331c      	adds	r3, #28
 80024f0:	2200      	movs	r2, #0
 80024f2:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80024f4:	78fb      	ldrb	r3, [r7, #3]
 80024f6:	015a      	lsls	r2, r3, #5
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4413      	add	r3, r2
 80024fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	78fa      	ldrb	r2, [r7, #3]
 8002504:	0151      	lsls	r1, r2, #5
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	440a      	add	r2, r1
 800250a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800250e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002512:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002514:	78fa      	ldrb	r2, [r7, #3]
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	4613      	mov	r3, r2
 800251a:	011b      	lsls	r3, r3, #4
 800251c:	1a9b      	subs	r3, r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	334c      	adds	r3, #76	@ 0x4c
 8002524:	2204      	movs	r2, #4
 8002526:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002528:	e229      	b.n	800297e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800252a:	78fa      	ldrb	r2, [r7, #3]
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	011b      	lsls	r3, r3, #4
 8002532:	1a9b      	subs	r3, r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	440b      	add	r3, r1
 8002538:	334c      	adds	r3, #76	@ 0x4c
 800253a:	2202      	movs	r2, #2
 800253c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800253e:	78fa      	ldrb	r2, [r7, #3]
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	011b      	lsls	r3, r3, #4
 8002546:	1a9b      	subs	r3, r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	440b      	add	r3, r1
 800254c:	3326      	adds	r3, #38	@ 0x26
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00b      	beq.n	800256c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002554:	78fa      	ldrb	r2, [r7, #3]
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	4613      	mov	r3, r2
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	1a9b      	subs	r3, r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	3326      	adds	r3, #38	@ 0x26
 8002564:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002566:	2b02      	cmp	r3, #2
 8002568:	f040 8209 	bne.w	800297e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800256c:	78fb      	ldrb	r3, [r7, #3]
 800256e:	015a      	lsls	r2, r3, #5
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4413      	add	r3, r2
 8002574:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002582:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800258a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800258c:	78fb      	ldrb	r3, [r7, #3]
 800258e:	015a      	lsls	r2, r3, #5
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	4413      	add	r3, r2
 8002594:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002598:	461a      	mov	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800259e:	e1ee      	b.n	800297e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80025a0:	78fa      	ldrb	r2, [r7, #3]
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	011b      	lsls	r3, r3, #4
 80025a8:	1a9b      	subs	r3, r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	334d      	adds	r3, #77	@ 0x4d
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b05      	cmp	r3, #5
 80025b4:	f040 80c8 	bne.w	8002748 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80025b8:	78fa      	ldrb	r2, [r7, #3]
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	1a9b      	subs	r3, r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	334d      	adds	r3, #77	@ 0x4d
 80025c8:	2202      	movs	r2, #2
 80025ca:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80025cc:	78fa      	ldrb	r2, [r7, #3]
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	1a9b      	subs	r3, r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	331b      	adds	r3, #27
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	f040 81ce 	bne.w	8002980 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80025e4:	78fa      	ldrb	r2, [r7, #3]
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	4613      	mov	r3, r2
 80025ea:	011b      	lsls	r3, r3, #4
 80025ec:	1a9b      	subs	r3, r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	3326      	adds	r3, #38	@ 0x26
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b03      	cmp	r3, #3
 80025f8:	d16b      	bne.n	80026d2 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80025fa:	78fa      	ldrb	r2, [r7, #3]
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	4613      	mov	r3, r2
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	1a9b      	subs	r3, r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	440b      	add	r3, r1
 8002608:	3348      	adds	r3, #72	@ 0x48
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	1c59      	adds	r1, r3, #1
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	011b      	lsls	r3, r3, #4
 8002614:	1a9b      	subs	r3, r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4403      	add	r3, r0
 800261a:	3348      	adds	r3, #72	@ 0x48
 800261c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800261e:	78fa      	ldrb	r2, [r7, #3]
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	4613      	mov	r3, r2
 8002624:	011b      	lsls	r3, r3, #4
 8002626:	1a9b      	subs	r3, r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	440b      	add	r3, r1
 800262c:	3348      	adds	r3, #72	@ 0x48
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2b02      	cmp	r3, #2
 8002632:	d943      	bls.n	80026bc <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002634:	78fa      	ldrb	r2, [r7, #3]
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	1a9b      	subs	r3, r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	3348      	adds	r3, #72	@ 0x48
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002648:	78fa      	ldrb	r2, [r7, #3]
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	011b      	lsls	r3, r3, #4
 8002650:	1a9b      	subs	r3, r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	440b      	add	r3, r1
 8002656:	331b      	adds	r3, #27
 8002658:	2200      	movs	r2, #0
 800265a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800265c:	78fa      	ldrb	r2, [r7, #3]
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	1a9b      	subs	r3, r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	3344      	adds	r3, #68	@ 0x44
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2b02      	cmp	r3, #2
 8002670:	d809      	bhi.n	8002686 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002672:	78fa      	ldrb	r2, [r7, #3]
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	4613      	mov	r3, r2
 8002678:	011b      	lsls	r3, r3, #4
 800267a:	1a9b      	subs	r3, r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	440b      	add	r3, r1
 8002680:	331c      	adds	r3, #28
 8002682:	2201      	movs	r2, #1
 8002684:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002686:	78fb      	ldrb	r3, [r7, #3]
 8002688:	015a      	lsls	r2, r3, #5
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	4413      	add	r3, r2
 800268e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	78fa      	ldrb	r2, [r7, #3]
 8002696:	0151      	lsls	r1, r2, #5
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	440a      	add	r2, r1
 800269c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026a4:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80026a6:	78fa      	ldrb	r2, [r7, #3]
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	4613      	mov	r3, r2
 80026ac:	011b      	lsls	r3, r3, #4
 80026ae:	1a9b      	subs	r3, r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	440b      	add	r3, r1
 80026b4:	334c      	adds	r3, #76	@ 0x4c
 80026b6:	2204      	movs	r2, #4
 80026b8:	701a      	strb	r2, [r3, #0]
 80026ba:	e014      	b.n	80026e6 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026bc:	78fa      	ldrb	r2, [r7, #3]
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	011b      	lsls	r3, r3, #4
 80026c4:	1a9b      	subs	r3, r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	334c      	adds	r3, #76	@ 0x4c
 80026cc:	2202      	movs	r2, #2
 80026ce:	701a      	strb	r2, [r3, #0]
 80026d0:	e009      	b.n	80026e6 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026d2:	78fa      	ldrb	r2, [r7, #3]
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	4613      	mov	r3, r2
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	1a9b      	subs	r3, r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	440b      	add	r3, r1
 80026e0:	334c      	adds	r3, #76	@ 0x4c
 80026e2:	2202      	movs	r2, #2
 80026e4:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026e6:	78fa      	ldrb	r2, [r7, #3]
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	1a9b      	subs	r3, r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	3326      	adds	r3, #38	@ 0x26
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00b      	beq.n	8002714 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80026fc:	78fa      	ldrb	r2, [r7, #3]
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	4613      	mov	r3, r2
 8002702:	011b      	lsls	r3, r3, #4
 8002704:	1a9b      	subs	r3, r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	3326      	adds	r3, #38	@ 0x26
 800270c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800270e:	2b02      	cmp	r3, #2
 8002710:	f040 8136 	bne.w	8002980 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002714:	78fb      	ldrb	r3, [r7, #3]
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	4413      	add	r3, r2
 800271c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800272a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002732:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002734:	78fb      	ldrb	r3, [r7, #3]
 8002736:	015a      	lsls	r2, r3, #5
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	4413      	add	r3, r2
 800273c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002740:	461a      	mov	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	e11b      	b.n	8002980 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002748:	78fa      	ldrb	r2, [r7, #3]
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	4613      	mov	r3, r2
 800274e:	011b      	lsls	r3, r3, #4
 8002750:	1a9b      	subs	r3, r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	334d      	adds	r3, #77	@ 0x4d
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b03      	cmp	r3, #3
 800275c:	f040 8081 	bne.w	8002862 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002760:	78fa      	ldrb	r2, [r7, #3]
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	011b      	lsls	r3, r3, #4
 8002768:	1a9b      	subs	r3, r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	334d      	adds	r3, #77	@ 0x4d
 8002770:	2202      	movs	r2, #2
 8002772:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002774:	78fa      	ldrb	r2, [r7, #3]
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	1a9b      	subs	r3, r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	331b      	adds	r3, #27
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b01      	cmp	r3, #1
 8002788:	f040 80fa 	bne.w	8002980 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800278c:	78fa      	ldrb	r2, [r7, #3]
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	4613      	mov	r3, r2
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	1a9b      	subs	r3, r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	334c      	adds	r3, #76	@ 0x4c
 800279c:	2202      	movs	r2, #2
 800279e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80027a0:	78fb      	ldrb	r3, [r7, #3]
 80027a2:	015a      	lsls	r2, r3, #5
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4413      	add	r3, r2
 80027a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	78fa      	ldrb	r2, [r7, #3]
 80027b0:	0151      	lsls	r1, r2, #5
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	440a      	add	r2, r1
 80027b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027be:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80027c0:	78fb      	ldrb	r3, [r7, #3]
 80027c2:	015a      	lsls	r2, r3, #5
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	4413      	add	r3, r2
 80027c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	78fa      	ldrb	r2, [r7, #3]
 80027d0:	0151      	lsls	r1, r2, #5
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	440a      	add	r2, r1
 80027d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027de:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80027e0:	78fb      	ldrb	r3, [r7, #3]
 80027e2:	015a      	lsls	r2, r3, #5
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	4413      	add	r3, r2
 80027e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	78fa      	ldrb	r2, [r7, #3]
 80027f0:	0151      	lsls	r1, r2, #5
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	440a      	add	r2, r1
 80027f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027fa:	f023 0320 	bic.w	r3, r3, #32
 80027fe:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002800:	78fa      	ldrb	r2, [r7, #3]
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	4613      	mov	r3, r2
 8002806:	011b      	lsls	r3, r3, #4
 8002808:	1a9b      	subs	r3, r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	3326      	adds	r3, #38	@ 0x26
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00b      	beq.n	800282e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002816:	78fa      	ldrb	r2, [r7, #3]
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	4613      	mov	r3, r2
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	1a9b      	subs	r3, r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	440b      	add	r3, r1
 8002824:	3326      	adds	r3, #38	@ 0x26
 8002826:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002828:	2b02      	cmp	r3, #2
 800282a:	f040 80a9 	bne.w	8002980 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800282e:	78fb      	ldrb	r3, [r7, #3]
 8002830:	015a      	lsls	r2, r3, #5
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	4413      	add	r3, r2
 8002836:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002844:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800284c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800284e:	78fb      	ldrb	r3, [r7, #3]
 8002850:	015a      	lsls	r2, r3, #5
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	4413      	add	r3, r2
 8002856:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800285a:	461a      	mov	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	e08e      	b.n	8002980 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002862:	78fa      	ldrb	r2, [r7, #3]
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	011b      	lsls	r3, r3, #4
 800286a:	1a9b      	subs	r3, r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	440b      	add	r3, r1
 8002870:	334d      	adds	r3, #77	@ 0x4d
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b04      	cmp	r3, #4
 8002876:	d143      	bne.n	8002900 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002878:	78fa      	ldrb	r2, [r7, #3]
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	4613      	mov	r3, r2
 800287e:	011b      	lsls	r3, r3, #4
 8002880:	1a9b      	subs	r3, r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	334d      	adds	r3, #77	@ 0x4d
 8002888:	2202      	movs	r2, #2
 800288a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800288c:	78fa      	ldrb	r2, [r7, #3]
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	1a9b      	subs	r3, r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	334c      	adds	r3, #76	@ 0x4c
 800289c:	2202      	movs	r2, #2
 800289e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028a0:	78fa      	ldrb	r2, [r7, #3]
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	4613      	mov	r3, r2
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	1a9b      	subs	r3, r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	3326      	adds	r3, #38	@ 0x26
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00a      	beq.n	80028cc <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80028b6:	78fa      	ldrb	r2, [r7, #3]
 80028b8:	6879      	ldr	r1, [r7, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	011b      	lsls	r3, r3, #4
 80028be:	1a9b      	subs	r3, r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	440b      	add	r3, r1
 80028c4:	3326      	adds	r3, #38	@ 0x26
 80028c6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d159      	bne.n	8002980 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80028cc:	78fb      	ldrb	r3, [r7, #3]
 80028ce:	015a      	lsls	r2, r3, #5
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80028e2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80028ea:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80028ec:	78fb      	ldrb	r3, [r7, #3]
 80028ee:	015a      	lsls	r2, r3, #5
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	4413      	add	r3, r2
 80028f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028f8:	461a      	mov	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	e03f      	b.n	8002980 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002900:	78fa      	ldrb	r2, [r7, #3]
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	011b      	lsls	r3, r3, #4
 8002908:	1a9b      	subs	r3, r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	334d      	adds	r3, #77	@ 0x4d
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b08      	cmp	r3, #8
 8002914:	d126      	bne.n	8002964 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002916:	78fa      	ldrb	r2, [r7, #3]
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	4613      	mov	r3, r2
 800291c:	011b      	lsls	r3, r3, #4
 800291e:	1a9b      	subs	r3, r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	440b      	add	r3, r1
 8002924:	334d      	adds	r3, #77	@ 0x4d
 8002926:	2202      	movs	r2, #2
 8002928:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800292a:	78fa      	ldrb	r2, [r7, #3]
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	011b      	lsls	r3, r3, #4
 8002932:	1a9b      	subs	r3, r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	440b      	add	r3, r1
 8002938:	3344      	adds	r3, #68	@ 0x44
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	1c59      	adds	r1, r3, #1
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	4613      	mov	r3, r2
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	1a9b      	subs	r3, r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4403      	add	r3, r0
 800294a:	3344      	adds	r3, #68	@ 0x44
 800294c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800294e:	78fa      	ldrb	r2, [r7, #3]
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	4613      	mov	r3, r2
 8002954:	011b      	lsls	r3, r3, #4
 8002956:	1a9b      	subs	r3, r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	440b      	add	r3, r1
 800295c:	334c      	adds	r3, #76	@ 0x4c
 800295e:	2204      	movs	r2, #4
 8002960:	701a      	strb	r2, [r3, #0]
 8002962:	e00d      	b.n	8002980 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002964:	78fa      	ldrb	r2, [r7, #3]
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	1a9b      	subs	r3, r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	334d      	adds	r3, #77	@ 0x4d
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b02      	cmp	r3, #2
 8002978:	f000 8100 	beq.w	8002b7c <HCD_HC_IN_IRQHandler+0xcca>
 800297c:	e000      	b.n	8002980 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800297e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002980:	78fa      	ldrb	r2, [r7, #3]
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	1a9b      	subs	r3, r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	334c      	adds	r3, #76	@ 0x4c
 8002990:	781a      	ldrb	r2, [r3, #0]
 8002992:	78fb      	ldrb	r3, [r7, #3]
 8002994:	4619      	mov	r1, r3
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f006 f8f6 	bl	8008b88 <HAL_HCD_HC_NotifyURBChange_Callback>
 800299c:	e0ef      	b.n	8002b7e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	78fa      	ldrb	r2, [r7, #3]
 80029a4:	4611      	mov	r1, r2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f002 ffe5 	bl	8005976 <USB_ReadChInterrupts>
 80029ac:	4603      	mov	r3, r0
 80029ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029b2:	2b40      	cmp	r3, #64	@ 0x40
 80029b4:	d12f      	bne.n	8002a16 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80029b6:	78fb      	ldrb	r3, [r7, #3]
 80029b8:	015a      	lsls	r2, r3, #5
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	4413      	add	r3, r2
 80029be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029c2:	461a      	mov	r2, r3
 80029c4:	2340      	movs	r3, #64	@ 0x40
 80029c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80029c8:	78fa      	ldrb	r2, [r7, #3]
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	4613      	mov	r3, r2
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	1a9b      	subs	r3, r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	334d      	adds	r3, #77	@ 0x4d
 80029d8:	2205      	movs	r2, #5
 80029da:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80029dc:	78fa      	ldrb	r2, [r7, #3]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	011b      	lsls	r3, r3, #4
 80029e4:	1a9b      	subs	r3, r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	331a      	adds	r3, #26
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d109      	bne.n	8002a06 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80029f2:	78fa      	ldrb	r2, [r7, #3]
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	4613      	mov	r3, r2
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	1a9b      	subs	r3, r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	440b      	add	r3, r1
 8002a00:	3344      	adds	r3, #68	@ 0x44
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	78fa      	ldrb	r2, [r7, #3]
 8002a0c:	4611      	mov	r1, r2
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f003 fd5b 	bl	80064ca <USB_HC_Halt>
 8002a14:	e0b3      	b.n	8002b7e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	78fa      	ldrb	r2, [r7, #3]
 8002a1c:	4611      	mov	r1, r2
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f002 ffa9 	bl	8005976 <USB_ReadChInterrupts>
 8002a24:	4603      	mov	r3, r0
 8002a26:	f003 0310 	and.w	r3, r3, #16
 8002a2a:	2b10      	cmp	r3, #16
 8002a2c:	f040 80a7 	bne.w	8002b7e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002a30:	78fa      	ldrb	r2, [r7, #3]
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	4613      	mov	r3, r2
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	1a9b      	subs	r3, r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	3326      	adds	r3, #38	@ 0x26
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b03      	cmp	r3, #3
 8002a44:	d11b      	bne.n	8002a7e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a46:	78fa      	ldrb	r2, [r7, #3]
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	011b      	lsls	r3, r3, #4
 8002a4e:	1a9b      	subs	r3, r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	440b      	add	r3, r1
 8002a54:	3344      	adds	r3, #68	@ 0x44
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002a5a:	78fa      	ldrb	r2, [r7, #3]
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	011b      	lsls	r3, r3, #4
 8002a62:	1a9b      	subs	r3, r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	440b      	add	r3, r1
 8002a68:	334d      	adds	r3, #77	@ 0x4d
 8002a6a:	2204      	movs	r2, #4
 8002a6c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	78fa      	ldrb	r2, [r7, #3]
 8002a74:	4611      	mov	r1, r2
 8002a76:	4618      	mov	r0, r3
 8002a78:	f003 fd27 	bl	80064ca <USB_HC_Halt>
 8002a7c:	e03f      	b.n	8002afe <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a7e:	78fa      	ldrb	r2, [r7, #3]
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	4613      	mov	r3, r2
 8002a84:	011b      	lsls	r3, r3, #4
 8002a86:	1a9b      	subs	r3, r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	3326      	adds	r3, #38	@ 0x26
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00a      	beq.n	8002aaa <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a94:	78fa      	ldrb	r2, [r7, #3]
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	1a9b      	subs	r3, r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	3326      	adds	r3, #38	@ 0x26
 8002aa4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d129      	bne.n	8002afe <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002aaa:	78fa      	ldrb	r2, [r7, #3]
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	011b      	lsls	r3, r3, #4
 8002ab2:	1a9b      	subs	r3, r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	440b      	add	r3, r1
 8002ab8:	3344      	adds	r3, #68	@ 0x44
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	799b      	ldrb	r3, [r3, #6]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00a      	beq.n	8002adc <HCD_HC_IN_IRQHandler+0xc2a>
 8002ac6:	78fa      	ldrb	r2, [r7, #3]
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	011b      	lsls	r3, r3, #4
 8002ace:	1a9b      	subs	r3, r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	331b      	adds	r3, #27
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d110      	bne.n	8002afe <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002adc:	78fa      	ldrb	r2, [r7, #3]
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	1a9b      	subs	r3, r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	334d      	adds	r3, #77	@ 0x4d
 8002aec:	2204      	movs	r2, #4
 8002aee:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	78fa      	ldrb	r2, [r7, #3]
 8002af6:	4611      	mov	r1, r2
 8002af8:	4618      	mov	r0, r3
 8002afa:	f003 fce6 	bl	80064ca <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002afe:	78fa      	ldrb	r2, [r7, #3]
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	4613      	mov	r3, r2
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	1a9b      	subs	r3, r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	331b      	adds	r3, #27
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d129      	bne.n	8002b68 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002b14:	78fa      	ldrb	r2, [r7, #3]
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	1a9b      	subs	r3, r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	331b      	adds	r3, #27
 8002b24:	2200      	movs	r2, #0
 8002b26:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002b28:	78fb      	ldrb	r3, [r7, #3]
 8002b2a:	015a      	lsls	r2, r3, #5
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	4413      	add	r3, r2
 8002b30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	78fa      	ldrb	r2, [r7, #3]
 8002b38:	0151      	lsls	r1, r2, #5
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	440a      	add	r2, r1
 8002b3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b46:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002b48:	78fb      	ldrb	r3, [r7, #3]
 8002b4a:	015a      	lsls	r2, r3, #5
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	78fa      	ldrb	r2, [r7, #3]
 8002b58:	0151      	lsls	r1, r2, #5
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	440a      	add	r2, r1
 8002b5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b62:	f043 0320 	orr.w	r3, r3, #32
 8002b66:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002b68:	78fb      	ldrb	r3, [r7, #3]
 8002b6a:	015a      	lsls	r2, r3, #5
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b74:	461a      	mov	r2, r3
 8002b76:	2310      	movs	r3, #16
 8002b78:	6093      	str	r3, [r2, #8]
 8002b7a:	e000      	b.n	8002b7e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002b7c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	78fa      	ldrb	r2, [r7, #3]
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f002 fee7 	bl	8005976 <USB_ReadChInterrupts>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	f003 0304 	and.w	r3, r3, #4
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d11b      	bne.n	8002bea <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002bb2:	78fb      	ldrb	r3, [r7, #3]
 8002bb4:	015a      	lsls	r2, r3, #5
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	4413      	add	r3, r2
 8002bba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	2304      	movs	r3, #4
 8002bc2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002bc4:	78fa      	ldrb	r2, [r7, #3]
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	334d      	adds	r3, #77	@ 0x4d
 8002bd4:	2207      	movs	r2, #7
 8002bd6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	78fa      	ldrb	r2, [r7, #3]
 8002bde:	4611      	mov	r1, r2
 8002be0:	4618      	mov	r0, r3
 8002be2:	f003 fc72 	bl	80064ca <USB_HC_Halt>
 8002be6:	f000 bc89 	b.w	80034fc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	78fa      	ldrb	r2, [r7, #3]
 8002bf0:	4611      	mov	r1, r2
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f002 febf 	bl	8005976 <USB_ReadChInterrupts>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	f003 0320 	and.w	r3, r3, #32
 8002bfe:	2b20      	cmp	r3, #32
 8002c00:	f040 8082 	bne.w	8002d08 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002c04:	78fb      	ldrb	r3, [r7, #3]
 8002c06:	015a      	lsls	r2, r3, #5
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c10:	461a      	mov	r2, r3
 8002c12:	2320      	movs	r3, #32
 8002c14:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002c16:	78fa      	ldrb	r2, [r7, #3]
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	011b      	lsls	r3, r3, #4
 8002c1e:	1a9b      	subs	r3, r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	440b      	add	r3, r1
 8002c24:	3319      	adds	r3, #25
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d124      	bne.n	8002c76 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002c2c:	78fa      	ldrb	r2, [r7, #3]
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	011b      	lsls	r3, r3, #4
 8002c34:	1a9b      	subs	r3, r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	3319      	adds	r3, #25
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c40:	78fa      	ldrb	r2, [r7, #3]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	334c      	adds	r3, #76	@ 0x4c
 8002c50:	2202      	movs	r2, #2
 8002c52:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002c54:	78fa      	ldrb	r2, [r7, #3]
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	1a9b      	subs	r3, r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	334d      	adds	r3, #77	@ 0x4d
 8002c64:	2203      	movs	r2, #3
 8002c66:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	78fa      	ldrb	r2, [r7, #3]
 8002c6e:	4611      	mov	r1, r2
 8002c70:	4618      	mov	r0, r3
 8002c72:	f003 fc2a 	bl	80064ca <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002c76:	78fa      	ldrb	r2, [r7, #3]
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	011b      	lsls	r3, r3, #4
 8002c7e:	1a9b      	subs	r3, r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	440b      	add	r3, r1
 8002c84:	331a      	adds	r3, #26
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	f040 8437 	bne.w	80034fc <HCD_HC_OUT_IRQHandler+0x978>
 8002c8e:	78fa      	ldrb	r2, [r7, #3]
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	4613      	mov	r3, r2
 8002c94:	011b      	lsls	r3, r3, #4
 8002c96:	1a9b      	subs	r3, r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	440b      	add	r3, r1
 8002c9c:	331b      	adds	r3, #27
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f040 842b 	bne.w	80034fc <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002ca6:	78fa      	ldrb	r2, [r7, #3]
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	4613      	mov	r3, r2
 8002cac:	011b      	lsls	r3, r3, #4
 8002cae:	1a9b      	subs	r3, r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	3326      	adds	r3, #38	@ 0x26
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d009      	beq.n	8002cd0 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002cbc:	78fa      	ldrb	r2, [r7, #3]
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	331b      	adds	r3, #27
 8002ccc:	2201      	movs	r2, #1
 8002cce:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	1a9b      	subs	r3, r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	334d      	adds	r3, #77	@ 0x4d
 8002ce0:	2203      	movs	r2, #3
 8002ce2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	78fa      	ldrb	r2, [r7, #3]
 8002cea:	4611      	mov	r1, r2
 8002cec:	4618      	mov	r0, r3
 8002cee:	f003 fbec 	bl	80064ca <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002cf2:	78fa      	ldrb	r2, [r7, #3]
 8002cf4:	6879      	ldr	r1, [r7, #4]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	011b      	lsls	r3, r3, #4
 8002cfa:	1a9b      	subs	r3, r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	440b      	add	r3, r1
 8002d00:	3344      	adds	r3, #68	@ 0x44
 8002d02:	2200      	movs	r2, #0
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	e3f9      	b.n	80034fc <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	78fa      	ldrb	r2, [r7, #3]
 8002d0e:	4611      	mov	r1, r2
 8002d10:	4618      	mov	r0, r3
 8002d12:	f002 fe30 	bl	8005976 <USB_ReadChInterrupts>
 8002d16:	4603      	mov	r3, r0
 8002d18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d20:	d111      	bne.n	8002d46 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002d22:	78fb      	ldrb	r3, [r7, #3]
 8002d24:	015a      	lsls	r2, r3, #5
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	4413      	add	r3, r2
 8002d2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d2e:	461a      	mov	r2, r3
 8002d30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d34:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	78fa      	ldrb	r2, [r7, #3]
 8002d3c:	4611      	mov	r1, r2
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f003 fbc3 	bl	80064ca <USB_HC_Halt>
 8002d44:	e3da      	b.n	80034fc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	78fa      	ldrb	r2, [r7, #3]
 8002d4c:	4611      	mov	r1, r2
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f002 fe11 	bl	8005976 <USB_ReadChInterrupts>
 8002d54:	4603      	mov	r3, r0
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d168      	bne.n	8002e30 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002d5e:	78fa      	ldrb	r2, [r7, #3]
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	011b      	lsls	r3, r3, #4
 8002d66:	1a9b      	subs	r3, r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	440b      	add	r3, r1
 8002d6c:	3344      	adds	r3, #68	@ 0x44
 8002d6e:	2200      	movs	r2, #0
 8002d70:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	78fa      	ldrb	r2, [r7, #3]
 8002d78:	4611      	mov	r1, r2
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f002 fdfb 	bl	8005976 <USB_ReadChInterrupts>
 8002d80:	4603      	mov	r3, r0
 8002d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d86:	2b40      	cmp	r3, #64	@ 0x40
 8002d88:	d112      	bne.n	8002db0 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002d8a:	78fa      	ldrb	r2, [r7, #3]
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	1a9b      	subs	r3, r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	440b      	add	r3, r1
 8002d98:	3319      	adds	r3, #25
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d9e:	78fb      	ldrb	r3, [r7, #3]
 8002da0:	015a      	lsls	r2, r3, #5
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	4413      	add	r3, r2
 8002da6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002daa:	461a      	mov	r2, r3
 8002dac:	2340      	movs	r3, #64	@ 0x40
 8002dae:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002db0:	78fa      	ldrb	r2, [r7, #3]
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	4613      	mov	r3, r2
 8002db6:	011b      	lsls	r3, r3, #4
 8002db8:	1a9b      	subs	r3, r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	331b      	adds	r3, #27
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d019      	beq.n	8002dfa <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002dc6:	78fa      	ldrb	r2, [r7, #3]
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	1a9b      	subs	r3, r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	331b      	adds	r3, #27
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002dda:	78fb      	ldrb	r3, [r7, #3]
 8002ddc:	015a      	lsls	r2, r3, #5
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4413      	add	r3, r2
 8002de2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	78fa      	ldrb	r2, [r7, #3]
 8002dea:	0151      	lsls	r1, r2, #5
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	440a      	add	r2, r1
 8002df0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002df4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002df8:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002dfa:	78fb      	ldrb	r3, [r7, #3]
 8002dfc:	015a      	lsls	r2, r3, #5
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	4413      	add	r3, r2
 8002e02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e06:	461a      	mov	r2, r3
 8002e08:	2301      	movs	r3, #1
 8002e0a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002e0c:	78fa      	ldrb	r2, [r7, #3]
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	4613      	mov	r3, r2
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	1a9b      	subs	r3, r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	334d      	adds	r3, #77	@ 0x4d
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	78fa      	ldrb	r2, [r7, #3]
 8002e26:	4611      	mov	r1, r2
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f003 fb4e 	bl	80064ca <USB_HC_Halt>
 8002e2e:	e365      	b.n	80034fc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	78fa      	ldrb	r2, [r7, #3]
 8002e36:	4611      	mov	r1, r2
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f002 fd9c 	bl	8005976 <USB_ReadChInterrupts>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e44:	2b40      	cmp	r3, #64	@ 0x40
 8002e46:	d139      	bne.n	8002ebc <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002e48:	78fa      	ldrb	r2, [r7, #3]
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	011b      	lsls	r3, r3, #4
 8002e50:	1a9b      	subs	r3, r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	334d      	adds	r3, #77	@ 0x4d
 8002e58:	2205      	movs	r2, #5
 8002e5a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002e5c:	78fa      	ldrb	r2, [r7, #3]
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	4613      	mov	r3, r2
 8002e62:	011b      	lsls	r3, r3, #4
 8002e64:	1a9b      	subs	r3, r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	440b      	add	r3, r1
 8002e6a:	331a      	adds	r3, #26
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d109      	bne.n	8002e86 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002e72:	78fa      	ldrb	r2, [r7, #3]
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	4613      	mov	r3, r2
 8002e78:	011b      	lsls	r3, r3, #4
 8002e7a:	1a9b      	subs	r3, r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	440b      	add	r3, r1
 8002e80:	3319      	adds	r3, #25
 8002e82:	2201      	movs	r2, #1
 8002e84:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002e86:	78fa      	ldrb	r2, [r7, #3]
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	011b      	lsls	r3, r3, #4
 8002e8e:	1a9b      	subs	r3, r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	3344      	adds	r3, #68	@ 0x44
 8002e96:	2200      	movs	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	78fa      	ldrb	r2, [r7, #3]
 8002ea0:	4611      	mov	r1, r2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f003 fb11 	bl	80064ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002ea8:	78fb      	ldrb	r3, [r7, #3]
 8002eaa:	015a      	lsls	r2, r3, #5
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	4413      	add	r3, r2
 8002eb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	2340      	movs	r3, #64	@ 0x40
 8002eb8:	6093      	str	r3, [r2, #8]
 8002eba:	e31f      	b.n	80034fc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	78fa      	ldrb	r2, [r7, #3]
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f002 fd56 	bl	8005976 <USB_ReadChInterrupts>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	f003 0308 	and.w	r3, r3, #8
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	d11a      	bne.n	8002f0a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002ed4:	78fb      	ldrb	r3, [r7, #3]
 8002ed6:	015a      	lsls	r2, r3, #5
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	4413      	add	r3, r2
 8002edc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	2308      	movs	r3, #8
 8002ee4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002ee6:	78fa      	ldrb	r2, [r7, #3]
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	4613      	mov	r3, r2
 8002eec:	011b      	lsls	r3, r3, #4
 8002eee:	1a9b      	subs	r3, r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	334d      	adds	r3, #77	@ 0x4d
 8002ef6:	2206      	movs	r2, #6
 8002ef8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	78fa      	ldrb	r2, [r7, #3]
 8002f00:	4611      	mov	r1, r2
 8002f02:	4618      	mov	r0, r3
 8002f04:	f003 fae1 	bl	80064ca <USB_HC_Halt>
 8002f08:	e2f8      	b.n	80034fc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	78fa      	ldrb	r2, [r7, #3]
 8002f10:	4611      	mov	r1, r2
 8002f12:	4618      	mov	r0, r3
 8002f14:	f002 fd2f 	bl	8005976 <USB_ReadChInterrupts>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	f003 0310 	and.w	r3, r3, #16
 8002f1e:	2b10      	cmp	r3, #16
 8002f20:	d144      	bne.n	8002fac <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002f22:	78fa      	ldrb	r2, [r7, #3]
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	4613      	mov	r3, r2
 8002f28:	011b      	lsls	r3, r3, #4
 8002f2a:	1a9b      	subs	r3, r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	440b      	add	r3, r1
 8002f30:	3344      	adds	r3, #68	@ 0x44
 8002f32:	2200      	movs	r2, #0
 8002f34:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002f36:	78fa      	ldrb	r2, [r7, #3]
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	011b      	lsls	r3, r3, #4
 8002f3e:	1a9b      	subs	r3, r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	440b      	add	r3, r1
 8002f44:	334d      	adds	r3, #77	@ 0x4d
 8002f46:	2204      	movs	r2, #4
 8002f48:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002f4a:	78fa      	ldrb	r2, [r7, #3]
 8002f4c:	6879      	ldr	r1, [r7, #4]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	011b      	lsls	r3, r3, #4
 8002f52:	1a9b      	subs	r3, r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	440b      	add	r3, r1
 8002f58:	3319      	adds	r3, #25
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d114      	bne.n	8002f8a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002f60:	78fa      	ldrb	r2, [r7, #3]
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	4613      	mov	r3, r2
 8002f66:	011b      	lsls	r3, r3, #4
 8002f68:	1a9b      	subs	r3, r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	3318      	adds	r3, #24
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d109      	bne.n	8002f8a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002f76:	78fa      	ldrb	r2, [r7, #3]
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	011b      	lsls	r3, r3, #4
 8002f7e:	1a9b      	subs	r3, r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	440b      	add	r3, r1
 8002f84:	3319      	adds	r3, #25
 8002f86:	2201      	movs	r2, #1
 8002f88:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	78fa      	ldrb	r2, [r7, #3]
 8002f90:	4611      	mov	r1, r2
 8002f92:	4618      	mov	r0, r3
 8002f94:	f003 fa99 	bl	80064ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002f98:	78fb      	ldrb	r3, [r7, #3]
 8002f9a:	015a      	lsls	r2, r3, #5
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	2310      	movs	r3, #16
 8002fa8:	6093      	str	r3, [r2, #8]
 8002faa:	e2a7      	b.n	80034fc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	78fa      	ldrb	r2, [r7, #3]
 8002fb2:	4611      	mov	r1, r2
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f002 fcde 	bl	8005976 <USB_ReadChInterrupts>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fc0:	2b80      	cmp	r3, #128	@ 0x80
 8002fc2:	f040 8083 	bne.w	80030cc <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	799b      	ldrb	r3, [r3, #6]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d111      	bne.n	8002ff2 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002fce:	78fa      	ldrb	r2, [r7, #3]
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	1a9b      	subs	r3, r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	440b      	add	r3, r1
 8002fdc:	334d      	adds	r3, #77	@ 0x4d
 8002fde:	2207      	movs	r2, #7
 8002fe0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	78fa      	ldrb	r2, [r7, #3]
 8002fe8:	4611      	mov	r1, r2
 8002fea:	4618      	mov	r0, r3
 8002fec:	f003 fa6d 	bl	80064ca <USB_HC_Halt>
 8002ff0:	e062      	b.n	80030b8 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002ff2:	78fa      	ldrb	r2, [r7, #3]
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	1a9b      	subs	r3, r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	440b      	add	r3, r1
 8003000:	3344      	adds	r3, #68	@ 0x44
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	1c59      	adds	r1, r3, #1
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	4613      	mov	r3, r2
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	1a9b      	subs	r3, r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4403      	add	r3, r0
 8003012:	3344      	adds	r3, #68	@ 0x44
 8003014:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003016:	78fa      	ldrb	r2, [r7, #3]
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	1a9b      	subs	r3, r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	440b      	add	r3, r1
 8003024:	3344      	adds	r3, #68	@ 0x44
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b02      	cmp	r3, #2
 800302a:	d922      	bls.n	8003072 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800302c:	78fa      	ldrb	r2, [r7, #3]
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	1a9b      	subs	r3, r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	3344      	adds	r3, #68	@ 0x44
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003040:	78fa      	ldrb	r2, [r7, #3]
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	4613      	mov	r3, r2
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	1a9b      	subs	r3, r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	334c      	adds	r3, #76	@ 0x4c
 8003050:	2204      	movs	r2, #4
 8003052:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003054:	78fa      	ldrb	r2, [r7, #3]
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	011b      	lsls	r3, r3, #4
 800305c:	1a9b      	subs	r3, r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	334c      	adds	r3, #76	@ 0x4c
 8003064:	781a      	ldrb	r2, [r3, #0]
 8003066:	78fb      	ldrb	r3, [r7, #3]
 8003068:	4619      	mov	r1, r3
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f005 fd8c 	bl	8008b88 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003070:	e022      	b.n	80030b8 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003072:	78fa      	ldrb	r2, [r7, #3]
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	1a9b      	subs	r3, r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	440b      	add	r3, r1
 8003080:	334c      	adds	r3, #76	@ 0x4c
 8003082:	2202      	movs	r2, #2
 8003084:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003086:	78fb      	ldrb	r3, [r7, #3]
 8003088:	015a      	lsls	r2, r3, #5
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	4413      	add	r3, r2
 800308e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800309c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80030a4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80030a6:	78fb      	ldrb	r3, [r7, #3]
 80030a8:	015a      	lsls	r2, r3, #5
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	4413      	add	r3, r2
 80030ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030b2:	461a      	mov	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80030b8:	78fb      	ldrb	r3, [r7, #3]
 80030ba:	015a      	lsls	r2, r3, #5
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	4413      	add	r3, r2
 80030c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030c4:	461a      	mov	r2, r3
 80030c6:	2380      	movs	r3, #128	@ 0x80
 80030c8:	6093      	str	r3, [r2, #8]
 80030ca:	e217      	b.n	80034fc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	78fa      	ldrb	r2, [r7, #3]
 80030d2:	4611      	mov	r1, r2
 80030d4:	4618      	mov	r0, r3
 80030d6:	f002 fc4e 	bl	8005976 <USB_ReadChInterrupts>
 80030da:	4603      	mov	r3, r0
 80030dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030e4:	d11b      	bne.n	800311e <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80030e6:	78fa      	ldrb	r2, [r7, #3]
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	1a9b      	subs	r3, r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	440b      	add	r3, r1
 80030f4:	334d      	adds	r3, #77	@ 0x4d
 80030f6:	2209      	movs	r2, #9
 80030f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	78fa      	ldrb	r2, [r7, #3]
 8003100:	4611      	mov	r1, r2
 8003102:	4618      	mov	r0, r3
 8003104:	f003 f9e1 	bl	80064ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003108:	78fb      	ldrb	r3, [r7, #3]
 800310a:	015a      	lsls	r2, r3, #5
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	4413      	add	r3, r2
 8003110:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003114:	461a      	mov	r2, r3
 8003116:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800311a:	6093      	str	r3, [r2, #8]
 800311c:	e1ee      	b.n	80034fc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	78fa      	ldrb	r2, [r7, #3]
 8003124:	4611      	mov	r1, r2
 8003126:	4618      	mov	r0, r3
 8003128:	f002 fc25 	bl	8005976 <USB_ReadChInterrupts>
 800312c:	4603      	mov	r3, r0
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b02      	cmp	r3, #2
 8003134:	f040 81df 	bne.w	80034f6 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003138:	78fb      	ldrb	r3, [r7, #3]
 800313a:	015a      	lsls	r2, r3, #5
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	4413      	add	r3, r2
 8003140:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003144:	461a      	mov	r2, r3
 8003146:	2302      	movs	r3, #2
 8003148:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800314a:	78fa      	ldrb	r2, [r7, #3]
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	1a9b      	subs	r3, r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	334d      	adds	r3, #77	@ 0x4d
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b01      	cmp	r3, #1
 800315e:	f040 8093 	bne.w	8003288 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003162:	78fa      	ldrb	r2, [r7, #3]
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	1a9b      	subs	r3, r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	334d      	adds	r3, #77	@ 0x4d
 8003172:	2202      	movs	r2, #2
 8003174:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003176:	78fa      	ldrb	r2, [r7, #3]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	011b      	lsls	r3, r3, #4
 800317e:	1a9b      	subs	r3, r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	334c      	adds	r3, #76	@ 0x4c
 8003186:	2201      	movs	r2, #1
 8003188:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800318a:	78fa      	ldrb	r2, [r7, #3]
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	1a9b      	subs	r3, r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	440b      	add	r3, r1
 8003198:	3326      	adds	r3, #38	@ 0x26
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b02      	cmp	r3, #2
 800319e:	d00b      	beq.n	80031b8 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80031a0:	78fa      	ldrb	r2, [r7, #3]
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	1a9b      	subs	r3, r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	3326      	adds	r3, #38	@ 0x26
 80031b0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80031b2:	2b03      	cmp	r3, #3
 80031b4:	f040 8190 	bne.w	80034d8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	799b      	ldrb	r3, [r3, #6]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d115      	bne.n	80031ec <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80031c0:	78fa      	ldrb	r2, [r7, #3]
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	4613      	mov	r3, r2
 80031c6:	011b      	lsls	r3, r3, #4
 80031c8:	1a9b      	subs	r3, r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	333d      	adds	r3, #61	@ 0x3d
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	78fa      	ldrb	r2, [r7, #3]
 80031d4:	f083 0301 	eor.w	r3, r3, #1
 80031d8:	b2d8      	uxtb	r0, r3
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	1a9b      	subs	r3, r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	333d      	adds	r3, #61	@ 0x3d
 80031e8:	4602      	mov	r2, r0
 80031ea:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	799b      	ldrb	r3, [r3, #6]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	f040 8171 	bne.w	80034d8 <HCD_HC_OUT_IRQHandler+0x954>
 80031f6:	78fa      	ldrb	r2, [r7, #3]
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	4613      	mov	r3, r2
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	1a9b      	subs	r3, r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	440b      	add	r3, r1
 8003204:	3334      	adds	r3, #52	@ 0x34
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 8165 	beq.w	80034d8 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800320e:	78fa      	ldrb	r2, [r7, #3]
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	011b      	lsls	r3, r3, #4
 8003216:	1a9b      	subs	r3, r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	440b      	add	r3, r1
 800321c:	3334      	adds	r3, #52	@ 0x34
 800321e:	6819      	ldr	r1, [r3, #0]
 8003220:	78fa      	ldrb	r2, [r7, #3]
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	4613      	mov	r3, r2
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	1a9b      	subs	r3, r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4403      	add	r3, r0
 800322e:	3328      	adds	r3, #40	@ 0x28
 8003230:	881b      	ldrh	r3, [r3, #0]
 8003232:	440b      	add	r3, r1
 8003234:	1e59      	subs	r1, r3, #1
 8003236:	78fa      	ldrb	r2, [r7, #3]
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	1a9b      	subs	r3, r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4403      	add	r3, r0
 8003244:	3328      	adds	r3, #40	@ 0x28
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	fbb1 f3f3 	udiv	r3, r1, r3
 800324c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 813f 	beq.w	80034d8 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800325a:	78fa      	ldrb	r2, [r7, #3]
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	4613      	mov	r3, r2
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	1a9b      	subs	r3, r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	440b      	add	r3, r1
 8003268:	333d      	adds	r3, #61	@ 0x3d
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	78fa      	ldrb	r2, [r7, #3]
 800326e:	f083 0301 	eor.w	r3, r3, #1
 8003272:	b2d8      	uxtb	r0, r3
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	4613      	mov	r3, r2
 8003278:	011b      	lsls	r3, r3, #4
 800327a:	1a9b      	subs	r3, r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	440b      	add	r3, r1
 8003280:	333d      	adds	r3, #61	@ 0x3d
 8003282:	4602      	mov	r2, r0
 8003284:	701a      	strb	r2, [r3, #0]
 8003286:	e127      	b.n	80034d8 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003288:	78fa      	ldrb	r2, [r7, #3]
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	4613      	mov	r3, r2
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	1a9b      	subs	r3, r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	334d      	adds	r3, #77	@ 0x4d
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b03      	cmp	r3, #3
 800329c:	d120      	bne.n	80032e0 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800329e:	78fa      	ldrb	r2, [r7, #3]
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	4613      	mov	r3, r2
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	1a9b      	subs	r3, r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	440b      	add	r3, r1
 80032ac:	334d      	adds	r3, #77	@ 0x4d
 80032ae:	2202      	movs	r2, #2
 80032b0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80032b2:	78fa      	ldrb	r2, [r7, #3]
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	4613      	mov	r3, r2
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	1a9b      	subs	r3, r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	440b      	add	r3, r1
 80032c0:	331b      	adds	r3, #27
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	f040 8107 	bne.w	80034d8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032ca:	78fa      	ldrb	r2, [r7, #3]
 80032cc:	6879      	ldr	r1, [r7, #4]
 80032ce:	4613      	mov	r3, r2
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	1a9b      	subs	r3, r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	440b      	add	r3, r1
 80032d8:	334c      	adds	r3, #76	@ 0x4c
 80032da:	2202      	movs	r2, #2
 80032dc:	701a      	strb	r2, [r3, #0]
 80032de:	e0fb      	b.n	80034d8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80032e0:	78fa      	ldrb	r2, [r7, #3]
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	4613      	mov	r3, r2
 80032e6:	011b      	lsls	r3, r3, #4
 80032e8:	1a9b      	subs	r3, r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	334d      	adds	r3, #77	@ 0x4d
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d13a      	bne.n	800336c <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032f6:	78fa      	ldrb	r2, [r7, #3]
 80032f8:	6879      	ldr	r1, [r7, #4]
 80032fa:	4613      	mov	r3, r2
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	1a9b      	subs	r3, r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	440b      	add	r3, r1
 8003304:	334d      	adds	r3, #77	@ 0x4d
 8003306:	2202      	movs	r2, #2
 8003308:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800330a:	78fa      	ldrb	r2, [r7, #3]
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	1a9b      	subs	r3, r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	440b      	add	r3, r1
 8003318:	334c      	adds	r3, #76	@ 0x4c
 800331a:	2202      	movs	r2, #2
 800331c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800331e:	78fa      	ldrb	r2, [r7, #3]
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	4613      	mov	r3, r2
 8003324:	011b      	lsls	r3, r3, #4
 8003326:	1a9b      	subs	r3, r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	440b      	add	r3, r1
 800332c:	331b      	adds	r3, #27
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b01      	cmp	r3, #1
 8003332:	f040 80d1 	bne.w	80034d8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003336:	78fa      	ldrb	r2, [r7, #3]
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	4613      	mov	r3, r2
 800333c:	011b      	lsls	r3, r3, #4
 800333e:	1a9b      	subs	r3, r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	440b      	add	r3, r1
 8003344:	331b      	adds	r3, #27
 8003346:	2200      	movs	r2, #0
 8003348:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800334a:	78fb      	ldrb	r3, [r7, #3]
 800334c:	015a      	lsls	r2, r3, #5
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	4413      	add	r3, r2
 8003352:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	78fa      	ldrb	r2, [r7, #3]
 800335a:	0151      	lsls	r1, r2, #5
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	440a      	add	r2, r1
 8003360:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003364:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003368:	6053      	str	r3, [r2, #4]
 800336a:	e0b5      	b.n	80034d8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800336c:	78fa      	ldrb	r2, [r7, #3]
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	4613      	mov	r3, r2
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	1a9b      	subs	r3, r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	334d      	adds	r3, #77	@ 0x4d
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	2b05      	cmp	r3, #5
 8003380:	d114      	bne.n	80033ac <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003382:	78fa      	ldrb	r2, [r7, #3]
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	4613      	mov	r3, r2
 8003388:	011b      	lsls	r3, r3, #4
 800338a:	1a9b      	subs	r3, r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	440b      	add	r3, r1
 8003390:	334d      	adds	r3, #77	@ 0x4d
 8003392:	2202      	movs	r2, #2
 8003394:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003396:	78fa      	ldrb	r2, [r7, #3]
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	4613      	mov	r3, r2
 800339c:	011b      	lsls	r3, r3, #4
 800339e:	1a9b      	subs	r3, r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	440b      	add	r3, r1
 80033a4:	334c      	adds	r3, #76	@ 0x4c
 80033a6:	2202      	movs	r2, #2
 80033a8:	701a      	strb	r2, [r3, #0]
 80033aa:	e095      	b.n	80034d8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80033ac:	78fa      	ldrb	r2, [r7, #3]
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	4613      	mov	r3, r2
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	1a9b      	subs	r3, r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	334d      	adds	r3, #77	@ 0x4d
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b06      	cmp	r3, #6
 80033c0:	d114      	bne.n	80033ec <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033c2:	78fa      	ldrb	r2, [r7, #3]
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	4613      	mov	r3, r2
 80033c8:	011b      	lsls	r3, r3, #4
 80033ca:	1a9b      	subs	r3, r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	440b      	add	r3, r1
 80033d0:	334d      	adds	r3, #77	@ 0x4d
 80033d2:	2202      	movs	r2, #2
 80033d4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80033d6:	78fa      	ldrb	r2, [r7, #3]
 80033d8:	6879      	ldr	r1, [r7, #4]
 80033da:	4613      	mov	r3, r2
 80033dc:	011b      	lsls	r3, r3, #4
 80033de:	1a9b      	subs	r3, r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	440b      	add	r3, r1
 80033e4:	334c      	adds	r3, #76	@ 0x4c
 80033e6:	2205      	movs	r2, #5
 80033e8:	701a      	strb	r2, [r3, #0]
 80033ea:	e075      	b.n	80034d8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80033ec:	78fa      	ldrb	r2, [r7, #3]
 80033ee:	6879      	ldr	r1, [r7, #4]
 80033f0:	4613      	mov	r3, r2
 80033f2:	011b      	lsls	r3, r3, #4
 80033f4:	1a9b      	subs	r3, r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	334d      	adds	r3, #77	@ 0x4d
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b07      	cmp	r3, #7
 8003400:	d00a      	beq.n	8003418 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003402:	78fa      	ldrb	r2, [r7, #3]
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	011b      	lsls	r3, r3, #4
 800340a:	1a9b      	subs	r3, r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	440b      	add	r3, r1
 8003410:	334d      	adds	r3, #77	@ 0x4d
 8003412:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003414:	2b09      	cmp	r3, #9
 8003416:	d170      	bne.n	80034fa <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003418:	78fa      	ldrb	r2, [r7, #3]
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	4613      	mov	r3, r2
 800341e:	011b      	lsls	r3, r3, #4
 8003420:	1a9b      	subs	r3, r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	334d      	adds	r3, #77	@ 0x4d
 8003428:	2202      	movs	r2, #2
 800342a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800342c:	78fa      	ldrb	r2, [r7, #3]
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	4613      	mov	r3, r2
 8003432:	011b      	lsls	r3, r3, #4
 8003434:	1a9b      	subs	r3, r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	440b      	add	r3, r1
 800343a:	3344      	adds	r3, #68	@ 0x44
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	1c59      	adds	r1, r3, #1
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	4613      	mov	r3, r2
 8003444:	011b      	lsls	r3, r3, #4
 8003446:	1a9b      	subs	r3, r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4403      	add	r3, r0
 800344c:	3344      	adds	r3, #68	@ 0x44
 800344e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003450:	78fa      	ldrb	r2, [r7, #3]
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	4613      	mov	r3, r2
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	1a9b      	subs	r3, r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	3344      	adds	r3, #68	@ 0x44
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2b02      	cmp	r3, #2
 8003464:	d914      	bls.n	8003490 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003466:	78fa      	ldrb	r2, [r7, #3]
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	4613      	mov	r3, r2
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	1a9b      	subs	r3, r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	440b      	add	r3, r1
 8003474:	3344      	adds	r3, #68	@ 0x44
 8003476:	2200      	movs	r2, #0
 8003478:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800347a:	78fa      	ldrb	r2, [r7, #3]
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	011b      	lsls	r3, r3, #4
 8003482:	1a9b      	subs	r3, r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	440b      	add	r3, r1
 8003488:	334c      	adds	r3, #76	@ 0x4c
 800348a:	2204      	movs	r2, #4
 800348c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800348e:	e022      	b.n	80034d6 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003490:	78fa      	ldrb	r2, [r7, #3]
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	4613      	mov	r3, r2
 8003496:	011b      	lsls	r3, r3, #4
 8003498:	1a9b      	subs	r3, r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	334c      	adds	r3, #76	@ 0x4c
 80034a0:	2202      	movs	r2, #2
 80034a2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80034a4:	78fb      	ldrb	r3, [r7, #3]
 80034a6:	015a      	lsls	r2, r3, #5
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	4413      	add	r3, r2
 80034ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80034ba:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80034c2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80034c4:	78fb      	ldrb	r3, [r7, #3]
 80034c6:	015a      	lsls	r2, r3, #5
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	4413      	add	r3, r2
 80034cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034d0:	461a      	mov	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034d6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80034d8:	78fa      	ldrb	r2, [r7, #3]
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	4613      	mov	r3, r2
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	1a9b      	subs	r3, r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	334c      	adds	r3, #76	@ 0x4c
 80034e8:	781a      	ldrb	r2, [r3, #0]
 80034ea:	78fb      	ldrb	r3, [r7, #3]
 80034ec:	4619      	mov	r1, r3
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f005 fb4a 	bl	8008b88 <HAL_HCD_HC_NotifyURBChange_Callback>
 80034f4:	e002      	b.n	80034fc <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80034f6:	bf00      	nop
 80034f8:	e000      	b.n	80034fc <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80034fa:	bf00      	nop
  }
}
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b08a      	sub	sp, #40	@ 0x28
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003512:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f003 030f 	and.w	r3, r3, #15
 8003522:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	0c5b      	lsrs	r3, r3, #17
 8003528:	f003 030f 	and.w	r3, r3, #15
 800352c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	091b      	lsrs	r3, r3, #4
 8003532:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003536:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	2b02      	cmp	r3, #2
 800353c:	d004      	beq.n	8003548 <HCD_RXQLVL_IRQHandler+0x46>
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2b05      	cmp	r3, #5
 8003542:	f000 80b6 	beq.w	80036b2 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003546:	e0b7      	b.n	80036b8 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 80b3 	beq.w	80036b6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	4613      	mov	r3, r2
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	1a9b      	subs	r3, r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	332c      	adds	r3, #44	@ 0x2c
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 80a7 	beq.w	80036b6 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	4613      	mov	r3, r2
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	1a9b      	subs	r3, r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	3338      	adds	r3, #56	@ 0x38
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	18d1      	adds	r1, r2, r3
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	4613      	mov	r3, r2
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	1a9b      	subs	r3, r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4403      	add	r3, r0
 800358c:	3334      	adds	r3, #52	@ 0x34
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4299      	cmp	r1, r3
 8003592:	f200 8083 	bhi.w	800369c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6818      	ldr	r0, [r3, #0]
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	4613      	mov	r3, r2
 80035a0:	011b      	lsls	r3, r3, #4
 80035a2:	1a9b      	subs	r3, r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	440b      	add	r3, r1
 80035a8:	332c      	adds	r3, #44	@ 0x2c
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	b292      	uxth	r2, r2
 80035b0:	4619      	mov	r1, r3
 80035b2:	f002 f975 	bl	80058a0 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	4613      	mov	r3, r2
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	1a9b      	subs	r3, r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	440b      	add	r3, r1
 80035c4:	332c      	adds	r3, #44	@ 0x2c
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	18d1      	adds	r1, r2, r3
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	4613      	mov	r3, r2
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	1a9b      	subs	r3, r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4403      	add	r3, r0
 80035da:	332c      	adds	r3, #44	@ 0x2c
 80035dc:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4613      	mov	r3, r2
 80035e4:	011b      	lsls	r3, r3, #4
 80035e6:	1a9b      	subs	r3, r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	440b      	add	r3, r1
 80035ec:	3338      	adds	r3, #56	@ 0x38
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	18d1      	adds	r1, r2, r3
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	4613      	mov	r3, r2
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	1a9b      	subs	r3, r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4403      	add	r3, r0
 8003602:	3338      	adds	r3, #56	@ 0x38
 8003604:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	015a      	lsls	r2, r3, #5
 800360a:	6a3b      	ldr	r3, [r7, #32]
 800360c:	4413      	add	r3, r2
 800360e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	0cdb      	lsrs	r3, r3, #19
 8003616:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800361a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	4613      	mov	r3, r2
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	1a9b      	subs	r3, r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	3328      	adds	r3, #40	@ 0x28
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	461a      	mov	r2, r3
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	4293      	cmp	r3, r2
 8003634:	d13f      	bne.n	80036b6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d03c      	beq.n	80036b6 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	015a      	lsls	r2, r3, #5
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	4413      	add	r3, r2
 8003644:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003652:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800365a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	015a      	lsls	r2, r3, #5
 8003660:	6a3b      	ldr	r3, [r7, #32]
 8003662:	4413      	add	r3, r2
 8003664:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003668:	461a      	mov	r2, r3
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	4613      	mov	r3, r2
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	1a9b      	subs	r3, r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	440b      	add	r3, r1
 800367c:	333c      	adds	r3, #60	@ 0x3c
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	f083 0301 	eor.w	r3, r3, #1
 8003684:	b2d8      	uxtb	r0, r3
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	4613      	mov	r3, r2
 800368c:	011b      	lsls	r3, r3, #4
 800368e:	1a9b      	subs	r3, r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	440b      	add	r3, r1
 8003694:	333c      	adds	r3, #60	@ 0x3c
 8003696:	4602      	mov	r2, r0
 8003698:	701a      	strb	r2, [r3, #0]
      break;
 800369a:	e00c      	b.n	80036b6 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800369c:	6879      	ldr	r1, [r7, #4]
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	4613      	mov	r3, r2
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	1a9b      	subs	r3, r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	334c      	adds	r3, #76	@ 0x4c
 80036ac:	2204      	movs	r2, #4
 80036ae:	701a      	strb	r2, [r3, #0]
      break;
 80036b0:	e001      	b.n	80036b6 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80036b2:	bf00      	nop
 80036b4:	e000      	b.n	80036b8 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80036b6:	bf00      	nop
  }
}
 80036b8:	bf00      	nop
 80036ba:	3728      	adds	r7, #40	@ 0x28
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80036ec:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d10b      	bne.n	8003710 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d102      	bne.n	8003708 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f005 fa24 	bl	8008b50 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f043 0302 	orr.w	r3, r3, #2
 800370e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b08      	cmp	r3, #8
 8003718:	d132      	bne.n	8003780 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	f043 0308 	orr.w	r3, r3, #8
 8003720:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b04      	cmp	r3, #4
 800372a:	d126      	bne.n	800377a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	7a5b      	ldrb	r3, [r3, #9]
 8003730:	2b02      	cmp	r3, #2
 8003732:	d113      	bne.n	800375c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800373a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800373e:	d106      	bne.n	800374e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2102      	movs	r1, #2
 8003746:	4618      	mov	r0, r3
 8003748:	f002 fa40 	bl	8005bcc <USB_InitFSLSPClkSel>
 800374c:	e011      	b.n	8003772 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2101      	movs	r1, #1
 8003754:	4618      	mov	r0, r3
 8003756:	f002 fa39 	bl	8005bcc <USB_InitFSLSPClkSel>
 800375a:	e00a      	b.n	8003772 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	79db      	ldrb	r3, [r3, #7]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d106      	bne.n	8003772 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800376a:	461a      	mov	r2, r3
 800376c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003770:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f005 fa16 	bl	8008ba4 <HAL_HCD_PortEnabled_Callback>
 8003778:	e002      	b.n	8003780 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f005 fa20 	bl	8008bc0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f003 0320 	and.w	r3, r3, #32
 8003786:	2b20      	cmp	r3, #32
 8003788:	d103      	bne.n	8003792 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	f043 0320 	orr.w	r3, r3, #32
 8003790:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003798:	461a      	mov	r2, r3
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	6013      	str	r3, [r2, #0]
}
 800379e:	bf00      	nop
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
	...

080037a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e12b      	b.n	8003a12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d106      	bne.n	80037d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7fc ff9e 	bl	8000710 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2224      	movs	r2, #36	@ 0x24
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0201 	bic.w	r2, r2, #1
 80037ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800380a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800380c:	f001 fa20 	bl	8004c50 <HAL_RCC_GetPCLK1Freq>
 8003810:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	4a81      	ldr	r2, [pc, #516]	@ (8003a1c <HAL_I2C_Init+0x274>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d807      	bhi.n	800382c <HAL_I2C_Init+0x84>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	4a80      	ldr	r2, [pc, #512]	@ (8003a20 <HAL_I2C_Init+0x278>)
 8003820:	4293      	cmp	r3, r2
 8003822:	bf94      	ite	ls
 8003824:	2301      	movls	r3, #1
 8003826:	2300      	movhi	r3, #0
 8003828:	b2db      	uxtb	r3, r3
 800382a:	e006      	b.n	800383a <HAL_I2C_Init+0x92>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4a7d      	ldr	r2, [pc, #500]	@ (8003a24 <HAL_I2C_Init+0x27c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	bf94      	ite	ls
 8003834:	2301      	movls	r3, #1
 8003836:	2300      	movhi	r3, #0
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e0e7      	b.n	8003a12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	4a78      	ldr	r2, [pc, #480]	@ (8003a28 <HAL_I2C_Init+0x280>)
 8003846:	fba2 2303 	umull	r2, r3, r2, r3
 800384a:	0c9b      	lsrs	r3, r3, #18
 800384c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	430a      	orrs	r2, r1
 8003860:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	4a6a      	ldr	r2, [pc, #424]	@ (8003a1c <HAL_I2C_Init+0x274>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d802      	bhi.n	800387c <HAL_I2C_Init+0xd4>
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	3301      	adds	r3, #1
 800387a:	e009      	b.n	8003890 <HAL_I2C_Init+0xe8>
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003882:	fb02 f303 	mul.w	r3, r2, r3
 8003886:	4a69      	ldr	r2, [pc, #420]	@ (8003a2c <HAL_I2C_Init+0x284>)
 8003888:	fba2 2303 	umull	r2, r3, r2, r3
 800388c:	099b      	lsrs	r3, r3, #6
 800388e:	3301      	adds	r3, #1
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	6812      	ldr	r2, [r2, #0]
 8003894:	430b      	orrs	r3, r1
 8003896:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80038a2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	495c      	ldr	r1, [pc, #368]	@ (8003a1c <HAL_I2C_Init+0x274>)
 80038ac:	428b      	cmp	r3, r1
 80038ae:	d819      	bhi.n	80038e4 <HAL_I2C_Init+0x13c>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	1e59      	subs	r1, r3, #1
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80038be:	1c59      	adds	r1, r3, #1
 80038c0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80038c4:	400b      	ands	r3, r1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00a      	beq.n	80038e0 <HAL_I2C_Init+0x138>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	1e59      	subs	r1, r3, #1
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80038d8:	3301      	adds	r3, #1
 80038da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038de:	e051      	b.n	8003984 <HAL_I2C_Init+0x1dc>
 80038e0:	2304      	movs	r3, #4
 80038e2:	e04f      	b.n	8003984 <HAL_I2C_Init+0x1dc>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d111      	bne.n	8003910 <HAL_I2C_Init+0x168>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	1e58      	subs	r0, r3, #1
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6859      	ldr	r1, [r3, #4]
 80038f4:	460b      	mov	r3, r1
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	440b      	add	r3, r1
 80038fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80038fe:	3301      	adds	r3, #1
 8003900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003904:	2b00      	cmp	r3, #0
 8003906:	bf0c      	ite	eq
 8003908:	2301      	moveq	r3, #1
 800390a:	2300      	movne	r3, #0
 800390c:	b2db      	uxtb	r3, r3
 800390e:	e012      	b.n	8003936 <HAL_I2C_Init+0x18e>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	1e58      	subs	r0, r3, #1
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6859      	ldr	r1, [r3, #4]
 8003918:	460b      	mov	r3, r1
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	440b      	add	r3, r1
 800391e:	0099      	lsls	r1, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	fbb0 f3f3 	udiv	r3, r0, r3
 8003926:	3301      	adds	r3, #1
 8003928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800392c:	2b00      	cmp	r3, #0
 800392e:	bf0c      	ite	eq
 8003930:	2301      	moveq	r3, #1
 8003932:	2300      	movne	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <HAL_I2C_Init+0x196>
 800393a:	2301      	movs	r3, #1
 800393c:	e022      	b.n	8003984 <HAL_I2C_Init+0x1dc>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10e      	bne.n	8003964 <HAL_I2C_Init+0x1bc>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	1e58      	subs	r0, r3, #1
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6859      	ldr	r1, [r3, #4]
 800394e:	460b      	mov	r3, r1
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	440b      	add	r3, r1
 8003954:	fbb0 f3f3 	udiv	r3, r0, r3
 8003958:	3301      	adds	r3, #1
 800395a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800395e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003962:	e00f      	b.n	8003984 <HAL_I2C_Init+0x1dc>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	1e58      	subs	r0, r3, #1
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6859      	ldr	r1, [r3, #4]
 800396c:	460b      	mov	r3, r1
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	0099      	lsls	r1, r3, #2
 8003974:	440b      	add	r3, r1
 8003976:	fbb0 f3f3 	udiv	r3, r0, r3
 800397a:	3301      	adds	r3, #1
 800397c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003980:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	6809      	ldr	r1, [r1, #0]
 8003988:	4313      	orrs	r3, r2
 800398a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	69da      	ldr	r2, [r3, #28]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80039b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6911      	ldr	r1, [r2, #16]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	68d2      	ldr	r2, [r2, #12]
 80039be:	4311      	orrs	r1, r2
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6812      	ldr	r2, [r2, #0]
 80039c4:	430b      	orrs	r3, r1
 80039c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	695a      	ldr	r2, [r3, #20]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 0201 	orr.w	r2, r2, #1
 80039f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2220      	movs	r2, #32
 80039fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	000186a0 	.word	0x000186a0
 8003a20:	001e847f 	.word	0x001e847f
 8003a24:	003d08ff 	.word	0x003d08ff
 8003a28:	431bde83 	.word	0x431bde83
 8003a2c:	10624dd3 	.word	0x10624dd3

08003a30 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b088      	sub	sp, #32
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e128      	b.n	8003c94 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d109      	bne.n	8003a62 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a90      	ldr	r2, [pc, #576]	@ (8003c9c <HAL_I2S_Init+0x26c>)
 8003a5a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7fc fecf 	bl	8000800 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2202      	movs	r2, #2
 8003a66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6812      	ldr	r2, [r2, #0]
 8003a74:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003a78:	f023 030f 	bic.w	r3, r3, #15
 8003a7c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2202      	movs	r2, #2
 8003a84:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d060      	beq.n	8003b50 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d102      	bne.n	8003a9c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003a96:	2310      	movs	r3, #16
 8003a98:	617b      	str	r3, [r7, #20]
 8003a9a:	e001      	b.n	8003aa0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003a9c:	2320      	movs	r3, #32
 8003a9e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	2b20      	cmp	r3, #32
 8003aa6:	d802      	bhi.n	8003aae <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003aae:	2001      	movs	r0, #1
 8003ab0:	f001 f9d8 	bl	8004e64 <HAL_RCCEx_GetPeriphCLKFreq>
 8003ab4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003abe:	d125      	bne.n	8003b0c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d010      	beq.n	8003aea <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	461a      	mov	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae4:	3305      	adds	r3, #5
 8003ae6:	613b      	str	r3, [r7, #16]
 8003ae8:	e01f      	b.n	8003b2a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003af4:	4613      	mov	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4413      	add	r3, r2
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	461a      	mov	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b06:	3305      	adds	r3, #5
 8003b08:	613b      	str	r3, [r7, #16]
 8003b0a:	e00e      	b.n	8003b2a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b26:	3305      	adds	r3, #5
 8003b28:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	4a5c      	ldr	r2, [pc, #368]	@ (8003ca0 <HAL_I2S_Init+0x270>)
 8003b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b32:	08db      	lsrs	r3, r3, #3
 8003b34:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	085b      	lsrs	r3, r3, #1
 8003b46:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	021b      	lsls	r3, r3, #8
 8003b4c:	61bb      	str	r3, [r7, #24]
 8003b4e:	e003      	b.n	8003b58 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003b50:	2302      	movs	r3, #2
 8003b52:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d902      	bls.n	8003b64 <HAL_I2S_Init+0x134>
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	2bff      	cmp	r3, #255	@ 0xff
 8003b62:	d907      	bls.n	8003b74 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b68:	f043 0210 	orr.w	r2, r3, #16
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e08f      	b.n	8003c94 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691a      	ldr	r2, [r3, #16]
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	ea42 0103 	orr.w	r1, r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	69fa      	ldr	r2, [r7, #28]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003b92:	f023 030f 	bic.w	r3, r3, #15
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6851      	ldr	r1, [r2, #4]
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6892      	ldr	r2, [r2, #8]
 8003b9e:	4311      	orrs	r1, r2
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	68d2      	ldr	r2, [r2, #12]
 8003ba4:	4311      	orrs	r1, r2
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	6992      	ldr	r2, [r2, #24]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	431a      	orrs	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bb6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d161      	bne.n	8003c84 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a38      	ldr	r2, [pc, #224]	@ (8003ca4 <HAL_I2S_Init+0x274>)
 8003bc4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a37      	ldr	r2, [pc, #220]	@ (8003ca8 <HAL_I2S_Init+0x278>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d101      	bne.n	8003bd4 <HAL_I2S_Init+0x1a4>
 8003bd0:	4b36      	ldr	r3, [pc, #216]	@ (8003cac <HAL_I2S_Init+0x27c>)
 8003bd2:	e001      	b.n	8003bd8 <HAL_I2S_Init+0x1a8>
 8003bd4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6812      	ldr	r2, [r2, #0]
 8003bde:	4932      	ldr	r1, [pc, #200]	@ (8003ca8 <HAL_I2S_Init+0x278>)
 8003be0:	428a      	cmp	r2, r1
 8003be2:	d101      	bne.n	8003be8 <HAL_I2S_Init+0x1b8>
 8003be4:	4a31      	ldr	r2, [pc, #196]	@ (8003cac <HAL_I2S_Init+0x27c>)
 8003be6:	e001      	b.n	8003bec <HAL_I2S_Init+0x1bc>
 8003be8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003bec:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003bf0:	f023 030f 	bic.w	r3, r3, #15
 8003bf4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a2b      	ldr	r2, [pc, #172]	@ (8003ca8 <HAL_I2S_Init+0x278>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d101      	bne.n	8003c04 <HAL_I2S_Init+0x1d4>
 8003c00:	4b2a      	ldr	r3, [pc, #168]	@ (8003cac <HAL_I2S_Init+0x27c>)
 8003c02:	e001      	b.n	8003c08 <HAL_I2S_Init+0x1d8>
 8003c04:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c08:	2202      	movs	r2, #2
 8003c0a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a25      	ldr	r2, [pc, #148]	@ (8003ca8 <HAL_I2S_Init+0x278>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d101      	bne.n	8003c1a <HAL_I2S_Init+0x1ea>
 8003c16:	4b25      	ldr	r3, [pc, #148]	@ (8003cac <HAL_I2S_Init+0x27c>)
 8003c18:	e001      	b.n	8003c1e <HAL_I2S_Init+0x1ee>
 8003c1a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c1e:	69db      	ldr	r3, [r3, #28]
 8003c20:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c2a:	d003      	beq.n	8003c34 <HAL_I2S_Init+0x204>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d103      	bne.n	8003c3c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003c34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c38:	613b      	str	r3, [r7, #16]
 8003c3a:	e001      	b.n	8003c40 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c54:	4313      	orrs	r3, r2
 8003c56:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	897b      	ldrh	r3, [r7, #10]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003c6c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a0d      	ldr	r2, [pc, #52]	@ (8003ca8 <HAL_I2S_Init+0x278>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d101      	bne.n	8003c7c <HAL_I2S_Init+0x24c>
 8003c78:	4b0c      	ldr	r3, [pc, #48]	@ (8003cac <HAL_I2S_Init+0x27c>)
 8003c7a:	e001      	b.n	8003c80 <HAL_I2S_Init+0x250>
 8003c7c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c80:	897a      	ldrh	r2, [r7, #10]
 8003c82:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3720      	adds	r7, #32
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	08003da7 	.word	0x08003da7
 8003ca0:	cccccccd 	.word	0xcccccccd
 8003ca4:	08003ebd 	.word	0x08003ebd
 8003ca8:	40003800 	.word	0x40003800
 8003cac:	40003400 	.word	0x40003400

08003cb0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf8:	881a      	ldrh	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d04:	1c9a      	adds	r2, r3, #2
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10e      	bne.n	8003d40 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003d30:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7ff ffb8 	bl	8003cb0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d40:	bf00      	nop
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d5a:	b292      	uxth	r2, r2
 8003d5c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d62:	1c9a      	adds	r2, r3, #2
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10e      	bne.n	8003d9e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d8e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f7ff ff93 	bl	8003cc4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d9e:	bf00      	nop
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b086      	sub	sp, #24
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	d13a      	bne.n	8003e38 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d109      	bne.n	8003de0 <I2S_IRQHandler+0x3a>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dd6:	2b40      	cmp	r3, #64	@ 0x40
 8003dd8:	d102      	bne.n	8003de0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7ff ffb4 	bl	8003d48 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003de6:	2b40      	cmp	r3, #64	@ 0x40
 8003de8:	d126      	bne.n	8003e38 <I2S_IRQHandler+0x92>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f003 0320 	and.w	r3, r3, #32
 8003df4:	2b20      	cmp	r3, #32
 8003df6:	d11f      	bne.n	8003e38 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e06:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e08:	2300      	movs	r3, #0
 8003e0a:	613b      	str	r3, [r7, #16]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	613b      	str	r3, [r7, #16]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	613b      	str	r3, [r7, #16]
 8003e1c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e2a:	f043 0202 	orr.w	r2, r3, #2
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7ff ff50 	bl	8003cd8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b03      	cmp	r3, #3
 8003e42:	d136      	bne.n	8003eb2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d109      	bne.n	8003e62 <I2S_IRQHandler+0xbc>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e58:	2b80      	cmp	r3, #128	@ 0x80
 8003e5a:	d102      	bne.n	8003e62 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7ff ff45 	bl	8003cec <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f003 0308 	and.w	r3, r3, #8
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d122      	bne.n	8003eb2 <I2S_IRQHandler+0x10c>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f003 0320 	and.w	r3, r3, #32
 8003e76:	2b20      	cmp	r3, #32
 8003e78:	d11b      	bne.n	8003eb2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e88:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	60fb      	str	r3, [r7, #12]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	60fb      	str	r3, [r7, #12]
 8003e96:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea4:	f043 0204 	orr.w	r2, r3, #4
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f7ff ff13 	bl	8003cd8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003eb2:	bf00      	nop
 8003eb4:	3718      	adds	r7, #24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
	...

08003ebc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b088      	sub	sp, #32
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a92      	ldr	r2, [pc, #584]	@ (800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d101      	bne.n	8003eda <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003ed6:	4b92      	ldr	r3, [pc, #584]	@ (8004120 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ed8:	e001      	b.n	8003ede <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003eda:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a8b      	ldr	r2, [pc, #556]	@ (800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d101      	bne.n	8003ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003ef4:	4b8a      	ldr	r3, [pc, #552]	@ (8004120 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ef6:	e001      	b.n	8003efc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003ef8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f08:	d004      	beq.n	8003f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f040 8099 	bne.w	8004046 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d107      	bne.n	8003f2e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d002      	beq.n	8003f2e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f925 	bl	8004178 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d107      	bne.n	8003f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d002      	beq.n	8003f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f9c8 	bl	80042d8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f4e:	2b40      	cmp	r3, #64	@ 0x40
 8003f50:	d13a      	bne.n	8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	f003 0320 	and.w	r3, r3, #32
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d035      	beq.n	8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a6e      	ldr	r2, [pc, #440]	@ (800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d101      	bne.n	8003f6a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003f66:	4b6e      	ldr	r3, [pc, #440]	@ (8004120 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f68:	e001      	b.n	8003f6e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003f6a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4969      	ldr	r1, [pc, #420]	@ (800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f76:	428b      	cmp	r3, r1
 8003f78:	d101      	bne.n	8003f7e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003f7a:	4b69      	ldr	r3, [pc, #420]	@ (8004120 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f7c:	e001      	b.n	8003f82 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003f7e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f82:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f86:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f96:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f98:	2300      	movs	r3, #0
 8003f9a:	60fb      	str	r3, [r7, #12]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fba:	f043 0202 	orr.w	r2, r3, #2
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7ff fe88 	bl	8003cd8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	f003 0308 	and.w	r3, r3, #8
 8003fce:	2b08      	cmp	r3, #8
 8003fd0:	f040 80c3 	bne.w	800415a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f003 0320 	and.w	r3, r3, #32
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f000 80bd 	beq.w	800415a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003fee:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a49      	ldr	r2, [pc, #292]	@ (800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d101      	bne.n	8003ffe <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003ffa:	4b49      	ldr	r3, [pc, #292]	@ (8004120 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ffc:	e001      	b.n	8004002 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003ffe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4944      	ldr	r1, [pc, #272]	@ (800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800400a:	428b      	cmp	r3, r1
 800400c:	d101      	bne.n	8004012 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800400e:	4b44      	ldr	r3, [pc, #272]	@ (8004120 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004010:	e001      	b.n	8004016 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004012:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004016:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800401a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800401c:	2300      	movs	r3, #0
 800401e:	60bb      	str	r3, [r7, #8]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	60bb      	str	r3, [r7, #8]
 8004028:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004036:	f043 0204 	orr.w	r2, r3, #4
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7ff fe4a 	bl	8003cd8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004044:	e089      	b.n	800415a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	f003 0302 	and.w	r3, r3, #2
 800404c:	2b02      	cmp	r3, #2
 800404e:	d107      	bne.n	8004060 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004056:	2b00      	cmp	r3, #0
 8004058:	d002      	beq.n	8004060 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f8be 	bl	80041dc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b01      	cmp	r3, #1
 8004068:	d107      	bne.n	800407a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004070:	2b00      	cmp	r3, #0
 8004072:	d002      	beq.n	800407a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f8fd 	bl	8004274 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004080:	2b40      	cmp	r3, #64	@ 0x40
 8004082:	d12f      	bne.n	80040e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f003 0320 	and.w	r3, r3, #32
 800408a:	2b00      	cmp	r3, #0
 800408c:	d02a      	beq.n	80040e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800409c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a1e      	ldr	r2, [pc, #120]	@ (800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d101      	bne.n	80040ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80040a8:	4b1d      	ldr	r3, [pc, #116]	@ (8004120 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040aa:	e001      	b.n	80040b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80040ac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4919      	ldr	r1, [pc, #100]	@ (800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040b8:	428b      	cmp	r3, r1
 80040ba:	d101      	bne.n	80040c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80040bc:	4b18      	ldr	r3, [pc, #96]	@ (8004120 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040be:	e001      	b.n	80040c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80040c0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040c4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040c8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d6:	f043 0202 	orr.w	r2, r3, #2
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7ff fdfa 	bl	8003cd8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	f003 0308 	and.w	r3, r3, #8
 80040ea:	2b08      	cmp	r3, #8
 80040ec:	d136      	bne.n	800415c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f003 0320 	and.w	r3, r3, #32
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d031      	beq.n	800415c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a07      	ldr	r2, [pc, #28]	@ (800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d101      	bne.n	8004106 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004102:	4b07      	ldr	r3, [pc, #28]	@ (8004120 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004104:	e001      	b.n	800410a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004106:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4902      	ldr	r1, [pc, #8]	@ (800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004112:	428b      	cmp	r3, r1
 8004114:	d106      	bne.n	8004124 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004116:	4b02      	ldr	r3, [pc, #8]	@ (8004120 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004118:	e006      	b.n	8004128 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800411a:	bf00      	nop
 800411c:	40003800 	.word	0x40003800
 8004120:	40003400 	.word	0x40003400
 8004124:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004128:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800412c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800413c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414a:	f043 0204 	orr.w	r2, r3, #4
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7ff fdc0 	bl	8003cd8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004158:	e000      	b.n	800415c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800415a:	bf00      	nop
}
 800415c:	bf00      	nop
 800415e:	3720      	adds	r7, #32
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004184:	1c99      	adds	r1, r3, #2
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	6251      	str	r1, [r2, #36]	@ 0x24
 800418a:	881a      	ldrh	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004196:	b29b      	uxth	r3, r3
 8004198:	3b01      	subs	r3, #1
 800419a:	b29a      	uxth	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d113      	bne.n	80041d2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041b8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041be:	b29b      	uxth	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d106      	bne.n	80041d2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f7ff ffc9 	bl	8004164 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041d2:	bf00      	nop
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e8:	1c99      	adds	r1, r3, #2
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	6251      	str	r1, [r2, #36]	@ 0x24
 80041ee:	8819      	ldrh	r1, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a1d      	ldr	r2, [pc, #116]	@ (800426c <I2SEx_TxISR_I2SExt+0x90>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d101      	bne.n	80041fe <I2SEx_TxISR_I2SExt+0x22>
 80041fa:	4b1d      	ldr	r3, [pc, #116]	@ (8004270 <I2SEx_TxISR_I2SExt+0x94>)
 80041fc:	e001      	b.n	8004202 <I2SEx_TxISR_I2SExt+0x26>
 80041fe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004202:	460a      	mov	r2, r1
 8004204:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800420a:	b29b      	uxth	r3, r3
 800420c:	3b01      	subs	r3, #1
 800420e:	b29a      	uxth	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004218:	b29b      	uxth	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d121      	bne.n	8004262 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a12      	ldr	r2, [pc, #72]	@ (800426c <I2SEx_TxISR_I2SExt+0x90>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d101      	bne.n	800422c <I2SEx_TxISR_I2SExt+0x50>
 8004228:	4b11      	ldr	r3, [pc, #68]	@ (8004270 <I2SEx_TxISR_I2SExt+0x94>)
 800422a:	e001      	b.n	8004230 <I2SEx_TxISR_I2SExt+0x54>
 800422c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	490d      	ldr	r1, [pc, #52]	@ (800426c <I2SEx_TxISR_I2SExt+0x90>)
 8004238:	428b      	cmp	r3, r1
 800423a:	d101      	bne.n	8004240 <I2SEx_TxISR_I2SExt+0x64>
 800423c:	4b0c      	ldr	r3, [pc, #48]	@ (8004270 <I2SEx_TxISR_I2SExt+0x94>)
 800423e:	e001      	b.n	8004244 <I2SEx_TxISR_I2SExt+0x68>
 8004240:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004244:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004248:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800424e:	b29b      	uxth	r3, r3
 8004250:	2b00      	cmp	r3, #0
 8004252:	d106      	bne.n	8004262 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f7ff ff81 	bl	8004164 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004262:	bf00      	nop
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	40003800 	.word	0x40003800
 8004270:	40003400 	.word	0x40003400

08004274 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68d8      	ldr	r0, [r3, #12]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004286:	1c99      	adds	r1, r3, #2
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800428c:	b282      	uxth	r2, r0
 800428e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004294:	b29b      	uxth	r3, r3
 8004296:	3b01      	subs	r3, #1
 8004298:	b29a      	uxth	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d113      	bne.n	80042d0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80042b6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042bc:	b29b      	uxth	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d106      	bne.n	80042d0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7ff ff4a 	bl	8004164 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042d0:	bf00      	nop
 80042d2:	3708      	adds	r7, #8
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a20      	ldr	r2, [pc, #128]	@ (8004368 <I2SEx_RxISR_I2SExt+0x90>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d101      	bne.n	80042ee <I2SEx_RxISR_I2SExt+0x16>
 80042ea:	4b20      	ldr	r3, [pc, #128]	@ (800436c <I2SEx_RxISR_I2SExt+0x94>)
 80042ec:	e001      	b.n	80042f2 <I2SEx_RxISR_I2SExt+0x1a>
 80042ee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042f2:	68d8      	ldr	r0, [r3, #12]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f8:	1c99      	adds	r1, r3, #2
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80042fe:	b282      	uxth	r2, r0
 8004300:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004306:	b29b      	uxth	r3, r3
 8004308:	3b01      	subs	r3, #1
 800430a:	b29a      	uxth	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004314:	b29b      	uxth	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d121      	bne.n	800435e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a12      	ldr	r2, [pc, #72]	@ (8004368 <I2SEx_RxISR_I2SExt+0x90>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d101      	bne.n	8004328 <I2SEx_RxISR_I2SExt+0x50>
 8004324:	4b11      	ldr	r3, [pc, #68]	@ (800436c <I2SEx_RxISR_I2SExt+0x94>)
 8004326:	e001      	b.n	800432c <I2SEx_RxISR_I2SExt+0x54>
 8004328:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800432c:	685a      	ldr	r2, [r3, #4]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	490d      	ldr	r1, [pc, #52]	@ (8004368 <I2SEx_RxISR_I2SExt+0x90>)
 8004334:	428b      	cmp	r3, r1
 8004336:	d101      	bne.n	800433c <I2SEx_RxISR_I2SExt+0x64>
 8004338:	4b0c      	ldr	r3, [pc, #48]	@ (800436c <I2SEx_RxISR_I2SExt+0x94>)
 800433a:	e001      	b.n	8004340 <I2SEx_RxISR_I2SExt+0x68>
 800433c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004340:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004344:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800434a:	b29b      	uxth	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	d106      	bne.n	800435e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f7ff ff03 	bl	8004164 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800435e:	bf00      	nop
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	40003800 	.word	0x40003800
 800436c:	40003400 	.word	0x40003400

08004370 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e267      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d075      	beq.n	800447a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800438e:	4b88      	ldr	r3, [pc, #544]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 030c 	and.w	r3, r3, #12
 8004396:	2b04      	cmp	r3, #4
 8004398:	d00c      	beq.n	80043b4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800439a:	4b85      	ldr	r3, [pc, #532]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80043a2:	2b08      	cmp	r3, #8
 80043a4:	d112      	bne.n	80043cc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043a6:	4b82      	ldr	r3, [pc, #520]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043b2:	d10b      	bne.n	80043cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b4:	4b7e      	ldr	r3, [pc, #504]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d05b      	beq.n	8004478 <HAL_RCC_OscConfig+0x108>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d157      	bne.n	8004478 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e242      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043d4:	d106      	bne.n	80043e4 <HAL_RCC_OscConfig+0x74>
 80043d6:	4b76      	ldr	r3, [pc, #472]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a75      	ldr	r2, [pc, #468]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 80043dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	e01d      	b.n	8004420 <HAL_RCC_OscConfig+0xb0>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043ec:	d10c      	bne.n	8004408 <HAL_RCC_OscConfig+0x98>
 80043ee:	4b70      	ldr	r3, [pc, #448]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a6f      	ldr	r2, [pc, #444]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 80043f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	4b6d      	ldr	r3, [pc, #436]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a6c      	ldr	r2, [pc, #432]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 8004400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	e00b      	b.n	8004420 <HAL_RCC_OscConfig+0xb0>
 8004408:	4b69      	ldr	r3, [pc, #420]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a68      	ldr	r2, [pc, #416]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 800440e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	4b66      	ldr	r3, [pc, #408]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a65      	ldr	r2, [pc, #404]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 800441a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800441e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d013      	beq.n	8004450 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004428:	f7fc fd92 	bl	8000f50 <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004430:	f7fc fd8e 	bl	8000f50 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b64      	cmp	r3, #100	@ 0x64
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e207      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004442:	4b5b      	ldr	r3, [pc, #364]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0f0      	beq.n	8004430 <HAL_RCC_OscConfig+0xc0>
 800444e:	e014      	b.n	800447a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004450:	f7fc fd7e 	bl	8000f50 <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004458:	f7fc fd7a 	bl	8000f50 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b64      	cmp	r3, #100	@ 0x64
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e1f3      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800446a:	4b51      	ldr	r3, [pc, #324]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1f0      	bne.n	8004458 <HAL_RCC_OscConfig+0xe8>
 8004476:	e000      	b.n	800447a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d063      	beq.n	800454e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004486:	4b4a      	ldr	r3, [pc, #296]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f003 030c 	and.w	r3, r3, #12
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00b      	beq.n	80044aa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004492:	4b47      	ldr	r3, [pc, #284]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800449a:	2b08      	cmp	r3, #8
 800449c:	d11c      	bne.n	80044d8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800449e:	4b44      	ldr	r3, [pc, #272]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d116      	bne.n	80044d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044aa:	4b41      	ldr	r3, [pc, #260]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d005      	beq.n	80044c2 <HAL_RCC_OscConfig+0x152>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d001      	beq.n	80044c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e1c7      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c2:	4b3b      	ldr	r3, [pc, #236]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	4937      	ldr	r1, [pc, #220]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044d6:	e03a      	b.n	800454e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d020      	beq.n	8004522 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044e0:	4b34      	ldr	r3, [pc, #208]	@ (80045b4 <HAL_RCC_OscConfig+0x244>)
 80044e2:	2201      	movs	r2, #1
 80044e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e6:	f7fc fd33 	bl	8000f50 <HAL_GetTick>
 80044ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ec:	e008      	b.n	8004500 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044ee:	f7fc fd2f 	bl	8000f50 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e1a8      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004500:	4b2b      	ldr	r3, [pc, #172]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d0f0      	beq.n	80044ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800450c:	4b28      	ldr	r3, [pc, #160]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	4925      	ldr	r1, [pc, #148]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 800451c:	4313      	orrs	r3, r2
 800451e:	600b      	str	r3, [r1, #0]
 8004520:	e015      	b.n	800454e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004522:	4b24      	ldr	r3, [pc, #144]	@ (80045b4 <HAL_RCC_OscConfig+0x244>)
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004528:	f7fc fd12 	bl	8000f50 <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004530:	f7fc fd0e 	bl	8000f50 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e187      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004542:	4b1b      	ldr	r3, [pc, #108]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1f0      	bne.n	8004530 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0308 	and.w	r3, r3, #8
 8004556:	2b00      	cmp	r3, #0
 8004558:	d036      	beq.n	80045c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d016      	beq.n	8004590 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004562:	4b15      	ldr	r3, [pc, #84]	@ (80045b8 <HAL_RCC_OscConfig+0x248>)
 8004564:	2201      	movs	r2, #1
 8004566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004568:	f7fc fcf2 	bl	8000f50 <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004570:	f7fc fcee 	bl	8000f50 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e167      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004582:	4b0b      	ldr	r3, [pc, #44]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 8004584:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0f0      	beq.n	8004570 <HAL_RCC_OscConfig+0x200>
 800458e:	e01b      	b.n	80045c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004590:	4b09      	ldr	r3, [pc, #36]	@ (80045b8 <HAL_RCC_OscConfig+0x248>)
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004596:	f7fc fcdb 	bl	8000f50 <HAL_GetTick>
 800459a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800459c:	e00e      	b.n	80045bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800459e:	f7fc fcd7 	bl	8000f50 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d907      	bls.n	80045bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e150      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
 80045b0:	40023800 	.word	0x40023800
 80045b4:	42470000 	.word	0x42470000
 80045b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045bc:	4b88      	ldr	r3, [pc, #544]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 80045be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1ea      	bne.n	800459e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 8097 	beq.w	8004704 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045d6:	2300      	movs	r3, #0
 80045d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045da:	4b81      	ldr	r3, [pc, #516]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 80045dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10f      	bne.n	8004606 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045e6:	2300      	movs	r3, #0
 80045e8:	60bb      	str	r3, [r7, #8]
 80045ea:	4b7d      	ldr	r3, [pc, #500]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 80045ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ee:	4a7c      	ldr	r2, [pc, #496]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 80045f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80045f6:	4b7a      	ldr	r3, [pc, #488]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 80045f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045fe:	60bb      	str	r3, [r7, #8]
 8004600:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004602:	2301      	movs	r3, #1
 8004604:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004606:	4b77      	ldr	r3, [pc, #476]	@ (80047e4 <HAL_RCC_OscConfig+0x474>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800460e:	2b00      	cmp	r3, #0
 8004610:	d118      	bne.n	8004644 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004612:	4b74      	ldr	r3, [pc, #464]	@ (80047e4 <HAL_RCC_OscConfig+0x474>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a73      	ldr	r2, [pc, #460]	@ (80047e4 <HAL_RCC_OscConfig+0x474>)
 8004618:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800461c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800461e:	f7fc fc97 	bl	8000f50 <HAL_GetTick>
 8004622:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004624:	e008      	b.n	8004638 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004626:	f7fc fc93 	bl	8000f50 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d901      	bls.n	8004638 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e10c      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004638:	4b6a      	ldr	r3, [pc, #424]	@ (80047e4 <HAL_RCC_OscConfig+0x474>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004640:	2b00      	cmp	r3, #0
 8004642:	d0f0      	beq.n	8004626 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d106      	bne.n	800465a <HAL_RCC_OscConfig+0x2ea>
 800464c:	4b64      	ldr	r3, [pc, #400]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 800464e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004650:	4a63      	ldr	r2, [pc, #396]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 8004652:	f043 0301 	orr.w	r3, r3, #1
 8004656:	6713      	str	r3, [r2, #112]	@ 0x70
 8004658:	e01c      	b.n	8004694 <HAL_RCC_OscConfig+0x324>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	2b05      	cmp	r3, #5
 8004660:	d10c      	bne.n	800467c <HAL_RCC_OscConfig+0x30c>
 8004662:	4b5f      	ldr	r3, [pc, #380]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 8004664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004666:	4a5e      	ldr	r2, [pc, #376]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 8004668:	f043 0304 	orr.w	r3, r3, #4
 800466c:	6713      	str	r3, [r2, #112]	@ 0x70
 800466e:	4b5c      	ldr	r3, [pc, #368]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 8004670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004672:	4a5b      	ldr	r2, [pc, #364]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 8004674:	f043 0301 	orr.w	r3, r3, #1
 8004678:	6713      	str	r3, [r2, #112]	@ 0x70
 800467a:	e00b      	b.n	8004694 <HAL_RCC_OscConfig+0x324>
 800467c:	4b58      	ldr	r3, [pc, #352]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 800467e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004680:	4a57      	ldr	r2, [pc, #348]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 8004682:	f023 0301 	bic.w	r3, r3, #1
 8004686:	6713      	str	r3, [r2, #112]	@ 0x70
 8004688:	4b55      	ldr	r3, [pc, #340]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 800468a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800468c:	4a54      	ldr	r2, [pc, #336]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 800468e:	f023 0304 	bic.w	r3, r3, #4
 8004692:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d015      	beq.n	80046c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800469c:	f7fc fc58 	bl	8000f50 <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a2:	e00a      	b.n	80046ba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046a4:	f7fc fc54 	bl	8000f50 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e0cb      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ba:	4b49      	ldr	r3, [pc, #292]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 80046bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d0ee      	beq.n	80046a4 <HAL_RCC_OscConfig+0x334>
 80046c6:	e014      	b.n	80046f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046c8:	f7fc fc42 	bl	8000f50 <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ce:	e00a      	b.n	80046e6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046d0:	f7fc fc3e 	bl	8000f50 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046de:	4293      	cmp	r3, r2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e0b5      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046e6:	4b3e      	ldr	r3, [pc, #248]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 80046e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1ee      	bne.n	80046d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046f2:	7dfb      	ldrb	r3, [r7, #23]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d105      	bne.n	8004704 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046f8:	4b39      	ldr	r3, [pc, #228]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 80046fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fc:	4a38      	ldr	r2, [pc, #224]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 80046fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004702:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 80a1 	beq.w	8004850 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800470e:	4b34      	ldr	r3, [pc, #208]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f003 030c 	and.w	r3, r3, #12
 8004716:	2b08      	cmp	r3, #8
 8004718:	d05c      	beq.n	80047d4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	2b02      	cmp	r3, #2
 8004720:	d141      	bne.n	80047a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004722:	4b31      	ldr	r3, [pc, #196]	@ (80047e8 <HAL_RCC_OscConfig+0x478>)
 8004724:	2200      	movs	r2, #0
 8004726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004728:	f7fc fc12 	bl	8000f50 <HAL_GetTick>
 800472c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004730:	f7fc fc0e 	bl	8000f50 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e087      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004742:	4b27      	ldr	r3, [pc, #156]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1f0      	bne.n	8004730 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	69da      	ldr	r2, [r3, #28]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	431a      	orrs	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475c:	019b      	lsls	r3, r3, #6
 800475e:	431a      	orrs	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004764:	085b      	lsrs	r3, r3, #1
 8004766:	3b01      	subs	r3, #1
 8004768:	041b      	lsls	r3, r3, #16
 800476a:	431a      	orrs	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004770:	061b      	lsls	r3, r3, #24
 8004772:	491b      	ldr	r1, [pc, #108]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 8004774:	4313      	orrs	r3, r2
 8004776:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004778:	4b1b      	ldr	r3, [pc, #108]	@ (80047e8 <HAL_RCC_OscConfig+0x478>)
 800477a:	2201      	movs	r2, #1
 800477c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800477e:	f7fc fbe7 	bl	8000f50 <HAL_GetTick>
 8004782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004784:	e008      	b.n	8004798 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004786:	f7fc fbe3 	bl	8000f50 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d901      	bls.n	8004798 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e05c      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004798:	4b11      	ldr	r3, [pc, #68]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0f0      	beq.n	8004786 <HAL_RCC_OscConfig+0x416>
 80047a4:	e054      	b.n	8004850 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047a6:	4b10      	ldr	r3, [pc, #64]	@ (80047e8 <HAL_RCC_OscConfig+0x478>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ac:	f7fc fbd0 	bl	8000f50 <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047b4:	f7fc fbcc 	bl	8000f50 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e045      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c6:	4b06      	ldr	r3, [pc, #24]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1f0      	bne.n	80047b4 <HAL_RCC_OscConfig+0x444>
 80047d2:	e03d      	b.n	8004850 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d107      	bne.n	80047ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e038      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
 80047e0:	40023800 	.word	0x40023800
 80047e4:	40007000 	.word	0x40007000
 80047e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047ec:	4b1b      	ldr	r3, [pc, #108]	@ (800485c <HAL_RCC_OscConfig+0x4ec>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d028      	beq.n	800484c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004804:	429a      	cmp	r2, r3
 8004806:	d121      	bne.n	800484c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004812:	429a      	cmp	r2, r3
 8004814:	d11a      	bne.n	800484c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800481c:	4013      	ands	r3, r2
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004822:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004824:	4293      	cmp	r3, r2
 8004826:	d111      	bne.n	800484c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004832:	085b      	lsrs	r3, r3, #1
 8004834:	3b01      	subs	r3, #1
 8004836:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004838:	429a      	cmp	r2, r3
 800483a:	d107      	bne.n	800484c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004846:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004848:	429a      	cmp	r2, r3
 800484a:	d001      	beq.n	8004850 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e000      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3718      	adds	r7, #24
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	40023800 	.word	0x40023800

08004860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e0cc      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004874:	4b68      	ldr	r3, [pc, #416]	@ (8004a18 <HAL_RCC_ClockConfig+0x1b8>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0307 	and.w	r3, r3, #7
 800487c:	683a      	ldr	r2, [r7, #0]
 800487e:	429a      	cmp	r2, r3
 8004880:	d90c      	bls.n	800489c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004882:	4b65      	ldr	r3, [pc, #404]	@ (8004a18 <HAL_RCC_ClockConfig+0x1b8>)
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	b2d2      	uxtb	r2, r2
 8004888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800488a:	4b63      	ldr	r3, [pc, #396]	@ (8004a18 <HAL_RCC_ClockConfig+0x1b8>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0307 	and.w	r3, r3, #7
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	429a      	cmp	r2, r3
 8004896:	d001      	beq.n	800489c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e0b8      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d020      	beq.n	80048ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0304 	and.w	r3, r3, #4
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d005      	beq.n	80048c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048b4:	4b59      	ldr	r3, [pc, #356]	@ (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	4a58      	ldr	r2, [pc, #352]	@ (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80048ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80048be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0308 	and.w	r3, r3, #8
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d005      	beq.n	80048d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048cc:	4b53      	ldr	r3, [pc, #332]	@ (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	4a52      	ldr	r2, [pc, #328]	@ (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80048d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80048d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048d8:	4b50      	ldr	r3, [pc, #320]	@ (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	494d      	ldr	r1, [pc, #308]	@ (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d044      	beq.n	8004980 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d107      	bne.n	800490e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048fe:	4b47      	ldr	r3, [pc, #284]	@ (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d119      	bne.n	800493e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e07f      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	2b02      	cmp	r3, #2
 8004914:	d003      	beq.n	800491e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800491a:	2b03      	cmp	r3, #3
 800491c:	d107      	bne.n	800492e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800491e:	4b3f      	ldr	r3, [pc, #252]	@ (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d109      	bne.n	800493e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e06f      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800492e:	4b3b      	ldr	r3, [pc, #236]	@ (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e067      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800493e:	4b37      	ldr	r3, [pc, #220]	@ (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f023 0203 	bic.w	r2, r3, #3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	4934      	ldr	r1, [pc, #208]	@ (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 800494c:	4313      	orrs	r3, r2
 800494e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004950:	f7fc fafe 	bl	8000f50 <HAL_GetTick>
 8004954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004956:	e00a      	b.n	800496e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004958:	f7fc fafa 	bl	8000f50 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004966:	4293      	cmp	r3, r2
 8004968:	d901      	bls.n	800496e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e04f      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800496e:	4b2b      	ldr	r3, [pc, #172]	@ (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f003 020c 	and.w	r2, r3, #12
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	429a      	cmp	r2, r3
 800497e:	d1eb      	bne.n	8004958 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004980:	4b25      	ldr	r3, [pc, #148]	@ (8004a18 <HAL_RCC_ClockConfig+0x1b8>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	429a      	cmp	r2, r3
 800498c:	d20c      	bcs.n	80049a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800498e:	4b22      	ldr	r3, [pc, #136]	@ (8004a18 <HAL_RCC_ClockConfig+0x1b8>)
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	b2d2      	uxtb	r2, r2
 8004994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004996:	4b20      	ldr	r3, [pc, #128]	@ (8004a18 <HAL_RCC_ClockConfig+0x1b8>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0307 	and.w	r3, r3, #7
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d001      	beq.n	80049a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e032      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0304 	and.w	r3, r3, #4
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d008      	beq.n	80049c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049b4:	4b19      	ldr	r3, [pc, #100]	@ (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	4916      	ldr	r1, [pc, #88]	@ (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0308 	and.w	r3, r3, #8
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d009      	beq.n	80049e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049d2:	4b12      	ldr	r3, [pc, #72]	@ (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	490e      	ldr	r1, [pc, #56]	@ (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049e6:	f000 f821 	bl	8004a2c <HAL_RCC_GetSysClockFreq>
 80049ea:	4602      	mov	r2, r0
 80049ec:	4b0b      	ldr	r3, [pc, #44]	@ (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	091b      	lsrs	r3, r3, #4
 80049f2:	f003 030f 	and.w	r3, r3, #15
 80049f6:	490a      	ldr	r1, [pc, #40]	@ (8004a20 <HAL_RCC_ClockConfig+0x1c0>)
 80049f8:	5ccb      	ldrb	r3, [r1, r3]
 80049fa:	fa22 f303 	lsr.w	r3, r2, r3
 80049fe:	4a09      	ldr	r2, [pc, #36]	@ (8004a24 <HAL_RCC_ClockConfig+0x1c4>)
 8004a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004a02:	4b09      	ldr	r3, [pc, #36]	@ (8004a28 <HAL_RCC_ClockConfig+0x1c8>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fc fa5e 	bl	8000ec8 <HAL_InitTick>

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	40023c00 	.word	0x40023c00
 8004a1c:	40023800 	.word	0x40023800
 8004a20:	0800996c 	.word	0x0800996c
 8004a24:	20000000 	.word	0x20000000
 8004a28:	20000004 	.word	0x20000004

08004a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a30:	b094      	sub	sp, #80	@ 0x50
 8004a32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a44:	4b79      	ldr	r3, [pc, #484]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f003 030c 	and.w	r3, r3, #12
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	d00d      	beq.n	8004a6c <HAL_RCC_GetSysClockFreq+0x40>
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	f200 80e1 	bhi.w	8004c18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d002      	beq.n	8004a60 <HAL_RCC_GetSysClockFreq+0x34>
 8004a5a:	2b04      	cmp	r3, #4
 8004a5c:	d003      	beq.n	8004a66 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a5e:	e0db      	b.n	8004c18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a60:	4b73      	ldr	r3, [pc, #460]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a62:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a64:	e0db      	b.n	8004c1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a66:	4b73      	ldr	r3, [pc, #460]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a6a:	e0d8      	b.n	8004c1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a6c:	4b6f      	ldr	r3, [pc, #444]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a74:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a76:	4b6d      	ldr	r3, [pc, #436]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d063      	beq.n	8004b4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a82:	4b6a      	ldr	r3, [pc, #424]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	099b      	lsrs	r3, r3, #6
 8004a88:	2200      	movs	r2, #0
 8004a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a94:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a96:	2300      	movs	r3, #0
 8004a98:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004a9e:	4622      	mov	r2, r4
 8004aa0:	462b      	mov	r3, r5
 8004aa2:	f04f 0000 	mov.w	r0, #0
 8004aa6:	f04f 0100 	mov.w	r1, #0
 8004aaa:	0159      	lsls	r1, r3, #5
 8004aac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ab0:	0150      	lsls	r0, r2, #5
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	4621      	mov	r1, r4
 8004ab8:	1a51      	subs	r1, r2, r1
 8004aba:	6139      	str	r1, [r7, #16]
 8004abc:	4629      	mov	r1, r5
 8004abe:	eb63 0301 	sbc.w	r3, r3, r1
 8004ac2:	617b      	str	r3, [r7, #20]
 8004ac4:	f04f 0200 	mov.w	r2, #0
 8004ac8:	f04f 0300 	mov.w	r3, #0
 8004acc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ad0:	4659      	mov	r1, fp
 8004ad2:	018b      	lsls	r3, r1, #6
 8004ad4:	4651      	mov	r1, sl
 8004ad6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ada:	4651      	mov	r1, sl
 8004adc:	018a      	lsls	r2, r1, #6
 8004ade:	4651      	mov	r1, sl
 8004ae0:	ebb2 0801 	subs.w	r8, r2, r1
 8004ae4:	4659      	mov	r1, fp
 8004ae6:	eb63 0901 	sbc.w	r9, r3, r1
 8004aea:	f04f 0200 	mov.w	r2, #0
 8004aee:	f04f 0300 	mov.w	r3, #0
 8004af2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004af6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004afa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004afe:	4690      	mov	r8, r2
 8004b00:	4699      	mov	r9, r3
 8004b02:	4623      	mov	r3, r4
 8004b04:	eb18 0303 	adds.w	r3, r8, r3
 8004b08:	60bb      	str	r3, [r7, #8]
 8004b0a:	462b      	mov	r3, r5
 8004b0c:	eb49 0303 	adc.w	r3, r9, r3
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	f04f 0200 	mov.w	r2, #0
 8004b16:	f04f 0300 	mov.w	r3, #0
 8004b1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b1e:	4629      	mov	r1, r5
 8004b20:	024b      	lsls	r3, r1, #9
 8004b22:	4621      	mov	r1, r4
 8004b24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b28:	4621      	mov	r1, r4
 8004b2a:	024a      	lsls	r2, r1, #9
 8004b2c:	4610      	mov	r0, r2
 8004b2e:	4619      	mov	r1, r3
 8004b30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b32:	2200      	movs	r2, #0
 8004b34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b3c:	f7fb fb44 	bl	80001c8 <__aeabi_uldivmod>
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	4613      	mov	r3, r2
 8004b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b48:	e058      	b.n	8004bfc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b4a:	4b38      	ldr	r3, [pc, #224]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	099b      	lsrs	r3, r3, #6
 8004b50:	2200      	movs	r2, #0
 8004b52:	4618      	mov	r0, r3
 8004b54:	4611      	mov	r1, r2
 8004b56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b5a:	623b      	str	r3, [r7, #32]
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b64:	4642      	mov	r2, r8
 8004b66:	464b      	mov	r3, r9
 8004b68:	f04f 0000 	mov.w	r0, #0
 8004b6c:	f04f 0100 	mov.w	r1, #0
 8004b70:	0159      	lsls	r1, r3, #5
 8004b72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b76:	0150      	lsls	r0, r2, #5
 8004b78:	4602      	mov	r2, r0
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	4641      	mov	r1, r8
 8004b7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b82:	4649      	mov	r1, r9
 8004b84:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b88:	f04f 0200 	mov.w	r2, #0
 8004b8c:	f04f 0300 	mov.w	r3, #0
 8004b90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b9c:	ebb2 040a 	subs.w	r4, r2, sl
 8004ba0:	eb63 050b 	sbc.w	r5, r3, fp
 8004ba4:	f04f 0200 	mov.w	r2, #0
 8004ba8:	f04f 0300 	mov.w	r3, #0
 8004bac:	00eb      	lsls	r3, r5, #3
 8004bae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bb2:	00e2      	lsls	r2, r4, #3
 8004bb4:	4614      	mov	r4, r2
 8004bb6:	461d      	mov	r5, r3
 8004bb8:	4643      	mov	r3, r8
 8004bba:	18e3      	adds	r3, r4, r3
 8004bbc:	603b      	str	r3, [r7, #0]
 8004bbe:	464b      	mov	r3, r9
 8004bc0:	eb45 0303 	adc.w	r3, r5, r3
 8004bc4:	607b      	str	r3, [r7, #4]
 8004bc6:	f04f 0200 	mov.w	r2, #0
 8004bca:	f04f 0300 	mov.w	r3, #0
 8004bce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bd2:	4629      	mov	r1, r5
 8004bd4:	028b      	lsls	r3, r1, #10
 8004bd6:	4621      	mov	r1, r4
 8004bd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bdc:	4621      	mov	r1, r4
 8004bde:	028a      	lsls	r2, r1, #10
 8004be0:	4610      	mov	r0, r2
 8004be2:	4619      	mov	r1, r3
 8004be4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004be6:	2200      	movs	r2, #0
 8004be8:	61bb      	str	r3, [r7, #24]
 8004bea:	61fa      	str	r2, [r7, #28]
 8004bec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bf0:	f7fb faea 	bl	80001c8 <__aeabi_uldivmod>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	0c1b      	lsrs	r3, r3, #16
 8004c02:	f003 0303 	and.w	r3, r3, #3
 8004c06:	3301      	adds	r3, #1
 8004c08:	005b      	lsls	r3, r3, #1
 8004c0a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004c0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c14:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c16:	e002      	b.n	8004c1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c18:	4b05      	ldr	r3, [pc, #20]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3750      	adds	r7, #80	@ 0x50
 8004c24:	46bd      	mov	sp, r7
 8004c26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c2a:	bf00      	nop
 8004c2c:	40023800 	.word	0x40023800
 8004c30:	00f42400 	.word	0x00f42400
 8004c34:	007a1200 	.word	0x007a1200

08004c38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c3c:	4b03      	ldr	r3, [pc, #12]	@ (8004c4c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	20000000 	.word	0x20000000

08004c50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c54:	f7ff fff0 	bl	8004c38 <HAL_RCC_GetHCLKFreq>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	4b05      	ldr	r3, [pc, #20]	@ (8004c70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	0a9b      	lsrs	r3, r3, #10
 8004c60:	f003 0307 	and.w	r3, r3, #7
 8004c64:	4903      	ldr	r1, [pc, #12]	@ (8004c74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c66:	5ccb      	ldrb	r3, [r1, r3]
 8004c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	40023800 	.word	0x40023800
 8004c74:	0800997c 	.word	0x0800997c

08004c78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c7c:	f7ff ffdc 	bl	8004c38 <HAL_RCC_GetHCLKFreq>
 8004c80:	4602      	mov	r2, r0
 8004c82:	4b05      	ldr	r3, [pc, #20]	@ (8004c98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	0b5b      	lsrs	r3, r3, #13
 8004c88:	f003 0307 	and.w	r3, r3, #7
 8004c8c:	4903      	ldr	r1, [pc, #12]	@ (8004c9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c8e:	5ccb      	ldrb	r3, [r1, r3]
 8004c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	40023800 	.word	0x40023800
 8004c9c:	0800997c 	.word	0x0800997c

08004ca0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d105      	bne.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d035      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004cc8:	4b62      	ldr	r3, [pc, #392]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cce:	f7fc f93f 	bl	8000f50 <HAL_GetTick>
 8004cd2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cd4:	e008      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004cd6:	f7fc f93b 	bl	8000f50 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e0b0      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ce8:	4b5b      	ldr	r3, [pc, #364]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1f0      	bne.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	019a      	lsls	r2, r3, #6
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	071b      	lsls	r3, r3, #28
 8004d00:	4955      	ldr	r1, [pc, #340]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d08:	4b52      	ldr	r3, [pc, #328]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d0e:	f7fc f91f 	bl	8000f50 <HAL_GetTick>
 8004d12:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d14:	e008      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d16:	f7fc f91b 	bl	8000f50 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d901      	bls.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e090      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d28:	4b4b      	ldr	r3, [pc, #300]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d0f0      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 8083 	beq.w	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d42:	2300      	movs	r3, #0
 8004d44:	60fb      	str	r3, [r7, #12]
 8004d46:	4b44      	ldr	r3, [pc, #272]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4a:	4a43      	ldr	r2, [pc, #268]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d50:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d52:	4b41      	ldr	r3, [pc, #260]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d5e:	4b3f      	ldr	r3, [pc, #252]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a3e      	ldr	r2, [pc, #248]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d68:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d6a:	f7fc f8f1 	bl	8000f50 <HAL_GetTick>
 8004d6e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004d70:	e008      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d72:	f7fc f8ed 	bl	8000f50 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d901      	bls.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e062      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004d84:	4b35      	ldr	r3, [pc, #212]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d0f0      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d90:	4b31      	ldr	r3, [pc, #196]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d98:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d02f      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d028      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004dae:	4b2a      	ldr	r3, [pc, #168]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004db2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004db6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004db8:	4b29      	ldr	r3, [pc, #164]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004dba:	2201      	movs	r2, #1
 8004dbc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004dbe:	4b28      	ldr	r3, [pc, #160]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004dc4:	4a24      	ldr	r2, [pc, #144]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004dca:	4b23      	ldr	r3, [pc, #140]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d114      	bne.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004dd6:	f7fc f8bb 	bl	8000f50 <HAL_GetTick>
 8004dda:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ddc:	e00a      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dde:	f7fc f8b7 	bl	8000f50 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d901      	bls.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e02a      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004df4:	4b18      	ldr	r3, [pc, #96]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004df6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d0ee      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e0c:	d10d      	bne.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004e0e:	4b12      	ldr	r3, [pc, #72]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004e1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e22:	490d      	ldr	r1, [pc, #52]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	608b      	str	r3, [r1, #8]
 8004e28:	e005      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e30:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004e34:	6093      	str	r3, [r2, #8]
 8004e36:	4b08      	ldr	r3, [pc, #32]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e38:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e42:	4905      	ldr	r1, [pc, #20]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3718      	adds	r7, #24
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	42470068 	.word	0x42470068
 8004e58:	40023800 	.word	0x40023800
 8004e5c:	40007000 	.word	0x40007000
 8004e60:	42470e40 	.word	0x42470e40

08004e64 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b087      	sub	sp, #28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004e70:	2300      	movs	r3, #0
 8004e72:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d13f      	bne.n	8004f02 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004e82:	4b24      	ldr	r3, [pc, #144]	@ (8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e8a:	60fb      	str	r3, [r7, #12]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d006      	beq.n	8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e98:	d12f      	bne.n	8004efa <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e9a:	4b1f      	ldr	r3, [pc, #124]	@ (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e9c:	617b      	str	r3, [r7, #20]
          break;
 8004e9e:	e02f      	b.n	8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ea0:	4b1c      	ldr	r3, [pc, #112]	@ (8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ea8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004eac:	d108      	bne.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004eae:	4b19      	ldr	r3, [pc, #100]	@ (8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004eb6:	4a19      	ldr	r2, [pc, #100]	@ (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ebc:	613b      	str	r3, [r7, #16]
 8004ebe:	e007      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004ec0:	4b14      	ldr	r3, [pc, #80]	@ (8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ec8:	4a15      	ldr	r2, [pc, #84]	@ (8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ece:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004ed0:	4b10      	ldr	r3, [pc, #64]	@ (8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ed6:	099b      	lsrs	r3, r3, #6
 8004ed8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	fb02 f303 	mul.w	r3, r2, r3
 8004ee2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004eea:	0f1b      	lsrs	r3, r3, #28
 8004eec:	f003 0307 	and.w	r3, r3, #7
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef6:	617b      	str	r3, [r7, #20]
          break;
 8004ef8:	e002      	b.n	8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004efa:	2300      	movs	r3, #0
 8004efc:	617b      	str	r3, [r7, #20]
          break;
 8004efe:	bf00      	nop
        }
      }
      break;
 8004f00:	e000      	b.n	8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004f02:	bf00      	nop
    }
  }
  return frequency;
 8004f04:	697b      	ldr	r3, [r7, #20]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	371c      	adds	r7, #28
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	40023800 	.word	0x40023800
 8004f18:	00bb8000 	.word	0x00bb8000
 8004f1c:	007a1200 	.word	0x007a1200
 8004f20:	00f42400 	.word	0x00f42400

08004f24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e07b      	b.n	800502e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d108      	bne.n	8004f50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f46:	d009      	beq.n	8004f5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	61da      	str	r2, [r3, #28]
 8004f4e:	e005      	b.n	8004f5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d106      	bne.n	8004f7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7fb fd88 	bl	8000a8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2202      	movs	r2, #2
 8004f80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a1b      	ldr	r3, [r3, #32]
 8004fdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fe0:	ea42 0103 	orr.w	r1, r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	0c1b      	lsrs	r3, r3, #16
 8004ffa:	f003 0104 	and.w	r1, r3, #4
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005002:	f003 0210 	and.w	r2, r3, #16
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	430a      	orrs	r2, r1
 800500c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	69da      	ldr	r2, [r3, #28]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800501c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b082      	sub	sp, #8
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d101      	bne.n	8005048 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e042      	b.n	80050ce <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b00      	cmp	r3, #0
 8005052:	d106      	bne.n	8005062 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f7fb fe9f 	bl	8000da0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2224      	movs	r2, #36	@ 0x24
 8005066:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68da      	ldr	r2, [r3, #12]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005078:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 f82c 	bl	80050d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	691a      	ldr	r2, [r3, #16]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800508e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	695a      	ldr	r2, [r3, #20]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800509e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68da      	ldr	r2, [r3, #12]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050ae:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2220      	movs	r2, #32
 80050c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3708      	adds	r7, #8
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
	...

080050d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050dc:	b0c0      	sub	sp, #256	@ 0x100
 80050de:	af00      	add	r7, sp, #0
 80050e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80050f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050f4:	68d9      	ldr	r1, [r3, #12]
 80050f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	ea40 0301 	orr.w	r3, r0, r1
 8005100:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	431a      	orrs	r2, r3
 8005110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	431a      	orrs	r2, r3
 8005118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	4313      	orrs	r3, r2
 8005120:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005130:	f021 010c 	bic.w	r1, r1, #12
 8005134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800513e:	430b      	orrs	r3, r1
 8005140:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800514e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005152:	6999      	ldr	r1, [r3, #24]
 8005154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	ea40 0301 	orr.w	r3, r0, r1
 800515e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	4b8f      	ldr	r3, [pc, #572]	@ (80053a4 <UART_SetConfig+0x2cc>)
 8005168:	429a      	cmp	r2, r3
 800516a:	d005      	beq.n	8005178 <UART_SetConfig+0xa0>
 800516c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	4b8d      	ldr	r3, [pc, #564]	@ (80053a8 <UART_SetConfig+0x2d0>)
 8005174:	429a      	cmp	r2, r3
 8005176:	d104      	bne.n	8005182 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005178:	f7ff fd7e 	bl	8004c78 <HAL_RCC_GetPCLK2Freq>
 800517c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005180:	e003      	b.n	800518a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005182:	f7ff fd65 	bl	8004c50 <HAL_RCC_GetPCLK1Freq>
 8005186:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800518a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005194:	f040 810c 	bne.w	80053b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005198:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800519c:	2200      	movs	r2, #0
 800519e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80051a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80051a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80051aa:	4622      	mov	r2, r4
 80051ac:	462b      	mov	r3, r5
 80051ae:	1891      	adds	r1, r2, r2
 80051b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80051b2:	415b      	adcs	r3, r3
 80051b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80051ba:	4621      	mov	r1, r4
 80051bc:	eb12 0801 	adds.w	r8, r2, r1
 80051c0:	4629      	mov	r1, r5
 80051c2:	eb43 0901 	adc.w	r9, r3, r1
 80051c6:	f04f 0200 	mov.w	r2, #0
 80051ca:	f04f 0300 	mov.w	r3, #0
 80051ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051da:	4690      	mov	r8, r2
 80051dc:	4699      	mov	r9, r3
 80051de:	4623      	mov	r3, r4
 80051e0:	eb18 0303 	adds.w	r3, r8, r3
 80051e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80051e8:	462b      	mov	r3, r5
 80051ea:	eb49 0303 	adc.w	r3, r9, r3
 80051ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80051f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80051fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005202:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005206:	460b      	mov	r3, r1
 8005208:	18db      	adds	r3, r3, r3
 800520a:	653b      	str	r3, [r7, #80]	@ 0x50
 800520c:	4613      	mov	r3, r2
 800520e:	eb42 0303 	adc.w	r3, r2, r3
 8005212:	657b      	str	r3, [r7, #84]	@ 0x54
 8005214:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005218:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800521c:	f7fa ffd4 	bl	80001c8 <__aeabi_uldivmod>
 8005220:	4602      	mov	r2, r0
 8005222:	460b      	mov	r3, r1
 8005224:	4b61      	ldr	r3, [pc, #388]	@ (80053ac <UART_SetConfig+0x2d4>)
 8005226:	fba3 2302 	umull	r2, r3, r3, r2
 800522a:	095b      	lsrs	r3, r3, #5
 800522c:	011c      	lsls	r4, r3, #4
 800522e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005232:	2200      	movs	r2, #0
 8005234:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005238:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800523c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005240:	4642      	mov	r2, r8
 8005242:	464b      	mov	r3, r9
 8005244:	1891      	adds	r1, r2, r2
 8005246:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005248:	415b      	adcs	r3, r3
 800524a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800524c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005250:	4641      	mov	r1, r8
 8005252:	eb12 0a01 	adds.w	sl, r2, r1
 8005256:	4649      	mov	r1, r9
 8005258:	eb43 0b01 	adc.w	fp, r3, r1
 800525c:	f04f 0200 	mov.w	r2, #0
 8005260:	f04f 0300 	mov.w	r3, #0
 8005264:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005268:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800526c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005270:	4692      	mov	sl, r2
 8005272:	469b      	mov	fp, r3
 8005274:	4643      	mov	r3, r8
 8005276:	eb1a 0303 	adds.w	r3, sl, r3
 800527a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800527e:	464b      	mov	r3, r9
 8005280:	eb4b 0303 	adc.w	r3, fp, r3
 8005284:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005294:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005298:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800529c:	460b      	mov	r3, r1
 800529e:	18db      	adds	r3, r3, r3
 80052a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80052a2:	4613      	mov	r3, r2
 80052a4:	eb42 0303 	adc.w	r3, r2, r3
 80052a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80052aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80052ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80052b2:	f7fa ff89 	bl	80001c8 <__aeabi_uldivmod>
 80052b6:	4602      	mov	r2, r0
 80052b8:	460b      	mov	r3, r1
 80052ba:	4611      	mov	r1, r2
 80052bc:	4b3b      	ldr	r3, [pc, #236]	@ (80053ac <UART_SetConfig+0x2d4>)
 80052be:	fba3 2301 	umull	r2, r3, r3, r1
 80052c2:	095b      	lsrs	r3, r3, #5
 80052c4:	2264      	movs	r2, #100	@ 0x64
 80052c6:	fb02 f303 	mul.w	r3, r2, r3
 80052ca:	1acb      	subs	r3, r1, r3
 80052cc:	00db      	lsls	r3, r3, #3
 80052ce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80052d2:	4b36      	ldr	r3, [pc, #216]	@ (80053ac <UART_SetConfig+0x2d4>)
 80052d4:	fba3 2302 	umull	r2, r3, r3, r2
 80052d8:	095b      	lsrs	r3, r3, #5
 80052da:	005b      	lsls	r3, r3, #1
 80052dc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80052e0:	441c      	add	r4, r3
 80052e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052e6:	2200      	movs	r2, #0
 80052e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80052ec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80052f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80052f4:	4642      	mov	r2, r8
 80052f6:	464b      	mov	r3, r9
 80052f8:	1891      	adds	r1, r2, r2
 80052fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80052fc:	415b      	adcs	r3, r3
 80052fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005300:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005304:	4641      	mov	r1, r8
 8005306:	1851      	adds	r1, r2, r1
 8005308:	6339      	str	r1, [r7, #48]	@ 0x30
 800530a:	4649      	mov	r1, r9
 800530c:	414b      	adcs	r3, r1
 800530e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005310:	f04f 0200 	mov.w	r2, #0
 8005314:	f04f 0300 	mov.w	r3, #0
 8005318:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800531c:	4659      	mov	r1, fp
 800531e:	00cb      	lsls	r3, r1, #3
 8005320:	4651      	mov	r1, sl
 8005322:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005326:	4651      	mov	r1, sl
 8005328:	00ca      	lsls	r2, r1, #3
 800532a:	4610      	mov	r0, r2
 800532c:	4619      	mov	r1, r3
 800532e:	4603      	mov	r3, r0
 8005330:	4642      	mov	r2, r8
 8005332:	189b      	adds	r3, r3, r2
 8005334:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005338:	464b      	mov	r3, r9
 800533a:	460a      	mov	r2, r1
 800533c:	eb42 0303 	adc.w	r3, r2, r3
 8005340:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005350:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005354:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005358:	460b      	mov	r3, r1
 800535a:	18db      	adds	r3, r3, r3
 800535c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800535e:	4613      	mov	r3, r2
 8005360:	eb42 0303 	adc.w	r3, r2, r3
 8005364:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005366:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800536a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800536e:	f7fa ff2b 	bl	80001c8 <__aeabi_uldivmod>
 8005372:	4602      	mov	r2, r0
 8005374:	460b      	mov	r3, r1
 8005376:	4b0d      	ldr	r3, [pc, #52]	@ (80053ac <UART_SetConfig+0x2d4>)
 8005378:	fba3 1302 	umull	r1, r3, r3, r2
 800537c:	095b      	lsrs	r3, r3, #5
 800537e:	2164      	movs	r1, #100	@ 0x64
 8005380:	fb01 f303 	mul.w	r3, r1, r3
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	00db      	lsls	r3, r3, #3
 8005388:	3332      	adds	r3, #50	@ 0x32
 800538a:	4a08      	ldr	r2, [pc, #32]	@ (80053ac <UART_SetConfig+0x2d4>)
 800538c:	fba2 2303 	umull	r2, r3, r2, r3
 8005390:	095b      	lsrs	r3, r3, #5
 8005392:	f003 0207 	and.w	r2, r3, #7
 8005396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4422      	add	r2, r4
 800539e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053a0:	e106      	b.n	80055b0 <UART_SetConfig+0x4d8>
 80053a2:	bf00      	nop
 80053a4:	40011000 	.word	0x40011000
 80053a8:	40011400 	.word	0x40011400
 80053ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053b4:	2200      	movs	r2, #0
 80053b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80053ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80053be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80053c2:	4642      	mov	r2, r8
 80053c4:	464b      	mov	r3, r9
 80053c6:	1891      	adds	r1, r2, r2
 80053c8:	6239      	str	r1, [r7, #32]
 80053ca:	415b      	adcs	r3, r3
 80053cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80053ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053d2:	4641      	mov	r1, r8
 80053d4:	1854      	adds	r4, r2, r1
 80053d6:	4649      	mov	r1, r9
 80053d8:	eb43 0501 	adc.w	r5, r3, r1
 80053dc:	f04f 0200 	mov.w	r2, #0
 80053e0:	f04f 0300 	mov.w	r3, #0
 80053e4:	00eb      	lsls	r3, r5, #3
 80053e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053ea:	00e2      	lsls	r2, r4, #3
 80053ec:	4614      	mov	r4, r2
 80053ee:	461d      	mov	r5, r3
 80053f0:	4643      	mov	r3, r8
 80053f2:	18e3      	adds	r3, r4, r3
 80053f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80053f8:	464b      	mov	r3, r9
 80053fa:	eb45 0303 	adc.w	r3, r5, r3
 80053fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800540e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005412:	f04f 0200 	mov.w	r2, #0
 8005416:	f04f 0300 	mov.w	r3, #0
 800541a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800541e:	4629      	mov	r1, r5
 8005420:	008b      	lsls	r3, r1, #2
 8005422:	4621      	mov	r1, r4
 8005424:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005428:	4621      	mov	r1, r4
 800542a:	008a      	lsls	r2, r1, #2
 800542c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005430:	f7fa feca 	bl	80001c8 <__aeabi_uldivmod>
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	4b60      	ldr	r3, [pc, #384]	@ (80055bc <UART_SetConfig+0x4e4>)
 800543a:	fba3 2302 	umull	r2, r3, r3, r2
 800543e:	095b      	lsrs	r3, r3, #5
 8005440:	011c      	lsls	r4, r3, #4
 8005442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005446:	2200      	movs	r2, #0
 8005448:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800544c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005450:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005454:	4642      	mov	r2, r8
 8005456:	464b      	mov	r3, r9
 8005458:	1891      	adds	r1, r2, r2
 800545a:	61b9      	str	r1, [r7, #24]
 800545c:	415b      	adcs	r3, r3
 800545e:	61fb      	str	r3, [r7, #28]
 8005460:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005464:	4641      	mov	r1, r8
 8005466:	1851      	adds	r1, r2, r1
 8005468:	6139      	str	r1, [r7, #16]
 800546a:	4649      	mov	r1, r9
 800546c:	414b      	adcs	r3, r1
 800546e:	617b      	str	r3, [r7, #20]
 8005470:	f04f 0200 	mov.w	r2, #0
 8005474:	f04f 0300 	mov.w	r3, #0
 8005478:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800547c:	4659      	mov	r1, fp
 800547e:	00cb      	lsls	r3, r1, #3
 8005480:	4651      	mov	r1, sl
 8005482:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005486:	4651      	mov	r1, sl
 8005488:	00ca      	lsls	r2, r1, #3
 800548a:	4610      	mov	r0, r2
 800548c:	4619      	mov	r1, r3
 800548e:	4603      	mov	r3, r0
 8005490:	4642      	mov	r2, r8
 8005492:	189b      	adds	r3, r3, r2
 8005494:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005498:	464b      	mov	r3, r9
 800549a:	460a      	mov	r2, r1
 800549c:	eb42 0303 	adc.w	r3, r2, r3
 80054a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80054a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80054ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80054b0:	f04f 0200 	mov.w	r2, #0
 80054b4:	f04f 0300 	mov.w	r3, #0
 80054b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80054bc:	4649      	mov	r1, r9
 80054be:	008b      	lsls	r3, r1, #2
 80054c0:	4641      	mov	r1, r8
 80054c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054c6:	4641      	mov	r1, r8
 80054c8:	008a      	lsls	r2, r1, #2
 80054ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80054ce:	f7fa fe7b 	bl	80001c8 <__aeabi_uldivmod>
 80054d2:	4602      	mov	r2, r0
 80054d4:	460b      	mov	r3, r1
 80054d6:	4611      	mov	r1, r2
 80054d8:	4b38      	ldr	r3, [pc, #224]	@ (80055bc <UART_SetConfig+0x4e4>)
 80054da:	fba3 2301 	umull	r2, r3, r3, r1
 80054de:	095b      	lsrs	r3, r3, #5
 80054e0:	2264      	movs	r2, #100	@ 0x64
 80054e2:	fb02 f303 	mul.w	r3, r2, r3
 80054e6:	1acb      	subs	r3, r1, r3
 80054e8:	011b      	lsls	r3, r3, #4
 80054ea:	3332      	adds	r3, #50	@ 0x32
 80054ec:	4a33      	ldr	r2, [pc, #204]	@ (80055bc <UART_SetConfig+0x4e4>)
 80054ee:	fba2 2303 	umull	r2, r3, r2, r3
 80054f2:	095b      	lsrs	r3, r3, #5
 80054f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054f8:	441c      	add	r4, r3
 80054fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054fe:	2200      	movs	r2, #0
 8005500:	673b      	str	r3, [r7, #112]	@ 0x70
 8005502:	677a      	str	r2, [r7, #116]	@ 0x74
 8005504:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005508:	4642      	mov	r2, r8
 800550a:	464b      	mov	r3, r9
 800550c:	1891      	adds	r1, r2, r2
 800550e:	60b9      	str	r1, [r7, #8]
 8005510:	415b      	adcs	r3, r3
 8005512:	60fb      	str	r3, [r7, #12]
 8005514:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005518:	4641      	mov	r1, r8
 800551a:	1851      	adds	r1, r2, r1
 800551c:	6039      	str	r1, [r7, #0]
 800551e:	4649      	mov	r1, r9
 8005520:	414b      	adcs	r3, r1
 8005522:	607b      	str	r3, [r7, #4]
 8005524:	f04f 0200 	mov.w	r2, #0
 8005528:	f04f 0300 	mov.w	r3, #0
 800552c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005530:	4659      	mov	r1, fp
 8005532:	00cb      	lsls	r3, r1, #3
 8005534:	4651      	mov	r1, sl
 8005536:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800553a:	4651      	mov	r1, sl
 800553c:	00ca      	lsls	r2, r1, #3
 800553e:	4610      	mov	r0, r2
 8005540:	4619      	mov	r1, r3
 8005542:	4603      	mov	r3, r0
 8005544:	4642      	mov	r2, r8
 8005546:	189b      	adds	r3, r3, r2
 8005548:	66bb      	str	r3, [r7, #104]	@ 0x68
 800554a:	464b      	mov	r3, r9
 800554c:	460a      	mov	r2, r1
 800554e:	eb42 0303 	adc.w	r3, r2, r3
 8005552:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	663b      	str	r3, [r7, #96]	@ 0x60
 800555e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005560:	f04f 0200 	mov.w	r2, #0
 8005564:	f04f 0300 	mov.w	r3, #0
 8005568:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800556c:	4649      	mov	r1, r9
 800556e:	008b      	lsls	r3, r1, #2
 8005570:	4641      	mov	r1, r8
 8005572:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005576:	4641      	mov	r1, r8
 8005578:	008a      	lsls	r2, r1, #2
 800557a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800557e:	f7fa fe23 	bl	80001c8 <__aeabi_uldivmod>
 8005582:	4602      	mov	r2, r0
 8005584:	460b      	mov	r3, r1
 8005586:	4b0d      	ldr	r3, [pc, #52]	@ (80055bc <UART_SetConfig+0x4e4>)
 8005588:	fba3 1302 	umull	r1, r3, r3, r2
 800558c:	095b      	lsrs	r3, r3, #5
 800558e:	2164      	movs	r1, #100	@ 0x64
 8005590:	fb01 f303 	mul.w	r3, r1, r3
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	011b      	lsls	r3, r3, #4
 8005598:	3332      	adds	r3, #50	@ 0x32
 800559a:	4a08      	ldr	r2, [pc, #32]	@ (80055bc <UART_SetConfig+0x4e4>)
 800559c:	fba2 2303 	umull	r2, r3, r2, r3
 80055a0:	095b      	lsrs	r3, r3, #5
 80055a2:	f003 020f 	and.w	r2, r3, #15
 80055a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4422      	add	r2, r4
 80055ae:	609a      	str	r2, [r3, #8]
}
 80055b0:	bf00      	nop
 80055b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80055b6:	46bd      	mov	sp, r7
 80055b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055bc:	51eb851f 	.word	0x51eb851f

080055c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055c0:	b084      	sub	sp, #16
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b084      	sub	sp, #16
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
 80055ca:	f107 001c 	add.w	r0, r7, #28
 80055ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055d2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d123      	bne.n	8005622 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055de:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80055ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005602:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005606:	2b01      	cmp	r3, #1
 8005608:	d105      	bne.n	8005616 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f9dc 	bl	80059d4 <USB_CoreReset>
 800561c:	4603      	mov	r3, r0
 800561e:	73fb      	strb	r3, [r7, #15]
 8005620:	e01b      	b.n	800565a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f9d0 	bl	80059d4 <USB_CoreReset>
 8005634:	4603      	mov	r3, r0
 8005636:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005638:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800563c:	2b00      	cmp	r3, #0
 800563e:	d106      	bne.n	800564e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005644:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	639a      	str	r2, [r3, #56]	@ 0x38
 800564c:	e005      	b.n	800565a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005652:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800565a:	7fbb      	ldrb	r3, [r7, #30]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d10b      	bne.n	8005678 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f043 0206 	orr.w	r2, r3, #6
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f043 0220 	orr.w	r2, r3, #32
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005678:	7bfb      	ldrb	r3, [r7, #15]
}
 800567a:	4618      	mov	r0, r3
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005684:	b004      	add	sp, #16
 8005686:	4770      	bx	lr

08005688 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f043 0201 	orr.w	r2, r3, #1
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b083      	sub	sp, #12
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f023 0201 	bic.w	r2, r3, #1
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	460b      	mov	r3, r1
 80056d6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80056d8:	2300      	movs	r3, #0
 80056da:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80056e8:	78fb      	ldrb	r3, [r7, #3]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d115      	bne.n	800571a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80056fa:	200a      	movs	r0, #10
 80056fc:	f7fb fc34 	bl	8000f68 <HAL_Delay>
      ms += 10U;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	330a      	adds	r3, #10
 8005704:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f956 	bl	80059b8 <USB_GetMode>
 800570c:	4603      	mov	r3, r0
 800570e:	2b01      	cmp	r3, #1
 8005710:	d01e      	beq.n	8005750 <USB_SetCurrentMode+0x84>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2bc7      	cmp	r3, #199	@ 0xc7
 8005716:	d9f0      	bls.n	80056fa <USB_SetCurrentMode+0x2e>
 8005718:	e01a      	b.n	8005750 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800571a:	78fb      	ldrb	r3, [r7, #3]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d115      	bne.n	800574c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800572c:	200a      	movs	r0, #10
 800572e:	f7fb fc1b 	bl	8000f68 <HAL_Delay>
      ms += 10U;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	330a      	adds	r3, #10
 8005736:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 f93d 	bl	80059b8 <USB_GetMode>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d005      	beq.n	8005750 <USB_SetCurrentMode+0x84>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2bc7      	cmp	r3, #199	@ 0xc7
 8005748:	d9f0      	bls.n	800572c <USB_SetCurrentMode+0x60>
 800574a:	e001      	b.n	8005750 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e005      	b.n	800575c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2bc8      	cmp	r3, #200	@ 0xc8
 8005754:	d101      	bne.n	800575a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e000      	b.n	800575c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800576e:	2300      	movs	r3, #0
 8005770:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	3301      	adds	r3, #1
 8005776:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800577e:	d901      	bls.n	8005784 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e01b      	b.n	80057bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	2b00      	cmp	r3, #0
 800578a:	daf2      	bge.n	8005772 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800578c:	2300      	movs	r3, #0
 800578e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	019b      	lsls	r3, r3, #6
 8005794:	f043 0220 	orr.w	r2, r3, #32
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	3301      	adds	r3, #1
 80057a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80057a8:	d901      	bls.n	80057ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e006      	b.n	80057bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	f003 0320 	and.w	r3, r3, #32
 80057b6:	2b20      	cmp	r3, #32
 80057b8:	d0f0      	beq.n	800579c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3714      	adds	r7, #20
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057d0:	2300      	movs	r3, #0
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	3301      	adds	r3, #1
 80057d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80057e0:	d901      	bls.n	80057e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e018      	b.n	8005818 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	daf2      	bge.n	80057d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80057ee:	2300      	movs	r3, #0
 80057f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2210      	movs	r2, #16
 80057f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	3301      	adds	r3, #1
 80057fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005804:	d901      	bls.n	800580a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e006      	b.n	8005818 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	f003 0310 	and.w	r3, r3, #16
 8005812:	2b10      	cmp	r3, #16
 8005814:	d0f0      	beq.n	80057f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3714      	adds	r7, #20
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005824:	b480      	push	{r7}
 8005826:	b089      	sub	sp, #36	@ 0x24
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	4611      	mov	r1, r2
 8005830:	461a      	mov	r2, r3
 8005832:	460b      	mov	r3, r1
 8005834:	71fb      	strb	r3, [r7, #7]
 8005836:	4613      	mov	r3, r2
 8005838:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005842:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005846:	2b00      	cmp	r3, #0
 8005848:	d123      	bne.n	8005892 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800584a:	88bb      	ldrh	r3, [r7, #4]
 800584c:	3303      	adds	r3, #3
 800584e:	089b      	lsrs	r3, r3, #2
 8005850:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005852:	2300      	movs	r3, #0
 8005854:	61bb      	str	r3, [r7, #24]
 8005856:	e018      	b.n	800588a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005858:	79fb      	ldrb	r3, [r7, #7]
 800585a:	031a      	lsls	r2, r3, #12
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	4413      	add	r3, r2
 8005860:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005864:	461a      	mov	r2, r3
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	3301      	adds	r3, #1
 8005870:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	3301      	adds	r3, #1
 8005876:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	3301      	adds	r3, #1
 800587c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	3301      	adds	r3, #1
 8005882:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	3301      	adds	r3, #1
 8005888:	61bb      	str	r3, [r7, #24]
 800588a:	69ba      	ldr	r2, [r7, #24]
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	429a      	cmp	r2, r3
 8005890:	d3e2      	bcc.n	8005858 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3724      	adds	r7, #36	@ 0x24
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b08b      	sub	sp, #44	@ 0x2c
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	4613      	mov	r3, r2
 80058ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80058b6:	88fb      	ldrh	r3, [r7, #6]
 80058b8:	089b      	lsrs	r3, r3, #2
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80058be:	88fb      	ldrh	r3, [r7, #6]
 80058c0:	f003 0303 	and.w	r3, r3, #3
 80058c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80058c6:	2300      	movs	r3, #0
 80058c8:	623b      	str	r3, [r7, #32]
 80058ca:	e014      	b.n	80058f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d6:	601a      	str	r2, [r3, #0]
    pDest++;
 80058d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058da:	3301      	adds	r3, #1
 80058dc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80058de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e0:	3301      	adds	r3, #1
 80058e2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80058e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e6:	3301      	adds	r3, #1
 80058e8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80058ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ec:	3301      	adds	r3, #1
 80058ee:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80058f0:	6a3b      	ldr	r3, [r7, #32]
 80058f2:	3301      	adds	r3, #1
 80058f4:	623b      	str	r3, [r7, #32]
 80058f6:	6a3a      	ldr	r2, [r7, #32]
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d3e6      	bcc.n	80058cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80058fe:	8bfb      	ldrh	r3, [r7, #30]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d01e      	beq.n	8005942 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005904:	2300      	movs	r3, #0
 8005906:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800590e:	461a      	mov	r2, r3
 8005910:	f107 0310 	add.w	r3, r7, #16
 8005914:	6812      	ldr	r2, [r2, #0]
 8005916:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	b2db      	uxtb	r3, r3
 800591e:	00db      	lsls	r3, r3, #3
 8005920:	fa22 f303 	lsr.w	r3, r2, r3
 8005924:	b2da      	uxtb	r2, r3
 8005926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005928:	701a      	strb	r2, [r3, #0]
      i++;
 800592a:	6a3b      	ldr	r3, [r7, #32]
 800592c:	3301      	adds	r3, #1
 800592e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005932:	3301      	adds	r3, #1
 8005934:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005936:	8bfb      	ldrh	r3, [r7, #30]
 8005938:	3b01      	subs	r3, #1
 800593a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800593c:	8bfb      	ldrh	r3, [r7, #30]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1ea      	bne.n	8005918 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005944:	4618      	mov	r0, r3
 8005946:	372c      	adds	r7, #44	@ 0x2c
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	4013      	ands	r3, r2
 8005966:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005968:	68fb      	ldr	r3, [r7, #12]
}
 800596a:	4618      	mov	r0, r3
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005976:	b480      	push	{r7}
 8005978:	b085      	sub	sp, #20
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
 800597e:	460b      	mov	r3, r1
 8005980:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005986:	78fb      	ldrb	r3, [r7, #3]
 8005988:	015a      	lsls	r2, r3, #5
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	4413      	add	r3, r2
 800598e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005996:	78fb      	ldrb	r3, [r7, #3]
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	4413      	add	r3, r2
 800599e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	68ba      	ldr	r2, [r7, #8]
 80059a6:	4013      	ands	r3, r2
 80059a8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80059aa:	68bb      	ldr	r3, [r7, #8]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3714      	adds	r7, #20
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	695b      	ldr	r3, [r3, #20]
 80059c4:	f003 0301 	and.w	r3, r3, #1
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059dc:	2300      	movs	r3, #0
 80059de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	3301      	adds	r3, #1
 80059e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059ec:	d901      	bls.n	80059f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e022      	b.n	8005a38 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	daf2      	bge.n	80059e0 <USB_CoreReset+0xc>

  count = 10U;
 80059fa:	230a      	movs	r3, #10
 80059fc:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80059fe:	e002      	b.n	8005a06 <USB_CoreReset+0x32>
  {
    count--;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	3b01      	subs	r3, #1
 8005a04:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1f9      	bne.n	8005a00 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	f043 0201 	orr.w	r2, r3, #1
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a24:	d901      	bls.n	8005a2a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e006      	b.n	8005a38 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d0f0      	beq.n	8005a18 <USB_CoreReset+0x44>

  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3714      	adds	r7, #20
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a44:	b084      	sub	sp, #16
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b086      	sub	sp, #24
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
 8005a4e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005a52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005a64:	461a      	mov	r2, r3
 8005a66:	2300      	movs	r3, #0
 8005a68:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a6e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a7a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a86:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d119      	bne.n	8005ace <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005a9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d10a      	bne.n	8005ab8 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005ab0:	f043 0304 	orr.w	r3, r3, #4
 8005ab4:	6013      	str	r3, [r2, #0]
 8005ab6:	e014      	b.n	8005ae2 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005ac6:	f023 0304 	bic.w	r3, r3, #4
 8005aca:	6013      	str	r3, [r2, #0]
 8005acc:	e009      	b.n	8005ae2 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005adc:	f023 0304 	bic.w	r3, r3, #4
 8005ae0:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005ae2:	2110      	movs	r1, #16
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f7ff fe3d 	bl	8005764 <USB_FlushTxFifo>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d001      	beq.n	8005af4 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f7ff fe67 	bl	80057c8 <USB_FlushRxFifo>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d001      	beq.n	8005b04 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005b04:	2300      	movs	r3, #0
 8005b06:	613b      	str	r3, [r7, #16]
 8005b08:	e015      	b.n	8005b36 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	015a      	lsls	r2, r3, #5
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	4413      	add	r3, r2
 8005b12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b16:	461a      	mov	r2, r3
 8005b18:	f04f 33ff 	mov.w	r3, #4294967295
 8005b1c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	015a      	lsls	r2, r3, #5
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	4413      	add	r3, r2
 8005b26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	3301      	adds	r3, #1
 8005b34:	613b      	str	r3, [r7, #16]
 8005b36:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d3e3      	bcc.n	8005b0a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b4e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a18      	ldr	r2, [pc, #96]	@ (8005bb4 <USB_HostInit+0x170>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d10b      	bne.n	8005b70 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b5e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a15      	ldr	r2, [pc, #84]	@ (8005bb8 <USB_HostInit+0x174>)
 8005b64:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a14      	ldr	r2, [pc, #80]	@ (8005bbc <USB_HostInit+0x178>)
 8005b6a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005b6e:	e009      	b.n	8005b84 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2280      	movs	r2, #128	@ 0x80
 8005b74:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a11      	ldr	r2, [pc, #68]	@ (8005bc0 <USB_HostInit+0x17c>)
 8005b7a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a11      	ldr	r2, [pc, #68]	@ (8005bc4 <USB_HostInit+0x180>)
 8005b80:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b84:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d105      	bne.n	8005b98 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	f043 0210 	orr.w	r2, r3, #16
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	699a      	ldr	r2, [r3, #24]
 8005b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8005bc8 <USB_HostInit+0x184>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3718      	adds	r7, #24
 8005baa:	46bd      	mov	sp, r7
 8005bac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bb0:	b004      	add	sp, #16
 8005bb2:	4770      	bx	lr
 8005bb4:	40040000 	.word	0x40040000
 8005bb8:	01000200 	.word	0x01000200
 8005bbc:	00e00300 	.word	0x00e00300
 8005bc0:	00600080 	.word	0x00600080
 8005bc4:	004000e0 	.word	0x004000e0
 8005bc8:	a3200008 	.word	0xa3200008

08005bcc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005bea:	f023 0303 	bic.w	r3, r3, #3
 8005bee:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	78fb      	ldrb	r3, [r7, #3]
 8005bfa:	f003 0303 	and.w	r3, r3, #3
 8005bfe:	68f9      	ldr	r1, [r7, #12]
 8005c00:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005c04:	4313      	orrs	r3, r2
 8005c06:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005c08:	78fb      	ldrb	r3, [r7, #3]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d107      	bne.n	8005c1e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c14:	461a      	mov	r2, r3
 8005c16:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005c1a:	6053      	str	r3, [r2, #4]
 8005c1c:	e00c      	b.n	8005c38 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005c1e:	78fb      	ldrb	r3, [r7, #3]
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d107      	bne.n	8005c34 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005c30:	6053      	str	r3, [r2, #4]
 8005c32:	e001      	b.n	8005c38 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e000      	b.n	8005c3a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3714      	adds	r7, #20
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b084      	sub	sp, #16
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005c66:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005c70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c74:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005c76:	2064      	movs	r0, #100	@ 0x64
 8005c78:	f7fb f976 	bl	8000f68 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005c84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c88:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005c8a:	200a      	movs	r0, #10
 8005c8c:	f7fb f96c 	bl	8000f68 <HAL_Delay>

  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b085      	sub	sp, #20
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005caa:	2300      	movs	r3, #0
 8005cac:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005cbe:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d109      	bne.n	8005cde <USB_DriveVbus+0x44>
 8005cca:	78fb      	ldrb	r3, [r7, #3]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d106      	bne.n	8005cde <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005cd8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005cdc:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ce4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ce8:	d109      	bne.n	8005cfe <USB_DriveVbus+0x64>
 8005cea:	78fb      	ldrb	r3, [r7, #3]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d106      	bne.n	8005cfe <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005cf8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005cfc:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	0c5b      	lsrs	r3, r3, #17
 8005d2a:	f003 0303 	and.w	r3, r3, #3
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3714      	adds	r7, #20
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b085      	sub	sp, #20
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	b29b      	uxth	r3, r3
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3714      	adds	r7, #20
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b088      	sub	sp, #32
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	4608      	mov	r0, r1
 8005d66:	4611      	mov	r1, r2
 8005d68:	461a      	mov	r2, r3
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	70fb      	strb	r3, [r7, #3]
 8005d6e:	460b      	mov	r3, r1
 8005d70:	70bb      	strb	r3, [r7, #2]
 8005d72:	4613      	mov	r3, r2
 8005d74:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d76:	2300      	movs	r3, #0
 8005d78:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005d7e:	78fb      	ldrb	r3, [r7, #3]
 8005d80:	015a      	lsls	r2, r3, #5
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	4413      	add	r3, r2
 8005d86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d90:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005d92:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005d96:	2b03      	cmp	r3, #3
 8005d98:	d87c      	bhi.n	8005e94 <USB_HC_Init+0x138>
 8005d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8005da0 <USB_HC_Init+0x44>)
 8005d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da0:	08005db1 	.word	0x08005db1
 8005da4:	08005e57 	.word	0x08005e57
 8005da8:	08005db1 	.word	0x08005db1
 8005dac:	08005e19 	.word	0x08005e19
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005db0:	78fb      	ldrb	r3, [r7, #3]
 8005db2:	015a      	lsls	r2, r3, #5
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	f240 439d 	movw	r3, #1181	@ 0x49d
 8005dc2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005dc4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	da10      	bge.n	8005dee <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005dcc:	78fb      	ldrb	r3, [r7, #3]
 8005dce:	015a      	lsls	r2, r3, #5
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	78fa      	ldrb	r2, [r7, #3]
 8005ddc:	0151      	lsls	r1, r2, #5
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	440a      	add	r2, r1
 8005de2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005de6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dea:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005dec:	e055      	b.n	8005e9a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a6f      	ldr	r2, [pc, #444]	@ (8005fb0 <USB_HC_Init+0x254>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d151      	bne.n	8005e9a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005df6:	78fb      	ldrb	r3, [r7, #3]
 8005df8:	015a      	lsls	r2, r3, #5
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	78fa      	ldrb	r2, [r7, #3]
 8005e06:	0151      	lsls	r1, r2, #5
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	440a      	add	r2, r1
 8005e0c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e10:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005e14:	60d3      	str	r3, [r2, #12]
      break;
 8005e16:	e040      	b.n	8005e9a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e18:	78fb      	ldrb	r3, [r7, #3]
 8005e1a:	015a      	lsls	r2, r3, #5
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e24:	461a      	mov	r2, r3
 8005e26:	f240 639d 	movw	r3, #1693	@ 0x69d
 8005e2a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005e2c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	da34      	bge.n	8005e9e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005e34:	78fb      	ldrb	r3, [r7, #3]
 8005e36:	015a      	lsls	r2, r3, #5
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	78fa      	ldrb	r2, [r7, #3]
 8005e44:	0151      	lsls	r1, r2, #5
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	440a      	add	r2, r1
 8005e4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e52:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005e54:	e023      	b.n	8005e9e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e56:	78fb      	ldrb	r3, [r7, #3]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e62:	461a      	mov	r2, r3
 8005e64:	f240 2325 	movw	r3, #549	@ 0x225
 8005e68:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005e6a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	da17      	bge.n	8005ea2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005e72:	78fb      	ldrb	r3, [r7, #3]
 8005e74:	015a      	lsls	r2, r3, #5
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	78fa      	ldrb	r2, [r7, #3]
 8005e82:	0151      	lsls	r1, r2, #5
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	440a      	add	r2, r1
 8005e88:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e8c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005e90:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005e92:	e006      	b.n	8005ea2 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	77fb      	strb	r3, [r7, #31]
      break;
 8005e98:	e004      	b.n	8005ea4 <USB_HC_Init+0x148>
      break;
 8005e9a:	bf00      	nop
 8005e9c:	e002      	b.n	8005ea4 <USB_HC_Init+0x148>
      break;
 8005e9e:	bf00      	nop
 8005ea0:	e000      	b.n	8005ea4 <USB_HC_Init+0x148>
      break;
 8005ea2:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005ea4:	78fb      	ldrb	r3, [r7, #3]
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005eb6:	78fb      	ldrb	r3, [r7, #3]
 8005eb8:	015a      	lsls	r2, r3, #5
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	78fa      	ldrb	r2, [r7, #3]
 8005ec6:	0151      	lsls	r1, r2, #5
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	440a      	add	r2, r1
 8005ecc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ed0:	f043 0302 	orr.w	r3, r3, #2
 8005ed4:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005edc:	699a      	ldr	r2, [r3, #24]
 8005ede:	78fb      	ldrb	r3, [r7, #3]
 8005ee0:	f003 030f 	and.w	r3, r3, #15
 8005ee4:	2101      	movs	r1, #1
 8005ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8005eea:	6939      	ldr	r1, [r7, #16]
 8005eec:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	699b      	ldr	r3, [r3, #24]
 8005ef8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005f00:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	da03      	bge.n	8005f10 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005f08:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f0c:	61bb      	str	r3, [r7, #24]
 8005f0e:	e001      	b.n	8005f14 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8005f10:	2300      	movs	r3, #0
 8005f12:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f7ff fef9 	bl	8005d0c <USB_GetHostSpeed>
 8005f1a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005f1c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d106      	bne.n	8005f32 <USB_HC_Init+0x1d6>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d003      	beq.n	8005f32 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005f2a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005f2e:	617b      	str	r3, [r7, #20]
 8005f30:	e001      	b.n	8005f36 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005f32:	2300      	movs	r3, #0
 8005f34:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f36:	787b      	ldrb	r3, [r7, #1]
 8005f38:	059b      	lsls	r3, r3, #22
 8005f3a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005f3e:	78bb      	ldrb	r3, [r7, #2]
 8005f40:	02db      	lsls	r3, r3, #11
 8005f42:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f46:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f48:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005f4c:	049b      	lsls	r3, r3, #18
 8005f4e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005f52:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8005f54:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005f56:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f5a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	431a      	orrs	r2, r3
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f64:	78fa      	ldrb	r2, [r7, #3]
 8005f66:	0151      	lsls	r1, r2, #5
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	440a      	add	r2, r1
 8005f6c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005f70:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f74:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005f76:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005f7a:	2b03      	cmp	r3, #3
 8005f7c:	d003      	beq.n	8005f86 <USB_HC_Init+0x22a>
 8005f7e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d10f      	bne.n	8005fa6 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005f86:	78fb      	ldrb	r3, [r7, #3]
 8005f88:	015a      	lsls	r2, r3, #5
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	78fa      	ldrb	r2, [r7, #3]
 8005f96:	0151      	lsls	r1, r2, #5
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	440a      	add	r2, r1
 8005f9c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fa0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005fa4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005fa6:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3720      	adds	r7, #32
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	40040000 	.word	0x40040000

08005fb4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b08c      	sub	sp, #48	@ 0x30
 8005fb8:	af02      	add	r7, sp, #8
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	785b      	ldrb	r3, [r3, #1]
 8005fca:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005fcc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005fd0:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	4a5d      	ldr	r2, [pc, #372]	@ (800614c <USB_HC_StartXfer+0x198>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d12f      	bne.n	800603a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8005fda:	79fb      	ldrb	r3, [r7, #7]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d11c      	bne.n	800601a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	7c9b      	ldrb	r3, [r3, #18]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d003      	beq.n	8005ff0 <USB_HC_StartXfer+0x3c>
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	7c9b      	ldrb	r3, [r3, #18]
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d124      	bne.n	800603a <USB_HC_StartXfer+0x86>
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	799b      	ldrb	r3, [r3, #6]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d120      	bne.n	800603a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	015a      	lsls	r2, r3, #5
 8005ffc:	6a3b      	ldr	r3, [r7, #32]
 8005ffe:	4413      	add	r3, r2
 8006000:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	69fa      	ldr	r2, [r7, #28]
 8006008:	0151      	lsls	r1, r2, #5
 800600a:	6a3a      	ldr	r2, [r7, #32]
 800600c:	440a      	add	r2, r1
 800600e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006016:	60d3      	str	r3, [r2, #12]
 8006018:	e00f      	b.n	800603a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	791b      	ldrb	r3, [r3, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10b      	bne.n	800603a <USB_HC_StartXfer+0x86>
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	795b      	ldrb	r3, [r3, #5]
 8006026:	2b01      	cmp	r3, #1
 8006028:	d107      	bne.n	800603a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	785b      	ldrb	r3, [r3, #1]
 800602e:	4619      	mov	r1, r3
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f000 fb6b 	bl	800670c <USB_DoPing>
        return HAL_OK;
 8006036:	2300      	movs	r3, #0
 8006038:	e232      	b.n	80064a0 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	799b      	ldrb	r3, [r3, #6]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d158      	bne.n	80060f4 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8006042:	2301      	movs	r3, #1
 8006044:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	78db      	ldrb	r3, [r3, #3]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d007      	beq.n	800605e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800604e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	8a92      	ldrh	r2, [r2, #20]
 8006054:	fb03 f202 	mul.w	r2, r3, r2
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	61da      	str	r2, [r3, #28]
 800605c:	e07c      	b.n	8006158 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	7c9b      	ldrb	r3, [r3, #18]
 8006062:	2b01      	cmp	r3, #1
 8006064:	d130      	bne.n	80060c8 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	2bbc      	cmp	r3, #188	@ 0xbc
 800606c:	d918      	bls.n	80060a0 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	8a9b      	ldrh	r3, [r3, #20]
 8006072:	461a      	mov	r2, r3
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	69da      	ldr	r2, [r3, #28]
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d003      	beq.n	8006090 <USB_HC_StartXfer+0xdc>
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	2b02      	cmp	r3, #2
 800608e:	d103      	bne.n	8006098 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	2202      	movs	r2, #2
 8006094:	60da      	str	r2, [r3, #12]
 8006096:	e05f      	b.n	8006158 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	2201      	movs	r2, #1
 800609c:	60da      	str	r2, [r3, #12]
 800609e:	e05b      	b.n	8006158 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	6a1a      	ldr	r2, [r3, #32]
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d007      	beq.n	80060c0 <USB_HC_StartXfer+0x10c>
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d003      	beq.n	80060c0 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	2204      	movs	r2, #4
 80060bc:	60da      	str	r2, [r3, #12]
 80060be:	e04b      	b.n	8006158 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	2203      	movs	r2, #3
 80060c4:	60da      	str	r2, [r3, #12]
 80060c6:	e047      	b.n	8006158 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80060c8:	79fb      	ldrb	r3, [r7, #7]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d10d      	bne.n	80060ea <USB_HC_StartXfer+0x136>
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	8a92      	ldrh	r2, [r2, #20]
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d907      	bls.n	80060ea <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80060da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	8a92      	ldrh	r2, [r2, #20]
 80060e0:	fb03 f202 	mul.w	r2, r3, r2
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	61da      	str	r2, [r3, #28]
 80060e8:	e036      	b.n	8006158 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	6a1a      	ldr	r2, [r3, #32]
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	61da      	str	r2, [r3, #28]
 80060f2:	e031      	b.n	8006158 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d018      	beq.n	800612e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	6a1b      	ldr	r3, [r3, #32]
 8006100:	68ba      	ldr	r2, [r7, #8]
 8006102:	8a92      	ldrh	r2, [r2, #20]
 8006104:	4413      	add	r3, r2
 8006106:	3b01      	subs	r3, #1
 8006108:	68ba      	ldr	r2, [r7, #8]
 800610a:	8a92      	ldrh	r2, [r2, #20]
 800610c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006110:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8006112:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006114:	8b7b      	ldrh	r3, [r7, #26]
 8006116:	429a      	cmp	r2, r3
 8006118:	d90b      	bls.n	8006132 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800611a:	8b7b      	ldrh	r3, [r7, #26]
 800611c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800611e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	8a92      	ldrh	r2, [r2, #20]
 8006124:	fb03 f202 	mul.w	r2, r3, r2
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	61da      	str	r2, [r3, #28]
 800612c:	e001      	b.n	8006132 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800612e:	2301      	movs	r3, #1
 8006130:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	78db      	ldrb	r3, [r3, #3]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00a      	beq.n	8006150 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800613a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	8a92      	ldrh	r2, [r2, #20]
 8006140:	fb03 f202 	mul.w	r2, r3, r2
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	61da      	str	r2, [r3, #28]
 8006148:	e006      	b.n	8006158 <USB_HC_StartXfer+0x1a4>
 800614a:	bf00      	nop
 800614c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	6a1a      	ldr	r2, [r3, #32]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	69db      	ldr	r3, [r3, #28]
 800615c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006160:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006162:	04d9      	lsls	r1, r3, #19
 8006164:	4ba3      	ldr	r3, [pc, #652]	@ (80063f4 <USB_HC_StartXfer+0x440>)
 8006166:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006168:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	7d9b      	ldrb	r3, [r3, #22]
 800616e:	075b      	lsls	r3, r3, #29
 8006170:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006174:	69f9      	ldr	r1, [r7, #28]
 8006176:	0148      	lsls	r0, r1, #5
 8006178:	6a39      	ldr	r1, [r7, #32]
 800617a:	4401      	add	r1, r0
 800617c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006180:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006182:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006184:	79fb      	ldrb	r3, [r7, #7]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d009      	beq.n	800619e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	6999      	ldr	r1, [r3, #24]
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	015a      	lsls	r2, r3, #5
 8006192:	6a3b      	ldr	r3, [r7, #32]
 8006194:	4413      	add	r3, r2
 8006196:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800619a:	460a      	mov	r2, r1
 800619c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800619e:	6a3b      	ldr	r3, [r7, #32]
 80061a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	bf0c      	ite	eq
 80061ae:	2301      	moveq	r3, #1
 80061b0:	2300      	movne	r3, #0
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	015a      	lsls	r2, r3, #5
 80061ba:	6a3b      	ldr	r3, [r7, #32]
 80061bc:	4413      	add	r3, r2
 80061be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	69fa      	ldr	r2, [r7, #28]
 80061c6:	0151      	lsls	r1, r2, #5
 80061c8:	6a3a      	ldr	r2, [r7, #32]
 80061ca:	440a      	add	r2, r1
 80061cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061d0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80061d4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	6a3b      	ldr	r3, [r7, #32]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	7e7b      	ldrb	r3, [r7, #25]
 80061e6:	075b      	lsls	r3, r3, #29
 80061e8:	69f9      	ldr	r1, [r7, #28]
 80061ea:	0148      	lsls	r0, r1, #5
 80061ec:	6a39      	ldr	r1, [r7, #32]
 80061ee:	4401      	add	r1, r0
 80061f0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80061f4:	4313      	orrs	r3, r2
 80061f6:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	799b      	ldrb	r3, [r3, #6]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	f040 80c3 	bne.w	8006388 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	7c5b      	ldrb	r3, [r3, #17]
 8006206:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006208:	68ba      	ldr	r2, [r7, #8]
 800620a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800620c:	4313      	orrs	r3, r2
 800620e:	69fa      	ldr	r2, [r7, #28]
 8006210:	0151      	lsls	r1, r2, #5
 8006212:	6a3a      	ldr	r2, [r7, #32]
 8006214:	440a      	add	r2, r1
 8006216:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800621a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800621e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	015a      	lsls	r2, r3, #5
 8006224:	6a3b      	ldr	r3, [r7, #32]
 8006226:	4413      	add	r3, r2
 8006228:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	69fa      	ldr	r2, [r7, #28]
 8006230:	0151      	lsls	r1, r2, #5
 8006232:	6a3a      	ldr	r2, [r7, #32]
 8006234:	440a      	add	r2, r1
 8006236:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800623a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800623e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	79db      	ldrb	r3, [r3, #7]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d123      	bne.n	8006290 <USB_HC_StartXfer+0x2dc>
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	78db      	ldrb	r3, [r3, #3]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d11f      	bne.n	8006290 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	015a      	lsls	r2, r3, #5
 8006254:	6a3b      	ldr	r3, [r7, #32]
 8006256:	4413      	add	r3, r2
 8006258:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	69fa      	ldr	r2, [r7, #28]
 8006260:	0151      	lsls	r1, r2, #5
 8006262:	6a3a      	ldr	r2, [r7, #32]
 8006264:	440a      	add	r2, r1
 8006266:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800626a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800626e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	6a3b      	ldr	r3, [r7, #32]
 8006276:	4413      	add	r3, r2
 8006278:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	69fa      	ldr	r2, [r7, #28]
 8006280:	0151      	lsls	r1, r2, #5
 8006282:	6a3a      	ldr	r2, [r7, #32]
 8006284:	440a      	add	r2, r1
 8006286:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800628a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800628e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	7c9b      	ldrb	r3, [r3, #18]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d003      	beq.n	80062a0 <USB_HC_StartXfer+0x2ec>
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	7c9b      	ldrb	r3, [r3, #18]
 800629c:	2b03      	cmp	r3, #3
 800629e:	d117      	bne.n	80062d0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d113      	bne.n	80062d0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	78db      	ldrb	r3, [r3, #3]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d10f      	bne.n	80062d0 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	015a      	lsls	r2, r3, #5
 80062b4:	6a3b      	ldr	r3, [r7, #32]
 80062b6:	4413      	add	r3, r2
 80062b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	69fa      	ldr	r2, [r7, #28]
 80062c0:	0151      	lsls	r1, r2, #5
 80062c2:	6a3a      	ldr	r2, [r7, #32]
 80062c4:	440a      	add	r2, r1
 80062c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062ce:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	7c9b      	ldrb	r3, [r3, #18]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d162      	bne.n	800639e <USB_HC_StartXfer+0x3ea>
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	78db      	ldrb	r3, [r3, #3]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d15e      	bne.n	800639e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	3b01      	subs	r3, #1
 80062e6:	2b03      	cmp	r3, #3
 80062e8:	d858      	bhi.n	800639c <USB_HC_StartXfer+0x3e8>
 80062ea:	a201      	add	r2, pc, #4	@ (adr r2, 80062f0 <USB_HC_StartXfer+0x33c>)
 80062ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f0:	08006301 	.word	0x08006301
 80062f4:	08006323 	.word	0x08006323
 80062f8:	08006345 	.word	0x08006345
 80062fc:	08006367 	.word	0x08006367
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	6a3b      	ldr	r3, [r7, #32]
 8006306:	4413      	add	r3, r2
 8006308:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	69fa      	ldr	r2, [r7, #28]
 8006310:	0151      	lsls	r1, r2, #5
 8006312:	6a3a      	ldr	r2, [r7, #32]
 8006314:	440a      	add	r2, r1
 8006316:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800631a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800631e:	6053      	str	r3, [r2, #4]
          break;
 8006320:	e03d      	b.n	800639e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	015a      	lsls	r2, r3, #5
 8006326:	6a3b      	ldr	r3, [r7, #32]
 8006328:	4413      	add	r3, r2
 800632a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	69fa      	ldr	r2, [r7, #28]
 8006332:	0151      	lsls	r1, r2, #5
 8006334:	6a3a      	ldr	r2, [r7, #32]
 8006336:	440a      	add	r2, r1
 8006338:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800633c:	f043 030e 	orr.w	r3, r3, #14
 8006340:	6053      	str	r3, [r2, #4]
          break;
 8006342:	e02c      	b.n	800639e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	6a3b      	ldr	r3, [r7, #32]
 800634a:	4413      	add	r3, r2
 800634c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	69fa      	ldr	r2, [r7, #28]
 8006354:	0151      	lsls	r1, r2, #5
 8006356:	6a3a      	ldr	r2, [r7, #32]
 8006358:	440a      	add	r2, r1
 800635a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800635e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006362:	6053      	str	r3, [r2, #4]
          break;
 8006364:	e01b      	b.n	800639e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	015a      	lsls	r2, r3, #5
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	4413      	add	r3, r2
 800636e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	69fa      	ldr	r2, [r7, #28]
 8006376:	0151      	lsls	r1, r2, #5
 8006378:	6a3a      	ldr	r2, [r7, #32]
 800637a:	440a      	add	r2, r1
 800637c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006380:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006384:	6053      	str	r3, [r2, #4]
          break;
 8006386:	e00a      	b.n	800639e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	015a      	lsls	r2, r3, #5
 800638c:	6a3b      	ldr	r3, [r7, #32]
 800638e:	4413      	add	r3, r2
 8006390:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006394:	461a      	mov	r2, r3
 8006396:	2300      	movs	r3, #0
 8006398:	6053      	str	r3, [r2, #4]
 800639a:	e000      	b.n	800639e <USB_HC_StartXfer+0x3ea>
          break;
 800639c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	015a      	lsls	r2, r3, #5
 80063a2:	6a3b      	ldr	r3, [r7, #32]
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80063b4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	78db      	ldrb	r3, [r3, #3]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d004      	beq.n	80063c8 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063c4:	613b      	str	r3, [r7, #16]
 80063c6:	e003      	b.n	80063d0 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80063ce:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80063d6:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	6a3b      	ldr	r3, [r7, #32]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063e4:	461a      	mov	r2, r3
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80063ea:	79fb      	ldrb	r3, [r7, #7]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d003      	beq.n	80063f8 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80063f0:	2300      	movs	r3, #0
 80063f2:	e055      	b.n	80064a0 <USB_HC_StartXfer+0x4ec>
 80063f4:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	78db      	ldrb	r3, [r3, #3]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d14e      	bne.n	800649e <USB_HC_StartXfer+0x4ea>
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	6a1b      	ldr	r3, [r3, #32]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d04a      	beq.n	800649e <USB_HC_StartXfer+0x4ea>
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	79db      	ldrb	r3, [r3, #7]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d146      	bne.n	800649e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	7c9b      	ldrb	r3, [r3, #18]
 8006414:	2b03      	cmp	r3, #3
 8006416:	d831      	bhi.n	800647c <USB_HC_StartXfer+0x4c8>
 8006418:	a201      	add	r2, pc, #4	@ (adr r2, 8006420 <USB_HC_StartXfer+0x46c>)
 800641a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641e:	bf00      	nop
 8006420:	08006431 	.word	0x08006431
 8006424:	08006455 	.word	0x08006455
 8006428:	08006431 	.word	0x08006431
 800642c:	08006455 	.word	0x08006455
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	6a1b      	ldr	r3, [r3, #32]
 8006434:	3303      	adds	r3, #3
 8006436:	089b      	lsrs	r3, r3, #2
 8006438:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800643a:	8afa      	ldrh	r2, [r7, #22]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006440:	b29b      	uxth	r3, r3
 8006442:	429a      	cmp	r2, r3
 8006444:	d91c      	bls.n	8006480 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	f043 0220 	orr.w	r2, r3, #32
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	619a      	str	r2, [r3, #24]
        }
        break;
 8006452:	e015      	b.n	8006480 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	6a1b      	ldr	r3, [r3, #32]
 8006458:	3303      	adds	r3, #3
 800645a:	089b      	lsrs	r3, r3, #2
 800645c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800645e:	8afa      	ldrh	r2, [r7, #22]
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	b29b      	uxth	r3, r3
 800646a:	429a      	cmp	r2, r3
 800646c:	d90a      	bls.n	8006484 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	619a      	str	r2, [r3, #24]
        }
        break;
 800647a:	e003      	b.n	8006484 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800647c:	bf00      	nop
 800647e:	e002      	b.n	8006486 <USB_HC_StartXfer+0x4d2>
        break;
 8006480:	bf00      	nop
 8006482:	e000      	b.n	8006486 <USB_HC_StartXfer+0x4d2>
        break;
 8006484:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	6999      	ldr	r1, [r3, #24]
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	785a      	ldrb	r2, [r3, #1]
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	b29b      	uxth	r3, r3
 8006494:	2000      	movs	r0, #0
 8006496:	9000      	str	r0, [sp, #0]
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f7ff f9c3 	bl	8005824 <USB_WritePacket>
  }

  return HAL_OK;
 800649e:	2300      	movs	r3, #0
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3728      	adds	r7, #40	@ 0x28
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064ba:	695b      	ldr	r3, [r3, #20]
 80064bc:	b29b      	uxth	r3, r3
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3714      	adds	r7, #20
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr

080064ca <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80064ca:	b480      	push	{r7}
 80064cc:	b089      	sub	sp, #36	@ 0x24
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
 80064d2:	460b      	mov	r3, r1
 80064d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80064da:	78fb      	ldrb	r3, [r7, #3]
 80064dc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80064de:	2300      	movs	r3, #0
 80064e0:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	0c9b      	lsrs	r3, r3, #18
 80064f2:	f003 0303 	and.w	r3, r3, #3
 80064f6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	015a      	lsls	r2, r3, #5
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	4413      	add	r3, r2
 8006500:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	0fdb      	lsrs	r3, r3, #31
 8006508:	f003 0301 	and.w	r3, r3, #1
 800650c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	015a      	lsls	r2, r3, #5
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	4413      	add	r3, r2
 8006516:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	0fdb      	lsrs	r3, r3, #31
 800651e:	f003 0301 	and.w	r3, r3, #1
 8006522:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	f003 0320 	and.w	r3, r3, #32
 800652c:	2b20      	cmp	r3, #32
 800652e:	d10d      	bne.n	800654c <USB_HC_Halt+0x82>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10a      	bne.n	800654c <USB_HC_Halt+0x82>
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d005      	beq.n	8006548 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	2b01      	cmp	r3, #1
 8006540:	d002      	beq.n	8006548 <USB_HC_Halt+0x7e>
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	2b03      	cmp	r3, #3
 8006546:	d101      	bne.n	800654c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006548:	2300      	movs	r3, #0
 800654a:	e0d8      	b.n	80066fe <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d002      	beq.n	8006558 <USB_HC_Halt+0x8e>
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	2b02      	cmp	r3, #2
 8006556:	d173      	bne.n	8006640 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	4413      	add	r3, r2
 8006560:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	69ba      	ldr	r2, [r7, #24]
 8006568:	0151      	lsls	r1, r2, #5
 800656a:	69fa      	ldr	r2, [r7, #28]
 800656c:	440a      	add	r2, r1
 800656e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006572:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006576:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	f003 0320 	and.w	r3, r3, #32
 8006580:	2b00      	cmp	r3, #0
 8006582:	d14a      	bne.n	800661a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006588:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800658c:	2b00      	cmp	r3, #0
 800658e:	d133      	bne.n	80065f8 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	015a      	lsls	r2, r3, #5
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	4413      	add	r3, r2
 8006598:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	69ba      	ldr	r2, [r7, #24]
 80065a0:	0151      	lsls	r1, r2, #5
 80065a2:	69fa      	ldr	r2, [r7, #28]
 80065a4:	440a      	add	r2, r1
 80065a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80065ae:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	015a      	lsls	r2, r3, #5
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	4413      	add	r3, r2
 80065b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	69ba      	ldr	r2, [r7, #24]
 80065c0:	0151      	lsls	r1, r2, #5
 80065c2:	69fa      	ldr	r2, [r7, #28]
 80065c4:	440a      	add	r2, r1
 80065c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80065ce:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	3301      	adds	r3, #1
 80065d4:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80065dc:	d82e      	bhi.n	800663c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	015a      	lsls	r2, r3, #5
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	4413      	add	r3, r2
 80065e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065f4:	d0ec      	beq.n	80065d0 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065f6:	e081      	b.n	80066fc <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	015a      	lsls	r2, r3, #5
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	4413      	add	r3, r2
 8006600:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	69ba      	ldr	r2, [r7, #24]
 8006608:	0151      	lsls	r1, r2, #5
 800660a:	69fa      	ldr	r2, [r7, #28]
 800660c:	440a      	add	r2, r1
 800660e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006612:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006616:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006618:	e070      	b.n	80066fc <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	015a      	lsls	r2, r3, #5
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	4413      	add	r3, r2
 8006622:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	69ba      	ldr	r2, [r7, #24]
 800662a:	0151      	lsls	r1, r2, #5
 800662c:	69fa      	ldr	r2, [r7, #28]
 800662e:	440a      	add	r2, r1
 8006630:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006634:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006638:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800663a:	e05f      	b.n	80066fc <USB_HC_Halt+0x232>
            break;
 800663c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800663e:	e05d      	b.n	80066fc <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	4413      	add	r3, r2
 8006648:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	69ba      	ldr	r2, [r7, #24]
 8006650:	0151      	lsls	r1, r2, #5
 8006652:	69fa      	ldr	r2, [r7, #28]
 8006654:	440a      	add	r2, r1
 8006656:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800665a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800665e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800666c:	2b00      	cmp	r3, #0
 800666e:	d133      	bne.n	80066d8 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	015a      	lsls	r2, r3, #5
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	4413      	add	r3, r2
 8006678:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	69ba      	ldr	r2, [r7, #24]
 8006680:	0151      	lsls	r1, r2, #5
 8006682:	69fa      	ldr	r2, [r7, #28]
 8006684:	440a      	add	r2, r1
 8006686:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800668a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800668e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	015a      	lsls	r2, r3, #5
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	4413      	add	r3, r2
 8006698:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	69ba      	ldr	r2, [r7, #24]
 80066a0:	0151      	lsls	r1, r2, #5
 80066a2:	69fa      	ldr	r2, [r7, #28]
 80066a4:	440a      	add	r2, r1
 80066a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80066ae:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	3301      	adds	r3, #1
 80066b4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80066bc:	d81d      	bhi.n	80066fa <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066d4:	d0ec      	beq.n	80066b0 <USB_HC_Halt+0x1e6>
 80066d6:	e011      	b.n	80066fc <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	69ba      	ldr	r2, [r7, #24]
 80066e8:	0151      	lsls	r1, r2, #5
 80066ea:	69fa      	ldr	r2, [r7, #28]
 80066ec:	440a      	add	r2, r1
 80066ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80066f6:	6013      	str	r3, [r2, #0]
 80066f8:	e000      	b.n	80066fc <USB_HC_Halt+0x232>
          break;
 80066fa:	bf00      	nop
    }
  }

  return HAL_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3724      	adds	r7, #36	@ 0x24
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
	...

0800670c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800670c:	b480      	push	{r7}
 800670e:	b087      	sub	sp, #28
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	460b      	mov	r3, r1
 8006716:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800671c:	78fb      	ldrb	r3, [r7, #3]
 800671e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006720:	2301      	movs	r3, #1
 8006722:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	04da      	lsls	r2, r3, #19
 8006728:	4b15      	ldr	r3, [pc, #84]	@ (8006780 <USB_DoPing+0x74>)
 800672a:	4013      	ands	r3, r2
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	0151      	lsls	r1, r2, #5
 8006730:	697a      	ldr	r2, [r7, #20]
 8006732:	440a      	add	r2, r1
 8006734:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006738:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800673c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	015a      	lsls	r2, r3, #5
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	4413      	add	r3, r2
 8006746:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006754:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800675c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	015a      	lsls	r2, r3, #5
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	4413      	add	r3, r2
 8006766:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800676a:	461a      	mov	r2, r3
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	371c      	adds	r7, #28
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	1ff80000 	.word	0x1ff80000

08006784 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b088      	sub	sp, #32
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800678c:	2300      	movs	r3, #0
 800678e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006794:	2300      	movs	r3, #0
 8006796:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f7fe ff86 	bl	80056aa <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800679e:	2110      	movs	r1, #16
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f7fe ffdf 	bl	8005764 <USB_FlushTxFifo>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d001      	beq.n	80067b0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f7ff f809 	bl	80057c8 <USB_FlushRxFifo>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d001      	beq.n	80067c0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80067c0:	2300      	movs	r3, #0
 80067c2:	61bb      	str	r3, [r7, #24]
 80067c4:	e01f      	b.n	8006806 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	015a      	lsls	r2, r3, #5
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	4413      	add	r3, r2
 80067ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067dc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80067e4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80067ec:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	015a      	lsls	r2, r3, #5
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	4413      	add	r3, r2
 80067f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067fa:	461a      	mov	r2, r3
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	3301      	adds	r3, #1
 8006804:	61bb      	str	r3, [r7, #24]
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	2b0f      	cmp	r3, #15
 800680a:	d9dc      	bls.n	80067c6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800680c:	2300      	movs	r3, #0
 800680e:	61bb      	str	r3, [r7, #24]
 8006810:	e034      	b.n	800687c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	015a      	lsls	r2, r3, #5
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	4413      	add	r3, r2
 800681a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006828:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006830:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006838:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	015a      	lsls	r2, r3, #5
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	4413      	add	r3, r2
 8006842:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006846:	461a      	mov	r2, r3
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	3301      	adds	r3, #1
 8006850:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006858:	d80c      	bhi.n	8006874 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	015a      	lsls	r2, r3, #5
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	4413      	add	r3, r2
 8006862:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800686c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006870:	d0ec      	beq.n	800684c <USB_StopHost+0xc8>
 8006872:	e000      	b.n	8006876 <USB_StopHost+0xf2>
        break;
 8006874:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	3301      	adds	r3, #1
 800687a:	61bb      	str	r3, [r7, #24]
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	2b0f      	cmp	r3, #15
 8006880:	d9c7      	bls.n	8006812 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006888:	461a      	mov	r2, r3
 800688a:	f04f 33ff 	mov.w	r3, #4294967295
 800688e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f04f 32ff 	mov.w	r2, #4294967295
 8006896:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f7fe fef5 	bl	8005688 <USB_EnableGlobalInt>

  return ret;
 800689e:	7ffb      	ldrb	r3, [r7, #31]
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3720      	adds	r7, #32
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80068a8:	b590      	push	{r4, r7, lr}
 80068aa:	b089      	sub	sp, #36	@ 0x24
 80068ac:	af04      	add	r7, sp, #16
 80068ae:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80068b0:	2301      	movs	r3, #1
 80068b2:	2202      	movs	r2, #2
 80068b4:	2102      	movs	r1, #2
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 fc83 	bl	80071c2 <USBH_FindInterface>
 80068bc:	4603      	mov	r3, r0
 80068be:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80068c0:	7bfb      	ldrb	r3, [r7, #15]
 80068c2:	2bff      	cmp	r3, #255	@ 0xff
 80068c4:	d002      	beq.n	80068cc <USBH_CDC_InterfaceInit+0x24>
 80068c6:	7bfb      	ldrb	r3, [r7, #15]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d901      	bls.n	80068d0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80068cc:	2302      	movs	r3, #2
 80068ce:	e13d      	b.n	8006b4c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80068d0:	7bfb      	ldrb	r3, [r7, #15]
 80068d2:	4619      	mov	r1, r3
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 fc58 	bl	800718a <USBH_SelectInterface>
 80068da:	4603      	mov	r3, r0
 80068dc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80068de:	7bbb      	ldrb	r3, [r7, #14]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d001      	beq.n	80068e8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80068e4:	2302      	movs	r3, #2
 80068e6:	e131      	b.n	8006b4c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80068ee:	2050      	movs	r0, #80	@ 0x50
 80068f0:	f002 fb6a 	bl	8008fc8 <malloc>
 80068f4:	4603      	mov	r3, r0
 80068f6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80068fe:	69db      	ldr	r3, [r3, #28]
 8006900:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d101      	bne.n	800690c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006908:	2302      	movs	r3, #2
 800690a:	e11f      	b.n	8006b4c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800690c:	2250      	movs	r2, #80	@ 0x50
 800690e:	2100      	movs	r1, #0
 8006910:	68b8      	ldr	r0, [r7, #8]
 8006912:	f002 fe0f 	bl	8009534 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006916:	7bfb      	ldrb	r3, [r7, #15]
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	211a      	movs	r1, #26
 800691c:	fb01 f303 	mul.w	r3, r1, r3
 8006920:	4413      	add	r3, r2
 8006922:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	b25b      	sxtb	r3, r3
 800692a:	2b00      	cmp	r3, #0
 800692c:	da15      	bge.n	800695a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800692e:	7bfb      	ldrb	r3, [r7, #15]
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	211a      	movs	r1, #26
 8006934:	fb01 f303 	mul.w	r3, r1, r3
 8006938:	4413      	add	r3, r2
 800693a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800693e:	781a      	ldrb	r2, [r3, #0]
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006944:	7bfb      	ldrb	r3, [r7, #15]
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	211a      	movs	r1, #26
 800694a:	fb01 f303 	mul.w	r3, r1, r3
 800694e:	4413      	add	r3, r2
 8006950:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006954:	881a      	ldrh	r2, [r3, #0]
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	785b      	ldrb	r3, [r3, #1]
 800695e:	4619      	mov	r1, r3
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f001 ffc4 	bl	80088ee <USBH_AllocPipe>
 8006966:	4603      	mov	r3, r0
 8006968:	461a      	mov	r2, r3
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	7819      	ldrb	r1, [r3, #0]
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	7858      	ldrb	r0, [r3, #1]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006982:	68ba      	ldr	r2, [r7, #8]
 8006984:	8952      	ldrh	r2, [r2, #10]
 8006986:	9202      	str	r2, [sp, #8]
 8006988:	2203      	movs	r2, #3
 800698a:	9201      	str	r2, [sp, #4]
 800698c:	9300      	str	r3, [sp, #0]
 800698e:	4623      	mov	r3, r4
 8006990:	4602      	mov	r2, r0
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f001 ff7c 	bl	8008890 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	2200      	movs	r2, #0
 800699e:	4619      	mov	r1, r3
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f002 fa8b 	bl	8008ebc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80069a6:	2300      	movs	r3, #0
 80069a8:	2200      	movs	r2, #0
 80069aa:	210a      	movs	r1, #10
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 fc08 	bl	80071c2 <USBH_FindInterface>
 80069b2:	4603      	mov	r3, r0
 80069b4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80069b6:	7bfb      	ldrb	r3, [r7, #15]
 80069b8:	2bff      	cmp	r3, #255	@ 0xff
 80069ba:	d002      	beq.n	80069c2 <USBH_CDC_InterfaceInit+0x11a>
 80069bc:	7bfb      	ldrb	r3, [r7, #15]
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d901      	bls.n	80069c6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80069c2:	2302      	movs	r3, #2
 80069c4:	e0c2      	b.n	8006b4c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80069c6:	7bfb      	ldrb	r3, [r7, #15]
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	211a      	movs	r1, #26
 80069cc:	fb01 f303 	mul.w	r3, r1, r3
 80069d0:	4413      	add	r3, r2
 80069d2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	b25b      	sxtb	r3, r3
 80069da:	2b00      	cmp	r3, #0
 80069dc:	da16      	bge.n	8006a0c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80069de:	7bfb      	ldrb	r3, [r7, #15]
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	211a      	movs	r1, #26
 80069e4:	fb01 f303 	mul.w	r3, r1, r3
 80069e8:	4413      	add	r3, r2
 80069ea:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80069ee:	781a      	ldrb	r2, [r3, #0]
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80069f4:	7bfb      	ldrb	r3, [r7, #15]
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	211a      	movs	r1, #26
 80069fa:	fb01 f303 	mul.w	r3, r1, r3
 80069fe:	4413      	add	r3, r2
 8006a00:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006a04:	881a      	ldrh	r2, [r3, #0]
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	835a      	strh	r2, [r3, #26]
 8006a0a:	e015      	b.n	8006a38 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006a0c:	7bfb      	ldrb	r3, [r7, #15]
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	211a      	movs	r1, #26
 8006a12:	fb01 f303 	mul.w	r3, r1, r3
 8006a16:	4413      	add	r3, r2
 8006a18:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006a1c:	781a      	ldrb	r2, [r3, #0]
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006a22:	7bfb      	ldrb	r3, [r7, #15]
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	211a      	movs	r1, #26
 8006a28:	fb01 f303 	mul.w	r3, r1, r3
 8006a2c:	4413      	add	r3, r2
 8006a2e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006a32:	881a      	ldrh	r2, [r3, #0]
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006a38:	7bfb      	ldrb	r3, [r7, #15]
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	211a      	movs	r1, #26
 8006a3e:	fb01 f303 	mul.w	r3, r1, r3
 8006a42:	4413      	add	r3, r2
 8006a44:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	b25b      	sxtb	r3, r3
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	da16      	bge.n	8006a7e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006a50:	7bfb      	ldrb	r3, [r7, #15]
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	211a      	movs	r1, #26
 8006a56:	fb01 f303 	mul.w	r3, r1, r3
 8006a5a:	4413      	add	r3, r2
 8006a5c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006a60:	781a      	ldrb	r2, [r3, #0]
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006a66:	7bfb      	ldrb	r3, [r7, #15]
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	211a      	movs	r1, #26
 8006a6c:	fb01 f303 	mul.w	r3, r1, r3
 8006a70:	4413      	add	r3, r2
 8006a72:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006a76:	881a      	ldrh	r2, [r3, #0]
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	835a      	strh	r2, [r3, #26]
 8006a7c:	e015      	b.n	8006aaa <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006a7e:	7bfb      	ldrb	r3, [r7, #15]
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	211a      	movs	r1, #26
 8006a84:	fb01 f303 	mul.w	r3, r1, r3
 8006a88:	4413      	add	r3, r2
 8006a8a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006a8e:	781a      	ldrb	r2, [r3, #0]
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006a94:	7bfb      	ldrb	r3, [r7, #15]
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	211a      	movs	r1, #26
 8006a9a:	fb01 f303 	mul.w	r3, r1, r3
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006aa4:	881a      	ldrh	r2, [r3, #0]
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	7b9b      	ldrb	r3, [r3, #14]
 8006aae:	4619      	mov	r1, r3
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f001 ff1c 	bl	80088ee <USBH_AllocPipe>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	461a      	mov	r2, r3
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	7bdb      	ldrb	r3, [r3, #15]
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f001 ff12 	bl	80088ee <USBH_AllocPipe>
 8006aca:	4603      	mov	r3, r0
 8006acc:	461a      	mov	r2, r3
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	7b59      	ldrb	r1, [r3, #13]
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	7b98      	ldrb	r0, [r3, #14]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	8b12      	ldrh	r2, [r2, #24]
 8006aea:	9202      	str	r2, [sp, #8]
 8006aec:	2202      	movs	r2, #2
 8006aee:	9201      	str	r2, [sp, #4]
 8006af0:	9300      	str	r3, [sp, #0]
 8006af2:	4623      	mov	r3, r4
 8006af4:	4602      	mov	r2, r0
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f001 feca 	bl	8008890 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	7b19      	ldrb	r1, [r3, #12]
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	7bd8      	ldrb	r0, [r3, #15]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006b10:	68ba      	ldr	r2, [r7, #8]
 8006b12:	8b52      	ldrh	r2, [r2, #26]
 8006b14:	9202      	str	r2, [sp, #8]
 8006b16:	2202      	movs	r2, #2
 8006b18:	9201      	str	r2, [sp, #4]
 8006b1a:	9300      	str	r3, [sp, #0]
 8006b1c:	4623      	mov	r3, r4
 8006b1e:	4602      	mov	r2, r0
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f001 feb5 	bl	8008890 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	7b5b      	ldrb	r3, [r3, #13]
 8006b32:	2200      	movs	r2, #0
 8006b34:	4619      	mov	r1, r3
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f002 f9c0 	bl	8008ebc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	7b1b      	ldrb	r3, [r3, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	4619      	mov	r1, r3
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f002 f9b9 	bl	8008ebc <USBH_LL_SetToggle>

  return USBH_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3714      	adds	r7, #20
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd90      	pop	{r4, r7, pc}

08006b54 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006b62:	69db      	ldr	r3, [r3, #28]
 8006b64:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00e      	beq.n	8006b8c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	4619      	mov	r1, r3
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f001 feaa 	bl	80088ce <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	4619      	mov	r1, r3
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f001 fed5 	bl	8008930 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	7b1b      	ldrb	r3, [r3, #12]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00e      	beq.n	8006bb2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	7b1b      	ldrb	r3, [r3, #12]
 8006b98:	4619      	mov	r1, r3
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f001 fe97 	bl	80088ce <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	7b1b      	ldrb	r3, [r3, #12]
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f001 fec2 	bl	8008930 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	7b5b      	ldrb	r3, [r3, #13]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00e      	beq.n	8006bd8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	7b5b      	ldrb	r3, [r3, #13]
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f001 fe84 	bl	80088ce <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	7b5b      	ldrb	r3, [r3, #13]
 8006bca:	4619      	mov	r1, r3
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f001 feaf 	bl	8008930 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006bde:	69db      	ldr	r3, [r3, #28]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00b      	beq.n	8006bfc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006bea:	69db      	ldr	r3, [r3, #28]
 8006bec:	4618      	mov	r0, r3
 8006bee:	f002 f9f3 	bl	8008fd8 <free>
    phost->pActiveClass->pData = 0U;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b084      	sub	sp, #16
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c14:	69db      	ldr	r3, [r3, #28]
 8006c16:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	3340      	adds	r3, #64	@ 0x40
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 f8b1 	bl	8006d86 <GetLineCoding>
 8006c24:	4603      	mov	r3, r0
 8006c26:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006c28:	7afb      	ldrb	r3, [r7, #11]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d105      	bne.n	8006c3a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006c34:	2102      	movs	r1, #2
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006c3a:	7afb      	ldrb	r3, [r7, #11]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3710      	adds	r7, #16
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006c50:	2300      	movs	r3, #0
 8006c52:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c5a:	69db      	ldr	r3, [r3, #28]
 8006c5c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006c64:	2b04      	cmp	r3, #4
 8006c66:	d877      	bhi.n	8006d58 <USBH_CDC_Process+0x114>
 8006c68:	a201      	add	r2, pc, #4	@ (adr r2, 8006c70 <USBH_CDC_Process+0x2c>)
 8006c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6e:	bf00      	nop
 8006c70:	08006c85 	.word	0x08006c85
 8006c74:	08006c8b 	.word	0x08006c8b
 8006c78:	08006cbb 	.word	0x08006cbb
 8006c7c:	08006d2f 	.word	0x08006d2f
 8006c80:	08006d3d 	.word	0x08006d3d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006c84:	2300      	movs	r3, #0
 8006c86:	73fb      	strb	r3, [r7, #15]
      break;
 8006c88:	e06d      	b.n	8006d66 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c8e:	4619      	mov	r1, r3
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 f897 	bl	8006dc4 <SetLineCoding>
 8006c96:	4603      	mov	r3, r0
 8006c98:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c9a:	7bbb      	ldrb	r3, [r7, #14]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d104      	bne.n	8006caa <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006ca8:	e058      	b.n	8006d5c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006caa:	7bbb      	ldrb	r3, [r7, #14]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d055      	beq.n	8006d5c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	2204      	movs	r2, #4
 8006cb4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006cb8:	e050      	b.n	8006d5c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	3340      	adds	r3, #64	@ 0x40
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 f860 	bl	8006d86 <GetLineCoding>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006cca:	7bbb      	ldrb	r3, [r7, #14]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d126      	bne.n	8006d1e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ce2:	791b      	ldrb	r3, [r3, #4]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d13b      	bne.n	8006d60 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cf2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d133      	bne.n	8006d60 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d02:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d12b      	bne.n	8006d60 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d10:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d124      	bne.n	8006d60 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 f958 	bl	8006fcc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006d1c:	e020      	b.n	8006d60 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006d1e:	7bbb      	ldrb	r3, [r7, #14]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d01d      	beq.n	8006d60 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	2204      	movs	r2, #4
 8006d28:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006d2c:	e018      	b.n	8006d60 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f867 	bl	8006e02 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 f8da 	bl	8006eee <CDC_ProcessReception>
      break;
 8006d3a:	e014      	b.n	8006d66 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f001 f81e 	bl	8007d80 <USBH_ClrFeature>
 8006d44:	4603      	mov	r3, r0
 8006d46:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006d48:	7bbb      	ldrb	r3, [r7, #14]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10a      	bne.n	8006d64 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8006d56:	e005      	b.n	8006d64 <USBH_CDC_Process+0x120>

    default:
      break;
 8006d58:	bf00      	nop
 8006d5a:	e004      	b.n	8006d66 <USBH_CDC_Process+0x122>
      break;
 8006d5c:	bf00      	nop
 8006d5e:	e002      	b.n	8006d66 <USBH_CDC_Process+0x122>
      break;
 8006d60:	bf00      	nop
 8006d62:	e000      	b.n	8006d66 <USBH_CDC_Process+0x122>
      break;
 8006d64:	bf00      	nop

  }

  return status;
 8006d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3710      	adds	r7, #16
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	370c      	adds	r7, #12
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr

08006d86 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b082      	sub	sp, #8
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
 8006d8e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	22a1      	movs	r2, #161	@ 0xa1
 8006d94:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2221      	movs	r2, #33	@ 0x21
 8006d9a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2207      	movs	r2, #7
 8006dac:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	2207      	movs	r2, #7
 8006db2:	4619      	mov	r1, r3
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f001 fb17 	bl	80083e8 <USBH_CtlReq>
 8006dba:	4603      	mov	r3, r0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3708      	adds	r7, #8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2221      	movs	r2, #33	@ 0x21
 8006dd2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2220      	movs	r2, #32
 8006dd8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2207      	movs	r2, #7
 8006dea:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	2207      	movs	r2, #7
 8006df0:	4619      	mov	r1, r3
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f001 faf8 	bl	80083e8 <USBH_CtlReq>
 8006df8:	4603      	mov	r3, r0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3708      	adds	r7, #8
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b086      	sub	sp, #24
 8006e06:	af02      	add	r7, sp, #8
 8006e08:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e10:	69db      	ldr	r3, [r3, #28]
 8006e12:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006e14:	2300      	movs	r3, #0
 8006e16:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d002      	beq.n	8006e28 <CDC_ProcessTransmission+0x26>
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d023      	beq.n	8006e6e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006e26:	e05e      	b.n	8006ee6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	8b12      	ldrh	r2, [r2, #24]
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d90b      	bls.n	8006e4c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	69d9      	ldr	r1, [r3, #28]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	8b1a      	ldrh	r2, [r3, #24]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	7b5b      	ldrb	r3, [r3, #13]
 8006e40:	2001      	movs	r0, #1
 8006e42:	9000      	str	r0, [sp, #0]
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f001 fce0 	bl	800880a <USBH_BulkSendData>
 8006e4a:	e00b      	b.n	8006e64 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	7b5b      	ldrb	r3, [r3, #13]
 8006e5a:	2001      	movs	r0, #1
 8006e5c:	9000      	str	r0, [sp, #0]
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f001 fcd3 	bl	800880a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2202      	movs	r2, #2
 8006e68:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006e6c:	e03b      	b.n	8006ee6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	7b5b      	ldrb	r3, [r3, #13]
 8006e72:	4619      	mov	r1, r3
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f001 fff7 	bl	8008e68 <USBH_LL_GetURBState>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006e7e:	7afb      	ldrb	r3, [r7, #11]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d128      	bne.n	8006ed6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	8b12      	ldrh	r2, [r2, #24]
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d90e      	bls.n	8006eae <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	8b12      	ldrh	r2, [r2, #24]
 8006e98:	1a9a      	subs	r2, r3, r2
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	69db      	ldr	r3, [r3, #28]
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	8b12      	ldrh	r2, [r2, #24]
 8006ea6:	441a      	add	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	61da      	str	r2, [r3, #28]
 8006eac:	e002      	b.n	8006eb4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d004      	beq.n	8006ec6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006ec4:	e00e      	b.n	8006ee4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 f868 	bl	8006fa4 <USBH_CDC_TransmitCallback>
      break;
 8006ed4:	e006      	b.n	8006ee4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006ed6:	7afb      	ldrb	r3, [r7, #11]
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d103      	bne.n	8006ee4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006ee4:	bf00      	nop
  }
}
 8006ee6:	bf00      	nop
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b086      	sub	sp, #24
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006efc:	69db      	ldr	r3, [r3, #28]
 8006efe:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006f00:	2300      	movs	r3, #0
 8006f02:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8006f0a:	2b03      	cmp	r3, #3
 8006f0c:	d002      	beq.n	8006f14 <CDC_ProcessReception+0x26>
 8006f0e:	2b04      	cmp	r3, #4
 8006f10:	d00e      	beq.n	8006f30 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 8006f12:	e043      	b.n	8006f9c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	6a19      	ldr	r1, [r3, #32]
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	8b5a      	ldrh	r2, [r3, #26]
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	7b1b      	ldrb	r3, [r3, #12]
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f001 fc97 	bl	8008854 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	2204      	movs	r2, #4
 8006f2a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006f2e:	e035      	b.n	8006f9c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	7b1b      	ldrb	r3, [r3, #12]
 8006f34:	4619      	mov	r1, r3
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f001 ff96 	bl	8008e68 <USBH_LL_GetURBState>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006f40:	7cfb      	ldrb	r3, [r7, #19]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d129      	bne.n	8006f9a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	7b1b      	ldrb	r3, [r3, #12]
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f001 fef9 	bl	8008d44 <USBH_LL_GetLastXferSize>
 8006f52:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d016      	beq.n	8006f8c <CDC_ProcessReception+0x9e>
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	8b5b      	ldrh	r3, [r3, #26]
 8006f62:	461a      	mov	r2, r3
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d110      	bne.n	8006f8c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	1ad2      	subs	r2, r2, r3
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	6a1a      	ldr	r2, [r3, #32]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	441a      	add	r2, r3
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	2203      	movs	r2, #3
 8006f86:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006f8a:	e006      	b.n	8006f9a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 f80f 	bl	8006fb8 <USBH_CDC_ReceiveCallback>
      break;
 8006f9a:	bf00      	nop
  }
}
 8006f9c:	bf00      	nop
 8006f9e:	3718      	adds	r7, #24
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006fd4:	bf00      	nop
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	4613      	mov	r3, r2
 8006fec:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d101      	bne.n	8006ff8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006ff4:	2302      	movs	r3, #2
 8006ff6:	e029      	b.n	800704c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	79fa      	ldrb	r2, [r7, #7]
 8006ffc:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2200      	movs	r2, #0
 800700c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f000 f81f 	bl	8007054 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2200      	movs	r2, #0
 8007032:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d003      	beq.n	8007044 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	68ba      	ldr	r2, [r7, #8]
 8007040:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f001 fdc9 	bl	8008bdc <USBH_LL_Init>

  return USBH_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800705c:	2300      	movs	r3, #0
 800705e:	60fb      	str	r3, [r7, #12]
 8007060:	e009      	b.n	8007076 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	33e0      	adds	r3, #224	@ 0xe0
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	4413      	add	r3, r2
 800706c:	2200      	movs	r2, #0
 800706e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	3301      	adds	r3, #1
 8007074:	60fb      	str	r3, [r7, #12]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2b0f      	cmp	r3, #15
 800707a:	d9f2      	bls.n	8007062 <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800707c:	2300      	movs	r3, #0
 800707e:	60fb      	str	r3, [r7, #12]
 8007080:	e009      	b.n	8007096 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	4413      	add	r3, r2
 8007088:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800708c:	2200      	movs	r2, #0
 800708e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	3301      	adds	r3, #1
 8007094:	60fb      	str	r3, [r7, #12]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800709c:	d3f1      	bcc.n	8007082 <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2201      	movs	r2, #1
 80070ae:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2240      	movs	r2, #64	@ 0x40
 80070c2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2201      	movs	r2, #1
 80070d6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	331c      	adds	r3, #28
 80070ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80070f2:	2100      	movs	r1, #0
 80070f4:	4618      	mov	r0, r3
 80070f6:	f002 fa1d 	bl	8009534 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007100:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007104:	2100      	movs	r1, #0
 8007106:	4618      	mov	r0, r3
 8007108:	f002 fa14 	bl	8009534 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007112:	2212      	movs	r2, #18
 8007114:	2100      	movs	r1, #0
 8007116:	4618      	mov	r0, r3
 8007118:	f002 fa0c 	bl	8009534 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007122:	223e      	movs	r2, #62	@ 0x3e
 8007124:	2100      	movs	r1, #0
 8007126:	4618      	mov	r0, r3
 8007128:	f002 fa04 	bl	8009534 <memset>

  return USBH_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007136:	b480      	push	{r7}
 8007138:	b085      	sub	sp, #20
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
 800713e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007140:	2300      	movs	r3, #0
 8007142:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d016      	beq.n	8007178 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007150:	2b00      	cmp	r3, #0
 8007152:	d10e      	bne.n	8007172 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800715a:	1c59      	adds	r1, r3, #1
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	33de      	adds	r3, #222	@ 0xde
 8007166:	6839      	ldr	r1, [r7, #0]
 8007168:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800716c:	2300      	movs	r3, #0
 800716e:	73fb      	strb	r3, [r7, #15]
 8007170:	e004      	b.n	800717c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007172:	2302      	movs	r3, #2
 8007174:	73fb      	strb	r3, [r7, #15]
 8007176:	e001      	b.n	800717c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007178:	2302      	movs	r3, #2
 800717a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800717c:	7bfb      	ldrb	r3, [r7, #15]
}
 800717e:	4618      	mov	r0, r3
 8007180:	3714      	adds	r7, #20
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr

0800718a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800718a:	b480      	push	{r7}
 800718c:	b085      	sub	sp, #20
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
 8007192:	460b      	mov	r3, r1
 8007194:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007196:	2300      	movs	r3, #0
 8007198:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80071a0:	78fa      	ldrb	r2, [r7, #3]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d204      	bcs.n	80071b0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	78fa      	ldrb	r2, [r7, #3]
 80071aa:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80071ae:	e001      	b.n	80071b4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80071b0:	2302      	movs	r3, #2
 80071b2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80071b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3714      	adds	r7, #20
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80071c2:	b480      	push	{r7}
 80071c4:	b087      	sub	sp, #28
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
 80071ca:	4608      	mov	r0, r1
 80071cc:	4611      	mov	r1, r2
 80071ce:	461a      	mov	r2, r3
 80071d0:	4603      	mov	r3, r0
 80071d2:	70fb      	strb	r3, [r7, #3]
 80071d4:	460b      	mov	r3, r1
 80071d6:	70bb      	strb	r3, [r7, #2]
 80071d8:	4613      	mov	r3, r2
 80071da:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80071dc:	2300      	movs	r3, #0
 80071de:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80071e0:	2300      	movs	r3, #0
 80071e2:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80071ea:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80071ec:	e025      	b.n	800723a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80071ee:	7dfb      	ldrb	r3, [r7, #23]
 80071f0:	221a      	movs	r2, #26
 80071f2:	fb02 f303 	mul.w	r3, r2, r3
 80071f6:	3308      	adds	r3, #8
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	4413      	add	r3, r2
 80071fc:	3302      	adds	r3, #2
 80071fe:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	795b      	ldrb	r3, [r3, #5]
 8007204:	78fa      	ldrb	r2, [r7, #3]
 8007206:	429a      	cmp	r2, r3
 8007208:	d002      	beq.n	8007210 <USBH_FindInterface+0x4e>
 800720a:	78fb      	ldrb	r3, [r7, #3]
 800720c:	2bff      	cmp	r3, #255	@ 0xff
 800720e:	d111      	bne.n	8007234 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007214:	78ba      	ldrb	r2, [r7, #2]
 8007216:	429a      	cmp	r2, r3
 8007218:	d002      	beq.n	8007220 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800721a:	78bb      	ldrb	r3, [r7, #2]
 800721c:	2bff      	cmp	r3, #255	@ 0xff
 800721e:	d109      	bne.n	8007234 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007224:	787a      	ldrb	r2, [r7, #1]
 8007226:	429a      	cmp	r2, r3
 8007228:	d002      	beq.n	8007230 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800722a:	787b      	ldrb	r3, [r7, #1]
 800722c:	2bff      	cmp	r3, #255	@ 0xff
 800722e:	d101      	bne.n	8007234 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007230:	7dfb      	ldrb	r3, [r7, #23]
 8007232:	e006      	b.n	8007242 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007234:	7dfb      	ldrb	r3, [r7, #23]
 8007236:	3301      	adds	r3, #1
 8007238:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800723a:	7dfb      	ldrb	r3, [r7, #23]
 800723c:	2b01      	cmp	r3, #1
 800723e:	d9d6      	bls.n	80071ee <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007240:	23ff      	movs	r3, #255	@ 0xff
}
 8007242:	4618      	mov	r0, r3
 8007244:	371c      	adds	r7, #28
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr

0800724e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b082      	sub	sp, #8
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f001 fcfc 	bl	8008c54 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800725c:	2101      	movs	r1, #1
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f001 fe15 	bl	8008e8e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3708      	adds	r7, #8
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
	...

08007270 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b088      	sub	sp, #32
 8007274:	af04      	add	r7, sp, #16
 8007276:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007278:	2302      	movs	r3, #2
 800727a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800727c:	2300      	movs	r3, #0
 800727e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007286:	b2db      	uxtb	r3, r3
 8007288:	2b01      	cmp	r3, #1
 800728a:	d102      	bne.n	8007292 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2203      	movs	r2, #3
 8007290:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	b2db      	uxtb	r3, r3
 8007298:	2b0b      	cmp	r3, #11
 800729a:	f200 81bc 	bhi.w	8007616 <USBH_Process+0x3a6>
 800729e:	a201      	add	r2, pc, #4	@ (adr r2, 80072a4 <USBH_Process+0x34>)
 80072a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a4:	080072d5 	.word	0x080072d5
 80072a8:	08007307 	.word	0x08007307
 80072ac:	08007371 	.word	0x08007371
 80072b0:	080075b1 	.word	0x080075b1
 80072b4:	08007617 	.word	0x08007617
 80072b8:	08007411 	.word	0x08007411
 80072bc:	08007557 	.word	0x08007557
 80072c0:	08007447 	.word	0x08007447
 80072c4:	08007467 	.word	0x08007467
 80072c8:	08007485 	.word	0x08007485
 80072cc:	080074c9 	.word	0x080074c9
 80072d0:	08007599 	.word	0x08007599
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	2b00      	cmp	r3, #0
 80072de:	f000 819c 	beq.w	800761a <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2201      	movs	r2, #1
 80072e6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80072e8:	20c8      	movs	r0, #200	@ 0xc8
 80072ea:	f001 fe1a 	bl	8008f22 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f001 fd0d 	bl	8008d0e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8007304:	e189      	b.n	800761a <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800730c:	b2db      	uxtb	r3, r3
 800730e:	2b01      	cmp	r3, #1
 8007310:	d107      	bne.n	8007322 <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2202      	movs	r2, #2
 800731e:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007320:	e18a      	b.n	8007638 <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007328:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800732c:	d914      	bls.n	8007358 <USBH_Process+0xe8>
          phost->device.RstCnt++;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007334:	3301      	adds	r3, #1
 8007336:	b2da      	uxtb	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007344:	2b03      	cmp	r3, #3
 8007346:	d903      	bls.n	8007350 <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	220d      	movs	r2, #13
 800734c:	701a      	strb	r2, [r3, #0]
      break;
 800734e:	e173      	b.n	8007638 <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	701a      	strb	r2, [r3, #0]
      break;
 8007356:	e16f      	b.n	8007638 <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800735e:	f103 020a 	add.w	r2, r3, #10
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007368:	200a      	movs	r0, #10
 800736a:	f001 fdda 	bl	8008f22 <USBH_Delay>
      break;
 800736e:	e163      	b.n	8007638 <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007376:	2b00      	cmp	r3, #0
 8007378:	d005      	beq.n	8007386 <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007380:	2104      	movs	r1, #4
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007386:	2064      	movs	r0, #100	@ 0x64
 8007388:	f001 fdcb 	bl	8008f22 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f001 fc97 	bl	8008cc0 <USBH_LL_GetSpeed>
 8007392:	4603      	mov	r3, r0
 8007394:	461a      	mov	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2205      	movs	r2, #5
 80073a0:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80073a2:	2100      	movs	r1, #0
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f001 faa2 	bl	80088ee <USBH_AllocPipe>
 80073aa:	4603      	mov	r3, r0
 80073ac:	461a      	mov	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80073b2:	2180      	movs	r1, #128	@ 0x80
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f001 fa9a 	bl	80088ee <USBH_AllocPipe>
 80073ba:	4603      	mov	r3, r0
 80073bc:	461a      	mov	r2, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	7919      	ldrb	r1, [r3, #4]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80073d6:	9202      	str	r2, [sp, #8]
 80073d8:	2200      	movs	r2, #0
 80073da:	9201      	str	r2, [sp, #4]
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	4603      	mov	r3, r0
 80073e0:	2280      	movs	r2, #128	@ 0x80
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f001 fa54 	bl	8008890 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	7959      	ldrb	r1, [r3, #5]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80073fc:	9202      	str	r2, [sp, #8]
 80073fe:	2200      	movs	r2, #0
 8007400:	9201      	str	r2, [sp, #4]
 8007402:	9300      	str	r3, [sp, #0]
 8007404:	4603      	mov	r3, r0
 8007406:	2200      	movs	r2, #0
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f001 fa41 	bl	8008890 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800740e:	e113      	b.n	8007638 <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 f917 	bl	8007644 <USBH_HandleEnum>
 8007416:	4603      	mov	r3, r0
 8007418:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800741a:	7bbb      	ldrb	r3, [r7, #14]
 800741c:	b2db      	uxtb	r3, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	f040 80fd 	bne.w	800761e <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007432:	2b01      	cmp	r3, #1
 8007434:	d103      	bne.n	800743e <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2208      	movs	r2, #8
 800743a:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800743c:	e0ef      	b.n	800761e <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2207      	movs	r2, #7
 8007442:	701a      	strb	r2, [r3, #0]
      break;
 8007444:	e0eb      	b.n	800761e <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800744c:	2b00      	cmp	r3, #0
 800744e:	f000 80e8 	beq.w	8007622 <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007458:	2101      	movs	r1, #1
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2208      	movs	r2, #8
 8007462:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 8007464:	e0dd      	b.n	8007622 <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800746c:	4619      	mov	r1, r3
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 fc3f 	bl	8007cf2 <USBH_SetCfg>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	f040 80d5 	bne.w	8007626 <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2209      	movs	r2, #9
 8007480:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007482:	e0d0      	b.n	8007626 <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800748a:	f003 0320 	and.w	r3, r3, #32
 800748e:	2b00      	cmp	r3, #0
 8007490:	d016      	beq.n	80074c0 <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007492:	2101      	movs	r1, #1
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 fc4f 	bl	8007d38 <USBH_SetFeature>
 800749a:	4603      	mov	r3, r0
 800749c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800749e:	7bbb      	ldrb	r3, [r7, #14]
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d103      	bne.n	80074ae <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	220a      	movs	r2, #10
 80074aa:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80074ac:	e0bd      	b.n	800762a <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 80074ae:	7bbb      	ldrb	r3, [r7, #14]
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	2b03      	cmp	r3, #3
 80074b4:	f040 80b9 	bne.w	800762a <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	220a      	movs	r2, #10
 80074bc:	701a      	strb	r2, [r3, #0]
      break;
 80074be:	e0b4      	b.n	800762a <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	220a      	movs	r2, #10
 80074c4:	701a      	strb	r2, [r3, #0]
      break;
 80074c6:	e0b0      	b.n	800762a <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	f000 80ad 	beq.w	800762e <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80074dc:	2300      	movs	r3, #0
 80074de:	73fb      	strb	r3, [r7, #15]
 80074e0:	e016      	b.n	8007510 <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80074e2:	7bfa      	ldrb	r2, [r7, #15]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	32de      	adds	r2, #222	@ 0xde
 80074e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ec:	791a      	ldrb	r2, [r3, #4]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d108      	bne.n	800750a <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 80074f8:	7bfa      	ldrb	r2, [r7, #15]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	32de      	adds	r2, #222	@ 0xde
 80074fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007508:	e005      	b.n	8007516 <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800750a:	7bfb      	ldrb	r3, [r7, #15]
 800750c:	3301      	adds	r3, #1
 800750e:	73fb      	strb	r3, [r7, #15]
 8007510:	7bfb      	ldrb	r3, [r7, #15]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d0e5      	beq.n	80074e2 <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800751c:	2b00      	cmp	r3, #0
 800751e:	d016      	beq.n	800754e <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	4798      	blx	r3
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d109      	bne.n	8007546 <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2206      	movs	r2, #6
 8007536:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800753e:	2103      	movs	r1, #3
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007544:	e073      	b.n	800762e <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	220d      	movs	r2, #13
 800754a:	701a      	strb	r2, [r3, #0]
      break;
 800754c:	e06f      	b.n	800762e <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	220d      	movs	r2, #13
 8007552:	701a      	strb	r2, [r3, #0]
      break;
 8007554:	e06b      	b.n	800762e <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800755c:	2b00      	cmp	r3, #0
 800755e:	d017      	beq.n	8007590 <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	4798      	blx	r3
 800756c:	4603      	mov	r3, r0
 800756e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007570:	7bbb      	ldrb	r3, [r7, #14]
 8007572:	b2db      	uxtb	r3, r3
 8007574:	2b00      	cmp	r3, #0
 8007576:	d103      	bne.n	8007580 <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	220b      	movs	r2, #11
 800757c:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800757e:	e058      	b.n	8007632 <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 8007580:	7bbb      	ldrb	r3, [r7, #14]
 8007582:	b2db      	uxtb	r3, r3
 8007584:	2b02      	cmp	r3, #2
 8007586:	d154      	bne.n	8007632 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	220d      	movs	r2, #13
 800758c:	701a      	strb	r2, [r3, #0]
      break;
 800758e:	e050      	b.n	8007632 <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	220d      	movs	r2, #13
 8007594:	701a      	strb	r2, [r3, #0]
      break;
 8007596:	e04c      	b.n	8007632 <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d049      	beq.n	8007636 <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075a8:	695b      	ldr	r3, [r3, #20]
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	4798      	blx	r3
      }
      break;
 80075ae:	e042      	b.n	8007636 <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f7ff fd4b 	bl	8007054 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d009      	beq.n	80075dc <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d005      	beq.n	80075f2 <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80075ec:	2105      	movs	r1, #5
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d107      	bne.n	800760e <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f7ff fe21 	bl	800724e <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800760c:	e014      	b.n	8007638 <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f001 fb20 	bl	8008c54 <USBH_LL_Start>
      break;
 8007614:	e010      	b.n	8007638 <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 8007616:	bf00      	nop
 8007618:	e00e      	b.n	8007638 <USBH_Process+0x3c8>
      break;
 800761a:	bf00      	nop
 800761c:	e00c      	b.n	8007638 <USBH_Process+0x3c8>
      break;
 800761e:	bf00      	nop
 8007620:	e00a      	b.n	8007638 <USBH_Process+0x3c8>
    break;
 8007622:	bf00      	nop
 8007624:	e008      	b.n	8007638 <USBH_Process+0x3c8>
      break;
 8007626:	bf00      	nop
 8007628:	e006      	b.n	8007638 <USBH_Process+0x3c8>
      break;
 800762a:	bf00      	nop
 800762c:	e004      	b.n	8007638 <USBH_Process+0x3c8>
      break;
 800762e:	bf00      	nop
 8007630:	e002      	b.n	8007638 <USBH_Process+0x3c8>
      break;
 8007632:	bf00      	nop
 8007634:	e000      	b.n	8007638 <USBH_Process+0x3c8>
      break;
 8007636:	bf00      	nop
  }
  return USBH_OK;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	3710      	adds	r7, #16
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop

08007644 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b088      	sub	sp, #32
 8007648:	af04      	add	r7, sp, #16
 800764a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800764c:	2301      	movs	r3, #1
 800764e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007650:	2301      	movs	r3, #1
 8007652:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	785b      	ldrb	r3, [r3, #1]
 8007658:	2b07      	cmp	r3, #7
 800765a:	f200 81bd 	bhi.w	80079d8 <USBH_HandleEnum+0x394>
 800765e:	a201      	add	r2, pc, #4	@ (adr r2, 8007664 <USBH_HandleEnum+0x20>)
 8007660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007664:	08007685 	.word	0x08007685
 8007668:	0800773f 	.word	0x0800773f
 800766c:	080077a9 	.word	0x080077a9
 8007670:	08007833 	.word	0x08007833
 8007674:	0800789d 	.word	0x0800789d
 8007678:	0800790d 	.word	0x0800790d
 800767c:	08007953 	.word	0x08007953
 8007680:	08007999 	.word	0x08007999
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007684:	2108      	movs	r1, #8
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 fa50 	bl	8007b2c <USBH_Get_DevDesc>
 800768c:	4603      	mov	r3, r0
 800768e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007690:	7bbb      	ldrb	r3, [r7, #14]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d12e      	bne.n	80076f4 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	7919      	ldrb	r1, [r3, #4]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80076ba:	9202      	str	r2, [sp, #8]
 80076bc:	2200      	movs	r2, #0
 80076be:	9201      	str	r2, [sp, #4]
 80076c0:	9300      	str	r3, [sp, #0]
 80076c2:	4603      	mov	r3, r0
 80076c4:	2280      	movs	r2, #128	@ 0x80
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f001 f8e2 	bl	8008890 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	7959      	ldrb	r1, [r3, #5]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80076e0:	9202      	str	r2, [sp, #8]
 80076e2:	2200      	movs	r2, #0
 80076e4:	9201      	str	r2, [sp, #4]
 80076e6:	9300      	str	r3, [sp, #0]
 80076e8:	4603      	mov	r3, r0
 80076ea:	2200      	movs	r2, #0
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f001 f8cf 	bl	8008890 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80076f2:	e173      	b.n	80079dc <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076f4:	7bbb      	ldrb	r3, [r7, #14]
 80076f6:	2b03      	cmp	r3, #3
 80076f8:	f040 8170 	bne.w	80079dc <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007702:	3301      	adds	r3, #1
 8007704:	b2da      	uxtb	r2, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007712:	2b03      	cmp	r3, #3
 8007714:	d903      	bls.n	800771e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	220d      	movs	r2, #13
 800771a:	701a      	strb	r2, [r3, #0]
      break;
 800771c:	e15e      	b.n	80079dc <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	795b      	ldrb	r3, [r3, #5]
 8007722:	4619      	mov	r1, r3
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f001 f903 	bl	8008930 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	791b      	ldrb	r3, [r3, #4]
 800772e:	4619      	mov	r1, r3
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f001 f8fd 	bl	8008930 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	701a      	strb	r2, [r3, #0]
      break;
 800773c:	e14e      	b.n	80079dc <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800773e:	2112      	movs	r1, #18
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 f9f3 	bl	8007b2c <USBH_Get_DevDesc>
 8007746:	4603      	mov	r3, r0
 8007748:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800774a:	7bbb      	ldrb	r3, [r7, #14]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d103      	bne.n	8007758 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2202      	movs	r2, #2
 8007754:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007756:	e143      	b.n	80079e0 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007758:	7bbb      	ldrb	r3, [r7, #14]
 800775a:	2b03      	cmp	r3, #3
 800775c:	f040 8140 	bne.w	80079e0 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007766:	3301      	adds	r3, #1
 8007768:	b2da      	uxtb	r2, r3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007776:	2b03      	cmp	r3, #3
 8007778:	d903      	bls.n	8007782 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	220d      	movs	r2, #13
 800777e:	701a      	strb	r2, [r3, #0]
      break;
 8007780:	e12e      	b.n	80079e0 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	795b      	ldrb	r3, [r3, #5]
 8007786:	4619      	mov	r1, r3
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f001 f8d1 	bl	8008930 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	791b      	ldrb	r3, [r3, #4]
 8007792:	4619      	mov	r1, r3
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f001 f8cb 	bl	8008930 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	701a      	strb	r2, [r3, #0]
      break;
 80077a6:	e11b      	b.n	80079e0 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80077a8:	2101      	movs	r1, #1
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 fa7d 	bl	8007caa <USBH_SetAddress>
 80077b0:	4603      	mov	r3, r0
 80077b2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077b4:	7bbb      	ldrb	r3, [r7, #14]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d130      	bne.n	800781c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80077ba:	2002      	movs	r0, #2
 80077bc:	f001 fbb1 	bl	8008f22 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2203      	movs	r2, #3
 80077cc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	7919      	ldrb	r1, [r3, #4]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80077e2:	9202      	str	r2, [sp, #8]
 80077e4:	2200      	movs	r2, #0
 80077e6:	9201      	str	r2, [sp, #4]
 80077e8:	9300      	str	r3, [sp, #0]
 80077ea:	4603      	mov	r3, r0
 80077ec:	2280      	movs	r2, #128	@ 0x80
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f001 f84e 	bl	8008890 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	7959      	ldrb	r1, [r3, #5]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007808:	9202      	str	r2, [sp, #8]
 800780a:	2200      	movs	r2, #0
 800780c:	9201      	str	r2, [sp, #4]
 800780e:	9300      	str	r3, [sp, #0]
 8007810:	4603      	mov	r3, r0
 8007812:	2200      	movs	r2, #0
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f001 f83b 	bl	8008890 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800781a:	e0e3      	b.n	80079e4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800781c:	7bbb      	ldrb	r3, [r7, #14]
 800781e:	2b03      	cmp	r3, #3
 8007820:	f040 80e0 	bne.w	80079e4 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	220d      	movs	r2, #13
 8007828:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	705a      	strb	r2, [r3, #1]
      break;
 8007830:	e0d8      	b.n	80079e4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007832:	2109      	movs	r1, #9
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 f9a5 	bl	8007b84 <USBH_Get_CfgDesc>
 800783a:	4603      	mov	r3, r0
 800783c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800783e:	7bbb      	ldrb	r3, [r7, #14]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d103      	bne.n	800784c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2204      	movs	r2, #4
 8007848:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800784a:	e0cd      	b.n	80079e8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800784c:	7bbb      	ldrb	r3, [r7, #14]
 800784e:	2b03      	cmp	r3, #3
 8007850:	f040 80ca 	bne.w	80079e8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800785a:	3301      	adds	r3, #1
 800785c:	b2da      	uxtb	r2, r3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800786a:	2b03      	cmp	r3, #3
 800786c:	d903      	bls.n	8007876 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	220d      	movs	r2, #13
 8007872:	701a      	strb	r2, [r3, #0]
      break;
 8007874:	e0b8      	b.n	80079e8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	795b      	ldrb	r3, [r3, #5]
 800787a:	4619      	mov	r1, r3
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f001 f857 	bl	8008930 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	791b      	ldrb	r3, [r3, #4]
 8007886:	4619      	mov	r1, r3
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f001 f851 	bl	8008930 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	701a      	strb	r2, [r3, #0]
      break;
 800789a:	e0a5      	b.n	80079e8 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80078a2:	4619      	mov	r1, r3
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 f96d 	bl	8007b84 <USBH_Get_CfgDesc>
 80078aa:	4603      	mov	r3, r0
 80078ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80078ae:	7bbb      	ldrb	r3, [r7, #14]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d103      	bne.n	80078bc <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2205      	movs	r2, #5
 80078b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80078ba:	e097      	b.n	80079ec <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078bc:	7bbb      	ldrb	r3, [r7, #14]
 80078be:	2b03      	cmp	r3, #3
 80078c0:	f040 8094 	bne.w	80079ec <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80078ca:	3301      	adds	r3, #1
 80078cc:	b2da      	uxtb	r2, r3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80078da:	2b03      	cmp	r3, #3
 80078dc:	d903      	bls.n	80078e6 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	220d      	movs	r2, #13
 80078e2:	701a      	strb	r2, [r3, #0]
      break;
 80078e4:	e082      	b.n	80079ec <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	795b      	ldrb	r3, [r3, #5]
 80078ea:	4619      	mov	r1, r3
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f001 f81f 	bl	8008930 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	791b      	ldrb	r3, [r3, #4]
 80078f6:	4619      	mov	r1, r3
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f001 f819 	bl	8008930 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	701a      	strb	r2, [r3, #0]
      break;
 800790a:	e06f      	b.n	80079ec <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007912:	2b00      	cmp	r3, #0
 8007914:	d019      	beq.n	800794a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007922:	23ff      	movs	r3, #255	@ 0xff
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 f957 	bl	8007bd8 <USBH_Get_StringDesc>
 800792a:	4603      	mov	r3, r0
 800792c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800792e:	7bbb      	ldrb	r3, [r7, #14]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d103      	bne.n	800793c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2206      	movs	r2, #6
 8007938:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800793a:	e059      	b.n	80079f0 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800793c:	7bbb      	ldrb	r3, [r7, #14]
 800793e:	2b03      	cmp	r3, #3
 8007940:	d156      	bne.n	80079f0 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2206      	movs	r2, #6
 8007946:	705a      	strb	r2, [r3, #1]
      break;
 8007948:	e052      	b.n	80079f0 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2206      	movs	r2, #6
 800794e:	705a      	strb	r2, [r3, #1]
      break;
 8007950:	e04e      	b.n	80079f0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007958:	2b00      	cmp	r3, #0
 800795a:	d019      	beq.n	8007990 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007968:	23ff      	movs	r3, #255	@ 0xff
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f934 	bl	8007bd8 <USBH_Get_StringDesc>
 8007970:	4603      	mov	r3, r0
 8007972:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007974:	7bbb      	ldrb	r3, [r7, #14]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d103      	bne.n	8007982 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2207      	movs	r2, #7
 800797e:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8007980:	e038      	b.n	80079f4 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007982:	7bbb      	ldrb	r3, [r7, #14]
 8007984:	2b03      	cmp	r3, #3
 8007986:	d135      	bne.n	80079f4 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2207      	movs	r2, #7
 800798c:	705a      	strb	r2, [r3, #1]
      break;
 800798e:	e031      	b.n	80079f4 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2207      	movs	r2, #7
 8007994:	705a      	strb	r2, [r3, #1]
      break;
 8007996:	e02d      	b.n	80079f4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d017      	beq.n	80079d2 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80079ae:	23ff      	movs	r3, #255	@ 0xff
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 f911 	bl	8007bd8 <USBH_Get_StringDesc>
 80079b6:	4603      	mov	r3, r0
 80079b8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80079ba:	7bbb      	ldrb	r3, [r7, #14]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d102      	bne.n	80079c6 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80079c0:	2300      	movs	r3, #0
 80079c2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80079c4:	e018      	b.n	80079f8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079c6:	7bbb      	ldrb	r3, [r7, #14]
 80079c8:	2b03      	cmp	r3, #3
 80079ca:	d115      	bne.n	80079f8 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 80079cc:	2300      	movs	r3, #0
 80079ce:	73fb      	strb	r3, [r7, #15]
      break;
 80079d0:	e012      	b.n	80079f8 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 80079d2:	2300      	movs	r3, #0
 80079d4:	73fb      	strb	r3, [r7, #15]
      break;
 80079d6:	e00f      	b.n	80079f8 <USBH_HandleEnum+0x3b4>

    default:
      break;
 80079d8:	bf00      	nop
 80079da:	e00e      	b.n	80079fa <USBH_HandleEnum+0x3b6>
      break;
 80079dc:	bf00      	nop
 80079de:	e00c      	b.n	80079fa <USBH_HandleEnum+0x3b6>
      break;
 80079e0:	bf00      	nop
 80079e2:	e00a      	b.n	80079fa <USBH_HandleEnum+0x3b6>
      break;
 80079e4:	bf00      	nop
 80079e6:	e008      	b.n	80079fa <USBH_HandleEnum+0x3b6>
      break;
 80079e8:	bf00      	nop
 80079ea:	e006      	b.n	80079fa <USBH_HandleEnum+0x3b6>
      break;
 80079ec:	bf00      	nop
 80079ee:	e004      	b.n	80079fa <USBH_HandleEnum+0x3b6>
      break;
 80079f0:	bf00      	nop
 80079f2:	e002      	b.n	80079fa <USBH_HandleEnum+0x3b6>
      break;
 80079f4:	bf00      	nop
 80079f6:	e000      	b.n	80079fa <USBH_HandleEnum+0x3b6>
      break;
 80079f8:	bf00      	nop
  }
  return Status;
 80079fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	683a      	ldr	r2, [r7, #0]
 8007a12:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007a16:	bf00      	nop
 8007a18:	370c      	adds	r7, #12
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr

08007a22 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b082      	sub	sp, #8
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007a30:	1c5a      	adds	r2, r3, #1
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 f804 	bl	8007a46 <USBH_HandleSof>
}
 8007a3e:	bf00      	nop
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b082      	sub	sp, #8
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	2b0b      	cmp	r3, #11
 8007a56:	d10a      	bne.n	8007a6e <USBH_HandleSof+0x28>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d005      	beq.n	8007a6e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a68:	699b      	ldr	r3, [r3, #24]
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	4798      	blx	r3
  }
}
 8007a6e:	bf00      	nop
 8007a70:	3708      	adds	r7, #8
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007a76:	b480      	push	{r7}
 8007a78:	b083      	sub	sp, #12
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 8007a86:	bf00      	nop
}
 8007a88:	370c      	adds	r7, #12
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr

08007a92 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007a92:	b480      	push	{r7}
 8007a94:	b083      	sub	sp, #12
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8007aaa:	bf00      	nop
}
 8007aac:	370c      	adds	r7, #12
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr

08007ab6 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007ab6:	b480      	push	{r7}
 8007ab8:	b083      	sub	sp, #12
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f001 f8c0 	bl	8008c8a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	791b      	ldrb	r3, [r3, #4]
 8007b0e:	4619      	mov	r1, r3
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 ff0d 	bl	8008930 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	795b      	ldrb	r3, [r3, #5]
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 ff07 	bl	8008930 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8007b22:	2300      	movs	r3, #0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3708      	adds	r7, #8
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b086      	sub	sp, #24
 8007b30:	af02      	add	r7, sp, #8
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	460b      	mov	r3, r1
 8007b36:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007b38:	887b      	ldrh	r3, [r7, #2]
 8007b3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b3e:	d901      	bls.n	8007b44 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007b40:	2303      	movs	r3, #3
 8007b42:	e01b      	b.n	8007b7c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007b4a:	887b      	ldrh	r3, [r7, #2]
 8007b4c:	9300      	str	r3, [sp, #0]
 8007b4e:	4613      	mov	r3, r2
 8007b50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007b54:	2100      	movs	r1, #0
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f872 	bl	8007c40 <USBH_GetDescriptor>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007b60:	7bfb      	ldrb	r3, [r7, #15]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d109      	bne.n	8007b7a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007b6c:	887a      	ldrh	r2, [r7, #2]
 8007b6e:	4619      	mov	r1, r3
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 f929 	bl	8007dc8 <USBH_ParseDevDesc>
 8007b76:	4603      	mov	r3, r0
 8007b78:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b086      	sub	sp, #24
 8007b88:	af02      	add	r7, sp, #8
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	331c      	adds	r3, #28
 8007b94:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007b96:	887b      	ldrh	r3, [r7, #2]
 8007b98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b9c:	d901      	bls.n	8007ba2 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	e016      	b.n	8007bd0 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007ba2:	887b      	ldrh	r3, [r7, #2]
 8007ba4:	9300      	str	r3, [sp, #0]
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007bac:	2100      	movs	r1, #0
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f846 	bl	8007c40 <USBH_GetDescriptor>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007bb8:	7bfb      	ldrb	r3, [r7, #15]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d107      	bne.n	8007bce <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007bbe:	887b      	ldrh	r3, [r7, #2]
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	68b9      	ldr	r1, [r7, #8]
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 f9af 	bl	8007f28 <USBH_ParseCfgDesc>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3710      	adds	r7, #16
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b088      	sub	sp, #32
 8007bdc:	af02      	add	r7, sp, #8
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	607a      	str	r2, [r7, #4]
 8007be2:	461a      	mov	r2, r3
 8007be4:	460b      	mov	r3, r1
 8007be6:	72fb      	strb	r3, [r7, #11]
 8007be8:	4613      	mov	r3, r2
 8007bea:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007bec:	893b      	ldrh	r3, [r7, #8]
 8007bee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bf2:	d802      	bhi.n	8007bfa <USBH_Get_StringDesc+0x22>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d101      	bne.n	8007bfe <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	e01c      	b.n	8007c38 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007bfe:	7afb      	ldrb	r3, [r7, #11]
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007c06:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007c0e:	893b      	ldrh	r3, [r7, #8]
 8007c10:	9300      	str	r3, [sp, #0]
 8007c12:	460b      	mov	r3, r1
 8007c14:	2100      	movs	r1, #0
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f000 f812 	bl	8007c40 <USBH_GetDescriptor>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007c20:	7dfb      	ldrb	r3, [r7, #23]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d107      	bne.n	8007c36 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007c2c:	893a      	ldrh	r2, [r7, #8]
 8007c2e:	6879      	ldr	r1, [r7, #4]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f000 fb8c 	bl	800834e <USBH_ParseStringDesc>
  }

  return status;
 8007c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3718      	adds	r7, #24
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	607b      	str	r3, [r7, #4]
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	72fb      	strb	r3, [r7, #11]
 8007c4e:	4613      	mov	r3, r2
 8007c50:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	789b      	ldrb	r3, [r3, #2]
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d11c      	bne.n	8007c94 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007c5a:	7afb      	ldrb	r3, [r7, #11]
 8007c5c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007c60:	b2da      	uxtb	r2, r3
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2206      	movs	r2, #6
 8007c6a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	893a      	ldrh	r2, [r7, #8]
 8007c70:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007c72:	893b      	ldrh	r3, [r7, #8]
 8007c74:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007c78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c7c:	d104      	bne.n	8007c88 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f240 4209 	movw	r2, #1033	@ 0x409
 8007c84:	829a      	strh	r2, [r3, #20]
 8007c86:	e002      	b.n	8007c8e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	8b3a      	ldrh	r2, [r7, #24]
 8007c92:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007c94:	8b3b      	ldrh	r3, [r7, #24]
 8007c96:	461a      	mov	r2, r3
 8007c98:	6879      	ldr	r1, [r7, #4]
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f000 fba4 	bl	80083e8 <USBH_CtlReq>
 8007ca0:	4603      	mov	r3, r0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b082      	sub	sp, #8
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	789b      	ldrb	r3, [r3, #2]
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d10f      	bne.n	8007cde <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2205      	movs	r2, #5
 8007cc8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007cca:	78fb      	ldrb	r3, [r7, #3]
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007cde:	2200      	movs	r2, #0
 8007ce0:	2100      	movs	r1, #0
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 fb80 	bl	80083e8 <USBH_CtlReq>
 8007ce8:	4603      	mov	r3, r0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3708      	adds	r7, #8
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b082      	sub	sp, #8
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	789b      	ldrb	r3, [r3, #2]
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d10e      	bne.n	8007d24 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2209      	movs	r2, #9
 8007d10:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	887a      	ldrh	r2, [r7, #2]
 8007d16:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007d24:	2200      	movs	r2, #0
 8007d26:	2100      	movs	r1, #0
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 fb5d 	bl	80083e8 <USBH_CtlReq>
 8007d2e:	4603      	mov	r3, r0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	460b      	mov	r3, r1
 8007d42:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	789b      	ldrb	r3, [r3, #2]
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d10f      	bne.n	8007d6c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2203      	movs	r2, #3
 8007d56:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007d58:	78fb      	ldrb	r3, [r7, #3]
 8007d5a:	b29a      	uxth	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	2100      	movs	r1, #0
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 fb39 	bl	80083e8 <USBH_CtlReq>
 8007d76:	4603      	mov	r3, r0
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3708      	adds	r7, #8
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	789b      	ldrb	r3, [r3, #2]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d10f      	bne.n	8007db4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2202      	movs	r2, #2
 8007d98:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007da6:	78fb      	ldrb	r3, [r7, #3]
 8007da8:	b29a      	uxth	r2, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007db4:	2200      	movs	r2, #0
 8007db6:	2100      	movs	r1, #0
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 fb15 	bl	80083e8 <USBH_CtlReq>
 8007dbe:	4603      	mov	r3, r0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3708      	adds	r7, #8
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b087      	sub	sp, #28
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007ddc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8007dde:	2300      	movs	r3, #0
 8007de0:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d101      	bne.n	8007dec <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007de8:	2302      	movs	r3, #2
 8007dea:	e094      	b.n	8007f16 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	781a      	ldrb	r2, [r3, #0]
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	785a      	ldrb	r2, [r3, #1]
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	3302      	adds	r3, #2
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	461a      	mov	r2, r3
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	3303      	adds	r3, #3
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	021b      	lsls	r3, r3, #8
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	b29a      	uxth	r2, r3
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	791a      	ldrb	r2, [r3, #4]
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	795a      	ldrb	r2, [r3, #5]
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	799a      	ldrb	r2, [r3, #6]
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	79da      	ldrb	r2, [r3, #7]
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d004      	beq.n	8007e4a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d11b      	bne.n	8007e82 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	79db      	ldrb	r3, [r3, #7]
 8007e4e:	2b20      	cmp	r3, #32
 8007e50:	dc0f      	bgt.n	8007e72 <USBH_ParseDevDesc+0xaa>
 8007e52:	2b08      	cmp	r3, #8
 8007e54:	db0f      	blt.n	8007e76 <USBH_ParseDevDesc+0xae>
 8007e56:	3b08      	subs	r3, #8
 8007e58:	4a32      	ldr	r2, [pc, #200]	@ (8007f24 <USBH_ParseDevDesc+0x15c>)
 8007e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e5e:	f003 0301 	and.w	r3, r3, #1
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	bf14      	ite	ne
 8007e66:	2301      	movne	r3, #1
 8007e68:	2300      	moveq	r3, #0
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d106      	bne.n	8007e7e <USBH_ParseDevDesc+0xb6>
 8007e70:	e001      	b.n	8007e76 <USBH_ParseDevDesc+0xae>
 8007e72:	2b40      	cmp	r3, #64	@ 0x40
 8007e74:	d003      	beq.n	8007e7e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	2208      	movs	r2, #8
 8007e7a:	71da      	strb	r2, [r3, #7]
        break;
 8007e7c:	e000      	b.n	8007e80 <USBH_ParseDevDesc+0xb8>
        break;
 8007e7e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8007e80:	e00e      	b.n	8007ea0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007e88:	2b02      	cmp	r3, #2
 8007e8a:	d107      	bne.n	8007e9c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	79db      	ldrb	r3, [r3, #7]
 8007e90:	2b08      	cmp	r3, #8
 8007e92:	d005      	beq.n	8007ea0 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	2208      	movs	r2, #8
 8007e98:	71da      	strb	r2, [r3, #7]
 8007e9a:	e001      	b.n	8007ea0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007e9c:	2303      	movs	r3, #3
 8007e9e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8007ea0:	88fb      	ldrh	r3, [r7, #6]
 8007ea2:	2b08      	cmp	r3, #8
 8007ea4:	d936      	bls.n	8007f14 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	3308      	adds	r3, #8
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	461a      	mov	r2, r3
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	3309      	adds	r3, #9
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	021b      	lsls	r3, r3, #8
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	b29a      	uxth	r2, r3
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	330a      	adds	r3, #10
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	330b      	adds	r3, #11
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	021b      	lsls	r3, r3, #8
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	b29a      	uxth	r2, r3
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	330c      	adds	r3, #12
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	330d      	adds	r3, #13
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	021b      	lsls	r3, r3, #8
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	4313      	orrs	r3, r2
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	7b9a      	ldrb	r2, [r3, #14]
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	7bda      	ldrb	r2, [r3, #15]
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	7c1a      	ldrb	r2, [r3, #16]
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	7c5a      	ldrb	r2, [r3, #17]
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8007f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	371c      	adds	r7, #28
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	01000101 	.word	0x01000101

08007f28 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b08c      	sub	sp, #48	@ 0x30
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	4613      	mov	r3, r2
 8007f34:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007f3c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007f44:	2300      	movs	r3, #0
 8007f46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d101      	bne.n	8007f5a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8007f56:	2302      	movs	r3, #2
 8007f58:	e0de      	b.n	8008118 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8007f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	2b09      	cmp	r3, #9
 8007f64:	d002      	beq.n	8007f6c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f68:	2209      	movs	r2, #9
 8007f6a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	781a      	ldrb	r2, [r3, #0]
 8007f70:	6a3b      	ldr	r3, [r7, #32]
 8007f72:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	785a      	ldrb	r2, [r3, #1]
 8007f78:	6a3b      	ldr	r3, [r7, #32]
 8007f7a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	3302      	adds	r3, #2
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	461a      	mov	r2, r3
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	3303      	adds	r3, #3
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	021b      	lsls	r3, r3, #8
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f96:	bf28      	it	cs
 8007f98:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8007f9c:	b29a      	uxth	r2, r3
 8007f9e:	6a3b      	ldr	r3, [r7, #32]
 8007fa0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	791a      	ldrb	r2, [r3, #4]
 8007fa6:	6a3b      	ldr	r3, [r7, #32]
 8007fa8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	795a      	ldrb	r2, [r3, #5]
 8007fae:	6a3b      	ldr	r3, [r7, #32]
 8007fb0:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	799a      	ldrb	r2, [r3, #6]
 8007fb6:	6a3b      	ldr	r3, [r7, #32]
 8007fb8:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	79da      	ldrb	r2, [r3, #7]
 8007fbe:	6a3b      	ldr	r3, [r7, #32]
 8007fc0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	7a1a      	ldrb	r2, [r3, #8]
 8007fc6:	6a3b      	ldr	r3, [r7, #32]
 8007fc8:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007fca:	88fb      	ldrh	r3, [r7, #6]
 8007fcc:	2b09      	cmp	r3, #9
 8007fce:	f240 80a1 	bls.w	8008114 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 8007fd2:	2309      	movs	r3, #9
 8007fd4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007fda:	e085      	b.n	80080e8 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007fdc:	f107 0316 	add.w	r3, r7, #22
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fe4:	f000 f9e6 	bl	80083b4 <USBH_GetNextDesc>
 8007fe8:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fec:	785b      	ldrb	r3, [r3, #1]
 8007fee:	2b04      	cmp	r3, #4
 8007ff0:	d17a      	bne.n	80080e8 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	2b09      	cmp	r3, #9
 8007ff8:	d002      	beq.n	8008000 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ffc:	2209      	movs	r2, #9
 8007ffe:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008000:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008004:	221a      	movs	r2, #26
 8008006:	fb02 f303 	mul.w	r3, r2, r3
 800800a:	3308      	adds	r3, #8
 800800c:	6a3a      	ldr	r2, [r7, #32]
 800800e:	4413      	add	r3, r2
 8008010:	3302      	adds	r3, #2
 8008012:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008014:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008016:	69f8      	ldr	r0, [r7, #28]
 8008018:	f000 f882 	bl	8008120 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800801c:	2300      	movs	r3, #0
 800801e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008022:	2300      	movs	r3, #0
 8008024:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008026:	e043      	b.n	80080b0 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008028:	f107 0316 	add.w	r3, r7, #22
 800802c:	4619      	mov	r1, r3
 800802e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008030:	f000 f9c0 	bl	80083b4 <USBH_GetNextDesc>
 8008034:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008038:	785b      	ldrb	r3, [r3, #1]
 800803a:	2b05      	cmp	r3, #5
 800803c:	d138      	bne.n	80080b0 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	795b      	ldrb	r3, [r3, #5]
 8008042:	2b01      	cmp	r3, #1
 8008044:	d113      	bne.n	800806e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800804a:	2b02      	cmp	r3, #2
 800804c:	d003      	beq.n	8008056 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	799b      	ldrb	r3, [r3, #6]
 8008052:	2b03      	cmp	r3, #3
 8008054:	d10b      	bne.n	800806e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008056:	69fb      	ldr	r3, [r7, #28]
 8008058:	79db      	ldrb	r3, [r3, #7]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d10b      	bne.n	8008076 <USBH_ParseCfgDesc+0x14e>
 800805e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	2b09      	cmp	r3, #9
 8008064:	d007      	beq.n	8008076 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8008066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008068:	2209      	movs	r2, #9
 800806a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800806c:	e003      	b.n	8008076 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800806e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008070:	2207      	movs	r2, #7
 8008072:	701a      	strb	r2, [r3, #0]
 8008074:	e000      	b.n	8008078 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008076:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008078:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800807c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008080:	3201      	adds	r2, #1
 8008082:	00d2      	lsls	r2, r2, #3
 8008084:	211a      	movs	r1, #26
 8008086:	fb01 f303 	mul.w	r3, r1, r3
 800808a:	4413      	add	r3, r2
 800808c:	3308      	adds	r3, #8
 800808e:	6a3a      	ldr	r2, [r7, #32]
 8008090:	4413      	add	r3, r2
 8008092:	3304      	adds	r3, #4
 8008094:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008096:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008098:	69b9      	ldr	r1, [r7, #24]
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	f000 f86f 	bl	800817e <USBH_ParseEPDesc>
 80080a0:	4603      	mov	r3, r0
 80080a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80080a6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80080aa:	3301      	adds	r3, #1
 80080ac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80080b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d80a      	bhi.n	80080ce <USBH_ParseCfgDesc+0x1a6>
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	791b      	ldrb	r3, [r3, #4]
 80080bc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d204      	bcs.n	80080ce <USBH_ParseCfgDesc+0x1a6>
 80080c4:	6a3b      	ldr	r3, [r7, #32]
 80080c6:	885a      	ldrh	r2, [r3, #2]
 80080c8:	8afb      	ldrh	r3, [r7, #22]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d8ac      	bhi.n	8008028 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	791b      	ldrb	r3, [r3, #4]
 80080d2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d201      	bcs.n	80080de <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 80080da:	2303      	movs	r3, #3
 80080dc:	e01c      	b.n	8008118 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 80080de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080e2:	3301      	adds	r3, #1
 80080e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80080e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d805      	bhi.n	80080fc <USBH_ParseCfgDesc+0x1d4>
 80080f0:	6a3b      	ldr	r3, [r7, #32]
 80080f2:	885a      	ldrh	r2, [r3, #2]
 80080f4:	8afb      	ldrh	r3, [r7, #22]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	f63f af70 	bhi.w	8007fdc <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80080fc:	6a3b      	ldr	r3, [r7, #32]
 80080fe:	791b      	ldrb	r3, [r3, #4]
 8008100:	2b02      	cmp	r3, #2
 8008102:	bf28      	it	cs
 8008104:	2302      	movcs	r3, #2
 8008106:	b2db      	uxtb	r3, r3
 8008108:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800810c:	429a      	cmp	r2, r3
 800810e:	d201      	bcs.n	8008114 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 8008110:	2303      	movs	r3, #3
 8008112:	e001      	b.n	8008118 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 8008114:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008118:	4618      	mov	r0, r3
 800811a:	3730      	adds	r7, #48	@ 0x30
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	781a      	ldrb	r2, [r3, #0]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	785a      	ldrb	r2, [r3, #1]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	789a      	ldrb	r2, [r3, #2]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	78da      	ldrb	r2, [r3, #3]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	791a      	ldrb	r2, [r3, #4]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	795a      	ldrb	r2, [r3, #5]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	799a      	ldrb	r2, [r3, #6]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	79da      	ldrb	r2, [r3, #7]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	7a1a      	ldrb	r2, [r3, #8]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	721a      	strb	r2, [r3, #8]
}
 8008172:	bf00      	nop
 8008174:	370c      	adds	r7, #12
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr

0800817e <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800817e:	b480      	push	{r7}
 8008180:	b087      	sub	sp, #28
 8008182:	af00      	add	r7, sp, #0
 8008184:	60f8      	str	r0, [r7, #12]
 8008186:	60b9      	str	r1, [r7, #8]
 8008188:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800818a:	2300      	movs	r3, #0
 800818c:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	781a      	ldrb	r2, [r3, #0]
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	785a      	ldrb	r2, [r3, #1]
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	789a      	ldrb	r2, [r3, #2]
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	78da      	ldrb	r2, [r3, #3]
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	3304      	adds	r3, #4
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	461a      	mov	r2, r3
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	3305      	adds	r3, #5
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	021b      	lsls	r3, r3, #8
 80081be:	b29b      	uxth	r3, r3
 80081c0:	4313      	orrs	r3, r2
 80081c2:	b29a      	uxth	r2, r3
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	799a      	ldrb	r2, [r3, #6]
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	889b      	ldrh	r3, [r3, #4]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d009      	beq.n	80081ec <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80081dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081e0:	d804      	bhi.n	80081ec <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80081e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081ea:	d901      	bls.n	80081f0 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80081ec:	2303      	movs	r3, #3
 80081ee:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d136      	bne.n	8008268 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	78db      	ldrb	r3, [r3, #3]
 80081fe:	f003 0303 	and.w	r3, r3, #3
 8008202:	2b02      	cmp	r3, #2
 8008204:	d108      	bne.n	8008218 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	889b      	ldrh	r3, [r3, #4]
 800820a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800820e:	f240 8097 	bls.w	8008340 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008212:	2303      	movs	r3, #3
 8008214:	75fb      	strb	r3, [r7, #23]
 8008216:	e093      	b.n	8008340 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	78db      	ldrb	r3, [r3, #3]
 800821c:	f003 0303 	and.w	r3, r3, #3
 8008220:	2b00      	cmp	r3, #0
 8008222:	d107      	bne.n	8008234 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	889b      	ldrh	r3, [r3, #4]
 8008228:	2b40      	cmp	r3, #64	@ 0x40
 800822a:	f240 8089 	bls.w	8008340 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800822e:	2303      	movs	r3, #3
 8008230:	75fb      	strb	r3, [r7, #23]
 8008232:	e085      	b.n	8008340 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	78db      	ldrb	r3, [r3, #3]
 8008238:	f003 0303 	and.w	r3, r3, #3
 800823c:	2b01      	cmp	r3, #1
 800823e:	d005      	beq.n	800824c <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	78db      	ldrb	r3, [r3, #3]
 8008244:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008248:	2b03      	cmp	r3, #3
 800824a:	d10a      	bne.n	8008262 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	799b      	ldrb	r3, [r3, #6]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d003      	beq.n	800825c <USBH_ParseEPDesc+0xde>
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	799b      	ldrb	r3, [r3, #6]
 8008258:	2b10      	cmp	r3, #16
 800825a:	d970      	bls.n	800833e <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800825c:	2303      	movs	r3, #3
 800825e:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008260:	e06d      	b.n	800833e <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008262:	2303      	movs	r3, #3
 8008264:	75fb      	strb	r3, [r7, #23]
 8008266:	e06b      	b.n	8008340 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800826e:	2b01      	cmp	r3, #1
 8008270:	d13c      	bne.n	80082ec <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	78db      	ldrb	r3, [r3, #3]
 8008276:	f003 0303 	and.w	r3, r3, #3
 800827a:	2b02      	cmp	r3, #2
 800827c:	d005      	beq.n	800828a <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	78db      	ldrb	r3, [r3, #3]
 8008282:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008286:	2b00      	cmp	r3, #0
 8008288:	d106      	bne.n	8008298 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	889b      	ldrh	r3, [r3, #4]
 800828e:	2b40      	cmp	r3, #64	@ 0x40
 8008290:	d956      	bls.n	8008340 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008292:	2303      	movs	r3, #3
 8008294:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008296:	e053      	b.n	8008340 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	78db      	ldrb	r3, [r3, #3]
 800829c:	f003 0303 	and.w	r3, r3, #3
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d10e      	bne.n	80082c2 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	799b      	ldrb	r3, [r3, #6]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d007      	beq.n	80082bc <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80082b0:	2b10      	cmp	r3, #16
 80082b2:	d803      	bhi.n	80082bc <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80082b8:	2b40      	cmp	r3, #64	@ 0x40
 80082ba:	d941      	bls.n	8008340 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80082bc:	2303      	movs	r3, #3
 80082be:	75fb      	strb	r3, [r7, #23]
 80082c0:	e03e      	b.n	8008340 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	78db      	ldrb	r3, [r3, #3]
 80082c6:	f003 0303 	and.w	r3, r3, #3
 80082ca:	2b03      	cmp	r3, #3
 80082cc:	d10b      	bne.n	80082e6 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	799b      	ldrb	r3, [r3, #6]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d004      	beq.n	80082e0 <USBH_ParseEPDesc+0x162>
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	889b      	ldrh	r3, [r3, #4]
 80082da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082de:	d32f      	bcc.n	8008340 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80082e0:	2303      	movs	r3, #3
 80082e2:	75fb      	strb	r3, [r7, #23]
 80082e4:	e02c      	b.n	8008340 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80082e6:	2303      	movs	r3, #3
 80082e8:	75fb      	strb	r3, [r7, #23]
 80082ea:	e029      	b.n	8008340 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80082f2:	2b02      	cmp	r3, #2
 80082f4:	d120      	bne.n	8008338 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	78db      	ldrb	r3, [r3, #3]
 80082fa:	f003 0303 	and.w	r3, r3, #3
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d106      	bne.n	8008310 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	889b      	ldrh	r3, [r3, #4]
 8008306:	2b08      	cmp	r3, #8
 8008308:	d01a      	beq.n	8008340 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800830a:	2303      	movs	r3, #3
 800830c:	75fb      	strb	r3, [r7, #23]
 800830e:	e017      	b.n	8008340 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	78db      	ldrb	r3, [r3, #3]
 8008314:	f003 0303 	and.w	r3, r3, #3
 8008318:	2b03      	cmp	r3, #3
 800831a:	d10a      	bne.n	8008332 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	799b      	ldrb	r3, [r3, #6]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d003      	beq.n	800832c <USBH_ParseEPDesc+0x1ae>
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	889b      	ldrh	r3, [r3, #4]
 8008328:	2b08      	cmp	r3, #8
 800832a:	d909      	bls.n	8008340 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800832c:	2303      	movs	r3, #3
 800832e:	75fb      	strb	r3, [r7, #23]
 8008330:	e006      	b.n	8008340 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008332:	2303      	movs	r3, #3
 8008334:	75fb      	strb	r3, [r7, #23]
 8008336:	e003      	b.n	8008340 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008338:	2303      	movs	r3, #3
 800833a:	75fb      	strb	r3, [r7, #23]
 800833c:	e000      	b.n	8008340 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800833e:	bf00      	nop
  }

  return status;
 8008340:	7dfb      	ldrb	r3, [r7, #23]
}
 8008342:	4618      	mov	r0, r3
 8008344:	371c      	adds	r7, #28
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr

0800834e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800834e:	b480      	push	{r7}
 8008350:	b087      	sub	sp, #28
 8008352:	af00      	add	r7, sp, #0
 8008354:	60f8      	str	r0, [r7, #12]
 8008356:	60b9      	str	r1, [r7, #8]
 8008358:	4613      	mov	r3, r2
 800835a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	3301      	adds	r3, #1
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	2b03      	cmp	r3, #3
 8008364:	d120      	bne.n	80083a8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	1e9a      	subs	r2, r3, #2
 800836c:	88fb      	ldrh	r3, [r7, #6]
 800836e:	4293      	cmp	r3, r2
 8008370:	bf28      	it	cs
 8008372:	4613      	movcs	r3, r2
 8008374:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	3302      	adds	r3, #2
 800837a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800837c:	2300      	movs	r3, #0
 800837e:	82fb      	strh	r3, [r7, #22]
 8008380:	e00b      	b.n	800839a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008382:	8afb      	ldrh	r3, [r7, #22]
 8008384:	68fa      	ldr	r2, [r7, #12]
 8008386:	4413      	add	r3, r2
 8008388:	781a      	ldrb	r2, [r3, #0]
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	3301      	adds	r3, #1
 8008392:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008394:	8afb      	ldrh	r3, [r7, #22]
 8008396:	3302      	adds	r3, #2
 8008398:	82fb      	strh	r3, [r7, #22]
 800839a:	8afa      	ldrh	r2, [r7, #22]
 800839c:	8abb      	ldrh	r3, [r7, #20]
 800839e:	429a      	cmp	r2, r3
 80083a0:	d3ef      	bcc.n	8008382 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	2200      	movs	r2, #0
 80083a6:	701a      	strb	r2, [r3, #0]
  }
}
 80083a8:	bf00      	nop
 80083aa:	371c      	adds	r7, #28
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b085      	sub	sp, #20
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	881b      	ldrh	r3, [r3, #0]
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	7812      	ldrb	r2, [r2, #0]
 80083c6:	4413      	add	r3, r2
 80083c8:	b29a      	uxth	r2, r3
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4413      	add	r3, r2
 80083d8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80083da:	68fb      	ldr	r3, [r7, #12]
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3714      	adds	r7, #20
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b086      	sub	sp, #24
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	4613      	mov	r3, r2
 80083f4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80083f6:	2301      	movs	r3, #1
 80083f8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	789b      	ldrb	r3, [r3, #2]
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d002      	beq.n	8008408 <USBH_CtlReq+0x20>
 8008402:	2b02      	cmp	r3, #2
 8008404:	d00f      	beq.n	8008426 <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 8008406:	e027      	b.n	8008458 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	68ba      	ldr	r2, [r7, #8]
 800840c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	88fa      	ldrh	r2, [r7, #6]
 8008412:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2201      	movs	r2, #1
 8008418:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2202      	movs	r2, #2
 800841e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008420:	2301      	movs	r3, #1
 8008422:	75fb      	strb	r3, [r7, #23]
      break;
 8008424:	e018      	b.n	8008458 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f000 f81c 	bl	8008464 <USBH_HandleControl>
 800842c:	4603      	mov	r3, r0
 800842e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008430:	7dfb      	ldrb	r3, [r7, #23]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d002      	beq.n	800843c <USBH_CtlReq+0x54>
 8008436:	7dfb      	ldrb	r3, [r7, #23]
 8008438:	2b03      	cmp	r3, #3
 800843a:	d106      	bne.n	800844a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2201      	movs	r2, #1
 8008440:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	761a      	strb	r2, [r3, #24]
      break;
 8008448:	e005      	b.n	8008456 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800844a:	7dfb      	ldrb	r3, [r7, #23]
 800844c:	2b02      	cmp	r3, #2
 800844e:	d102      	bne.n	8008456 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2201      	movs	r2, #1
 8008454:	709a      	strb	r2, [r3, #2]
      break;
 8008456:	bf00      	nop
  }
  return status;
 8008458:	7dfb      	ldrb	r3, [r7, #23]
}
 800845a:	4618      	mov	r0, r3
 800845c:	3718      	adds	r7, #24
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
	...

08008464 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b086      	sub	sp, #24
 8008468:	af02      	add	r7, sp, #8
 800846a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800846c:	2301      	movs	r3, #1
 800846e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008470:	2300      	movs	r3, #0
 8008472:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	7e1b      	ldrb	r3, [r3, #24]
 8008478:	3b01      	subs	r3, #1
 800847a:	2b0a      	cmp	r3, #10
 800847c:	f200 8157 	bhi.w	800872e <USBH_HandleControl+0x2ca>
 8008480:	a201      	add	r2, pc, #4	@ (adr r2, 8008488 <USBH_HandleControl+0x24>)
 8008482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008486:	bf00      	nop
 8008488:	080084b5 	.word	0x080084b5
 800848c:	080084cf 	.word	0x080084cf
 8008490:	08008539 	.word	0x08008539
 8008494:	0800855f 	.word	0x0800855f
 8008498:	08008599 	.word	0x08008599
 800849c:	080085c3 	.word	0x080085c3
 80084a0:	08008615 	.word	0x08008615
 80084a4:	08008637 	.word	0x08008637
 80084a8:	08008673 	.word	0x08008673
 80084ac:	08008699 	.word	0x08008699
 80084b0:	080086d7 	.word	0x080086d7
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f103 0110 	add.w	r1, r3, #16
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	795b      	ldrb	r3, [r3, #5]
 80084be:	461a      	mov	r2, r3
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 f945 	bl	8008750 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2202      	movs	r2, #2
 80084ca:	761a      	strb	r2, [r3, #24]
      break;
 80084cc:	e13a      	b.n	8008744 <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	795b      	ldrb	r3, [r3, #5]
 80084d2:	4619      	mov	r1, r3
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 fcc7 	bl	8008e68 <USBH_LL_GetURBState>
 80084da:	4603      	mov	r3, r0
 80084dc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80084de:	7bbb      	ldrb	r3, [r7, #14]
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d11e      	bne.n	8008522 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	7c1b      	ldrb	r3, [r3, #16]
 80084e8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80084ec:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	8adb      	ldrh	r3, [r3, #22]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d00a      	beq.n	800850c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80084f6:	7b7b      	ldrb	r3, [r7, #13]
 80084f8:	2b80      	cmp	r3, #128	@ 0x80
 80084fa:	d103      	bne.n	8008504 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2203      	movs	r2, #3
 8008500:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8008502:	e116      	b.n	8008732 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2205      	movs	r2, #5
 8008508:	761a      	strb	r2, [r3, #24]
      break;
 800850a:	e112      	b.n	8008732 <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 800850c:	7b7b      	ldrb	r3, [r7, #13]
 800850e:	2b80      	cmp	r3, #128	@ 0x80
 8008510:	d103      	bne.n	800851a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2209      	movs	r2, #9
 8008516:	761a      	strb	r2, [r3, #24]
      break;
 8008518:	e10b      	b.n	8008732 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2207      	movs	r2, #7
 800851e:	761a      	strb	r2, [r3, #24]
      break;
 8008520:	e107      	b.n	8008732 <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008522:	7bbb      	ldrb	r3, [r7, #14]
 8008524:	2b04      	cmp	r3, #4
 8008526:	d003      	beq.n	8008530 <USBH_HandleControl+0xcc>
 8008528:	7bbb      	ldrb	r3, [r7, #14]
 800852a:	2b02      	cmp	r3, #2
 800852c:	f040 8101 	bne.w	8008732 <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	220b      	movs	r2, #11
 8008534:	761a      	strb	r2, [r3, #24]
      break;
 8008536:	e0fc      	b.n	8008732 <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800853e:	b29a      	uxth	r2, r3
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6899      	ldr	r1, [r3, #8]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	899a      	ldrh	r2, [r3, #12]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	791b      	ldrb	r3, [r3, #4]
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 f93c 	bl	80087ce <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2204      	movs	r2, #4
 800855a:	761a      	strb	r2, [r3, #24]
      break;
 800855c:	e0f2      	b.n	8008744 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	791b      	ldrb	r3, [r3, #4]
 8008562:	4619      	mov	r1, r3
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 fc7f 	bl	8008e68 <USBH_LL_GetURBState>
 800856a:	4603      	mov	r3, r0
 800856c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800856e:	7bbb      	ldrb	r3, [r7, #14]
 8008570:	2b01      	cmp	r3, #1
 8008572:	d103      	bne.n	800857c <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2209      	movs	r2, #9
 8008578:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800857a:	e0dc      	b.n	8008736 <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 800857c:	7bbb      	ldrb	r3, [r7, #14]
 800857e:	2b05      	cmp	r3, #5
 8008580:	d102      	bne.n	8008588 <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 8008582:	2303      	movs	r3, #3
 8008584:	73fb      	strb	r3, [r7, #15]
      break;
 8008586:	e0d6      	b.n	8008736 <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 8008588:	7bbb      	ldrb	r3, [r7, #14]
 800858a:	2b04      	cmp	r3, #4
 800858c:	f040 80d3 	bne.w	8008736 <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	220b      	movs	r2, #11
 8008594:	761a      	strb	r2, [r3, #24]
      break;
 8008596:	e0ce      	b.n	8008736 <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6899      	ldr	r1, [r3, #8]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	899a      	ldrh	r2, [r3, #12]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	795b      	ldrb	r3, [r3, #5]
 80085a4:	2001      	movs	r0, #1
 80085a6:	9000      	str	r0, [sp, #0]
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 f8eb 	bl	8008784 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80085b4:	b29a      	uxth	r2, r3
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2206      	movs	r2, #6
 80085be:	761a      	strb	r2, [r3, #24]
      break;
 80085c0:	e0c0      	b.n	8008744 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	795b      	ldrb	r3, [r3, #5]
 80085c6:	4619      	mov	r1, r3
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 fc4d 	bl	8008e68 <USBH_LL_GetURBState>
 80085ce:	4603      	mov	r3, r0
 80085d0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80085d2:	7bbb      	ldrb	r3, [r7, #14]
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d103      	bne.n	80085e0 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2207      	movs	r2, #7
 80085dc:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80085de:	e0ac      	b.n	800873a <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 80085e0:	7bbb      	ldrb	r3, [r7, #14]
 80085e2:	2b05      	cmp	r3, #5
 80085e4:	d105      	bne.n	80085f2 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	220c      	movs	r2, #12
 80085ea:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80085ec:	2303      	movs	r3, #3
 80085ee:	73fb      	strb	r3, [r7, #15]
      break;
 80085f0:	e0a3      	b.n	800873a <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 80085f2:	7bbb      	ldrb	r3, [r7, #14]
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	d103      	bne.n	8008600 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2205      	movs	r2, #5
 80085fc:	761a      	strb	r2, [r3, #24]
      break;
 80085fe:	e09c      	b.n	800873a <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 8008600:	7bbb      	ldrb	r3, [r7, #14]
 8008602:	2b04      	cmp	r3, #4
 8008604:	f040 8099 	bne.w	800873a <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	220b      	movs	r2, #11
 800860c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800860e:	2302      	movs	r3, #2
 8008610:	73fb      	strb	r3, [r7, #15]
      break;
 8008612:	e092      	b.n	800873a <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	791b      	ldrb	r3, [r3, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	2100      	movs	r1, #0
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 f8d6 	bl	80087ce <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008628:	b29a      	uxth	r2, r3
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2208      	movs	r2, #8
 8008632:	761a      	strb	r2, [r3, #24]

      break;
 8008634:	e086      	b.n	8008744 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	791b      	ldrb	r3, [r3, #4]
 800863a:	4619      	mov	r1, r3
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 fc13 	bl	8008e68 <USBH_LL_GetURBState>
 8008642:	4603      	mov	r3, r0
 8008644:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008646:	7bbb      	ldrb	r3, [r7, #14]
 8008648:	2b01      	cmp	r3, #1
 800864a:	d105      	bne.n	8008658 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	220d      	movs	r2, #13
 8008650:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008652:	2300      	movs	r3, #0
 8008654:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8008656:	e072      	b.n	800873e <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 8008658:	7bbb      	ldrb	r3, [r7, #14]
 800865a:	2b04      	cmp	r3, #4
 800865c:	d103      	bne.n	8008666 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	220b      	movs	r2, #11
 8008662:	761a      	strb	r2, [r3, #24]
      break;
 8008664:	e06b      	b.n	800873e <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 8008666:	7bbb      	ldrb	r3, [r7, #14]
 8008668:	2b05      	cmp	r3, #5
 800866a:	d168      	bne.n	800873e <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 800866c:	2303      	movs	r3, #3
 800866e:	73fb      	strb	r3, [r7, #15]
      break;
 8008670:	e065      	b.n	800873e <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	795b      	ldrb	r3, [r3, #5]
 8008676:	2201      	movs	r2, #1
 8008678:	9200      	str	r2, [sp, #0]
 800867a:	2200      	movs	r2, #0
 800867c:	2100      	movs	r1, #0
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 f880 	bl	8008784 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800868a:	b29a      	uxth	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	220a      	movs	r2, #10
 8008694:	761a      	strb	r2, [r3, #24]
      break;
 8008696:	e055      	b.n	8008744 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	795b      	ldrb	r3, [r3, #5]
 800869c:	4619      	mov	r1, r3
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 fbe2 	bl	8008e68 <USBH_LL_GetURBState>
 80086a4:	4603      	mov	r3, r0
 80086a6:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80086a8:	7bbb      	ldrb	r3, [r7, #14]
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d105      	bne.n	80086ba <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 80086ae:	2300      	movs	r3, #0
 80086b0:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	220d      	movs	r2, #13
 80086b6:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80086b8:	e043      	b.n	8008742 <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 80086ba:	7bbb      	ldrb	r3, [r7, #14]
 80086bc:	2b02      	cmp	r3, #2
 80086be:	d103      	bne.n	80086c8 <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2209      	movs	r2, #9
 80086c4:	761a      	strb	r2, [r3, #24]
      break;
 80086c6:	e03c      	b.n	8008742 <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 80086c8:	7bbb      	ldrb	r3, [r7, #14]
 80086ca:	2b04      	cmp	r3, #4
 80086cc:	d139      	bne.n	8008742 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	220b      	movs	r2, #11
 80086d2:	761a      	strb	r2, [r3, #24]
      break;
 80086d4:	e035      	b.n	8008742 <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	7e5b      	ldrb	r3, [r3, #25]
 80086da:	3301      	adds	r3, #1
 80086dc:	b2da      	uxtb	r2, r3
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	765a      	strb	r2, [r3, #25]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	7e5b      	ldrb	r3, [r3, #25]
 80086e6:	2b02      	cmp	r3, #2
 80086e8:	d806      	bhi.n	80086f8 <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2201      	movs	r2, #1
 80086ee:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80086f6:	e025      	b.n	8008744 <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80086fe:	2106      	movs	r1, #6
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2200      	movs	r2, #0
 8008708:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	795b      	ldrb	r3, [r3, #5]
 800870e:	4619      	mov	r1, r3
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 f90d 	bl	8008930 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	791b      	ldrb	r3, [r3, #4]
 800871a:	4619      	mov	r1, r3
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 f907 	bl	8008930 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008728:	2302      	movs	r3, #2
 800872a:	73fb      	strb	r3, [r7, #15]
      break;
 800872c:	e00a      	b.n	8008744 <USBH_HandleControl+0x2e0>

    default:
      break;
 800872e:	bf00      	nop
 8008730:	e008      	b.n	8008744 <USBH_HandleControl+0x2e0>
      break;
 8008732:	bf00      	nop
 8008734:	e006      	b.n	8008744 <USBH_HandleControl+0x2e0>
      break;
 8008736:	bf00      	nop
 8008738:	e004      	b.n	8008744 <USBH_HandleControl+0x2e0>
      break;
 800873a:	bf00      	nop
 800873c:	e002      	b.n	8008744 <USBH_HandleControl+0x2e0>
      break;
 800873e:	bf00      	nop
 8008740:	e000      	b.n	8008744 <USBH_HandleControl+0x2e0>
      break;
 8008742:	bf00      	nop
  }

  return status;
 8008744:	7bfb      	ldrb	r3, [r7, #15]
}
 8008746:	4618      	mov	r0, r3
 8008748:	3710      	adds	r7, #16
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop

08008750 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b088      	sub	sp, #32
 8008754:	af04      	add	r7, sp, #16
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	4613      	mov	r3, r2
 800875c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800875e:	79f9      	ldrb	r1, [r7, #7]
 8008760:	2300      	movs	r3, #0
 8008762:	9303      	str	r3, [sp, #12]
 8008764:	2308      	movs	r3, #8
 8008766:	9302      	str	r3, [sp, #8]
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	9301      	str	r3, [sp, #4]
 800876c:	2300      	movs	r3, #0
 800876e:	9300      	str	r3, [sp, #0]
 8008770:	2300      	movs	r3, #0
 8008772:	2200      	movs	r2, #0
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f000 fb46 	bl	8008e06 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	3710      	adds	r7, #16
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b088      	sub	sp, #32
 8008788:	af04      	add	r7, sp, #16
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	4611      	mov	r1, r2
 8008790:	461a      	mov	r2, r3
 8008792:	460b      	mov	r3, r1
 8008794:	80fb      	strh	r3, [r7, #6]
 8008796:	4613      	mov	r3, r2
 8008798:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d001      	beq.n	80087a8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80087a4:	2300      	movs	r3, #0
 80087a6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80087a8:	7979      	ldrb	r1, [r7, #5]
 80087aa:	7e3b      	ldrb	r3, [r7, #24]
 80087ac:	9303      	str	r3, [sp, #12]
 80087ae:	88fb      	ldrh	r3, [r7, #6]
 80087b0:	9302      	str	r3, [sp, #8]
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	9301      	str	r3, [sp, #4]
 80087b6:	2301      	movs	r3, #1
 80087b8:	9300      	str	r3, [sp, #0]
 80087ba:	2300      	movs	r3, #0
 80087bc:	2200      	movs	r2, #0
 80087be:	68f8      	ldr	r0, [r7, #12]
 80087c0:	f000 fb21 	bl	8008e06 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b088      	sub	sp, #32
 80087d2:	af04      	add	r7, sp, #16
 80087d4:	60f8      	str	r0, [r7, #12]
 80087d6:	60b9      	str	r1, [r7, #8]
 80087d8:	4611      	mov	r1, r2
 80087da:	461a      	mov	r2, r3
 80087dc:	460b      	mov	r3, r1
 80087de:	80fb      	strh	r3, [r7, #6]
 80087e0:	4613      	mov	r3, r2
 80087e2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80087e4:	7979      	ldrb	r1, [r7, #5]
 80087e6:	2300      	movs	r3, #0
 80087e8:	9303      	str	r3, [sp, #12]
 80087ea:	88fb      	ldrh	r3, [r7, #6]
 80087ec:	9302      	str	r3, [sp, #8]
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	9301      	str	r3, [sp, #4]
 80087f2:	2301      	movs	r3, #1
 80087f4:	9300      	str	r3, [sp, #0]
 80087f6:	2300      	movs	r3, #0
 80087f8:	2201      	movs	r2, #1
 80087fa:	68f8      	ldr	r0, [r7, #12]
 80087fc:	f000 fb03 	bl	8008e06 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008800:	2300      	movs	r3, #0

}
 8008802:	4618      	mov	r0, r3
 8008804:	3710      	adds	r7, #16
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}

0800880a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800880a:	b580      	push	{r7, lr}
 800880c:	b088      	sub	sp, #32
 800880e:	af04      	add	r7, sp, #16
 8008810:	60f8      	str	r0, [r7, #12]
 8008812:	60b9      	str	r1, [r7, #8]
 8008814:	4611      	mov	r1, r2
 8008816:	461a      	mov	r2, r3
 8008818:	460b      	mov	r3, r1
 800881a:	80fb      	strh	r3, [r7, #6]
 800881c:	4613      	mov	r3, r2
 800881e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008826:	2b00      	cmp	r3, #0
 8008828:	d001      	beq.n	800882e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800882a:	2300      	movs	r3, #0
 800882c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800882e:	7979      	ldrb	r1, [r7, #5]
 8008830:	7e3b      	ldrb	r3, [r7, #24]
 8008832:	9303      	str	r3, [sp, #12]
 8008834:	88fb      	ldrh	r3, [r7, #6]
 8008836:	9302      	str	r3, [sp, #8]
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	9301      	str	r3, [sp, #4]
 800883c:	2301      	movs	r3, #1
 800883e:	9300      	str	r3, [sp, #0]
 8008840:	2302      	movs	r3, #2
 8008842:	2200      	movs	r2, #0
 8008844:	68f8      	ldr	r0, [r7, #12]
 8008846:	f000 fade 	bl	8008e06 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800884a:	2300      	movs	r3, #0
}
 800884c:	4618      	mov	r0, r3
 800884e:	3710      	adds	r7, #16
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b088      	sub	sp, #32
 8008858:	af04      	add	r7, sp, #16
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	4611      	mov	r1, r2
 8008860:	461a      	mov	r2, r3
 8008862:	460b      	mov	r3, r1
 8008864:	80fb      	strh	r3, [r7, #6]
 8008866:	4613      	mov	r3, r2
 8008868:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800886a:	7979      	ldrb	r1, [r7, #5]
 800886c:	2300      	movs	r3, #0
 800886e:	9303      	str	r3, [sp, #12]
 8008870:	88fb      	ldrh	r3, [r7, #6]
 8008872:	9302      	str	r3, [sp, #8]
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	9301      	str	r3, [sp, #4]
 8008878:	2301      	movs	r3, #1
 800887a:	9300      	str	r3, [sp, #0]
 800887c:	2302      	movs	r3, #2
 800887e:	2201      	movs	r2, #1
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	f000 fac0 	bl	8008e06 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008886:	2300      	movs	r3, #0
}
 8008888:	4618      	mov	r0, r3
 800888a:	3710      	adds	r7, #16
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b086      	sub	sp, #24
 8008894:	af04      	add	r7, sp, #16
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	4608      	mov	r0, r1
 800889a:	4611      	mov	r1, r2
 800889c:	461a      	mov	r2, r3
 800889e:	4603      	mov	r3, r0
 80088a0:	70fb      	strb	r3, [r7, #3]
 80088a2:	460b      	mov	r3, r1
 80088a4:	70bb      	strb	r3, [r7, #2]
 80088a6:	4613      	mov	r3, r2
 80088a8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80088aa:	7878      	ldrb	r0, [r7, #1]
 80088ac:	78ba      	ldrb	r2, [r7, #2]
 80088ae:	78f9      	ldrb	r1, [r7, #3]
 80088b0:	8b3b      	ldrh	r3, [r7, #24]
 80088b2:	9302      	str	r3, [sp, #8]
 80088b4:	7d3b      	ldrb	r3, [r7, #20]
 80088b6:	9301      	str	r3, [sp, #4]
 80088b8:	7c3b      	ldrb	r3, [r7, #16]
 80088ba:	9300      	str	r3, [sp, #0]
 80088bc:	4603      	mov	r3, r0
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 fa53 	bl	8008d6a <USBH_LL_OpenPipe>

  return USBH_OK;
 80088c4:	2300      	movs	r3, #0
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3708      	adds	r7, #8
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}

080088ce <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b082      	sub	sp, #8
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
 80088d6:	460b      	mov	r3, r1
 80088d8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80088da:	78fb      	ldrb	r3, [r7, #3]
 80088dc:	4619      	mov	r1, r3
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 fa72 	bl	8008dc8 <USBH_LL_ClosePipe>

  return USBH_OK;
 80088e4:	2300      	movs	r3, #0
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3708      	adds	r7, #8
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b084      	sub	sp, #16
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
 80088f6:	460b      	mov	r3, r1
 80088f8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 f836 	bl	800896c <USBH_GetFreePipe>
 8008900:	4603      	mov	r3, r0
 8008902:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008904:	89fb      	ldrh	r3, [r7, #14]
 8008906:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800890a:	4293      	cmp	r3, r2
 800890c:	d00a      	beq.n	8008924 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800890e:	78fa      	ldrb	r2, [r7, #3]
 8008910:	89fb      	ldrh	r3, [r7, #14]
 8008912:	f003 030f 	and.w	r3, r3, #15
 8008916:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800891a:	6879      	ldr	r1, [r7, #4]
 800891c:	33e0      	adds	r3, #224	@ 0xe0
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	440b      	add	r3, r1
 8008922:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008924:	89fb      	ldrh	r3, [r7, #14]
 8008926:	b2db      	uxtb	r3, r3
}
 8008928:	4618      	mov	r0, r3
 800892a:	3710      	adds	r7, #16
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	460b      	mov	r3, r1
 800893a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800893c:	78fb      	ldrb	r3, [r7, #3]
 800893e:	2b0f      	cmp	r3, #15
 8008940:	d80d      	bhi.n	800895e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008942:	78fb      	ldrb	r3, [r7, #3]
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	33e0      	adds	r3, #224	@ 0xe0
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	4413      	add	r3, r2
 800894c:	685a      	ldr	r2, [r3, #4]
 800894e:	78fb      	ldrb	r3, [r7, #3]
 8008950:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008954:	6879      	ldr	r1, [r7, #4]
 8008956:	33e0      	adds	r3, #224	@ 0xe0
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	440b      	add	r3, r1
 800895c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800895e:	2300      	movs	r3, #0
}
 8008960:	4618      	mov	r0, r3
 8008962:	370c      	adds	r7, #12
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr

0800896c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800896c:	b480      	push	{r7}
 800896e:	b085      	sub	sp, #20
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008974:	2300      	movs	r3, #0
 8008976:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008978:	2300      	movs	r3, #0
 800897a:	73fb      	strb	r3, [r7, #15]
 800897c:	e00f      	b.n	800899e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800897e:	7bfb      	ldrb	r3, [r7, #15]
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	33e0      	adds	r3, #224	@ 0xe0
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	4413      	add	r3, r2
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800898e:	2b00      	cmp	r3, #0
 8008990:	d102      	bne.n	8008998 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008992:	7bfb      	ldrb	r3, [r7, #15]
 8008994:	b29b      	uxth	r3, r3
 8008996:	e007      	b.n	80089a8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008998:	7bfb      	ldrb	r3, [r7, #15]
 800899a:	3301      	adds	r3, #1
 800899c:	73fb      	strb	r3, [r7, #15]
 800899e:	7bfb      	ldrb	r3, [r7, #15]
 80089a0:	2b0f      	cmp	r3, #15
 80089a2:	d9ec      	bls.n	800897e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80089a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3714      	adds	r7, #20
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80089b8:	2201      	movs	r2, #1
 80089ba:	490e      	ldr	r1, [pc, #56]	@ (80089f4 <MX_USB_HOST_Init+0x40>)
 80089bc:	480e      	ldr	r0, [pc, #56]	@ (80089f8 <MX_USB_HOST_Init+0x44>)
 80089be:	f7fe fb0f 	bl	8006fe0 <USBH_Init>
 80089c2:	4603      	mov	r3, r0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d001      	beq.n	80089cc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80089c8:	f7f8 f824 	bl	8000a14 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80089cc:	490b      	ldr	r1, [pc, #44]	@ (80089fc <MX_USB_HOST_Init+0x48>)
 80089ce:	480a      	ldr	r0, [pc, #40]	@ (80089f8 <MX_USB_HOST_Init+0x44>)
 80089d0:	f7fe fbb1 	bl	8007136 <USBH_RegisterClass>
 80089d4:	4603      	mov	r3, r0
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d001      	beq.n	80089de <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80089da:	f7f8 f81b 	bl	8000a14 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80089de:	4806      	ldr	r0, [pc, #24]	@ (80089f8 <MX_USB_HOST_Init+0x44>)
 80089e0:	f7fe fc35 	bl	800724e <USBH_Start>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d001      	beq.n	80089ee <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80089ea:	f7f8 f813 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80089ee:	bf00      	nop
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	08008a15 	.word	0x08008a15
 80089f8:	200001e8 	.word	0x200001e8
 80089fc:	2000000c 	.word	0x2000000c

08008a00 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008a04:	4802      	ldr	r0, [pc, #8]	@ (8008a10 <MX_USB_HOST_Process+0x10>)
 8008a06:	f7fe fc33 	bl	8007270 <USBH_Process>
}
 8008a0a:	bf00      	nop
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	200001e8 	.word	0x200001e8

08008a14 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008a20:	78fb      	ldrb	r3, [r7, #3]
 8008a22:	3b01      	subs	r3, #1
 8008a24:	2b04      	cmp	r3, #4
 8008a26:	d819      	bhi.n	8008a5c <USBH_UserProcess+0x48>
 8008a28:	a201      	add	r2, pc, #4	@ (adr r2, 8008a30 <USBH_UserProcess+0x1c>)
 8008a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a2e:	bf00      	nop
 8008a30:	08008a5d 	.word	0x08008a5d
 8008a34:	08008a4d 	.word	0x08008a4d
 8008a38:	08008a5d 	.word	0x08008a5d
 8008a3c:	08008a55 	.word	0x08008a55
 8008a40:	08008a45 	.word	0x08008a45
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008a44:	4b09      	ldr	r3, [pc, #36]	@ (8008a6c <USBH_UserProcess+0x58>)
 8008a46:	2203      	movs	r2, #3
 8008a48:	701a      	strb	r2, [r3, #0]
  break;
 8008a4a:	e008      	b.n	8008a5e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008a4c:	4b07      	ldr	r3, [pc, #28]	@ (8008a6c <USBH_UserProcess+0x58>)
 8008a4e:	2202      	movs	r2, #2
 8008a50:	701a      	strb	r2, [r3, #0]
  break;
 8008a52:	e004      	b.n	8008a5e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008a54:	4b05      	ldr	r3, [pc, #20]	@ (8008a6c <USBH_UserProcess+0x58>)
 8008a56:	2201      	movs	r2, #1
 8008a58:	701a      	strb	r2, [r3, #0]
  break;
 8008a5a:	e000      	b.n	8008a5e <USBH_UserProcess+0x4a>

  default:
  break;
 8008a5c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008a5e:	bf00      	nop
 8008a60:	370c      	adds	r7, #12
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop
 8008a6c:	200005c0 	.word	0x200005c0

08008a70 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b08a      	sub	sp, #40	@ 0x28
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a78:	f107 0314 	add.w	r3, r7, #20
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	601a      	str	r2, [r3, #0]
 8008a80:	605a      	str	r2, [r3, #4]
 8008a82:	609a      	str	r2, [r3, #8]
 8008a84:	60da      	str	r2, [r3, #12]
 8008a86:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a90:	d147      	bne.n	8008b22 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a92:	2300      	movs	r3, #0
 8008a94:	613b      	str	r3, [r7, #16]
 8008a96:	4b25      	ldr	r3, [pc, #148]	@ (8008b2c <HAL_HCD_MspInit+0xbc>)
 8008a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a9a:	4a24      	ldr	r2, [pc, #144]	@ (8008b2c <HAL_HCD_MspInit+0xbc>)
 8008a9c:	f043 0301 	orr.w	r3, r3, #1
 8008aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8008aa2:	4b22      	ldr	r3, [pc, #136]	@ (8008b2c <HAL_HCD_MspInit+0xbc>)
 8008aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008aa6:	f003 0301 	and.w	r3, r3, #1
 8008aaa:	613b      	str	r3, [r7, #16]
 8008aac:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008aae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008abc:	f107 0314 	add.w	r3, r7, #20
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	481b      	ldr	r0, [pc, #108]	@ (8008b30 <HAL_HCD_MspInit+0xc0>)
 8008ac4:	f7f8 fb86 	bl	80011d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008ac8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ace:	2302      	movs	r3, #2
 8008ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008ada:	230a      	movs	r3, #10
 8008adc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ade:	f107 0314 	add.w	r3, r7, #20
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	4812      	ldr	r0, [pc, #72]	@ (8008b30 <HAL_HCD_MspInit+0xc0>)
 8008ae6:	f7f8 fb75 	bl	80011d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008aea:	4b10      	ldr	r3, [pc, #64]	@ (8008b2c <HAL_HCD_MspInit+0xbc>)
 8008aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008aee:	4a0f      	ldr	r2, [pc, #60]	@ (8008b2c <HAL_HCD_MspInit+0xbc>)
 8008af0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008af4:	6353      	str	r3, [r2, #52]	@ 0x34
 8008af6:	2300      	movs	r3, #0
 8008af8:	60fb      	str	r3, [r7, #12]
 8008afa:	4b0c      	ldr	r3, [pc, #48]	@ (8008b2c <HAL_HCD_MspInit+0xbc>)
 8008afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008afe:	4a0b      	ldr	r2, [pc, #44]	@ (8008b2c <HAL_HCD_MspInit+0xbc>)
 8008b00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008b04:	6453      	str	r3, [r2, #68]	@ 0x44
 8008b06:	4b09      	ldr	r3, [pc, #36]	@ (8008b2c <HAL_HCD_MspInit+0xbc>)
 8008b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b0e:	60fb      	str	r3, [r7, #12]
 8008b10:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008b12:	2200      	movs	r2, #0
 8008b14:	2100      	movs	r1, #0
 8008b16:	2043      	movs	r0, #67	@ 0x43
 8008b18:	f7f8 fb25 	bl	8001166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008b1c:	2043      	movs	r0, #67	@ 0x43
 8008b1e:	f7f8 fb3e 	bl	800119e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008b22:	bf00      	nop
 8008b24:	3728      	adds	r7, #40	@ 0x28
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	40023800 	.word	0x40023800
 8008b30:	40020000 	.word	0x40020000

08008b34 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7fe ff6d 	bl	8007a22 <USBH_LL_IncTimer>
}
 8008b48:	bf00      	nop
 8008b4a:	3708      	adds	r7, #8
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7fe ffa9 	bl	8007ab6 <USBH_LL_Connect>
}
 8008b64:	bf00      	nop
 8008b66:	3708      	adds	r7, #8
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7fe ffb2 	bl	8007ae4 <USBH_LL_Disconnect>
}
 8008b80:	bf00      	nop
 8008b82:	3708      	adds	r7, #8
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	460b      	mov	r3, r1
 8008b92:	70fb      	strb	r3, [r7, #3]
 8008b94:	4613      	mov	r3, r2
 8008b96:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008b98:	bf00      	nop
 8008b9a:	370c      	adds	r7, #12
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr

08008ba4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7fe ff5f 	bl	8007a76 <USBH_LL_PortEnabled>
}
 8008bb8:	bf00      	nop
 8008bba:	3708      	adds	r7, #8
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f7fe ff5f 	bl	8007a92 <USBH_LL_PortDisabled>
}
 8008bd4:	bf00      	nop
 8008bd6:	3708      	adds	r7, #8
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d12a      	bne.n	8008c44 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008bee:	4a18      	ldr	r2, [pc, #96]	@ (8008c50 <USBH_LL_Init+0x74>)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	4a15      	ldr	r2, [pc, #84]	@ (8008c50 <USBH_LL_Init+0x74>)
 8008bfa:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008bfe:	4b14      	ldr	r3, [pc, #80]	@ (8008c50 <USBH_LL_Init+0x74>)
 8008c00:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008c04:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008c06:	4b12      	ldr	r3, [pc, #72]	@ (8008c50 <USBH_LL_Init+0x74>)
 8008c08:	2208      	movs	r2, #8
 8008c0a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008c0c:	4b10      	ldr	r3, [pc, #64]	@ (8008c50 <USBH_LL_Init+0x74>)
 8008c0e:	2201      	movs	r2, #1
 8008c10:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008c12:	4b0f      	ldr	r3, [pc, #60]	@ (8008c50 <USBH_LL_Init+0x74>)
 8008c14:	2200      	movs	r2, #0
 8008c16:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008c18:	4b0d      	ldr	r3, [pc, #52]	@ (8008c50 <USBH_LL_Init+0x74>)
 8008c1a:	2202      	movs	r2, #2
 8008c1c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8008c50 <USBH_LL_Init+0x74>)
 8008c20:	2200      	movs	r2, #0
 8008c22:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008c24:	480a      	ldr	r0, [pc, #40]	@ (8008c50 <USBH_LL_Init+0x74>)
 8008c26:	f7f8 fc8a 	bl	800153e <HAL_HCD_Init>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d001      	beq.n	8008c34 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008c30:	f7f7 fef0 	bl	8000a14 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008c34:	4806      	ldr	r0, [pc, #24]	@ (8008c50 <USBH_LL_Init+0x74>)
 8008c36:	f7f9 f8eb 	bl	8001e10 <HAL_HCD_GetCurrentFrame>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f7fe fee0 	bl	8007a04 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3708      	adds	r7, #8
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	200005c4 	.word	0x200005c4

08008c54 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c60:	2300      	movs	r3, #0
 8008c62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f7f9 f858 	bl	8001d20 <HAL_HCD_Start>
 8008c70:	4603      	mov	r3, r0
 8008c72:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c74:	7bfb      	ldrb	r3, [r7, #15]
 8008c76:	4618      	mov	r0, r3
 8008c78:	f000 f95e 	bl	8008f38 <USBH_Get_USB_Status>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c80:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3710      	adds	r7, #16
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b084      	sub	sp, #16
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c92:	2300      	movs	r3, #0
 8008c94:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c96:	2300      	movs	r3, #0
 8008c98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f7f9 f860 	bl	8001d66 <HAL_HCD_Stop>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008caa:	7bfb      	ldrb	r3, [r7, #15]
 8008cac:	4618      	mov	r0, r3
 8008cae:	f000 f943 	bl	8008f38 <USBH_Get_USB_Status>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3710      	adds	r7, #16
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b084      	sub	sp, #16
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7f9 f8aa 	bl	8001e2c <HAL_HCD_GetCurrentSpeed>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b02      	cmp	r3, #2
 8008cdc:	d00c      	beq.n	8008cf8 <USBH_LL_GetSpeed+0x38>
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	d80d      	bhi.n	8008cfe <USBH_LL_GetSpeed+0x3e>
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d002      	beq.n	8008cec <USBH_LL_GetSpeed+0x2c>
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d003      	beq.n	8008cf2 <USBH_LL_GetSpeed+0x32>
 8008cea:	e008      	b.n	8008cfe <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008cec:	2300      	movs	r3, #0
 8008cee:	73fb      	strb	r3, [r7, #15]
    break;
 8008cf0:	e008      	b.n	8008d04 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	73fb      	strb	r3, [r7, #15]
    break;
 8008cf6:	e005      	b.n	8008d04 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008cf8:	2302      	movs	r3, #2
 8008cfa:	73fb      	strb	r3, [r7, #15]
    break;
 8008cfc:	e002      	b.n	8008d04 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	73fb      	strb	r3, [r7, #15]
    break;
 8008d02:	bf00      	nop
  }
  return  speed;
 8008d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3710      	adds	r7, #16
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b084      	sub	sp, #16
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d16:	2300      	movs	r3, #0
 8008d18:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008d24:	4618      	mov	r0, r3
 8008d26:	f7f9 f83b 	bl	8001da0 <HAL_HCD_ResetPort>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d2e:	7bfb      	ldrb	r3, [r7, #15]
 8008d30:	4618      	mov	r0, r3
 8008d32:	f000 f901 	bl	8008f38 <USBH_Get_USB_Status>
 8008d36:	4603      	mov	r3, r0
 8008d38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3710      	adds	r7, #16
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008d56:	78fa      	ldrb	r2, [r7, #3]
 8008d58:	4611      	mov	r1, r2
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7f9 f843 	bl	8001de6 <HAL_HCD_HC_GetXferCount>
 8008d60:	4603      	mov	r3, r0
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3708      	adds	r7, #8
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008d6a:	b590      	push	{r4, r7, lr}
 8008d6c:	b089      	sub	sp, #36	@ 0x24
 8008d6e:	af04      	add	r7, sp, #16
 8008d70:	6078      	str	r0, [r7, #4]
 8008d72:	4608      	mov	r0, r1
 8008d74:	4611      	mov	r1, r2
 8008d76:	461a      	mov	r2, r3
 8008d78:	4603      	mov	r3, r0
 8008d7a:	70fb      	strb	r3, [r7, #3]
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	70bb      	strb	r3, [r7, #2]
 8008d80:	4613      	mov	r3, r2
 8008d82:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d84:	2300      	movs	r3, #0
 8008d86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008d92:	787c      	ldrb	r4, [r7, #1]
 8008d94:	78ba      	ldrb	r2, [r7, #2]
 8008d96:	78f9      	ldrb	r1, [r7, #3]
 8008d98:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008d9a:	9302      	str	r3, [sp, #8]
 8008d9c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008da0:	9301      	str	r3, [sp, #4]
 8008da2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008da6:	9300      	str	r3, [sp, #0]
 8008da8:	4623      	mov	r3, r4
 8008daa:	f7f8 fc2f 	bl	800160c <HAL_HCD_HC_Init>
 8008dae:	4603      	mov	r3, r0
 8008db0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008db2:	7bfb      	ldrb	r3, [r7, #15]
 8008db4:	4618      	mov	r0, r3
 8008db6:	f000 f8bf 	bl	8008f38 <USBH_Get_USB_Status>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3714      	adds	r7, #20
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd90      	pop	{r4, r7, pc}

08008dc8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008de2:	78fa      	ldrb	r2, [r7, #3]
 8008de4:	4611      	mov	r1, r2
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7f8 fcc8 	bl	800177c <HAL_HCD_HC_Halt>
 8008dec:	4603      	mov	r3, r0
 8008dee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008df0:	7bfb      	ldrb	r3, [r7, #15]
 8008df2:	4618      	mov	r0, r3
 8008df4:	f000 f8a0 	bl	8008f38 <USBH_Get_USB_Status>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3710      	adds	r7, #16
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008e06:	b590      	push	{r4, r7, lr}
 8008e08:	b089      	sub	sp, #36	@ 0x24
 8008e0a:	af04      	add	r7, sp, #16
 8008e0c:	6078      	str	r0, [r7, #4]
 8008e0e:	4608      	mov	r0, r1
 8008e10:	4611      	mov	r1, r2
 8008e12:	461a      	mov	r2, r3
 8008e14:	4603      	mov	r3, r0
 8008e16:	70fb      	strb	r3, [r7, #3]
 8008e18:	460b      	mov	r3, r1
 8008e1a:	70bb      	strb	r3, [r7, #2]
 8008e1c:	4613      	mov	r3, r2
 8008e1e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e20:	2300      	movs	r3, #0
 8008e22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e24:	2300      	movs	r3, #0
 8008e26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008e2e:	787c      	ldrb	r4, [r7, #1]
 8008e30:	78ba      	ldrb	r2, [r7, #2]
 8008e32:	78f9      	ldrb	r1, [r7, #3]
 8008e34:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008e38:	9303      	str	r3, [sp, #12]
 8008e3a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008e3c:	9302      	str	r3, [sp, #8]
 8008e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e40:	9301      	str	r3, [sp, #4]
 8008e42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008e46:	9300      	str	r3, [sp, #0]
 8008e48:	4623      	mov	r3, r4
 8008e4a:	f7f8 fcbb 	bl	80017c4 <HAL_HCD_HC_SubmitRequest>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008e52:	7bfb      	ldrb	r3, [r7, #15]
 8008e54:	4618      	mov	r0, r3
 8008e56:	f000 f86f 	bl	8008f38 <USBH_Get_USB_Status>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3714      	adds	r7, #20
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd90      	pop	{r4, r7, pc}

08008e68 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	460b      	mov	r3, r1
 8008e72:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008e7a:	78fa      	ldrb	r2, [r7, #3]
 8008e7c:	4611      	mov	r1, r2
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7f8 ff9c 	bl	8001dbc <HAL_HCD_HC_GetURBState>
 8008e84:	4603      	mov	r3, r0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3708      	adds	r7, #8
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}

08008e8e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b082      	sub	sp, #8
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
 8008e96:	460b      	mov	r3, r1
 8008e98:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d103      	bne.n	8008eac <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008ea4:	78fb      	ldrb	r3, [r7, #3]
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f000 f872 	bl	8008f90 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008eac:	20c8      	movs	r0, #200	@ 0xc8
 8008eae:	f7f8 f85b 	bl	8000f68 <HAL_Delay>
  return USBH_OK;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3708      	adds	r7, #8
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b085      	sub	sp, #20
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	70fb      	strb	r3, [r7, #3]
 8008ec8:	4613      	mov	r3, r2
 8008eca:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008ed2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008ed4:	78fa      	ldrb	r2, [r7, #3]
 8008ed6:	68f9      	ldr	r1, [r7, #12]
 8008ed8:	4613      	mov	r3, r2
 8008eda:	011b      	lsls	r3, r3, #4
 8008edc:	1a9b      	subs	r3, r3, r2
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	440b      	add	r3, r1
 8008ee2:	3317      	adds	r3, #23
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d00a      	beq.n	8008f00 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008eea:	78fa      	ldrb	r2, [r7, #3]
 8008eec:	68f9      	ldr	r1, [r7, #12]
 8008eee:	4613      	mov	r3, r2
 8008ef0:	011b      	lsls	r3, r3, #4
 8008ef2:	1a9b      	subs	r3, r3, r2
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	440b      	add	r3, r1
 8008ef8:	333c      	adds	r3, #60	@ 0x3c
 8008efa:	78ba      	ldrb	r2, [r7, #2]
 8008efc:	701a      	strb	r2, [r3, #0]
 8008efe:	e009      	b.n	8008f14 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008f00:	78fa      	ldrb	r2, [r7, #3]
 8008f02:	68f9      	ldr	r1, [r7, #12]
 8008f04:	4613      	mov	r3, r2
 8008f06:	011b      	lsls	r3, r3, #4
 8008f08:	1a9b      	subs	r3, r3, r2
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	440b      	add	r3, r1
 8008f0e:	333d      	adds	r3, #61	@ 0x3d
 8008f10:	78ba      	ldrb	r2, [r7, #2]
 8008f12:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008f14:	2300      	movs	r3, #0
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3714      	adds	r7, #20
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr

08008f22 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b082      	sub	sp, #8
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f7f8 f81c 	bl	8000f68 <HAL_Delay>
}
 8008f30:	bf00      	nop
 8008f32:	3708      	adds	r7, #8
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b085      	sub	sp, #20
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	4603      	mov	r3, r0
 8008f40:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f42:	2300      	movs	r3, #0
 8008f44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008f46:	79fb      	ldrb	r3, [r7, #7]
 8008f48:	2b03      	cmp	r3, #3
 8008f4a:	d817      	bhi.n	8008f7c <USBH_Get_USB_Status+0x44>
 8008f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8008f54 <USBH_Get_USB_Status+0x1c>)
 8008f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f52:	bf00      	nop
 8008f54:	08008f65 	.word	0x08008f65
 8008f58:	08008f6b 	.word	0x08008f6b
 8008f5c:	08008f71 	.word	0x08008f71
 8008f60:	08008f77 	.word	0x08008f77
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008f64:	2300      	movs	r3, #0
 8008f66:	73fb      	strb	r3, [r7, #15]
    break;
 8008f68:	e00b      	b.n	8008f82 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008f6a:	2302      	movs	r3, #2
 8008f6c:	73fb      	strb	r3, [r7, #15]
    break;
 8008f6e:	e008      	b.n	8008f82 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008f70:	2301      	movs	r3, #1
 8008f72:	73fb      	strb	r3, [r7, #15]
    break;
 8008f74:	e005      	b.n	8008f82 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008f76:	2302      	movs	r3, #2
 8008f78:	73fb      	strb	r3, [r7, #15]
    break;
 8008f7a:	e002      	b.n	8008f82 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008f7c:	2302      	movs	r3, #2
 8008f7e:	73fb      	strb	r3, [r7, #15]
    break;
 8008f80:	bf00      	nop
  }
  return usb_status;
 8008f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3714      	adds	r7, #20
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr

08008f90 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b084      	sub	sp, #16
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	4603      	mov	r3, r0
 8008f98:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008f9a:	79fb      	ldrb	r3, [r7, #7]
 8008f9c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008f9e:	79fb      	ldrb	r3, [r7, #7]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d102      	bne.n	8008faa <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	73fb      	strb	r3, [r7, #15]
 8008fa8:	e001      	b.n	8008fae <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008faa:	2301      	movs	r3, #1
 8008fac:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008fae:	7bfb      	ldrb	r3, [r7, #15]
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	2101      	movs	r1, #1
 8008fb4:	4803      	ldr	r0, [pc, #12]	@ (8008fc4 <MX_DriverVbusFS+0x34>)
 8008fb6:	f7f8 faa9 	bl	800150c <HAL_GPIO_WritePin>
}
 8008fba:	bf00      	nop
 8008fbc:	3710      	adds	r7, #16
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	bf00      	nop
 8008fc4:	40020800 	.word	0x40020800

08008fc8 <malloc>:
 8008fc8:	4b02      	ldr	r3, [pc, #8]	@ (8008fd4 <malloc+0xc>)
 8008fca:	4601      	mov	r1, r0
 8008fcc:	6818      	ldr	r0, [r3, #0]
 8008fce:	f000 b82d 	b.w	800902c <_malloc_r>
 8008fd2:	bf00      	nop
 8008fd4:	20000038 	.word	0x20000038

08008fd8 <free>:
 8008fd8:	4b02      	ldr	r3, [pc, #8]	@ (8008fe4 <free+0xc>)
 8008fda:	4601      	mov	r1, r0
 8008fdc:	6818      	ldr	r0, [r3, #0]
 8008fde:	f000 bb35 	b.w	800964c <_free_r>
 8008fe2:	bf00      	nop
 8008fe4:	20000038 	.word	0x20000038

08008fe8 <sbrk_aligned>:
 8008fe8:	b570      	push	{r4, r5, r6, lr}
 8008fea:	4e0f      	ldr	r6, [pc, #60]	@ (8009028 <sbrk_aligned+0x40>)
 8008fec:	460c      	mov	r4, r1
 8008fee:	6831      	ldr	r1, [r6, #0]
 8008ff0:	4605      	mov	r5, r0
 8008ff2:	b911      	cbnz	r1, 8008ffa <sbrk_aligned+0x12>
 8008ff4:	f000 fada 	bl	80095ac <_sbrk_r>
 8008ff8:	6030      	str	r0, [r6, #0]
 8008ffa:	4621      	mov	r1, r4
 8008ffc:	4628      	mov	r0, r5
 8008ffe:	f000 fad5 	bl	80095ac <_sbrk_r>
 8009002:	1c43      	adds	r3, r0, #1
 8009004:	d103      	bne.n	800900e <sbrk_aligned+0x26>
 8009006:	f04f 34ff 	mov.w	r4, #4294967295
 800900a:	4620      	mov	r0, r4
 800900c:	bd70      	pop	{r4, r5, r6, pc}
 800900e:	1cc4      	adds	r4, r0, #3
 8009010:	f024 0403 	bic.w	r4, r4, #3
 8009014:	42a0      	cmp	r0, r4
 8009016:	d0f8      	beq.n	800900a <sbrk_aligned+0x22>
 8009018:	1a21      	subs	r1, r4, r0
 800901a:	4628      	mov	r0, r5
 800901c:	f000 fac6 	bl	80095ac <_sbrk_r>
 8009020:	3001      	adds	r0, #1
 8009022:	d1f2      	bne.n	800900a <sbrk_aligned+0x22>
 8009024:	e7ef      	b.n	8009006 <sbrk_aligned+0x1e>
 8009026:	bf00      	nop
 8009028:	200009a4 	.word	0x200009a4

0800902c <_malloc_r>:
 800902c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009030:	1ccd      	adds	r5, r1, #3
 8009032:	f025 0503 	bic.w	r5, r5, #3
 8009036:	3508      	adds	r5, #8
 8009038:	2d0c      	cmp	r5, #12
 800903a:	bf38      	it	cc
 800903c:	250c      	movcc	r5, #12
 800903e:	2d00      	cmp	r5, #0
 8009040:	4606      	mov	r6, r0
 8009042:	db01      	blt.n	8009048 <_malloc_r+0x1c>
 8009044:	42a9      	cmp	r1, r5
 8009046:	d904      	bls.n	8009052 <_malloc_r+0x26>
 8009048:	230c      	movs	r3, #12
 800904a:	6033      	str	r3, [r6, #0]
 800904c:	2000      	movs	r0, #0
 800904e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009052:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009128 <_malloc_r+0xfc>
 8009056:	f000 f869 	bl	800912c <__malloc_lock>
 800905a:	f8d8 3000 	ldr.w	r3, [r8]
 800905e:	461c      	mov	r4, r3
 8009060:	bb44      	cbnz	r4, 80090b4 <_malloc_r+0x88>
 8009062:	4629      	mov	r1, r5
 8009064:	4630      	mov	r0, r6
 8009066:	f7ff ffbf 	bl	8008fe8 <sbrk_aligned>
 800906a:	1c43      	adds	r3, r0, #1
 800906c:	4604      	mov	r4, r0
 800906e:	d158      	bne.n	8009122 <_malloc_r+0xf6>
 8009070:	f8d8 4000 	ldr.w	r4, [r8]
 8009074:	4627      	mov	r7, r4
 8009076:	2f00      	cmp	r7, #0
 8009078:	d143      	bne.n	8009102 <_malloc_r+0xd6>
 800907a:	2c00      	cmp	r4, #0
 800907c:	d04b      	beq.n	8009116 <_malloc_r+0xea>
 800907e:	6823      	ldr	r3, [r4, #0]
 8009080:	4639      	mov	r1, r7
 8009082:	4630      	mov	r0, r6
 8009084:	eb04 0903 	add.w	r9, r4, r3
 8009088:	f000 fa90 	bl	80095ac <_sbrk_r>
 800908c:	4581      	cmp	r9, r0
 800908e:	d142      	bne.n	8009116 <_malloc_r+0xea>
 8009090:	6821      	ldr	r1, [r4, #0]
 8009092:	1a6d      	subs	r5, r5, r1
 8009094:	4629      	mov	r1, r5
 8009096:	4630      	mov	r0, r6
 8009098:	f7ff ffa6 	bl	8008fe8 <sbrk_aligned>
 800909c:	3001      	adds	r0, #1
 800909e:	d03a      	beq.n	8009116 <_malloc_r+0xea>
 80090a0:	6823      	ldr	r3, [r4, #0]
 80090a2:	442b      	add	r3, r5
 80090a4:	6023      	str	r3, [r4, #0]
 80090a6:	f8d8 3000 	ldr.w	r3, [r8]
 80090aa:	685a      	ldr	r2, [r3, #4]
 80090ac:	bb62      	cbnz	r2, 8009108 <_malloc_r+0xdc>
 80090ae:	f8c8 7000 	str.w	r7, [r8]
 80090b2:	e00f      	b.n	80090d4 <_malloc_r+0xa8>
 80090b4:	6822      	ldr	r2, [r4, #0]
 80090b6:	1b52      	subs	r2, r2, r5
 80090b8:	d420      	bmi.n	80090fc <_malloc_r+0xd0>
 80090ba:	2a0b      	cmp	r2, #11
 80090bc:	d917      	bls.n	80090ee <_malloc_r+0xc2>
 80090be:	1961      	adds	r1, r4, r5
 80090c0:	42a3      	cmp	r3, r4
 80090c2:	6025      	str	r5, [r4, #0]
 80090c4:	bf18      	it	ne
 80090c6:	6059      	strne	r1, [r3, #4]
 80090c8:	6863      	ldr	r3, [r4, #4]
 80090ca:	bf08      	it	eq
 80090cc:	f8c8 1000 	streq.w	r1, [r8]
 80090d0:	5162      	str	r2, [r4, r5]
 80090d2:	604b      	str	r3, [r1, #4]
 80090d4:	4630      	mov	r0, r6
 80090d6:	f000 f82f 	bl	8009138 <__malloc_unlock>
 80090da:	f104 000b 	add.w	r0, r4, #11
 80090de:	1d23      	adds	r3, r4, #4
 80090e0:	f020 0007 	bic.w	r0, r0, #7
 80090e4:	1ac2      	subs	r2, r0, r3
 80090e6:	bf1c      	itt	ne
 80090e8:	1a1b      	subne	r3, r3, r0
 80090ea:	50a3      	strne	r3, [r4, r2]
 80090ec:	e7af      	b.n	800904e <_malloc_r+0x22>
 80090ee:	6862      	ldr	r2, [r4, #4]
 80090f0:	42a3      	cmp	r3, r4
 80090f2:	bf0c      	ite	eq
 80090f4:	f8c8 2000 	streq.w	r2, [r8]
 80090f8:	605a      	strne	r2, [r3, #4]
 80090fa:	e7eb      	b.n	80090d4 <_malloc_r+0xa8>
 80090fc:	4623      	mov	r3, r4
 80090fe:	6864      	ldr	r4, [r4, #4]
 8009100:	e7ae      	b.n	8009060 <_malloc_r+0x34>
 8009102:	463c      	mov	r4, r7
 8009104:	687f      	ldr	r7, [r7, #4]
 8009106:	e7b6      	b.n	8009076 <_malloc_r+0x4a>
 8009108:	461a      	mov	r2, r3
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	42a3      	cmp	r3, r4
 800910e:	d1fb      	bne.n	8009108 <_malloc_r+0xdc>
 8009110:	2300      	movs	r3, #0
 8009112:	6053      	str	r3, [r2, #4]
 8009114:	e7de      	b.n	80090d4 <_malloc_r+0xa8>
 8009116:	230c      	movs	r3, #12
 8009118:	6033      	str	r3, [r6, #0]
 800911a:	4630      	mov	r0, r6
 800911c:	f000 f80c 	bl	8009138 <__malloc_unlock>
 8009120:	e794      	b.n	800904c <_malloc_r+0x20>
 8009122:	6005      	str	r5, [r0, #0]
 8009124:	e7d6      	b.n	80090d4 <_malloc_r+0xa8>
 8009126:	bf00      	nop
 8009128:	200009a8 	.word	0x200009a8

0800912c <__malloc_lock>:
 800912c:	4801      	ldr	r0, [pc, #4]	@ (8009134 <__malloc_lock+0x8>)
 800912e:	f000 ba8a 	b.w	8009646 <__retarget_lock_acquire_recursive>
 8009132:	bf00      	nop
 8009134:	20000aec 	.word	0x20000aec

08009138 <__malloc_unlock>:
 8009138:	4801      	ldr	r0, [pc, #4]	@ (8009140 <__malloc_unlock+0x8>)
 800913a:	f000 ba85 	b.w	8009648 <__retarget_lock_release_recursive>
 800913e:	bf00      	nop
 8009140:	20000aec 	.word	0x20000aec

08009144 <std>:
 8009144:	2300      	movs	r3, #0
 8009146:	b510      	push	{r4, lr}
 8009148:	4604      	mov	r4, r0
 800914a:	e9c0 3300 	strd	r3, r3, [r0]
 800914e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009152:	6083      	str	r3, [r0, #8]
 8009154:	8181      	strh	r1, [r0, #12]
 8009156:	6643      	str	r3, [r0, #100]	@ 0x64
 8009158:	81c2      	strh	r2, [r0, #14]
 800915a:	6183      	str	r3, [r0, #24]
 800915c:	4619      	mov	r1, r3
 800915e:	2208      	movs	r2, #8
 8009160:	305c      	adds	r0, #92	@ 0x5c
 8009162:	f000 f9e7 	bl	8009534 <memset>
 8009166:	4b0d      	ldr	r3, [pc, #52]	@ (800919c <std+0x58>)
 8009168:	6263      	str	r3, [r4, #36]	@ 0x24
 800916a:	4b0d      	ldr	r3, [pc, #52]	@ (80091a0 <std+0x5c>)
 800916c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800916e:	4b0d      	ldr	r3, [pc, #52]	@ (80091a4 <std+0x60>)
 8009170:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009172:	4b0d      	ldr	r3, [pc, #52]	@ (80091a8 <std+0x64>)
 8009174:	6323      	str	r3, [r4, #48]	@ 0x30
 8009176:	4b0d      	ldr	r3, [pc, #52]	@ (80091ac <std+0x68>)
 8009178:	6224      	str	r4, [r4, #32]
 800917a:	429c      	cmp	r4, r3
 800917c:	d006      	beq.n	800918c <std+0x48>
 800917e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009182:	4294      	cmp	r4, r2
 8009184:	d002      	beq.n	800918c <std+0x48>
 8009186:	33d0      	adds	r3, #208	@ 0xd0
 8009188:	429c      	cmp	r4, r3
 800918a:	d105      	bne.n	8009198 <std+0x54>
 800918c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009194:	f000 ba56 	b.w	8009644 <__retarget_lock_init_recursive>
 8009198:	bd10      	pop	{r4, pc}
 800919a:	bf00      	nop
 800919c:	08009385 	.word	0x08009385
 80091a0:	080093a7 	.word	0x080093a7
 80091a4:	080093df 	.word	0x080093df
 80091a8:	08009403 	.word	0x08009403
 80091ac:	200009ac 	.word	0x200009ac

080091b0 <stdio_exit_handler>:
 80091b0:	4a02      	ldr	r2, [pc, #8]	@ (80091bc <stdio_exit_handler+0xc>)
 80091b2:	4903      	ldr	r1, [pc, #12]	@ (80091c0 <stdio_exit_handler+0x10>)
 80091b4:	4803      	ldr	r0, [pc, #12]	@ (80091c4 <stdio_exit_handler+0x14>)
 80091b6:	f000 b869 	b.w	800928c <_fwalk_sglue>
 80091ba:	bf00      	nop
 80091bc:	2000002c 	.word	0x2000002c
 80091c0:	080097e9 	.word	0x080097e9
 80091c4:	2000003c 	.word	0x2000003c

080091c8 <cleanup_stdio>:
 80091c8:	6841      	ldr	r1, [r0, #4]
 80091ca:	4b0c      	ldr	r3, [pc, #48]	@ (80091fc <cleanup_stdio+0x34>)
 80091cc:	4299      	cmp	r1, r3
 80091ce:	b510      	push	{r4, lr}
 80091d0:	4604      	mov	r4, r0
 80091d2:	d001      	beq.n	80091d8 <cleanup_stdio+0x10>
 80091d4:	f000 fb08 	bl	80097e8 <_fflush_r>
 80091d8:	68a1      	ldr	r1, [r4, #8]
 80091da:	4b09      	ldr	r3, [pc, #36]	@ (8009200 <cleanup_stdio+0x38>)
 80091dc:	4299      	cmp	r1, r3
 80091de:	d002      	beq.n	80091e6 <cleanup_stdio+0x1e>
 80091e0:	4620      	mov	r0, r4
 80091e2:	f000 fb01 	bl	80097e8 <_fflush_r>
 80091e6:	68e1      	ldr	r1, [r4, #12]
 80091e8:	4b06      	ldr	r3, [pc, #24]	@ (8009204 <cleanup_stdio+0x3c>)
 80091ea:	4299      	cmp	r1, r3
 80091ec:	d004      	beq.n	80091f8 <cleanup_stdio+0x30>
 80091ee:	4620      	mov	r0, r4
 80091f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091f4:	f000 baf8 	b.w	80097e8 <_fflush_r>
 80091f8:	bd10      	pop	{r4, pc}
 80091fa:	bf00      	nop
 80091fc:	200009ac 	.word	0x200009ac
 8009200:	20000a14 	.word	0x20000a14
 8009204:	20000a7c 	.word	0x20000a7c

08009208 <global_stdio_init.part.0>:
 8009208:	b510      	push	{r4, lr}
 800920a:	4b0b      	ldr	r3, [pc, #44]	@ (8009238 <global_stdio_init.part.0+0x30>)
 800920c:	4c0b      	ldr	r4, [pc, #44]	@ (800923c <global_stdio_init.part.0+0x34>)
 800920e:	4a0c      	ldr	r2, [pc, #48]	@ (8009240 <global_stdio_init.part.0+0x38>)
 8009210:	601a      	str	r2, [r3, #0]
 8009212:	4620      	mov	r0, r4
 8009214:	2200      	movs	r2, #0
 8009216:	2104      	movs	r1, #4
 8009218:	f7ff ff94 	bl	8009144 <std>
 800921c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009220:	2201      	movs	r2, #1
 8009222:	2109      	movs	r1, #9
 8009224:	f7ff ff8e 	bl	8009144 <std>
 8009228:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800922c:	2202      	movs	r2, #2
 800922e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009232:	2112      	movs	r1, #18
 8009234:	f7ff bf86 	b.w	8009144 <std>
 8009238:	20000ae4 	.word	0x20000ae4
 800923c:	200009ac 	.word	0x200009ac
 8009240:	080091b1 	.word	0x080091b1

08009244 <__sfp_lock_acquire>:
 8009244:	4801      	ldr	r0, [pc, #4]	@ (800924c <__sfp_lock_acquire+0x8>)
 8009246:	f000 b9fe 	b.w	8009646 <__retarget_lock_acquire_recursive>
 800924a:	bf00      	nop
 800924c:	20000aed 	.word	0x20000aed

08009250 <__sfp_lock_release>:
 8009250:	4801      	ldr	r0, [pc, #4]	@ (8009258 <__sfp_lock_release+0x8>)
 8009252:	f000 b9f9 	b.w	8009648 <__retarget_lock_release_recursive>
 8009256:	bf00      	nop
 8009258:	20000aed 	.word	0x20000aed

0800925c <__sinit>:
 800925c:	b510      	push	{r4, lr}
 800925e:	4604      	mov	r4, r0
 8009260:	f7ff fff0 	bl	8009244 <__sfp_lock_acquire>
 8009264:	6a23      	ldr	r3, [r4, #32]
 8009266:	b11b      	cbz	r3, 8009270 <__sinit+0x14>
 8009268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800926c:	f7ff bff0 	b.w	8009250 <__sfp_lock_release>
 8009270:	4b04      	ldr	r3, [pc, #16]	@ (8009284 <__sinit+0x28>)
 8009272:	6223      	str	r3, [r4, #32]
 8009274:	4b04      	ldr	r3, [pc, #16]	@ (8009288 <__sinit+0x2c>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d1f5      	bne.n	8009268 <__sinit+0xc>
 800927c:	f7ff ffc4 	bl	8009208 <global_stdio_init.part.0>
 8009280:	e7f2      	b.n	8009268 <__sinit+0xc>
 8009282:	bf00      	nop
 8009284:	080091c9 	.word	0x080091c9
 8009288:	20000ae4 	.word	0x20000ae4

0800928c <_fwalk_sglue>:
 800928c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009290:	4607      	mov	r7, r0
 8009292:	4688      	mov	r8, r1
 8009294:	4614      	mov	r4, r2
 8009296:	2600      	movs	r6, #0
 8009298:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800929c:	f1b9 0901 	subs.w	r9, r9, #1
 80092a0:	d505      	bpl.n	80092ae <_fwalk_sglue+0x22>
 80092a2:	6824      	ldr	r4, [r4, #0]
 80092a4:	2c00      	cmp	r4, #0
 80092a6:	d1f7      	bne.n	8009298 <_fwalk_sglue+0xc>
 80092a8:	4630      	mov	r0, r6
 80092aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092ae:	89ab      	ldrh	r3, [r5, #12]
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d907      	bls.n	80092c4 <_fwalk_sglue+0x38>
 80092b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092b8:	3301      	adds	r3, #1
 80092ba:	d003      	beq.n	80092c4 <_fwalk_sglue+0x38>
 80092bc:	4629      	mov	r1, r5
 80092be:	4638      	mov	r0, r7
 80092c0:	47c0      	blx	r8
 80092c2:	4306      	orrs	r6, r0
 80092c4:	3568      	adds	r5, #104	@ 0x68
 80092c6:	e7e9      	b.n	800929c <_fwalk_sglue+0x10>

080092c8 <_puts_r>:
 80092c8:	6a03      	ldr	r3, [r0, #32]
 80092ca:	b570      	push	{r4, r5, r6, lr}
 80092cc:	6884      	ldr	r4, [r0, #8]
 80092ce:	4605      	mov	r5, r0
 80092d0:	460e      	mov	r6, r1
 80092d2:	b90b      	cbnz	r3, 80092d8 <_puts_r+0x10>
 80092d4:	f7ff ffc2 	bl	800925c <__sinit>
 80092d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80092da:	07db      	lsls	r3, r3, #31
 80092dc:	d405      	bmi.n	80092ea <_puts_r+0x22>
 80092de:	89a3      	ldrh	r3, [r4, #12]
 80092e0:	0598      	lsls	r0, r3, #22
 80092e2:	d402      	bmi.n	80092ea <_puts_r+0x22>
 80092e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092e6:	f000 f9ae 	bl	8009646 <__retarget_lock_acquire_recursive>
 80092ea:	89a3      	ldrh	r3, [r4, #12]
 80092ec:	0719      	lsls	r1, r3, #28
 80092ee:	d502      	bpl.n	80092f6 <_puts_r+0x2e>
 80092f0:	6923      	ldr	r3, [r4, #16]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d135      	bne.n	8009362 <_puts_r+0x9a>
 80092f6:	4621      	mov	r1, r4
 80092f8:	4628      	mov	r0, r5
 80092fa:	f000 f8c5 	bl	8009488 <__swsetup_r>
 80092fe:	b380      	cbz	r0, 8009362 <_puts_r+0x9a>
 8009300:	f04f 35ff 	mov.w	r5, #4294967295
 8009304:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009306:	07da      	lsls	r2, r3, #31
 8009308:	d405      	bmi.n	8009316 <_puts_r+0x4e>
 800930a:	89a3      	ldrh	r3, [r4, #12]
 800930c:	059b      	lsls	r3, r3, #22
 800930e:	d402      	bmi.n	8009316 <_puts_r+0x4e>
 8009310:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009312:	f000 f999 	bl	8009648 <__retarget_lock_release_recursive>
 8009316:	4628      	mov	r0, r5
 8009318:	bd70      	pop	{r4, r5, r6, pc}
 800931a:	2b00      	cmp	r3, #0
 800931c:	da04      	bge.n	8009328 <_puts_r+0x60>
 800931e:	69a2      	ldr	r2, [r4, #24]
 8009320:	429a      	cmp	r2, r3
 8009322:	dc17      	bgt.n	8009354 <_puts_r+0x8c>
 8009324:	290a      	cmp	r1, #10
 8009326:	d015      	beq.n	8009354 <_puts_r+0x8c>
 8009328:	6823      	ldr	r3, [r4, #0]
 800932a:	1c5a      	adds	r2, r3, #1
 800932c:	6022      	str	r2, [r4, #0]
 800932e:	7019      	strb	r1, [r3, #0]
 8009330:	68a3      	ldr	r3, [r4, #8]
 8009332:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009336:	3b01      	subs	r3, #1
 8009338:	60a3      	str	r3, [r4, #8]
 800933a:	2900      	cmp	r1, #0
 800933c:	d1ed      	bne.n	800931a <_puts_r+0x52>
 800933e:	2b00      	cmp	r3, #0
 8009340:	da11      	bge.n	8009366 <_puts_r+0x9e>
 8009342:	4622      	mov	r2, r4
 8009344:	210a      	movs	r1, #10
 8009346:	4628      	mov	r0, r5
 8009348:	f000 f85f 	bl	800940a <__swbuf_r>
 800934c:	3001      	adds	r0, #1
 800934e:	d0d7      	beq.n	8009300 <_puts_r+0x38>
 8009350:	250a      	movs	r5, #10
 8009352:	e7d7      	b.n	8009304 <_puts_r+0x3c>
 8009354:	4622      	mov	r2, r4
 8009356:	4628      	mov	r0, r5
 8009358:	f000 f857 	bl	800940a <__swbuf_r>
 800935c:	3001      	adds	r0, #1
 800935e:	d1e7      	bne.n	8009330 <_puts_r+0x68>
 8009360:	e7ce      	b.n	8009300 <_puts_r+0x38>
 8009362:	3e01      	subs	r6, #1
 8009364:	e7e4      	b.n	8009330 <_puts_r+0x68>
 8009366:	6823      	ldr	r3, [r4, #0]
 8009368:	1c5a      	adds	r2, r3, #1
 800936a:	6022      	str	r2, [r4, #0]
 800936c:	220a      	movs	r2, #10
 800936e:	701a      	strb	r2, [r3, #0]
 8009370:	e7ee      	b.n	8009350 <_puts_r+0x88>
	...

08009374 <puts>:
 8009374:	4b02      	ldr	r3, [pc, #8]	@ (8009380 <puts+0xc>)
 8009376:	4601      	mov	r1, r0
 8009378:	6818      	ldr	r0, [r3, #0]
 800937a:	f7ff bfa5 	b.w	80092c8 <_puts_r>
 800937e:	bf00      	nop
 8009380:	20000038 	.word	0x20000038

08009384 <__sread>:
 8009384:	b510      	push	{r4, lr}
 8009386:	460c      	mov	r4, r1
 8009388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800938c:	f000 f8fc 	bl	8009588 <_read_r>
 8009390:	2800      	cmp	r0, #0
 8009392:	bfab      	itete	ge
 8009394:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009396:	89a3      	ldrhlt	r3, [r4, #12]
 8009398:	181b      	addge	r3, r3, r0
 800939a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800939e:	bfac      	ite	ge
 80093a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80093a2:	81a3      	strhlt	r3, [r4, #12]
 80093a4:	bd10      	pop	{r4, pc}

080093a6 <__swrite>:
 80093a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093aa:	461f      	mov	r7, r3
 80093ac:	898b      	ldrh	r3, [r1, #12]
 80093ae:	05db      	lsls	r3, r3, #23
 80093b0:	4605      	mov	r5, r0
 80093b2:	460c      	mov	r4, r1
 80093b4:	4616      	mov	r6, r2
 80093b6:	d505      	bpl.n	80093c4 <__swrite+0x1e>
 80093b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093bc:	2302      	movs	r3, #2
 80093be:	2200      	movs	r2, #0
 80093c0:	f000 f8d0 	bl	8009564 <_lseek_r>
 80093c4:	89a3      	ldrh	r3, [r4, #12]
 80093c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80093ce:	81a3      	strh	r3, [r4, #12]
 80093d0:	4632      	mov	r2, r6
 80093d2:	463b      	mov	r3, r7
 80093d4:	4628      	mov	r0, r5
 80093d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093da:	f000 b8f7 	b.w	80095cc <_write_r>

080093de <__sseek>:
 80093de:	b510      	push	{r4, lr}
 80093e0:	460c      	mov	r4, r1
 80093e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093e6:	f000 f8bd 	bl	8009564 <_lseek_r>
 80093ea:	1c43      	adds	r3, r0, #1
 80093ec:	89a3      	ldrh	r3, [r4, #12]
 80093ee:	bf15      	itete	ne
 80093f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80093f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80093f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80093fa:	81a3      	strheq	r3, [r4, #12]
 80093fc:	bf18      	it	ne
 80093fe:	81a3      	strhne	r3, [r4, #12]
 8009400:	bd10      	pop	{r4, pc}

08009402 <__sclose>:
 8009402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009406:	f000 b89d 	b.w	8009544 <_close_r>

0800940a <__swbuf_r>:
 800940a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800940c:	460e      	mov	r6, r1
 800940e:	4614      	mov	r4, r2
 8009410:	4605      	mov	r5, r0
 8009412:	b118      	cbz	r0, 800941c <__swbuf_r+0x12>
 8009414:	6a03      	ldr	r3, [r0, #32]
 8009416:	b90b      	cbnz	r3, 800941c <__swbuf_r+0x12>
 8009418:	f7ff ff20 	bl	800925c <__sinit>
 800941c:	69a3      	ldr	r3, [r4, #24]
 800941e:	60a3      	str	r3, [r4, #8]
 8009420:	89a3      	ldrh	r3, [r4, #12]
 8009422:	071a      	lsls	r2, r3, #28
 8009424:	d501      	bpl.n	800942a <__swbuf_r+0x20>
 8009426:	6923      	ldr	r3, [r4, #16]
 8009428:	b943      	cbnz	r3, 800943c <__swbuf_r+0x32>
 800942a:	4621      	mov	r1, r4
 800942c:	4628      	mov	r0, r5
 800942e:	f000 f82b 	bl	8009488 <__swsetup_r>
 8009432:	b118      	cbz	r0, 800943c <__swbuf_r+0x32>
 8009434:	f04f 37ff 	mov.w	r7, #4294967295
 8009438:	4638      	mov	r0, r7
 800943a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800943c:	6823      	ldr	r3, [r4, #0]
 800943e:	6922      	ldr	r2, [r4, #16]
 8009440:	1a98      	subs	r0, r3, r2
 8009442:	6963      	ldr	r3, [r4, #20]
 8009444:	b2f6      	uxtb	r6, r6
 8009446:	4283      	cmp	r3, r0
 8009448:	4637      	mov	r7, r6
 800944a:	dc05      	bgt.n	8009458 <__swbuf_r+0x4e>
 800944c:	4621      	mov	r1, r4
 800944e:	4628      	mov	r0, r5
 8009450:	f000 f9ca 	bl	80097e8 <_fflush_r>
 8009454:	2800      	cmp	r0, #0
 8009456:	d1ed      	bne.n	8009434 <__swbuf_r+0x2a>
 8009458:	68a3      	ldr	r3, [r4, #8]
 800945a:	3b01      	subs	r3, #1
 800945c:	60a3      	str	r3, [r4, #8]
 800945e:	6823      	ldr	r3, [r4, #0]
 8009460:	1c5a      	adds	r2, r3, #1
 8009462:	6022      	str	r2, [r4, #0]
 8009464:	701e      	strb	r6, [r3, #0]
 8009466:	6962      	ldr	r2, [r4, #20]
 8009468:	1c43      	adds	r3, r0, #1
 800946a:	429a      	cmp	r2, r3
 800946c:	d004      	beq.n	8009478 <__swbuf_r+0x6e>
 800946e:	89a3      	ldrh	r3, [r4, #12]
 8009470:	07db      	lsls	r3, r3, #31
 8009472:	d5e1      	bpl.n	8009438 <__swbuf_r+0x2e>
 8009474:	2e0a      	cmp	r6, #10
 8009476:	d1df      	bne.n	8009438 <__swbuf_r+0x2e>
 8009478:	4621      	mov	r1, r4
 800947a:	4628      	mov	r0, r5
 800947c:	f000 f9b4 	bl	80097e8 <_fflush_r>
 8009480:	2800      	cmp	r0, #0
 8009482:	d0d9      	beq.n	8009438 <__swbuf_r+0x2e>
 8009484:	e7d6      	b.n	8009434 <__swbuf_r+0x2a>
	...

08009488 <__swsetup_r>:
 8009488:	b538      	push	{r3, r4, r5, lr}
 800948a:	4b29      	ldr	r3, [pc, #164]	@ (8009530 <__swsetup_r+0xa8>)
 800948c:	4605      	mov	r5, r0
 800948e:	6818      	ldr	r0, [r3, #0]
 8009490:	460c      	mov	r4, r1
 8009492:	b118      	cbz	r0, 800949c <__swsetup_r+0x14>
 8009494:	6a03      	ldr	r3, [r0, #32]
 8009496:	b90b      	cbnz	r3, 800949c <__swsetup_r+0x14>
 8009498:	f7ff fee0 	bl	800925c <__sinit>
 800949c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094a0:	0719      	lsls	r1, r3, #28
 80094a2:	d422      	bmi.n	80094ea <__swsetup_r+0x62>
 80094a4:	06da      	lsls	r2, r3, #27
 80094a6:	d407      	bmi.n	80094b8 <__swsetup_r+0x30>
 80094a8:	2209      	movs	r2, #9
 80094aa:	602a      	str	r2, [r5, #0]
 80094ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094b0:	81a3      	strh	r3, [r4, #12]
 80094b2:	f04f 30ff 	mov.w	r0, #4294967295
 80094b6:	e033      	b.n	8009520 <__swsetup_r+0x98>
 80094b8:	0758      	lsls	r0, r3, #29
 80094ba:	d512      	bpl.n	80094e2 <__swsetup_r+0x5a>
 80094bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80094be:	b141      	cbz	r1, 80094d2 <__swsetup_r+0x4a>
 80094c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80094c4:	4299      	cmp	r1, r3
 80094c6:	d002      	beq.n	80094ce <__swsetup_r+0x46>
 80094c8:	4628      	mov	r0, r5
 80094ca:	f000 f8bf 	bl	800964c <_free_r>
 80094ce:	2300      	movs	r3, #0
 80094d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80094d2:	89a3      	ldrh	r3, [r4, #12]
 80094d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80094d8:	81a3      	strh	r3, [r4, #12]
 80094da:	2300      	movs	r3, #0
 80094dc:	6063      	str	r3, [r4, #4]
 80094de:	6923      	ldr	r3, [r4, #16]
 80094e0:	6023      	str	r3, [r4, #0]
 80094e2:	89a3      	ldrh	r3, [r4, #12]
 80094e4:	f043 0308 	orr.w	r3, r3, #8
 80094e8:	81a3      	strh	r3, [r4, #12]
 80094ea:	6923      	ldr	r3, [r4, #16]
 80094ec:	b94b      	cbnz	r3, 8009502 <__swsetup_r+0x7a>
 80094ee:	89a3      	ldrh	r3, [r4, #12]
 80094f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80094f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094f8:	d003      	beq.n	8009502 <__swsetup_r+0x7a>
 80094fa:	4621      	mov	r1, r4
 80094fc:	4628      	mov	r0, r5
 80094fe:	f000 f9c1 	bl	8009884 <__smakebuf_r>
 8009502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009506:	f013 0201 	ands.w	r2, r3, #1
 800950a:	d00a      	beq.n	8009522 <__swsetup_r+0x9a>
 800950c:	2200      	movs	r2, #0
 800950e:	60a2      	str	r2, [r4, #8]
 8009510:	6962      	ldr	r2, [r4, #20]
 8009512:	4252      	negs	r2, r2
 8009514:	61a2      	str	r2, [r4, #24]
 8009516:	6922      	ldr	r2, [r4, #16]
 8009518:	b942      	cbnz	r2, 800952c <__swsetup_r+0xa4>
 800951a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800951e:	d1c5      	bne.n	80094ac <__swsetup_r+0x24>
 8009520:	bd38      	pop	{r3, r4, r5, pc}
 8009522:	0799      	lsls	r1, r3, #30
 8009524:	bf58      	it	pl
 8009526:	6962      	ldrpl	r2, [r4, #20]
 8009528:	60a2      	str	r2, [r4, #8]
 800952a:	e7f4      	b.n	8009516 <__swsetup_r+0x8e>
 800952c:	2000      	movs	r0, #0
 800952e:	e7f7      	b.n	8009520 <__swsetup_r+0x98>
 8009530:	20000038 	.word	0x20000038

08009534 <memset>:
 8009534:	4402      	add	r2, r0
 8009536:	4603      	mov	r3, r0
 8009538:	4293      	cmp	r3, r2
 800953a:	d100      	bne.n	800953e <memset+0xa>
 800953c:	4770      	bx	lr
 800953e:	f803 1b01 	strb.w	r1, [r3], #1
 8009542:	e7f9      	b.n	8009538 <memset+0x4>

08009544 <_close_r>:
 8009544:	b538      	push	{r3, r4, r5, lr}
 8009546:	4d06      	ldr	r5, [pc, #24]	@ (8009560 <_close_r+0x1c>)
 8009548:	2300      	movs	r3, #0
 800954a:	4604      	mov	r4, r0
 800954c:	4608      	mov	r0, r1
 800954e:	602b      	str	r3, [r5, #0]
 8009550:	f7f7 fb7f 	bl	8000c52 <_close>
 8009554:	1c43      	adds	r3, r0, #1
 8009556:	d102      	bne.n	800955e <_close_r+0x1a>
 8009558:	682b      	ldr	r3, [r5, #0]
 800955a:	b103      	cbz	r3, 800955e <_close_r+0x1a>
 800955c:	6023      	str	r3, [r4, #0]
 800955e:	bd38      	pop	{r3, r4, r5, pc}
 8009560:	20000ae8 	.word	0x20000ae8

08009564 <_lseek_r>:
 8009564:	b538      	push	{r3, r4, r5, lr}
 8009566:	4d07      	ldr	r5, [pc, #28]	@ (8009584 <_lseek_r+0x20>)
 8009568:	4604      	mov	r4, r0
 800956a:	4608      	mov	r0, r1
 800956c:	4611      	mov	r1, r2
 800956e:	2200      	movs	r2, #0
 8009570:	602a      	str	r2, [r5, #0]
 8009572:	461a      	mov	r2, r3
 8009574:	f7f7 fb94 	bl	8000ca0 <_lseek>
 8009578:	1c43      	adds	r3, r0, #1
 800957a:	d102      	bne.n	8009582 <_lseek_r+0x1e>
 800957c:	682b      	ldr	r3, [r5, #0]
 800957e:	b103      	cbz	r3, 8009582 <_lseek_r+0x1e>
 8009580:	6023      	str	r3, [r4, #0]
 8009582:	bd38      	pop	{r3, r4, r5, pc}
 8009584:	20000ae8 	.word	0x20000ae8

08009588 <_read_r>:
 8009588:	b538      	push	{r3, r4, r5, lr}
 800958a:	4d07      	ldr	r5, [pc, #28]	@ (80095a8 <_read_r+0x20>)
 800958c:	4604      	mov	r4, r0
 800958e:	4608      	mov	r0, r1
 8009590:	4611      	mov	r1, r2
 8009592:	2200      	movs	r2, #0
 8009594:	602a      	str	r2, [r5, #0]
 8009596:	461a      	mov	r2, r3
 8009598:	f7f7 fb22 	bl	8000be0 <_read>
 800959c:	1c43      	adds	r3, r0, #1
 800959e:	d102      	bne.n	80095a6 <_read_r+0x1e>
 80095a0:	682b      	ldr	r3, [r5, #0]
 80095a2:	b103      	cbz	r3, 80095a6 <_read_r+0x1e>
 80095a4:	6023      	str	r3, [r4, #0]
 80095a6:	bd38      	pop	{r3, r4, r5, pc}
 80095a8:	20000ae8 	.word	0x20000ae8

080095ac <_sbrk_r>:
 80095ac:	b538      	push	{r3, r4, r5, lr}
 80095ae:	4d06      	ldr	r5, [pc, #24]	@ (80095c8 <_sbrk_r+0x1c>)
 80095b0:	2300      	movs	r3, #0
 80095b2:	4604      	mov	r4, r0
 80095b4:	4608      	mov	r0, r1
 80095b6:	602b      	str	r3, [r5, #0]
 80095b8:	f7f7 fb80 	bl	8000cbc <_sbrk>
 80095bc:	1c43      	adds	r3, r0, #1
 80095be:	d102      	bne.n	80095c6 <_sbrk_r+0x1a>
 80095c0:	682b      	ldr	r3, [r5, #0]
 80095c2:	b103      	cbz	r3, 80095c6 <_sbrk_r+0x1a>
 80095c4:	6023      	str	r3, [r4, #0]
 80095c6:	bd38      	pop	{r3, r4, r5, pc}
 80095c8:	20000ae8 	.word	0x20000ae8

080095cc <_write_r>:
 80095cc:	b538      	push	{r3, r4, r5, lr}
 80095ce:	4d07      	ldr	r5, [pc, #28]	@ (80095ec <_write_r+0x20>)
 80095d0:	4604      	mov	r4, r0
 80095d2:	4608      	mov	r0, r1
 80095d4:	4611      	mov	r1, r2
 80095d6:	2200      	movs	r2, #0
 80095d8:	602a      	str	r2, [r5, #0]
 80095da:	461a      	mov	r2, r3
 80095dc:	f7f7 fb1d 	bl	8000c1a <_write>
 80095e0:	1c43      	adds	r3, r0, #1
 80095e2:	d102      	bne.n	80095ea <_write_r+0x1e>
 80095e4:	682b      	ldr	r3, [r5, #0]
 80095e6:	b103      	cbz	r3, 80095ea <_write_r+0x1e>
 80095e8:	6023      	str	r3, [r4, #0]
 80095ea:	bd38      	pop	{r3, r4, r5, pc}
 80095ec:	20000ae8 	.word	0x20000ae8

080095f0 <__errno>:
 80095f0:	4b01      	ldr	r3, [pc, #4]	@ (80095f8 <__errno+0x8>)
 80095f2:	6818      	ldr	r0, [r3, #0]
 80095f4:	4770      	bx	lr
 80095f6:	bf00      	nop
 80095f8:	20000038 	.word	0x20000038

080095fc <__libc_init_array>:
 80095fc:	b570      	push	{r4, r5, r6, lr}
 80095fe:	4d0d      	ldr	r5, [pc, #52]	@ (8009634 <__libc_init_array+0x38>)
 8009600:	4c0d      	ldr	r4, [pc, #52]	@ (8009638 <__libc_init_array+0x3c>)
 8009602:	1b64      	subs	r4, r4, r5
 8009604:	10a4      	asrs	r4, r4, #2
 8009606:	2600      	movs	r6, #0
 8009608:	42a6      	cmp	r6, r4
 800960a:	d109      	bne.n	8009620 <__libc_init_array+0x24>
 800960c:	4d0b      	ldr	r5, [pc, #44]	@ (800963c <__libc_init_array+0x40>)
 800960e:	4c0c      	ldr	r4, [pc, #48]	@ (8009640 <__libc_init_array+0x44>)
 8009610:	f000 f996 	bl	8009940 <_init>
 8009614:	1b64      	subs	r4, r4, r5
 8009616:	10a4      	asrs	r4, r4, #2
 8009618:	2600      	movs	r6, #0
 800961a:	42a6      	cmp	r6, r4
 800961c:	d105      	bne.n	800962a <__libc_init_array+0x2e>
 800961e:	bd70      	pop	{r4, r5, r6, pc}
 8009620:	f855 3b04 	ldr.w	r3, [r5], #4
 8009624:	4798      	blx	r3
 8009626:	3601      	adds	r6, #1
 8009628:	e7ee      	b.n	8009608 <__libc_init_array+0xc>
 800962a:	f855 3b04 	ldr.w	r3, [r5], #4
 800962e:	4798      	blx	r3
 8009630:	3601      	adds	r6, #1
 8009632:	e7f2      	b.n	800961a <__libc_init_array+0x1e>
 8009634:	0800998c 	.word	0x0800998c
 8009638:	0800998c 	.word	0x0800998c
 800963c:	0800998c 	.word	0x0800998c
 8009640:	08009990 	.word	0x08009990

08009644 <__retarget_lock_init_recursive>:
 8009644:	4770      	bx	lr

08009646 <__retarget_lock_acquire_recursive>:
 8009646:	4770      	bx	lr

08009648 <__retarget_lock_release_recursive>:
 8009648:	4770      	bx	lr
	...

0800964c <_free_r>:
 800964c:	b538      	push	{r3, r4, r5, lr}
 800964e:	4605      	mov	r5, r0
 8009650:	2900      	cmp	r1, #0
 8009652:	d041      	beq.n	80096d8 <_free_r+0x8c>
 8009654:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009658:	1f0c      	subs	r4, r1, #4
 800965a:	2b00      	cmp	r3, #0
 800965c:	bfb8      	it	lt
 800965e:	18e4      	addlt	r4, r4, r3
 8009660:	f7ff fd64 	bl	800912c <__malloc_lock>
 8009664:	4a1d      	ldr	r2, [pc, #116]	@ (80096dc <_free_r+0x90>)
 8009666:	6813      	ldr	r3, [r2, #0]
 8009668:	b933      	cbnz	r3, 8009678 <_free_r+0x2c>
 800966a:	6063      	str	r3, [r4, #4]
 800966c:	6014      	str	r4, [r2, #0]
 800966e:	4628      	mov	r0, r5
 8009670:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009674:	f7ff bd60 	b.w	8009138 <__malloc_unlock>
 8009678:	42a3      	cmp	r3, r4
 800967a:	d908      	bls.n	800968e <_free_r+0x42>
 800967c:	6820      	ldr	r0, [r4, #0]
 800967e:	1821      	adds	r1, r4, r0
 8009680:	428b      	cmp	r3, r1
 8009682:	bf01      	itttt	eq
 8009684:	6819      	ldreq	r1, [r3, #0]
 8009686:	685b      	ldreq	r3, [r3, #4]
 8009688:	1809      	addeq	r1, r1, r0
 800968a:	6021      	streq	r1, [r4, #0]
 800968c:	e7ed      	b.n	800966a <_free_r+0x1e>
 800968e:	461a      	mov	r2, r3
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	b10b      	cbz	r3, 8009698 <_free_r+0x4c>
 8009694:	42a3      	cmp	r3, r4
 8009696:	d9fa      	bls.n	800968e <_free_r+0x42>
 8009698:	6811      	ldr	r1, [r2, #0]
 800969a:	1850      	adds	r0, r2, r1
 800969c:	42a0      	cmp	r0, r4
 800969e:	d10b      	bne.n	80096b8 <_free_r+0x6c>
 80096a0:	6820      	ldr	r0, [r4, #0]
 80096a2:	4401      	add	r1, r0
 80096a4:	1850      	adds	r0, r2, r1
 80096a6:	4283      	cmp	r3, r0
 80096a8:	6011      	str	r1, [r2, #0]
 80096aa:	d1e0      	bne.n	800966e <_free_r+0x22>
 80096ac:	6818      	ldr	r0, [r3, #0]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	6053      	str	r3, [r2, #4]
 80096b2:	4408      	add	r0, r1
 80096b4:	6010      	str	r0, [r2, #0]
 80096b6:	e7da      	b.n	800966e <_free_r+0x22>
 80096b8:	d902      	bls.n	80096c0 <_free_r+0x74>
 80096ba:	230c      	movs	r3, #12
 80096bc:	602b      	str	r3, [r5, #0]
 80096be:	e7d6      	b.n	800966e <_free_r+0x22>
 80096c0:	6820      	ldr	r0, [r4, #0]
 80096c2:	1821      	adds	r1, r4, r0
 80096c4:	428b      	cmp	r3, r1
 80096c6:	bf04      	itt	eq
 80096c8:	6819      	ldreq	r1, [r3, #0]
 80096ca:	685b      	ldreq	r3, [r3, #4]
 80096cc:	6063      	str	r3, [r4, #4]
 80096ce:	bf04      	itt	eq
 80096d0:	1809      	addeq	r1, r1, r0
 80096d2:	6021      	streq	r1, [r4, #0]
 80096d4:	6054      	str	r4, [r2, #4]
 80096d6:	e7ca      	b.n	800966e <_free_r+0x22>
 80096d8:	bd38      	pop	{r3, r4, r5, pc}
 80096da:	bf00      	nop
 80096dc:	200009a8 	.word	0x200009a8

080096e0 <__sflush_r>:
 80096e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80096e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096e8:	0716      	lsls	r6, r2, #28
 80096ea:	4605      	mov	r5, r0
 80096ec:	460c      	mov	r4, r1
 80096ee:	d454      	bmi.n	800979a <__sflush_r+0xba>
 80096f0:	684b      	ldr	r3, [r1, #4]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	dc02      	bgt.n	80096fc <__sflush_r+0x1c>
 80096f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	dd48      	ble.n	800978e <__sflush_r+0xae>
 80096fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80096fe:	2e00      	cmp	r6, #0
 8009700:	d045      	beq.n	800978e <__sflush_r+0xae>
 8009702:	2300      	movs	r3, #0
 8009704:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009708:	682f      	ldr	r7, [r5, #0]
 800970a:	6a21      	ldr	r1, [r4, #32]
 800970c:	602b      	str	r3, [r5, #0]
 800970e:	d030      	beq.n	8009772 <__sflush_r+0x92>
 8009710:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009712:	89a3      	ldrh	r3, [r4, #12]
 8009714:	0759      	lsls	r1, r3, #29
 8009716:	d505      	bpl.n	8009724 <__sflush_r+0x44>
 8009718:	6863      	ldr	r3, [r4, #4]
 800971a:	1ad2      	subs	r2, r2, r3
 800971c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800971e:	b10b      	cbz	r3, 8009724 <__sflush_r+0x44>
 8009720:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009722:	1ad2      	subs	r2, r2, r3
 8009724:	2300      	movs	r3, #0
 8009726:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009728:	6a21      	ldr	r1, [r4, #32]
 800972a:	4628      	mov	r0, r5
 800972c:	47b0      	blx	r6
 800972e:	1c43      	adds	r3, r0, #1
 8009730:	89a3      	ldrh	r3, [r4, #12]
 8009732:	d106      	bne.n	8009742 <__sflush_r+0x62>
 8009734:	6829      	ldr	r1, [r5, #0]
 8009736:	291d      	cmp	r1, #29
 8009738:	d82b      	bhi.n	8009792 <__sflush_r+0xb2>
 800973a:	4a2a      	ldr	r2, [pc, #168]	@ (80097e4 <__sflush_r+0x104>)
 800973c:	410a      	asrs	r2, r1
 800973e:	07d6      	lsls	r6, r2, #31
 8009740:	d427      	bmi.n	8009792 <__sflush_r+0xb2>
 8009742:	2200      	movs	r2, #0
 8009744:	6062      	str	r2, [r4, #4]
 8009746:	04d9      	lsls	r1, r3, #19
 8009748:	6922      	ldr	r2, [r4, #16]
 800974a:	6022      	str	r2, [r4, #0]
 800974c:	d504      	bpl.n	8009758 <__sflush_r+0x78>
 800974e:	1c42      	adds	r2, r0, #1
 8009750:	d101      	bne.n	8009756 <__sflush_r+0x76>
 8009752:	682b      	ldr	r3, [r5, #0]
 8009754:	b903      	cbnz	r3, 8009758 <__sflush_r+0x78>
 8009756:	6560      	str	r0, [r4, #84]	@ 0x54
 8009758:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800975a:	602f      	str	r7, [r5, #0]
 800975c:	b1b9      	cbz	r1, 800978e <__sflush_r+0xae>
 800975e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009762:	4299      	cmp	r1, r3
 8009764:	d002      	beq.n	800976c <__sflush_r+0x8c>
 8009766:	4628      	mov	r0, r5
 8009768:	f7ff ff70 	bl	800964c <_free_r>
 800976c:	2300      	movs	r3, #0
 800976e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009770:	e00d      	b.n	800978e <__sflush_r+0xae>
 8009772:	2301      	movs	r3, #1
 8009774:	4628      	mov	r0, r5
 8009776:	47b0      	blx	r6
 8009778:	4602      	mov	r2, r0
 800977a:	1c50      	adds	r0, r2, #1
 800977c:	d1c9      	bne.n	8009712 <__sflush_r+0x32>
 800977e:	682b      	ldr	r3, [r5, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d0c6      	beq.n	8009712 <__sflush_r+0x32>
 8009784:	2b1d      	cmp	r3, #29
 8009786:	d001      	beq.n	800978c <__sflush_r+0xac>
 8009788:	2b16      	cmp	r3, #22
 800978a:	d11e      	bne.n	80097ca <__sflush_r+0xea>
 800978c:	602f      	str	r7, [r5, #0]
 800978e:	2000      	movs	r0, #0
 8009790:	e022      	b.n	80097d8 <__sflush_r+0xf8>
 8009792:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009796:	b21b      	sxth	r3, r3
 8009798:	e01b      	b.n	80097d2 <__sflush_r+0xf2>
 800979a:	690f      	ldr	r7, [r1, #16]
 800979c:	2f00      	cmp	r7, #0
 800979e:	d0f6      	beq.n	800978e <__sflush_r+0xae>
 80097a0:	0793      	lsls	r3, r2, #30
 80097a2:	680e      	ldr	r6, [r1, #0]
 80097a4:	bf08      	it	eq
 80097a6:	694b      	ldreq	r3, [r1, #20]
 80097a8:	600f      	str	r7, [r1, #0]
 80097aa:	bf18      	it	ne
 80097ac:	2300      	movne	r3, #0
 80097ae:	eba6 0807 	sub.w	r8, r6, r7
 80097b2:	608b      	str	r3, [r1, #8]
 80097b4:	f1b8 0f00 	cmp.w	r8, #0
 80097b8:	dde9      	ble.n	800978e <__sflush_r+0xae>
 80097ba:	6a21      	ldr	r1, [r4, #32]
 80097bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80097be:	4643      	mov	r3, r8
 80097c0:	463a      	mov	r2, r7
 80097c2:	4628      	mov	r0, r5
 80097c4:	47b0      	blx	r6
 80097c6:	2800      	cmp	r0, #0
 80097c8:	dc08      	bgt.n	80097dc <__sflush_r+0xfc>
 80097ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097d2:	81a3      	strh	r3, [r4, #12]
 80097d4:	f04f 30ff 	mov.w	r0, #4294967295
 80097d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097dc:	4407      	add	r7, r0
 80097de:	eba8 0800 	sub.w	r8, r8, r0
 80097e2:	e7e7      	b.n	80097b4 <__sflush_r+0xd4>
 80097e4:	dfbffffe 	.word	0xdfbffffe

080097e8 <_fflush_r>:
 80097e8:	b538      	push	{r3, r4, r5, lr}
 80097ea:	690b      	ldr	r3, [r1, #16]
 80097ec:	4605      	mov	r5, r0
 80097ee:	460c      	mov	r4, r1
 80097f0:	b913      	cbnz	r3, 80097f8 <_fflush_r+0x10>
 80097f2:	2500      	movs	r5, #0
 80097f4:	4628      	mov	r0, r5
 80097f6:	bd38      	pop	{r3, r4, r5, pc}
 80097f8:	b118      	cbz	r0, 8009802 <_fflush_r+0x1a>
 80097fa:	6a03      	ldr	r3, [r0, #32]
 80097fc:	b90b      	cbnz	r3, 8009802 <_fflush_r+0x1a>
 80097fe:	f7ff fd2d 	bl	800925c <__sinit>
 8009802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d0f3      	beq.n	80097f2 <_fflush_r+0xa>
 800980a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800980c:	07d0      	lsls	r0, r2, #31
 800980e:	d404      	bmi.n	800981a <_fflush_r+0x32>
 8009810:	0599      	lsls	r1, r3, #22
 8009812:	d402      	bmi.n	800981a <_fflush_r+0x32>
 8009814:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009816:	f7ff ff16 	bl	8009646 <__retarget_lock_acquire_recursive>
 800981a:	4628      	mov	r0, r5
 800981c:	4621      	mov	r1, r4
 800981e:	f7ff ff5f 	bl	80096e0 <__sflush_r>
 8009822:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009824:	07da      	lsls	r2, r3, #31
 8009826:	4605      	mov	r5, r0
 8009828:	d4e4      	bmi.n	80097f4 <_fflush_r+0xc>
 800982a:	89a3      	ldrh	r3, [r4, #12]
 800982c:	059b      	lsls	r3, r3, #22
 800982e:	d4e1      	bmi.n	80097f4 <_fflush_r+0xc>
 8009830:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009832:	f7ff ff09 	bl	8009648 <__retarget_lock_release_recursive>
 8009836:	e7dd      	b.n	80097f4 <_fflush_r+0xc>

08009838 <__swhatbuf_r>:
 8009838:	b570      	push	{r4, r5, r6, lr}
 800983a:	460c      	mov	r4, r1
 800983c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009840:	2900      	cmp	r1, #0
 8009842:	b096      	sub	sp, #88	@ 0x58
 8009844:	4615      	mov	r5, r2
 8009846:	461e      	mov	r6, r3
 8009848:	da0d      	bge.n	8009866 <__swhatbuf_r+0x2e>
 800984a:	89a3      	ldrh	r3, [r4, #12]
 800984c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009850:	f04f 0100 	mov.w	r1, #0
 8009854:	bf14      	ite	ne
 8009856:	2340      	movne	r3, #64	@ 0x40
 8009858:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800985c:	2000      	movs	r0, #0
 800985e:	6031      	str	r1, [r6, #0]
 8009860:	602b      	str	r3, [r5, #0]
 8009862:	b016      	add	sp, #88	@ 0x58
 8009864:	bd70      	pop	{r4, r5, r6, pc}
 8009866:	466a      	mov	r2, sp
 8009868:	f000 f848 	bl	80098fc <_fstat_r>
 800986c:	2800      	cmp	r0, #0
 800986e:	dbec      	blt.n	800984a <__swhatbuf_r+0x12>
 8009870:	9901      	ldr	r1, [sp, #4]
 8009872:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009876:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800987a:	4259      	negs	r1, r3
 800987c:	4159      	adcs	r1, r3
 800987e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009882:	e7eb      	b.n	800985c <__swhatbuf_r+0x24>

08009884 <__smakebuf_r>:
 8009884:	898b      	ldrh	r3, [r1, #12]
 8009886:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009888:	079d      	lsls	r5, r3, #30
 800988a:	4606      	mov	r6, r0
 800988c:	460c      	mov	r4, r1
 800988e:	d507      	bpl.n	80098a0 <__smakebuf_r+0x1c>
 8009890:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009894:	6023      	str	r3, [r4, #0]
 8009896:	6123      	str	r3, [r4, #16]
 8009898:	2301      	movs	r3, #1
 800989a:	6163      	str	r3, [r4, #20]
 800989c:	b003      	add	sp, #12
 800989e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098a0:	ab01      	add	r3, sp, #4
 80098a2:	466a      	mov	r2, sp
 80098a4:	f7ff ffc8 	bl	8009838 <__swhatbuf_r>
 80098a8:	9f00      	ldr	r7, [sp, #0]
 80098aa:	4605      	mov	r5, r0
 80098ac:	4639      	mov	r1, r7
 80098ae:	4630      	mov	r0, r6
 80098b0:	f7ff fbbc 	bl	800902c <_malloc_r>
 80098b4:	b948      	cbnz	r0, 80098ca <__smakebuf_r+0x46>
 80098b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098ba:	059a      	lsls	r2, r3, #22
 80098bc:	d4ee      	bmi.n	800989c <__smakebuf_r+0x18>
 80098be:	f023 0303 	bic.w	r3, r3, #3
 80098c2:	f043 0302 	orr.w	r3, r3, #2
 80098c6:	81a3      	strh	r3, [r4, #12]
 80098c8:	e7e2      	b.n	8009890 <__smakebuf_r+0xc>
 80098ca:	89a3      	ldrh	r3, [r4, #12]
 80098cc:	6020      	str	r0, [r4, #0]
 80098ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098d2:	81a3      	strh	r3, [r4, #12]
 80098d4:	9b01      	ldr	r3, [sp, #4]
 80098d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80098da:	b15b      	cbz	r3, 80098f4 <__smakebuf_r+0x70>
 80098dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098e0:	4630      	mov	r0, r6
 80098e2:	f000 f81d 	bl	8009920 <_isatty_r>
 80098e6:	b128      	cbz	r0, 80098f4 <__smakebuf_r+0x70>
 80098e8:	89a3      	ldrh	r3, [r4, #12]
 80098ea:	f023 0303 	bic.w	r3, r3, #3
 80098ee:	f043 0301 	orr.w	r3, r3, #1
 80098f2:	81a3      	strh	r3, [r4, #12]
 80098f4:	89a3      	ldrh	r3, [r4, #12]
 80098f6:	431d      	orrs	r5, r3
 80098f8:	81a5      	strh	r5, [r4, #12]
 80098fa:	e7cf      	b.n	800989c <__smakebuf_r+0x18>

080098fc <_fstat_r>:
 80098fc:	b538      	push	{r3, r4, r5, lr}
 80098fe:	4d07      	ldr	r5, [pc, #28]	@ (800991c <_fstat_r+0x20>)
 8009900:	2300      	movs	r3, #0
 8009902:	4604      	mov	r4, r0
 8009904:	4608      	mov	r0, r1
 8009906:	4611      	mov	r1, r2
 8009908:	602b      	str	r3, [r5, #0]
 800990a:	f7f7 f9ae 	bl	8000c6a <_fstat>
 800990e:	1c43      	adds	r3, r0, #1
 8009910:	d102      	bne.n	8009918 <_fstat_r+0x1c>
 8009912:	682b      	ldr	r3, [r5, #0]
 8009914:	b103      	cbz	r3, 8009918 <_fstat_r+0x1c>
 8009916:	6023      	str	r3, [r4, #0]
 8009918:	bd38      	pop	{r3, r4, r5, pc}
 800991a:	bf00      	nop
 800991c:	20000ae8 	.word	0x20000ae8

08009920 <_isatty_r>:
 8009920:	b538      	push	{r3, r4, r5, lr}
 8009922:	4d06      	ldr	r5, [pc, #24]	@ (800993c <_isatty_r+0x1c>)
 8009924:	2300      	movs	r3, #0
 8009926:	4604      	mov	r4, r0
 8009928:	4608      	mov	r0, r1
 800992a:	602b      	str	r3, [r5, #0]
 800992c:	f7f7 f9ad 	bl	8000c8a <_isatty>
 8009930:	1c43      	adds	r3, r0, #1
 8009932:	d102      	bne.n	800993a <_isatty_r+0x1a>
 8009934:	682b      	ldr	r3, [r5, #0]
 8009936:	b103      	cbz	r3, 800993a <_isatty_r+0x1a>
 8009938:	6023      	str	r3, [r4, #0]
 800993a:	bd38      	pop	{r3, r4, r5, pc}
 800993c:	20000ae8 	.word	0x20000ae8

08009940 <_init>:
 8009940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009942:	bf00      	nop
 8009944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009946:	bc08      	pop	{r3}
 8009948:	469e      	mov	lr, r3
 800994a:	4770      	bx	lr

0800994c <_fini>:
 800994c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800994e:	bf00      	nop
 8009950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009952:	bc08      	pop	{r3}
 8009954:	469e      	mov	lr, r3
 8009956:	4770      	bx	lr
