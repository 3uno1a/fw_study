
f407_discovery_base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf58  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  0800d0e8  0800d0e8  0000e0e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d380  0800d380  0000f088  2**0
                  CONTENTS
  4 .ARM          00000008  0800d380  0800d380  0000e380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d388  0800d388  0000f088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d388  0800d388  0000e388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d38c  0800d38c  0000e38c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800d390  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f088  2**0
                  CONTENTS
 10 .bss          00000cc8  20000088  20000088  0000f088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000d50  20000d50  0000f088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b138  00000000  00000000  0000f0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000049bb  00000000  00000000  0002a1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001580  00000000  00000000  0002ebb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001069  00000000  00000000  00030130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002612e  00000000  00000000  00031199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fb93  00000000  00000000  000572c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d07f5  00000000  00000000  00076e5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014764f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006350  00000000  00000000  00147694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  0014d9e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d0d0 	.word	0x0800d0d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800d0d0 	.word	0x0800d0d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b80:	f000 b96a 	b.w	8000e58 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	460c      	mov	r4, r1
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d14e      	bne.n	8000c46 <__udivmoddi4+0xaa>
 8000ba8:	4694      	mov	ip, r2
 8000baa:	458c      	cmp	ip, r1
 8000bac:	4686      	mov	lr, r0
 8000bae:	fab2 f282 	clz	r2, r2
 8000bb2:	d962      	bls.n	8000c7a <__udivmoddi4+0xde>
 8000bb4:	b14a      	cbz	r2, 8000bca <__udivmoddi4+0x2e>
 8000bb6:	f1c2 0320 	rsb	r3, r2, #32
 8000bba:	4091      	lsls	r1, r2
 8000bbc:	fa20 f303 	lsr.w	r3, r0, r3
 8000bc0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bc4:	4319      	orrs	r1, r3
 8000bc6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bce:	fa1f f68c 	uxth.w	r6, ip
 8000bd2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bd6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bda:	fb07 1114 	mls	r1, r7, r4, r1
 8000bde:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be2:	fb04 f106 	mul.w	r1, r4, r6
 8000be6:	4299      	cmp	r1, r3
 8000be8:	d90a      	bls.n	8000c00 <__udivmoddi4+0x64>
 8000bea:	eb1c 0303 	adds.w	r3, ip, r3
 8000bee:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bf2:	f080 8112 	bcs.w	8000e1a <__udivmoddi4+0x27e>
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	f240 810f 	bls.w	8000e1a <__udivmoddi4+0x27e>
 8000bfc:	3c02      	subs	r4, #2
 8000bfe:	4463      	add	r3, ip
 8000c00:	1a59      	subs	r1, r3, r1
 8000c02:	fa1f f38e 	uxth.w	r3, lr
 8000c06:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c0a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c12:	fb00 f606 	mul.w	r6, r0, r6
 8000c16:	429e      	cmp	r6, r3
 8000c18:	d90a      	bls.n	8000c30 <__udivmoddi4+0x94>
 8000c1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c22:	f080 80fc 	bcs.w	8000e1e <__udivmoddi4+0x282>
 8000c26:	429e      	cmp	r6, r3
 8000c28:	f240 80f9 	bls.w	8000e1e <__udivmoddi4+0x282>
 8000c2c:	4463      	add	r3, ip
 8000c2e:	3802      	subs	r0, #2
 8000c30:	1b9b      	subs	r3, r3, r6
 8000c32:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c36:	2100      	movs	r1, #0
 8000c38:	b11d      	cbz	r5, 8000c42 <__udivmoddi4+0xa6>
 8000c3a:	40d3      	lsrs	r3, r2
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	428b      	cmp	r3, r1
 8000c48:	d905      	bls.n	8000c56 <__udivmoddi4+0xba>
 8000c4a:	b10d      	cbz	r5, 8000c50 <__udivmoddi4+0xb4>
 8000c4c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c50:	2100      	movs	r1, #0
 8000c52:	4608      	mov	r0, r1
 8000c54:	e7f5      	b.n	8000c42 <__udivmoddi4+0xa6>
 8000c56:	fab3 f183 	clz	r1, r3
 8000c5a:	2900      	cmp	r1, #0
 8000c5c:	d146      	bne.n	8000cec <__udivmoddi4+0x150>
 8000c5e:	42a3      	cmp	r3, r4
 8000c60:	d302      	bcc.n	8000c68 <__udivmoddi4+0xcc>
 8000c62:	4290      	cmp	r0, r2
 8000c64:	f0c0 80f0 	bcc.w	8000e48 <__udivmoddi4+0x2ac>
 8000c68:	1a86      	subs	r6, r0, r2
 8000c6a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c6e:	2001      	movs	r0, #1
 8000c70:	2d00      	cmp	r5, #0
 8000c72:	d0e6      	beq.n	8000c42 <__udivmoddi4+0xa6>
 8000c74:	e9c5 6300 	strd	r6, r3, [r5]
 8000c78:	e7e3      	b.n	8000c42 <__udivmoddi4+0xa6>
 8000c7a:	2a00      	cmp	r2, #0
 8000c7c:	f040 8090 	bne.w	8000da0 <__udivmoddi4+0x204>
 8000c80:	eba1 040c 	sub.w	r4, r1, ip
 8000c84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c88:	fa1f f78c 	uxth.w	r7, ip
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c96:	fb08 4416 	mls	r4, r8, r6, r4
 8000c9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c9e:	fb07 f006 	mul.w	r0, r7, r6
 8000ca2:	4298      	cmp	r0, r3
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x11c>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x11a>
 8000cb0:	4298      	cmp	r0, r3
 8000cb2:	f200 80cd 	bhi.w	8000e50 <__udivmoddi4+0x2b4>
 8000cb6:	4626      	mov	r6, r4
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	fa1f f38e 	uxth.w	r3, lr
 8000cbe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cc2:	fb08 4410 	mls	r4, r8, r0, r4
 8000cc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cca:	fb00 f707 	mul.w	r7, r0, r7
 8000cce:	429f      	cmp	r7, r3
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x148>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x146>
 8000cdc:	429f      	cmp	r7, r3
 8000cde:	f200 80b0 	bhi.w	8000e42 <__udivmoddi4+0x2a6>
 8000ce2:	4620      	mov	r0, r4
 8000ce4:	1bdb      	subs	r3, r3, r7
 8000ce6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cea:	e7a5      	b.n	8000c38 <__udivmoddi4+0x9c>
 8000cec:	f1c1 0620 	rsb	r6, r1, #32
 8000cf0:	408b      	lsls	r3, r1
 8000cf2:	fa22 f706 	lsr.w	r7, r2, r6
 8000cf6:	431f      	orrs	r7, r3
 8000cf8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cfc:	fa04 f301 	lsl.w	r3, r4, r1
 8000d00:	ea43 030c 	orr.w	r3, r3, ip
 8000d04:	40f4      	lsrs	r4, r6
 8000d06:	fa00 f801 	lsl.w	r8, r0, r1
 8000d0a:	0c38      	lsrs	r0, r7, #16
 8000d0c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d10:	fbb4 fef0 	udiv	lr, r4, r0
 8000d14:	fa1f fc87 	uxth.w	ip, r7
 8000d18:	fb00 441e 	mls	r4, r0, lr, r4
 8000d1c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d20:	fb0e f90c 	mul.w	r9, lr, ip
 8000d24:	45a1      	cmp	r9, r4
 8000d26:	fa02 f201 	lsl.w	r2, r2, r1
 8000d2a:	d90a      	bls.n	8000d42 <__udivmoddi4+0x1a6>
 8000d2c:	193c      	adds	r4, r7, r4
 8000d2e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d32:	f080 8084 	bcs.w	8000e3e <__udivmoddi4+0x2a2>
 8000d36:	45a1      	cmp	r9, r4
 8000d38:	f240 8081 	bls.w	8000e3e <__udivmoddi4+0x2a2>
 8000d3c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d40:	443c      	add	r4, r7
 8000d42:	eba4 0409 	sub.w	r4, r4, r9
 8000d46:	fa1f f983 	uxth.w	r9, r3
 8000d4a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d4e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d52:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d56:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	d907      	bls.n	8000d6e <__udivmoddi4+0x1d2>
 8000d5e:	193c      	adds	r4, r7, r4
 8000d60:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d64:	d267      	bcs.n	8000e36 <__udivmoddi4+0x29a>
 8000d66:	45a4      	cmp	ip, r4
 8000d68:	d965      	bls.n	8000e36 <__udivmoddi4+0x29a>
 8000d6a:	3b02      	subs	r3, #2
 8000d6c:	443c      	add	r4, r7
 8000d6e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d72:	fba0 9302 	umull	r9, r3, r0, r2
 8000d76:	eba4 040c 	sub.w	r4, r4, ip
 8000d7a:	429c      	cmp	r4, r3
 8000d7c:	46ce      	mov	lr, r9
 8000d7e:	469c      	mov	ip, r3
 8000d80:	d351      	bcc.n	8000e26 <__udivmoddi4+0x28a>
 8000d82:	d04e      	beq.n	8000e22 <__udivmoddi4+0x286>
 8000d84:	b155      	cbz	r5, 8000d9c <__udivmoddi4+0x200>
 8000d86:	ebb8 030e 	subs.w	r3, r8, lr
 8000d8a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d8e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d92:	40cb      	lsrs	r3, r1
 8000d94:	431e      	orrs	r6, r3
 8000d96:	40cc      	lsrs	r4, r1
 8000d98:	e9c5 6400 	strd	r6, r4, [r5]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	e750      	b.n	8000c42 <__udivmoddi4+0xa6>
 8000da0:	f1c2 0320 	rsb	r3, r2, #32
 8000da4:	fa20 f103 	lsr.w	r1, r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	fa24 f303 	lsr.w	r3, r4, r3
 8000db0:	4094      	lsls	r4, r2
 8000db2:	430c      	orrs	r4, r1
 8000db4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dbc:	fa1f f78c 	uxth.w	r7, ip
 8000dc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc4:	fb08 3110 	mls	r1, r8, r0, r3
 8000dc8:	0c23      	lsrs	r3, r4, #16
 8000dca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dce:	fb00 f107 	mul.w	r1, r0, r7
 8000dd2:	4299      	cmp	r1, r3
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x24c>
 8000dd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dda:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dde:	d22c      	bcs.n	8000e3a <__udivmoddi4+0x29e>
 8000de0:	4299      	cmp	r1, r3
 8000de2:	d92a      	bls.n	8000e3a <__udivmoddi4+0x29e>
 8000de4:	3802      	subs	r0, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	fbb3 f1f8 	udiv	r1, r3, r8
 8000df0:	fb08 3311 	mls	r3, r8, r1, r3
 8000df4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df8:	fb01 f307 	mul.w	r3, r1, r7
 8000dfc:	42a3      	cmp	r3, r4
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x276>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e08:	d213      	bcs.n	8000e32 <__udivmoddi4+0x296>
 8000e0a:	42a3      	cmp	r3, r4
 8000e0c:	d911      	bls.n	8000e32 <__udivmoddi4+0x296>
 8000e0e:	3902      	subs	r1, #2
 8000e10:	4464      	add	r4, ip
 8000e12:	1ae4      	subs	r4, r4, r3
 8000e14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e18:	e739      	b.n	8000c8e <__udivmoddi4+0xf2>
 8000e1a:	4604      	mov	r4, r0
 8000e1c:	e6f0      	b.n	8000c00 <__udivmoddi4+0x64>
 8000e1e:	4608      	mov	r0, r1
 8000e20:	e706      	b.n	8000c30 <__udivmoddi4+0x94>
 8000e22:	45c8      	cmp	r8, r9
 8000e24:	d2ae      	bcs.n	8000d84 <__udivmoddi4+0x1e8>
 8000e26:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e2a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e2e:	3801      	subs	r0, #1
 8000e30:	e7a8      	b.n	8000d84 <__udivmoddi4+0x1e8>
 8000e32:	4631      	mov	r1, r6
 8000e34:	e7ed      	b.n	8000e12 <__udivmoddi4+0x276>
 8000e36:	4603      	mov	r3, r0
 8000e38:	e799      	b.n	8000d6e <__udivmoddi4+0x1d2>
 8000e3a:	4630      	mov	r0, r6
 8000e3c:	e7d4      	b.n	8000de8 <__udivmoddi4+0x24c>
 8000e3e:	46d6      	mov	lr, sl
 8000e40:	e77f      	b.n	8000d42 <__udivmoddi4+0x1a6>
 8000e42:	4463      	add	r3, ip
 8000e44:	3802      	subs	r0, #2
 8000e46:	e74d      	b.n	8000ce4 <__udivmoddi4+0x148>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	4623      	mov	r3, r4
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	e70f      	b.n	8000c70 <__udivmoddi4+0xd4>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	e730      	b.n	8000cb8 <__udivmoddi4+0x11c>
 8000e56:	bf00      	nop

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	4b0c      	ldr	r3, [pc, #48]	@ (8000e98 <MX_DMA_Init+0x3c>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	4a0b      	ldr	r2, [pc, #44]	@ (8000e98 <MX_DMA_Init+0x3c>)
 8000e6c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e72:	4b09      	ldr	r3, [pc, #36]	@ (8000e98 <MX_DMA_Init+0x3c>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2100      	movs	r1, #0
 8000e82:	2010      	movs	r0, #16
 8000e84:	f001 f831 	bl	8001eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000e88:	2010      	movs	r0, #16
 8000e8a:	f001 f84a 	bl	8001f22 <HAL_NVIC_EnableIRQ>

}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40023800 	.word	0x40023800

08000e9c <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08c      	sub	sp, #48	@ 0x30
 8000ea0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea2:	f107 031c 	add.w	r3, r7, #28
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
 8000eb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61bb      	str	r3, [r7, #24]
 8000eb6:	4b7b      	ldr	r3, [pc, #492]	@ (80010a4 <MX_GPIO_Init+0x208>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	4a7a      	ldr	r2, [pc, #488]	@ (80010a4 <MX_GPIO_Init+0x208>)
 8000ebc:	f043 0310 	orr.w	r3, r3, #16
 8000ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec2:	4b78      	ldr	r3, [pc, #480]	@ (80010a4 <MX_GPIO_Init+0x208>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	f003 0310 	and.w	r3, r3, #16
 8000eca:	61bb      	str	r3, [r7, #24]
 8000ecc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
 8000ed2:	4b74      	ldr	r3, [pc, #464]	@ (80010a4 <MX_GPIO_Init+0x208>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	4a73      	ldr	r2, [pc, #460]	@ (80010a4 <MX_GPIO_Init+0x208>)
 8000ed8:	f043 0304 	orr.w	r3, r3, #4
 8000edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ede:	4b71      	ldr	r3, [pc, #452]	@ (80010a4 <MX_GPIO_Init+0x208>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	f003 0304 	and.w	r3, r3, #4
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
 8000eee:	4b6d      	ldr	r3, [pc, #436]	@ (80010a4 <MX_GPIO_Init+0x208>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	4a6c      	ldr	r2, [pc, #432]	@ (80010a4 <MX_GPIO_Init+0x208>)
 8000ef4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efa:	4b6a      	ldr	r3, [pc, #424]	@ (80010a4 <MX_GPIO_Init+0x208>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	4b66      	ldr	r3, [pc, #408]	@ (80010a4 <MX_GPIO_Init+0x208>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	4a65      	ldr	r2, [pc, #404]	@ (80010a4 <MX_GPIO_Init+0x208>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f16:	4b63      	ldr	r3, [pc, #396]	@ (80010a4 <MX_GPIO_Init+0x208>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	4b5f      	ldr	r3, [pc, #380]	@ (80010a4 <MX_GPIO_Init+0x208>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	4a5e      	ldr	r2, [pc, #376]	@ (80010a4 <MX_GPIO_Init+0x208>)
 8000f2c:	f043 0302 	orr.w	r3, r3, #2
 8000f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f32:	4b5c      	ldr	r3, [pc, #368]	@ (80010a4 <MX_GPIO_Init+0x208>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	607b      	str	r3, [r7, #4]
 8000f42:	4b58      	ldr	r3, [pc, #352]	@ (80010a4 <MX_GPIO_Init+0x208>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	4a57      	ldr	r2, [pc, #348]	@ (80010a4 <MX_GPIO_Init+0x208>)
 8000f48:	f043 0308 	orr.w	r3, r3, #8
 8000f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4e:	4b55      	ldr	r3, [pc, #340]	@ (80010a4 <MX_GPIO_Init+0x208>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	f003 0308 	and.w	r3, r3, #8
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2108      	movs	r1, #8
 8000f5e:	4852      	ldr	r0, [pc, #328]	@ (80010a8 <MX_GPIO_Init+0x20c>)
 8000f60:	f001 fc98 	bl	8002894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000f64:	2201      	movs	r2, #1
 8000f66:	2101      	movs	r1, #1
 8000f68:	4850      	ldr	r0, [pc, #320]	@ (80010ac <MX_GPIO_Init+0x210>)
 8000f6a:	f001 fc93 	bl	8002894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000f74:	484e      	ldr	r0, [pc, #312]	@ (80010b0 <MX_GPIO_Init+0x214>)
 8000f76:	f001 fc8d 	bl	8002894 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2120      	movs	r1, #32
 8000f7e:	484d      	ldr	r0, [pc, #308]	@ (80010b4 <MX_GPIO_Init+0x218>)
 8000f80:	f001 fc88 	bl	8002894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000f84:	2308      	movs	r3, #8
 8000f86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4843      	ldr	r0, [pc, #268]	@ (80010a8 <MX_GPIO_Init+0x20c>)
 8000f9c:	f001 fac6 	bl	800252c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000fb0:	f107 031c 	add.w	r3, r7, #28
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	483d      	ldr	r0, [pc, #244]	@ (80010ac <MX_GPIO_Init+0x210>)
 8000fb8:	f001 fab8 	bl	800252c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000fbc:	2308      	movs	r3, #8
 8000fbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fcc:	2305      	movs	r3, #5
 8000fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4835      	ldr	r0, [pc, #212]	@ (80010ac <MX_GPIO_Init+0x210>)
 8000fd8:	f001 faa8 	bl	800252c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe8:	f107 031c 	add.w	r3, r7, #28
 8000fec:	4619      	mov	r1, r3
 8000fee:	4832      	ldr	r0, [pc, #200]	@ (80010b8 <MX_GPIO_Init+0x21c>)
 8000ff0:	f001 fa9c 	bl	800252c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ff4:	2304      	movs	r3, #4
 8000ff6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001000:	f107 031c 	add.w	r3, r7, #28
 8001004:	4619      	mov	r1, r3
 8001006:	482b      	ldr	r0, [pc, #172]	@ (80010b4 <MX_GPIO_Init+0x218>)
 8001008:	f001 fa90 	bl	800252c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800100c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001010:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	2302      	movs	r3, #2
 8001014:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800101e:	2305      	movs	r3, #5
 8001020:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001022:	f107 031c 	add.w	r3, r7, #28
 8001026:	4619      	mov	r1, r3
 8001028:	4822      	ldr	r0, [pc, #136]	@ (80010b4 <MX_GPIO_Init+0x218>)
 800102a:	f001 fa7f 	bl	800252c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800102e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001032:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001034:	2301      	movs	r3, #1
 8001036:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2300      	movs	r3, #0
 800103e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001040:	f107 031c 	add.w	r3, r7, #28
 8001044:	4619      	mov	r1, r3
 8001046:	481a      	ldr	r0, [pc, #104]	@ (80010b0 <MX_GPIO_Init+0x214>)
 8001048:	f001 fa70 	bl	800252c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800104c:	2320      	movs	r3, #32
 800104e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001050:	2300      	movs	r3, #0
 8001052:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001058:	f107 031c 	add.w	r3, r7, #28
 800105c:	4619      	mov	r1, r3
 800105e:	4814      	ldr	r0, [pc, #80]	@ (80010b0 <MX_GPIO_Init+0x214>)
 8001060:	f001 fa64 	bl	800252c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001064:	2320      	movs	r3, #32
 8001066:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001068:	2301      	movs	r3, #1
 800106a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	2300      	movs	r3, #0
 8001072:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	4619      	mov	r1, r3
 800107a:	480e      	ldr	r0, [pc, #56]	@ (80010b4 <MX_GPIO_Init+0x218>)
 800107c:	f001 fa56 	bl	800252c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001080:	2302      	movs	r3, #2
 8001082:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001084:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001088:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800108e:	f107 031c 	add.w	r3, r7, #28
 8001092:	4619      	mov	r1, r3
 8001094:	4804      	ldr	r0, [pc, #16]	@ (80010a8 <MX_GPIO_Init+0x20c>)
 8001096:	f001 fa49 	bl	800252c <HAL_GPIO_Init>

}
 800109a:	bf00      	nop
 800109c:	3730      	adds	r7, #48	@ 0x30
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40021000 	.word	0x40021000
 80010ac:	40020800 	.word	0x40020800
 80010b0:	40020c00 	.word	0x40020c00
 80010b4:	40020400 	.word	0x40020400
 80010b8:	40020000 	.word	0x40020000

080010bc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010c0:	4b12      	ldr	r3, [pc, #72]	@ (800110c <MX_I2C1_Init+0x50>)
 80010c2:	4a13      	ldr	r2, [pc, #76]	@ (8001110 <MX_I2C1_Init+0x54>)
 80010c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010c6:	4b11      	ldr	r3, [pc, #68]	@ (800110c <MX_I2C1_Init+0x50>)
 80010c8:	4a12      	ldr	r2, [pc, #72]	@ (8001114 <MX_I2C1_Init+0x58>)
 80010ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010cc:	4b0f      	ldr	r3, [pc, #60]	@ (800110c <MX_I2C1_Init+0x50>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010d2:	4b0e      	ldr	r3, [pc, #56]	@ (800110c <MX_I2C1_Init+0x50>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010d8:	4b0c      	ldr	r3, [pc, #48]	@ (800110c <MX_I2C1_Init+0x50>)
 80010da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e0:	4b0a      	ldr	r3, [pc, #40]	@ (800110c <MX_I2C1_Init+0x50>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010e6:	4b09      	ldr	r3, [pc, #36]	@ (800110c <MX_I2C1_Init+0x50>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ec:	4b07      	ldr	r3, [pc, #28]	@ (800110c <MX_I2C1_Init+0x50>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f2:	4b06      	ldr	r3, [pc, #24]	@ (800110c <MX_I2C1_Init+0x50>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010f8:	4804      	ldr	r0, [pc, #16]	@ (800110c <MX_I2C1_Init+0x50>)
 80010fa:	f003 fd33 	bl	8004b64 <HAL_I2C_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001104:	f000 fb5a 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	200000a4 	.word	0x200000a4
 8001110:	40005400 	.word	0x40005400
 8001114:	000186a0 	.word	0x000186a0

08001118 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08a      	sub	sp, #40	@ 0x28
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a19      	ldr	r2, [pc, #100]	@ (800119c <HAL_I2C_MspInit+0x84>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d12c      	bne.n	8001194 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	4b18      	ldr	r3, [pc, #96]	@ (80011a0 <HAL_I2C_MspInit+0x88>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	4a17      	ldr	r2, [pc, #92]	@ (80011a0 <HAL_I2C_MspInit+0x88>)
 8001144:	f043 0302 	orr.w	r3, r3, #2
 8001148:	6313      	str	r3, [r2, #48]	@ 0x30
 800114a:	4b15      	ldr	r3, [pc, #84]	@ (80011a0 <HAL_I2C_MspInit+0x88>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001156:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800115a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800115c:	2312      	movs	r3, #18
 800115e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001160:	2301      	movs	r3, #1
 8001162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001168:	2304      	movs	r3, #4
 800116a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	4619      	mov	r1, r3
 8001172:	480c      	ldr	r0, [pc, #48]	@ (80011a4 <HAL_I2C_MspInit+0x8c>)
 8001174:	f001 f9da 	bl	800252c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	4b08      	ldr	r3, [pc, #32]	@ (80011a0 <HAL_I2C_MspInit+0x88>)
 800117e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001180:	4a07      	ldr	r2, [pc, #28]	@ (80011a0 <HAL_I2C_MspInit+0x88>)
 8001182:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001186:	6413      	str	r3, [r2, #64]	@ 0x40
 8001188:	4b05      	ldr	r3, [pc, #20]	@ (80011a0 <HAL_I2C_MspInit+0x88>)
 800118a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001194:	bf00      	nop
 8001196:	3728      	adds	r7, #40	@ 0x28
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40005400 	.word	0x40005400
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40020400 	.word	0x40020400

080011a8 <MX_I2S3_Init>:
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80011ac:	4b13      	ldr	r3, [pc, #76]	@ (80011fc <MX_I2S3_Init+0x54>)
 80011ae:	4a14      	ldr	r2, [pc, #80]	@ (8001200 <MX_I2S3_Init+0x58>)
 80011b0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80011b2:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <MX_I2S3_Init+0x54>)
 80011b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011b8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80011ba:	4b10      	ldr	r3, [pc, #64]	@ (80011fc <MX_I2S3_Init+0x54>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80011c0:	4b0e      	ldr	r3, [pc, #56]	@ (80011fc <MX_I2S3_Init+0x54>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80011c6:	4b0d      	ldr	r3, [pc, #52]	@ (80011fc <MX_I2S3_Init+0x54>)
 80011c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011cc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80011ce:	4b0b      	ldr	r3, [pc, #44]	@ (80011fc <MX_I2S3_Init+0x54>)
 80011d0:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80011d4:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80011d6:	4b09      	ldr	r3, [pc, #36]	@ (80011fc <MX_I2S3_Init+0x54>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80011dc:	4b07      	ldr	r3, [pc, #28]	@ (80011fc <MX_I2S3_Init+0x54>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80011e2:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <MX_I2S3_Init+0x54>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80011e8:	4804      	ldr	r0, [pc, #16]	@ (80011fc <MX_I2S3_Init+0x54>)
 80011ea:	f004 f969 	bl	80054c0 <HAL_I2S_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 80011f4:	f000 fae2 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	200000f8 	.word	0x200000f8
 8001200:	40003c00 	.word	0x40003c00

08001204 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08e      	sub	sp, #56	@ 0x38
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a51      	ldr	r2, [pc, #324]	@ (8001374 <HAL_I2S_MspInit+0x170>)
 8001230:	4293      	cmp	r3, r2
 8001232:	f040 809a 	bne.w	800136a <HAL_I2S_MspInit+0x166>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001236:	2301      	movs	r3, #1
 8001238:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800123a:	23c0      	movs	r3, #192	@ 0xc0
 800123c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800123e:	2302      	movs	r3, #2
 8001240:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4618      	mov	r0, r3
 8001248:	f005 fa72 	bl	8006730 <HAL_RCCEx_PeriphCLKConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001252:	f000 fab3 	bl	80017bc <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	4b47      	ldr	r3, [pc, #284]	@ (8001378 <HAL_I2S_MspInit+0x174>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125e:	4a46      	ldr	r2, [pc, #280]	@ (8001378 <HAL_I2S_MspInit+0x174>)
 8001260:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001264:	6413      	str	r3, [r2, #64]	@ 0x40
 8001266:	4b44      	ldr	r3, [pc, #272]	@ (8001378 <HAL_I2S_MspInit+0x174>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	4b40      	ldr	r3, [pc, #256]	@ (8001378 <HAL_I2S_MspInit+0x174>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	4a3f      	ldr	r2, [pc, #252]	@ (8001378 <HAL_I2S_MspInit+0x174>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	6313      	str	r3, [r2, #48]	@ 0x30
 8001282:	4b3d      	ldr	r3, [pc, #244]	@ (8001378 <HAL_I2S_MspInit+0x174>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	4b39      	ldr	r3, [pc, #228]	@ (8001378 <HAL_I2S_MspInit+0x174>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	4a38      	ldr	r2, [pc, #224]	@ (8001378 <HAL_I2S_MspInit+0x174>)
 8001298:	f043 0304 	orr.w	r3, r3, #4
 800129c:	6313      	str	r3, [r2, #48]	@ 0x30
 800129e:	4b36      	ldr	r3, [pc, #216]	@ (8001378 <HAL_I2S_MspInit+0x174>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	f003 0304 	and.w	r3, r3, #4
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC11     ------> I2S3_ext_SD
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80012aa:	2310      	movs	r3, #16
 80012ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012ba:	2306      	movs	r3, #6
 80012bc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80012be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012c2:	4619      	mov	r1, r3
 80012c4:	482d      	ldr	r0, [pc, #180]	@ (800137c <HAL_I2S_MspInit+0x178>)
 80012c6:	f001 f931 	bl	800252c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80012ca:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80012ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012dc:	2306      	movs	r3, #6
 80012de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012e4:	4619      	mov	r1, r3
 80012e6:	4826      	ldr	r0, [pc, #152]	@ (8001380 <HAL_I2S_MspInit+0x17c>)
 80012e8:	f001 f920 	bl	800252c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80012ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80012f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	2302      	movs	r3, #2
 80012f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2300      	movs	r3, #0
 80012fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_I2S3ext;
 80012fe:	2305      	movs	r3, #5
 8001300:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001302:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001306:	4619      	mov	r1, r3
 8001308:	481d      	ldr	r0, [pc, #116]	@ (8001380 <HAL_I2S_MspInit+0x17c>)
 800130a:	f001 f90f 	bl	800252c <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 800130e:	4b1d      	ldr	r3, [pc, #116]	@ (8001384 <HAL_I2S_MspInit+0x180>)
 8001310:	4a1d      	ldr	r2, [pc, #116]	@ (8001388 <HAL_I2S_MspInit+0x184>)
 8001312:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001314:	4b1b      	ldr	r3, [pc, #108]	@ (8001384 <HAL_I2S_MspInit+0x180>)
 8001316:	2200      	movs	r2, #0
 8001318:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800131a:	4b1a      	ldr	r3, [pc, #104]	@ (8001384 <HAL_I2S_MspInit+0x180>)
 800131c:	2240      	movs	r2, #64	@ 0x40
 800131e:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001320:	4b18      	ldr	r3, [pc, #96]	@ (8001384 <HAL_I2S_MspInit+0x180>)
 8001322:	2200      	movs	r2, #0
 8001324:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001326:	4b17      	ldr	r3, [pc, #92]	@ (8001384 <HAL_I2S_MspInit+0x180>)
 8001328:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800132c:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800132e:	4b15      	ldr	r3, [pc, #84]	@ (8001384 <HAL_I2S_MspInit+0x180>)
 8001330:	2200      	movs	r2, #0
 8001332:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001334:	4b13      	ldr	r3, [pc, #76]	@ (8001384 <HAL_I2S_MspInit+0x180>)
 8001336:	2200      	movs	r2, #0
 8001338:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 800133a:	4b12      	ldr	r3, [pc, #72]	@ (8001384 <HAL_I2S_MspInit+0x180>)
 800133c:	2200      	movs	r2, #0
 800133e:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001340:	4b10      	ldr	r3, [pc, #64]	@ (8001384 <HAL_I2S_MspInit+0x180>)
 8001342:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001346:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001348:	4b0e      	ldr	r3, [pc, #56]	@ (8001384 <HAL_I2S_MspInit+0x180>)
 800134a:	2200      	movs	r2, #0
 800134c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800134e:	480d      	ldr	r0, [pc, #52]	@ (8001384 <HAL_I2S_MspInit+0x180>)
 8001350:	f000 fe02 	bl	8001f58 <HAL_DMA_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_I2S_MspInit+0x15a>
    {
      Error_Handler();
 800135a:	f000 fa2f 	bl	80017bc <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a08      	ldr	r2, [pc, #32]	@ (8001384 <HAL_I2S_MspInit+0x180>)
 8001362:	639a      	str	r2, [r3, #56]	@ 0x38
 8001364:	4a07      	ldr	r2, [pc, #28]	@ (8001384 <HAL_I2S_MspInit+0x180>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800136a:	bf00      	nop
 800136c:	3738      	adds	r7, #56	@ 0x38
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40003c00 	.word	0x40003c00
 8001378:	40023800 	.word	0x40023800
 800137c:	40020000 	.word	0x40020000
 8001380:	40020800 	.word	0x40020800
 8001384:	20000140 	.word	0x20000140
 8001388:	40026088 	.word	0x40026088
 800138c:	00000000 	.word	0x00000000

08001390 <Generate_SineWave>:
int16_t audioBuffer[AUDIO_BUF_SIZE];



void Generate_SineWave(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
  for (int i = 0; i < AUDIO_BUF_SIZE; i++)
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	e030      	b.n	80013fe <Generate_SineWave+0x6e>
  {
    audioBuffer[i] = (int16_t)(10000 * sin(2 * 3.141592 * i / AUDIO_BUF_SIZE));
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff f8b9 	bl	8000514 <__aeabi_i2d>
 80013a2:	a31f      	add	r3, pc, #124	@ (adr r3, 8001420 <Generate_SineWave+0x90>)
 80013a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a8:	f7ff f91e 	bl	80005e8 <__aeabi_dmul>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4610      	mov	r0, r2
 80013b2:	4619      	mov	r1, r3
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	4b17      	ldr	r3, [pc, #92]	@ (8001418 <Generate_SineWave+0x88>)
 80013ba:	f7ff fa3f 	bl	800083c <__aeabi_ddiv>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	ec43 2b17 	vmov	d7, r2, r3
 80013c6:	eeb0 0a47 	vmov.f32	s0, s14
 80013ca:	eef0 0a67 	vmov.f32	s1, s15
 80013ce:	f00a fe4f 	bl	800c070 <sin>
 80013d2:	ec51 0b10 	vmov	r0, r1, d0
 80013d6:	a30e      	add	r3, pc, #56	@ (adr r3, 8001410 <Generate_SineWave+0x80>)
 80013d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013dc:	f7ff f904 	bl	80005e8 <__aeabi_dmul>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	f7ff fb98 	bl	8000b1c <__aeabi_d2iz>
 80013ec:	4603      	mov	r3, r0
 80013ee:	b219      	sxth	r1, r3
 80013f0:	4a0a      	ldr	r2, [pc, #40]	@ (800141c <Generate_SineWave+0x8c>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < AUDIO_BUF_SIZE; i++)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3301      	adds	r3, #1
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2bff      	cmp	r3, #255	@ 0xff
 8001402:	ddcb      	ble.n	800139c <Generate_SineWave+0xc>
  }
}
 8001404:	bf00      	nop
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	00000000 	.word	0x00000000
 8001414:	40c38800 	.word	0x40c38800
 8001418:	40700000 	.word	0x40700000
 800141c:	200001a0 	.word	0x200001a0
 8001420:	fc8b007a 	.word	0xfc8b007a
 8001424:	401921fa 	.word	0x401921fa

08001428 <CS43L22_Write>:
  HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)audioBuffer, AUDIO_BUF_SIZE);

}

void CS43L22_Write(uint8_t reg, uint8_t value)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af04      	add	r7, sp, #16
 800142e:	4603      	mov	r3, r0
 8001430:	460a      	mov	r2, r1
 8001432:	71fb      	strb	r3, [r7, #7]
 8001434:	4613      	mov	r3, r2
 8001436:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Mem_Write(&hi2c1, CS43L22_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	b29a      	uxth	r2, r3
 800143c:	f04f 33ff 	mov.w	r3, #4294967295
 8001440:	9302      	str	r3, [sp, #8]
 8001442:	2301      	movs	r3, #1
 8001444:	9301      	str	r3, [sp, #4]
 8001446:	1dbb      	adds	r3, r7, #6
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	2301      	movs	r3, #1
 800144c:	2194      	movs	r1, #148	@ 0x94
 800144e:	4803      	ldr	r0, [pc, #12]	@ (800145c <CS43L22_Write+0x34>)
 8001450:	f003 fccc 	bl	8004dec <HAL_I2C_Mem_Write>
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	200000a4 	.word	0x200000a4

08001460 <CS43L22_Init>:

void CS43L22_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  HAL_Delay(10);
 8001464:	200a      	movs	r0, #10
 8001466:	f000 fc41 	bl	8001cec <HAL_Delay>
  CS43L22_Write(0x02, 0x01);  // Power down (standby)
 800146a:	2101      	movs	r1, #1
 800146c:	2002      	movs	r0, #2
 800146e:	f7ff ffdb 	bl	8001428 <CS43L22_Write>
  CS43L22_Write(0x04, 0xA0);  // Headphone only
 8001472:	21a0      	movs	r1, #160	@ 0xa0
 8001474:	2004      	movs	r0, #4
 8001476:	f7ff ffd7 	bl	8001428 <CS43L22_Write>
  CS43L22_Write(0x06, 0x07);  // Clock config
 800147a:	2107      	movs	r1, #7
 800147c:	2006      	movs	r0, #6
 800147e:	f7ff ffd3 	bl	8001428 <CS43L22_Write>
  CS43L22_Write(0x0A, 0x00);  // Speaker volume A (0dB)
 8001482:	2100      	movs	r1, #0
 8001484:	200a      	movs	r0, #10
 8001486:	f7ff ffcf 	bl	8001428 <CS43L22_Write>
  CS43L22_Write(0x0E, 0x00);  // HP A volume (0dB)
 800148a:	2100      	movs	r1, #0
 800148c:	200e      	movs	r0, #14
 800148e:	f7ff ffcb 	bl	8001428 <CS43L22_Write>
  CS43L22_Write(0x0F, 0x00);  // HP B volume (0dB)
 8001492:	2100      	movs	r1, #0
 8001494:	200f      	movs	r0, #15
 8001496:	f7ff ffc7 	bl	8001428 <CS43L22_Write>
  CS43L22_Write(0x02, 0x9E);  // Power on
 800149a:	219e      	movs	r1, #158	@ 0x9e
 800149c:	2002      	movs	r0, #2
 800149e:	f7ff ffc3 	bl	8001428 <CS43L22_Write>

}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
	...

080014a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ae:	f000 fbab 	bl	8001c08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014b2:	f000 f877 	bl	80015a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b6:	f7ff fcf1 	bl	8000e9c <MX_GPIO_Init>
  MX_DMA_Init();
 80014ba:	f7ff fccf 	bl	8000e5c <MX_DMA_Init>
  MX_I2C1_Init();
 80014be:	f7ff fdfd 	bl	80010bc <MX_I2C1_Init>
  MX_I2S3_Init();
 80014c2:	f7ff fe71 	bl	80011a8 <MX_I2S3_Init>
  MX_SPI1_Init();
 80014c6:	f000 f97f 	bl	80017c8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80014ca:	f009 fb87 	bl	800abdc <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80014ce:	f000 faff 	bl	8001ad0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  CS43L22_Init();
 80014d2:	f7ff ffc5 	bl	8001460 <CS43L22_Init>
  Generate_SineWave();
 80014d6:	f7ff ff5b 	bl	8001390 <Generate_SineWave>

  uint8_t btnState = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	71bb      	strb	r3, [r7, #6]
  uint8_t prevBtnState = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	73fb      	strb	r3, [r7, #15]

  uint32_t pressedTime = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60bb      	str	r3, [r7, #8]
  uint8_t blinking = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	71fb      	strb	r3, [r7, #7]

  //LIS3DSH SPI Test
  LIS3DSH_CS_HIGH();
 80014ea:	2201      	movs	r2, #1
 80014ec:	2120      	movs	r1, #32
 80014ee:	482a      	ldr	r0, [pc, #168]	@ (8001598 <main+0xf0>)
 80014f0:	f001 f9d0 	bl	8002894 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80014f4:	2064      	movs	r0, #100	@ 0x64
 80014f6:	f000 fbf9 	bl	8001cec <HAL_Delay>

  LIS3DSH_Test();
 80014fa:	f000 f8fd 	bl	80016f8 <LIS3DSH_Test>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80014fe:	f009 fb93 	bl	800ac28 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    MX_USB_HOST_Process();
 8001502:	f009 fb91 	bl	800ac28 <MX_USB_HOST_Process>

//    printf("Hello World-! \r\n");
//    HAL_Delay(1000);

    btnState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8001506:	2101      	movs	r1, #1
 8001508:	4824      	ldr	r0, [pc, #144]	@ (800159c <main+0xf4>)
 800150a:	f001 f9ab 	bl	8002864 <HAL_GPIO_ReadPin>
 800150e:	4603      	mov	r3, r0
 8001510:	71bb      	strb	r3, [r7, #6]

    if (btnState == GPIO_PIN_SET && prevBtnState == GPIO_PIN_RESET)
 8001512:	79bb      	ldrb	r3, [r7, #6]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d105      	bne.n	8001524 <main+0x7c>
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d102      	bne.n	8001524 <main+0x7c>
        {
          pressedTime = HAL_GetTick();
 800151e:	f000 fbd9 	bl	8001cd4 <HAL_GetTick>
 8001522:	60b8      	str	r0, [r7, #8]
        }

    if (btnState == GPIO_PIN_SET && (HAL_GetTick() - pressedTime >= 2000))
 8001524:	79bb      	ldrb	r3, [r7, #6]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d109      	bne.n	800153e <main+0x96>
 800152a:	f000 fbd3 	bl	8001cd4 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001538:	d301      	bcc.n	800153e <main+0x96>
    {
      blinking = 1;
 800153a:	2301      	movs	r3, #1
 800153c:	71fb      	strb	r3, [r7, #7]
    }

    if (btnState == GPIO_PIN_RESET && prevBtnState == GPIO_PIN_SET)
 800153e:	79bb      	ldrb	r3, [r7, #6]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d111      	bne.n	8001568 <main+0xc0>
 8001544:	7bfb      	ldrb	r3, [r7, #15]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d10e      	bne.n	8001568 <main+0xc0>
    {
      if (HAL_GetTick() - pressedTime < 2000)
 800154a:	f000 fbc3 	bl	8001cd4 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001558:	d204      	bcs.n	8001564 <main+0xbc>
      {
        HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);   // Green
 800155a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800155e:	4810      	ldr	r0, [pc, #64]	@ (80015a0 <main+0xf8>)
 8001560:	f001 f9b1 	bl	80028c6 <HAL_GPIO_TogglePin>
      }
      blinking = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	71fb      	strb	r3, [r7, #7]
    }

    if (blinking)
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d008      	beq.n	8001580 <main+0xd8>
    {
      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);    // Blue
 800156e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001572:	480b      	ldr	r0, [pc, #44]	@ (80015a0 <main+0xf8>)
 8001574:	f001 f9a7 	bl	80028c6 <HAL_GPIO_TogglePin>
      HAL_Delay(50);
 8001578:	2032      	movs	r0, #50	@ 0x32
 800157a:	f000 fbb7 	bl	8001cec <HAL_Delay>
 800157e:	e002      	b.n	8001586 <main+0xde>
    }
    else
    {
      HAL_Delay(10);
 8001580:	200a      	movs	r0, #10
 8001582:	f000 fbb3 	bl	8001cec <HAL_Delay>
    }
    prevBtnState = btnState;
 8001586:	79bb      	ldrb	r3, [r7, #6]
 8001588:	73fb      	strb	r3, [r7, #15]

    LIS3DSH_ReadXYZ();
 800158a:	f000 f8f3 	bl	8001774 <LIS3DSH_ReadXYZ>
    HAL_Delay(500);
 800158e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001592:	f000 fbab 	bl	8001cec <HAL_Delay>
  {
 8001596:	e7b2      	b.n	80014fe <main+0x56>
 8001598:	40020400 	.word	0x40020400
 800159c:	40020000 	.word	0x40020000
 80015a0:	40020c00 	.word	0x40020c00

080015a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b094      	sub	sp, #80	@ 0x50
 80015a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015aa:	f107 0320 	add.w	r3, r7, #32
 80015ae:	2230      	movs	r2, #48	@ 0x30
 80015b0:	2100      	movs	r1, #0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f009 fff1 	bl	800b59a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c8:	2300      	movs	r3, #0
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	4b28      	ldr	r3, [pc, #160]	@ (8001670 <SystemClock_Config+0xcc>)
 80015ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d0:	4a27      	ldr	r2, [pc, #156]	@ (8001670 <SystemClock_Config+0xcc>)
 80015d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80015d8:	4b25      	ldr	r3, [pc, #148]	@ (8001670 <SystemClock_Config+0xcc>)
 80015da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015e4:	2300      	movs	r3, #0
 80015e6:	607b      	str	r3, [r7, #4]
 80015e8:	4b22      	ldr	r3, [pc, #136]	@ (8001674 <SystemClock_Config+0xd0>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a21      	ldr	r2, [pc, #132]	@ (8001674 <SystemClock_Config+0xd0>)
 80015ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001674 <SystemClock_Config+0xd0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001600:	2301      	movs	r3, #1
 8001602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001604:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001608:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800160a:	2302      	movs	r3, #2
 800160c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800160e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001612:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001614:	2308      	movs	r3, #8
 8001616:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001618:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800161c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800161e:	2302      	movs	r3, #2
 8001620:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001622:	2307      	movs	r3, #7
 8001624:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001626:	f107 0320 	add.w	r3, r7, #32
 800162a:	4618      	mov	r0, r3
 800162c:	f004 fbe8 	bl	8005e00 <HAL_RCC_OscConfig>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001636:	f000 f8c1 	bl	80017bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800163a:	230f      	movs	r3, #15
 800163c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800163e:	2302      	movs	r3, #2
 8001640:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001646:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800164a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800164c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001650:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001652:	f107 030c 	add.w	r3, r7, #12
 8001656:	2105      	movs	r1, #5
 8001658:	4618      	mov	r0, r3
 800165a:	f004 fe49 	bl	80062f0 <HAL_RCC_ClockConfig>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001664:	f000 f8aa 	bl	80017bc <Error_Handler>
  }
}
 8001668:	bf00      	nop
 800166a:	3750      	adds	r7, #80	@ 0x50
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40023800 	.word	0x40023800
 8001674:	40007000 	.word	0x40007000

08001678 <_write>:

/* USER CODE BEGIN 4 */
/* printf() - override */

int _write(int file, char *ptr, int len)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	b29a      	uxth	r2, r3
 8001688:	f04f 33ff 	mov.w	r3, #4294967295
 800168c:	68b9      	ldr	r1, [r7, #8]
 800168e:	4804      	ldr	r0, [pc, #16]	@ (80016a0 <_write+0x28>)
 8001690:	f005 fcee 	bl	8007070 <HAL_UART_Transmit>
    return len;
 8001694:	687b      	ldr	r3, [r7, #4]
}
 8001696:	4618      	mov	r0, r3
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	200003fc 	.word	0x200003fc

080016a4 <LIS3DSH_ReadReg>:


uint8_t LIS3DSH_ReadReg(uint8_t reg)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af02      	add	r7, sp, #8
 80016aa:	4603      	mov	r3, r0
 80016ac:	71fb      	strb	r3, [r7, #7]
  uint8_t tx[2];
  uint8_t rx[2];

  tx[0] = reg | 0x80; // read : MSB = 1
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	733b      	strb	r3, [r7, #12]
  tx[1] = 0x00;
 80016b8:	2300      	movs	r3, #0
 80016ba:	737b      	strb	r3, [r7, #13]

  LIS3DSH_CS_LOW();
 80016bc:	2200      	movs	r2, #0
 80016be:	2120      	movs	r1, #32
 80016c0:	480b      	ldr	r0, [pc, #44]	@ (80016f0 <LIS3DSH_ReadReg+0x4c>)
 80016c2:	f001 f8e7 	bl	8002894 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, tx, rx, 2, HAL_MAX_DELAY);
 80016c6:	f107 0208 	add.w	r2, r7, #8
 80016ca:	f107 010c 	add.w	r1, r7, #12
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	2302      	movs	r3, #2
 80016d6:	4807      	ldr	r0, [pc, #28]	@ (80016f4 <LIS3DSH_ReadReg+0x50>)
 80016d8:	f005 f9f5 	bl	8006ac6 <HAL_SPI_TransmitReceive>
  LIS3DSH_CS_HIGH();
 80016dc:	2201      	movs	r2, #1
 80016de:	2120      	movs	r1, #32
 80016e0:	4803      	ldr	r0, [pc, #12]	@ (80016f0 <LIS3DSH_ReadReg+0x4c>)
 80016e2:	f001 f8d7 	bl	8002894 <HAL_GPIO_WritePin>

  return rx[1];
 80016e6:	7a7b      	ldrb	r3, [r7, #9]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40020400 	.word	0x40020400
 80016f4:	200003a0 	.word	0x200003a0

080016f8 <LIS3DSH_Test>:


void LIS3DSH_Test(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
  uint8_t id = LIS3DSH_ReadReg(0x0F);   // read who am i reg
 80016fe:	200f      	movs	r0, #15
 8001700:	f7ff ffd0 	bl	80016a4 <LIS3DSH_ReadReg>
 8001704:	4603      	mov	r3, r0
 8001706:	71fb      	strb	r3, [r7, #7]

  if (id == 0x3F)  // LIS3DSH ID
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	2b3f      	cmp	r3, #63	@ 0x3f
 800170c:	d105      	bne.n	800171a <LIS3DSH_Test+0x22>
  {
    printf("LIS3DSH detected! WHO_AM_I = 0x%02X\r\n", id);
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	4619      	mov	r1, r3
 8001712:	4806      	ldr	r0, [pc, #24]	@ (800172c <LIS3DSH_Test+0x34>)
 8001714:	f009 feec 	bl	800b4f0 <iprintf>
  }
  else
  {
    printf("LIS3DSH not found. Read: 0x%02X\r\n", id);
  }
}
 8001718:	e004      	b.n	8001724 <LIS3DSH_Test+0x2c>
    printf("LIS3DSH not found. Read: 0x%02X\r\n", id);
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	4619      	mov	r1, r3
 800171e:	4804      	ldr	r0, [pc, #16]	@ (8001730 <LIS3DSH_Test+0x38>)
 8001720:	f009 fee6 	bl	800b4f0 <iprintf>
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	0800d0e8 	.word	0x0800d0e8
 8001730:	0800d110 	.word	0x0800d110

08001734 <LIS3DSH_ReadAxis>:


int16_t LIS3DSH_ReadAxis(uint8_t addr_l, uint8_t addr_h)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	460a      	mov	r2, r1
 800173e:	71fb      	strb	r3, [r7, #7]
 8001740:	4613      	mov	r3, r2
 8001742:	71bb      	strb	r3, [r7, #6]
  uint8_t low = LIS3DSH_ReadReg(addr_l);      // read LSB
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff ffac 	bl	80016a4 <LIS3DSH_ReadReg>
 800174c:	4603      	mov	r3, r0
 800174e:	73fb      	strb	r3, [r7, #15]
  uint8_t high = LIS3DSH_ReadReg(addr_h);     // read MSB
 8001750:	79bb      	ldrb	r3, [r7, #6]
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff ffa6 	bl	80016a4 <LIS3DSH_ReadReg>
 8001758:	4603      	mov	r3, r0
 800175a:	73bb      	strb	r3, [r7, #14]
  return (uint16_t)((high << 8) | low);       // 16 bit (MSB + LSB)
 800175c:	7bbb      	ldrb	r3, [r7, #14]
 800175e:	021b      	lsls	r3, r3, #8
 8001760:	b21a      	sxth	r2, r3
 8001762:	7bfb      	ldrb	r3, [r7, #15]
 8001764:	b21b      	sxth	r3, r3
 8001766:	4313      	orrs	r3, r2
 8001768:	b21b      	sxth	r3, r3
}
 800176a:	4618      	mov	r0, r3
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <LIS3DSH_ReadXYZ>:

void LIS3DSH_ReadXYZ(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
  int16_t x = LIS3DSH_ReadAxis(0x28, 0x29);    // x-LSB, x-MSB
 800177a:	2129      	movs	r1, #41	@ 0x29
 800177c:	2028      	movs	r0, #40	@ 0x28
 800177e:	f7ff ffd9 	bl	8001734 <LIS3DSH_ReadAxis>
 8001782:	4603      	mov	r3, r0
 8001784:	80fb      	strh	r3, [r7, #6]
  int16_t y = LIS3DSH_ReadAxis(0x2A, 0x2B);
 8001786:	212b      	movs	r1, #43	@ 0x2b
 8001788:	202a      	movs	r0, #42	@ 0x2a
 800178a:	f7ff ffd3 	bl	8001734 <LIS3DSH_ReadAxis>
 800178e:	4603      	mov	r3, r0
 8001790:	80bb      	strh	r3, [r7, #4]
  int16_t z = LIS3DSH_ReadAxis(0x2C, 0x2D);
 8001792:	212d      	movs	r1, #45	@ 0x2d
 8001794:	202c      	movs	r0, #44	@ 0x2c
 8001796:	f7ff ffcd 	bl	8001734 <LIS3DSH_ReadAxis>
 800179a:	4603      	mov	r3, r0
 800179c:	807b      	strh	r3, [r7, #2]

  printf("X: %d, Y: %d, Z: %d \r\n", x, y, z);
 800179e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80017a2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80017a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80017aa:	4803      	ldr	r0, [pc, #12]	@ (80017b8 <LIS3DSH_ReadXYZ+0x44>)
 80017ac:	f009 fea0 	bl	800b4f0 <iprintf>
}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	0800d134 	.word	0x0800d134

080017bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c0:	b672      	cpsid	i
}
 80017c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017c4:	bf00      	nop
 80017c6:	e7fd      	b.n	80017c4 <Error_Handler+0x8>

080017c8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80017cc:	4b17      	ldr	r3, [pc, #92]	@ (800182c <MX_SPI1_Init+0x64>)
 80017ce:	4a18      	ldr	r2, [pc, #96]	@ (8001830 <MX_SPI1_Init+0x68>)
 80017d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017d2:	4b16      	ldr	r3, [pc, #88]	@ (800182c <MX_SPI1_Init+0x64>)
 80017d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017da:	4b14      	ldr	r3, [pc, #80]	@ (800182c <MX_SPI1_Init+0x64>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017e0:	4b12      	ldr	r3, [pc, #72]	@ (800182c <MX_SPI1_Init+0x64>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80017e6:	4b11      	ldr	r3, [pc, #68]	@ (800182c <MX_SPI1_Init+0x64>)
 80017e8:	2202      	movs	r2, #2
 80017ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017ec:	4b0f      	ldr	r3, [pc, #60]	@ (800182c <MX_SPI1_Init+0x64>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017f2:	4b0e      	ldr	r3, [pc, #56]	@ (800182c <MX_SPI1_Init+0x64>)
 80017f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80017fa:	4b0c      	ldr	r3, [pc, #48]	@ (800182c <MX_SPI1_Init+0x64>)
 80017fc:	2218      	movs	r2, #24
 80017fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001800:	4b0a      	ldr	r3, [pc, #40]	@ (800182c <MX_SPI1_Init+0x64>)
 8001802:	2200      	movs	r2, #0
 8001804:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001806:	4b09      	ldr	r3, [pc, #36]	@ (800182c <MX_SPI1_Init+0x64>)
 8001808:	2200      	movs	r2, #0
 800180a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800180c:	4b07      	ldr	r3, [pc, #28]	@ (800182c <MX_SPI1_Init+0x64>)
 800180e:	2200      	movs	r2, #0
 8001810:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001812:	4b06      	ldr	r3, [pc, #24]	@ (800182c <MX_SPI1_Init+0x64>)
 8001814:	220a      	movs	r2, #10
 8001816:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001818:	4804      	ldr	r0, [pc, #16]	@ (800182c <MX_SPI1_Init+0x64>)
 800181a:	f005 f8cb 	bl	80069b4 <HAL_SPI_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001824:	f7ff ffca 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}
 800182c:	200003a0 	.word	0x200003a0
 8001830:	40013000 	.word	0x40013000

08001834 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	@ 0x28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a19      	ldr	r2, [pc, #100]	@ (80018b8 <HAL_SPI_MspInit+0x84>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d12b      	bne.n	80018ae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	4b18      	ldr	r3, [pc, #96]	@ (80018bc <HAL_SPI_MspInit+0x88>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800185e:	4a17      	ldr	r2, [pc, #92]	@ (80018bc <HAL_SPI_MspInit+0x88>)
 8001860:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001864:	6453      	str	r3, [r2, #68]	@ 0x44
 8001866:	4b15      	ldr	r3, [pc, #84]	@ (80018bc <HAL_SPI_MspInit+0x88>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800186a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	4b11      	ldr	r3, [pc, #68]	@ (80018bc <HAL_SPI_MspInit+0x88>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187a:	4a10      	ldr	r2, [pc, #64]	@ (80018bc <HAL_SPI_MspInit+0x88>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6313      	str	r3, [r2, #48]	@ 0x30
 8001882:	4b0e      	ldr	r3, [pc, #56]	@ (80018bc <HAL_SPI_MspInit+0x88>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800188e:	23e0      	movs	r3, #224	@ 0xe0
 8001890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	2302      	movs	r3, #2
 8001894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189a:	2300      	movs	r3, #0
 800189c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800189e:	2305      	movs	r3, #5
 80018a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	4619      	mov	r1, r3
 80018a8:	4805      	ldr	r0, [pc, #20]	@ (80018c0 <HAL_SPI_MspInit+0x8c>)
 80018aa:	f000 fe3f 	bl	800252c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80018ae:	bf00      	nop
 80018b0:	3728      	adds	r7, #40	@ 0x28
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40013000 	.word	0x40013000
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40020000 	.word	0x40020000

080018c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	4b10      	ldr	r3, [pc, #64]	@ (8001910 <HAL_MspInit+0x4c>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001910 <HAL_MspInit+0x4c>)
 80018d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018da:	4b0d      	ldr	r3, [pc, #52]	@ (8001910 <HAL_MspInit+0x4c>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	603b      	str	r3, [r7, #0]
 80018ea:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <HAL_MspInit+0x4c>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ee:	4a08      	ldr	r2, [pc, #32]	@ (8001910 <HAL_MspInit+0x4c>)
 80018f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018f6:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <HAL_MspInit+0x4c>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018fe:	603b      	str	r3, [r7, #0]
 8001900:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001902:	2007      	movs	r0, #7
 8001904:	f000 fae6 	bl	8001ed4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001908:	bf00      	nop
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40023800 	.word	0x40023800

08001914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001918:	bf00      	nop
 800191a:	e7fd      	b.n	8001918 <NMI_Handler+0x4>

0800191c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001920:	bf00      	nop
 8001922:	e7fd      	b.n	8001920 <HardFault_Handler+0x4>

08001924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001928:	bf00      	nop
 800192a:	e7fd      	b.n	8001928 <MemManage_Handler+0x4>

0800192c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <BusFault_Handler+0x4>

08001934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001938:	bf00      	nop
 800193a:	e7fd      	b.n	8001938 <UsageFault_Handler+0x4>

0800193c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800196a:	f000 f99f 	bl	8001cac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001978:	4802      	ldr	r0, [pc, #8]	@ (8001984 <DMA1_Stream5_IRQHandler+0x10>)
 800197a:	f000 fb9b 	bl	80020b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000140 	.word	0x20000140

08001988 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800198c:	4802      	ldr	r0, [pc, #8]	@ (8001998 <OTG_FS_IRQHandler+0x10>)
 800198e:	f001 fa95 	bl	8002ebc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000824 	.word	0x20000824

0800199c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	e00a      	b.n	80019c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019ae:	f3af 8000 	nop.w
 80019b2:	4601      	mov	r1, r0
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	1c5a      	adds	r2, r3, #1
 80019b8:	60ba      	str	r2, [r7, #8]
 80019ba:	b2ca      	uxtb	r2, r1
 80019bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	3301      	adds	r3, #1
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	dbf0      	blt.n	80019ae <_read+0x12>
  }

  return len;
 80019cc:	687b      	ldr	r3, [r7, #4]
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b083      	sub	sp, #12
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
 80019f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019fe:	605a      	str	r2, [r3, #4]
  return 0;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <_isatty>:

int _isatty(int file)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a16:	2301      	movs	r3, #1
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
	...

08001a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a48:	4a14      	ldr	r2, [pc, #80]	@ (8001a9c <_sbrk+0x5c>)
 8001a4a:	4b15      	ldr	r3, [pc, #84]	@ (8001aa0 <_sbrk+0x60>)
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a54:	4b13      	ldr	r3, [pc, #76]	@ (8001aa4 <_sbrk+0x64>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d102      	bne.n	8001a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a5c:	4b11      	ldr	r3, [pc, #68]	@ (8001aa4 <_sbrk+0x64>)
 8001a5e:	4a12      	ldr	r2, [pc, #72]	@ (8001aa8 <_sbrk+0x68>)
 8001a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a62:	4b10      	ldr	r3, [pc, #64]	@ (8001aa4 <_sbrk+0x64>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d207      	bcs.n	8001a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a70:	f009 fdf2 	bl	800b658 <__errno>
 8001a74:	4603      	mov	r3, r0
 8001a76:	220c      	movs	r2, #12
 8001a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7e:	e009      	b.n	8001a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a80:	4b08      	ldr	r3, [pc, #32]	@ (8001aa4 <_sbrk+0x64>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a86:	4b07      	ldr	r3, [pc, #28]	@ (8001aa4 <_sbrk+0x64>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	4a05      	ldr	r2, [pc, #20]	@ (8001aa4 <_sbrk+0x64>)
 8001a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a92:	68fb      	ldr	r3, [r7, #12]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20020000 	.word	0x20020000
 8001aa0:	00000400 	.word	0x00000400
 8001aa4:	200003f8 	.word	0x200003f8
 8001aa8:	20000d50 	.word	0x20000d50

08001aac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ab0:	4b06      	ldr	r3, [pc, #24]	@ (8001acc <SystemInit+0x20>)
 8001ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ab6:	4a05      	ldr	r2, [pc, #20]	@ (8001acc <SystemInit+0x20>)
 8001ab8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001abc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ad4:	4b11      	ldr	r3, [pc, #68]	@ (8001b1c <MX_USART2_UART_Init+0x4c>)
 8001ad6:	4a12      	ldr	r2, [pc, #72]	@ (8001b20 <MX_USART2_UART_Init+0x50>)
 8001ad8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ada:	4b10      	ldr	r3, [pc, #64]	@ (8001b1c <MX_USART2_UART_Init+0x4c>)
 8001adc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ae0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b1c <MX_USART2_UART_Init+0x4c>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b1c <MX_USART2_UART_Init+0x4c>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001aee:	4b0b      	ldr	r3, [pc, #44]	@ (8001b1c <MX_USART2_UART_Init+0x4c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001af4:	4b09      	ldr	r3, [pc, #36]	@ (8001b1c <MX_USART2_UART_Init+0x4c>)
 8001af6:	220c      	movs	r2, #12
 8001af8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001afa:	4b08      	ldr	r3, [pc, #32]	@ (8001b1c <MX_USART2_UART_Init+0x4c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b00:	4b06      	ldr	r3, [pc, #24]	@ (8001b1c <MX_USART2_UART_Init+0x4c>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b06:	4805      	ldr	r0, [pc, #20]	@ (8001b1c <MX_USART2_UART_Init+0x4c>)
 8001b08:	f005 fa62 	bl	8006fd0 <HAL_UART_Init>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b12:	f7ff fe53 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	200003fc 	.word	0x200003fc
 8001b20:	40004400 	.word	0x40004400

08001b24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08a      	sub	sp, #40	@ 0x28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a19      	ldr	r2, [pc, #100]	@ (8001ba8 <HAL_UART_MspInit+0x84>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d12b      	bne.n	8001b9e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	4b18      	ldr	r3, [pc, #96]	@ (8001bac <HAL_UART_MspInit+0x88>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4e:	4a17      	ldr	r2, [pc, #92]	@ (8001bac <HAL_UART_MspInit+0x88>)
 8001b50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b56:	4b15      	ldr	r3, [pc, #84]	@ (8001bac <HAL_UART_MspInit+0x88>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	4b11      	ldr	r3, [pc, #68]	@ (8001bac <HAL_UART_MspInit+0x88>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6a:	4a10      	ldr	r2, [pc, #64]	@ (8001bac <HAL_UART_MspInit+0x88>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b72:	4b0e      	ldr	r3, [pc, #56]	@ (8001bac <HAL_UART_MspInit+0x88>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b7e:	230c      	movs	r3, #12
 8001b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2302      	movs	r3, #2
 8001b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b8e:	2307      	movs	r3, #7
 8001b90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b92:	f107 0314 	add.w	r3, r7, #20
 8001b96:	4619      	mov	r1, r3
 8001b98:	4805      	ldr	r0, [pc, #20]	@ (8001bb0 <HAL_UART_MspInit+0x8c>)
 8001b9a:	f000 fcc7 	bl	800252c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b9e:	bf00      	nop
 8001ba0:	3728      	adds	r7, #40	@ 0x28
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40004400 	.word	0x40004400
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40020000 	.word	0x40020000

08001bb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001bb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001bb8:	f7ff ff78 	bl	8001aac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bbc:	480c      	ldr	r0, [pc, #48]	@ (8001bf0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bbe:	490d      	ldr	r1, [pc, #52]	@ (8001bf4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8001bf8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc4:	e002      	b.n	8001bcc <LoopCopyDataInit>

08001bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bca:	3304      	adds	r3, #4

08001bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd0:	d3f9      	bcc.n	8001bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bd4:	4c0a      	ldr	r4, [pc, #40]	@ (8001c00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bd8:	e001      	b.n	8001bde <LoopFillZerobss>

08001bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bdc:	3204      	adds	r2, #4

08001bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be0:	d3fb      	bcc.n	8001bda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001be2:	f009 fd3f 	bl	800b664 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001be6:	f7ff fc5f 	bl	80014a8 <main>
  bx  lr    
 8001bea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001bf8:	0800d390 	.word	0x0800d390
  ldr r2, =_sbss
 8001bfc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001c00:	20000d50 	.word	0x20000d50

08001c04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c04:	e7fe      	b.n	8001c04 <ADC_IRQHandler>
	...

08001c08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c48 <HAL_Init+0x40>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a0d      	ldr	r2, [pc, #52]	@ (8001c48 <HAL_Init+0x40>)
 8001c12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c18:	4b0b      	ldr	r3, [pc, #44]	@ (8001c48 <HAL_Init+0x40>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c48 <HAL_Init+0x40>)
 8001c1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c24:	4b08      	ldr	r3, [pc, #32]	@ (8001c48 <HAL_Init+0x40>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a07      	ldr	r2, [pc, #28]	@ (8001c48 <HAL_Init+0x40>)
 8001c2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c30:	2003      	movs	r0, #3
 8001c32:	f000 f94f 	bl	8001ed4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c36:	2000      	movs	r0, #0
 8001c38:	f000 f808 	bl	8001c4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c3c:	f7ff fe42 	bl	80018c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40023c00 	.word	0x40023c00

08001c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c54:	4b12      	ldr	r3, [pc, #72]	@ (8001ca0 <HAL_InitTick+0x54>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4b12      	ldr	r3, [pc, #72]	@ (8001ca4 <HAL_InitTick+0x58>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f000 f967 	bl	8001f3e <HAL_SYSTICK_Config>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e00e      	b.n	8001c98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b0f      	cmp	r3, #15
 8001c7e:	d80a      	bhi.n	8001c96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c80:	2200      	movs	r2, #0
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	f04f 30ff 	mov.w	r0, #4294967295
 8001c88:	f000 f92f 	bl	8001eea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c8c:	4a06      	ldr	r2, [pc, #24]	@ (8001ca8 <HAL_InitTick+0x5c>)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
 8001c94:	e000      	b.n	8001c98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20000000 	.word	0x20000000
 8001ca4:	20000008 	.word	0x20000008
 8001ca8:	20000004 	.word	0x20000004

08001cac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cb0:	4b06      	ldr	r3, [pc, #24]	@ (8001ccc <HAL_IncTick+0x20>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4b06      	ldr	r3, [pc, #24]	@ (8001cd0 <HAL_IncTick+0x24>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4413      	add	r3, r2
 8001cbc:	4a04      	ldr	r2, [pc, #16]	@ (8001cd0 <HAL_IncTick+0x24>)
 8001cbe:	6013      	str	r3, [r2, #0]
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	20000008 	.word	0x20000008
 8001cd0:	20000444 	.word	0x20000444

08001cd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd8:	4b03      	ldr	r3, [pc, #12]	@ (8001ce8 <HAL_GetTick+0x14>)
 8001cda:	681b      	ldr	r3, [r3, #0]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	20000444 	.word	0x20000444

08001cec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cf4:	f7ff ffee 	bl	8001cd4 <HAL_GetTick>
 8001cf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d04:	d005      	beq.n	8001d12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d06:	4b0a      	ldr	r3, [pc, #40]	@ (8001d30 <HAL_Delay+0x44>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4413      	add	r3, r2
 8001d10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d12:	bf00      	nop
 8001d14:	f7ff ffde 	bl	8001cd4 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d8f7      	bhi.n	8001d14 <HAL_Delay+0x28>
  {
  }
}
 8001d24:	bf00      	nop
 8001d26:	bf00      	nop
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000008 	.word	0x20000008

08001d34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d44:	4b0c      	ldr	r3, [pc, #48]	@ (8001d78 <__NVIC_SetPriorityGrouping+0x44>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d50:	4013      	ands	r3, r2
 8001d52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d66:	4a04      	ldr	r2, [pc, #16]	@ (8001d78 <__NVIC_SetPriorityGrouping+0x44>)
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	60d3      	str	r3, [r2, #12]
}
 8001d6c:	bf00      	nop
 8001d6e:	3714      	adds	r7, #20
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d80:	4b04      	ldr	r3, [pc, #16]	@ (8001d94 <__NVIC_GetPriorityGrouping+0x18>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	0a1b      	lsrs	r3, r3, #8
 8001d86:	f003 0307 	and.w	r3, r3, #7
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	db0b      	blt.n	8001dc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	f003 021f 	and.w	r2, r3, #31
 8001db0:	4907      	ldr	r1, [pc, #28]	@ (8001dd0 <__NVIC_EnableIRQ+0x38>)
 8001db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db6:	095b      	lsrs	r3, r3, #5
 8001db8:	2001      	movs	r0, #1
 8001dba:	fa00 f202 	lsl.w	r2, r0, r2
 8001dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	e000e100 	.word	0xe000e100

08001dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	6039      	str	r1, [r7, #0]
 8001dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	db0a      	blt.n	8001dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	490c      	ldr	r1, [pc, #48]	@ (8001e20 <__NVIC_SetPriority+0x4c>)
 8001dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df2:	0112      	lsls	r2, r2, #4
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	440b      	add	r3, r1
 8001df8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dfc:	e00a      	b.n	8001e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	4908      	ldr	r1, [pc, #32]	@ (8001e24 <__NVIC_SetPriority+0x50>)
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	3b04      	subs	r3, #4
 8001e0c:	0112      	lsls	r2, r2, #4
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	440b      	add	r3, r1
 8001e12:	761a      	strb	r2, [r3, #24]
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	e000e100 	.word	0xe000e100
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b089      	sub	sp, #36	@ 0x24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f1c3 0307 	rsb	r3, r3, #7
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	bf28      	it	cs
 8001e46:	2304      	movcs	r3, #4
 8001e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	2b06      	cmp	r3, #6
 8001e50:	d902      	bls.n	8001e58 <NVIC_EncodePriority+0x30>
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	3b03      	subs	r3, #3
 8001e56:	e000      	b.n	8001e5a <NVIC_EncodePriority+0x32>
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43da      	mvns	r2, r3
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	401a      	ands	r2, r3
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e70:	f04f 31ff 	mov.w	r1, #4294967295
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7a:	43d9      	mvns	r1, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e80:	4313      	orrs	r3, r2
         );
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3724      	adds	r7, #36	@ 0x24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
	...

08001e90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ea0:	d301      	bcc.n	8001ea6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e00f      	b.n	8001ec6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed0 <SysTick_Config+0x40>)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eae:	210f      	movs	r1, #15
 8001eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb4:	f7ff ff8e 	bl	8001dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eb8:	4b05      	ldr	r3, [pc, #20]	@ (8001ed0 <SysTick_Config+0x40>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ebe:	4b04      	ldr	r3, [pc, #16]	@ (8001ed0 <SysTick_Config+0x40>)
 8001ec0:	2207      	movs	r2, #7
 8001ec2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	e000e010 	.word	0xe000e010

08001ed4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff ff29 	bl	8001d34 <__NVIC_SetPriorityGrouping>
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b086      	sub	sp, #24
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	60b9      	str	r1, [r7, #8]
 8001ef4:	607a      	str	r2, [r7, #4]
 8001ef6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001efc:	f7ff ff3e 	bl	8001d7c <__NVIC_GetPriorityGrouping>
 8001f00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	68b9      	ldr	r1, [r7, #8]
 8001f06:	6978      	ldr	r0, [r7, #20]
 8001f08:	f7ff ff8e 	bl	8001e28 <NVIC_EncodePriority>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f12:	4611      	mov	r1, r2
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff ff5d 	bl	8001dd4 <__NVIC_SetPriority>
}
 8001f1a:	bf00      	nop
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	4603      	mov	r3, r0
 8001f2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ff31 	bl	8001d98 <__NVIC_EnableIRQ>
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff ffa2 	bl	8001e90 <SysTick_Config>
 8001f4c:	4603      	mov	r3, r0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
	...

08001f58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f64:	f7ff feb6 	bl	8001cd4 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e099      	b.n	80020a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2202      	movs	r2, #2
 8001f78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 0201 	bic.w	r2, r2, #1
 8001f92:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f94:	e00f      	b.n	8001fb6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f96:	f7ff fe9d 	bl	8001cd4 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b05      	cmp	r3, #5
 8001fa2:	d908      	bls.n	8001fb6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2203      	movs	r2, #3
 8001fae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e078      	b.n	80020a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1e8      	bne.n	8001f96 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	4b38      	ldr	r3, [pc, #224]	@ (80020b0 <HAL_DMA_Init+0x158>)
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fe2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ffa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	4313      	orrs	r3, r2
 8002006:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200c:	2b04      	cmp	r3, #4
 800200e:	d107      	bne.n	8002020 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002018:	4313      	orrs	r3, r2
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	4313      	orrs	r3, r2
 800201e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	f023 0307 	bic.w	r3, r3, #7
 8002036:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	4313      	orrs	r3, r2
 8002040:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002046:	2b04      	cmp	r3, #4
 8002048:	d117      	bne.n	800207a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	4313      	orrs	r3, r2
 8002052:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00e      	beq.n	800207a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 f9e9 	bl	8002434 <DMA_CheckFifoParam>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d008      	beq.n	800207a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2240      	movs	r2, #64	@ 0x40
 800206c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002076:	2301      	movs	r3, #1
 8002078:	e016      	b.n	80020a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f9a0 	bl	80023c8 <DMA_CalcBaseAndBitshift>
 8002088:	4603      	mov	r3, r0
 800208a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002090:	223f      	movs	r2, #63	@ 0x3f
 8002092:	409a      	lsls	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	f010803f 	.word	0xf010803f

080020b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020c0:	4b8e      	ldr	r3, [pc, #568]	@ (80022fc <HAL_DMA_IRQHandler+0x248>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a8e      	ldr	r2, [pc, #568]	@ (8002300 <HAL_DMA_IRQHandler+0x24c>)
 80020c6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ca:	0a9b      	lsrs	r3, r3, #10
 80020cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020de:	2208      	movs	r2, #8
 80020e0:	409a      	lsls	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	4013      	ands	r3, r2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d01a      	beq.n	8002120 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d013      	beq.n	8002120 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0204 	bic.w	r2, r2, #4
 8002106:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800210c:	2208      	movs	r2, #8
 800210e:	409a      	lsls	r2, r3
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002118:	f043 0201 	orr.w	r2, r3, #1
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002124:	2201      	movs	r2, #1
 8002126:	409a      	lsls	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4013      	ands	r3, r2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d012      	beq.n	8002156 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00b      	beq.n	8002156 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002142:	2201      	movs	r2, #1
 8002144:	409a      	lsls	r2, r3
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800214e:	f043 0202 	orr.w	r2, r3, #2
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800215a:	2204      	movs	r2, #4
 800215c:	409a      	lsls	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	4013      	ands	r3, r2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d012      	beq.n	800218c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00b      	beq.n	800218c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002178:	2204      	movs	r2, #4
 800217a:	409a      	lsls	r2, r3
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002184:	f043 0204 	orr.w	r2, r3, #4
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002190:	2210      	movs	r2, #16
 8002192:	409a      	lsls	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4013      	ands	r3, r2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d043      	beq.n	8002224 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d03c      	beq.n	8002224 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ae:	2210      	movs	r2, #16
 80021b0:	409a      	lsls	r2, r3
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d018      	beq.n	80021f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d108      	bne.n	80021e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d024      	beq.n	8002224 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	4798      	blx	r3
 80021e2:	e01f      	b.n	8002224 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d01b      	beq.n	8002224 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	4798      	blx	r3
 80021f4:	e016      	b.n	8002224 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002200:	2b00      	cmp	r3, #0
 8002202:	d107      	bne.n	8002214 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 0208 	bic.w	r2, r2, #8
 8002212:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002228:	2220      	movs	r2, #32
 800222a:	409a      	lsls	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4013      	ands	r3, r2
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 808f 	beq.w	8002354 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0310 	and.w	r3, r3, #16
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 8087 	beq.w	8002354 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800224a:	2220      	movs	r2, #32
 800224c:	409a      	lsls	r2, r3
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b05      	cmp	r3, #5
 800225c:	d136      	bne.n	80022cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 0216 	bic.w	r2, r2, #22
 800226c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	695a      	ldr	r2, [r3, #20]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800227c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002282:	2b00      	cmp	r3, #0
 8002284:	d103      	bne.n	800228e <HAL_DMA_IRQHandler+0x1da>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800228a:	2b00      	cmp	r3, #0
 800228c:	d007      	beq.n	800229e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0208 	bic.w	r2, r2, #8
 800229c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a2:	223f      	movs	r2, #63	@ 0x3f
 80022a4:	409a      	lsls	r2, r3
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d07e      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	4798      	blx	r3
        }
        return;
 80022ca:	e079      	b.n	80023c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d01d      	beq.n	8002316 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10d      	bne.n	8002304 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d031      	beq.n	8002354 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	4798      	blx	r3
 80022f8:	e02c      	b.n	8002354 <HAL_DMA_IRQHandler+0x2a0>
 80022fa:	bf00      	nop
 80022fc:	20000000 	.word	0x20000000
 8002300:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002308:	2b00      	cmp	r3, #0
 800230a:	d023      	beq.n	8002354 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	4798      	blx	r3
 8002314:	e01e      	b.n	8002354 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10f      	bne.n	8002344 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0210 	bic.w	r2, r2, #16
 8002332:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002358:	2b00      	cmp	r3, #0
 800235a:	d032      	beq.n	80023c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b00      	cmp	r3, #0
 8002366:	d022      	beq.n	80023ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2205      	movs	r2, #5
 800236c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0201 	bic.w	r2, r2, #1
 800237e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	3301      	adds	r3, #1
 8002384:	60bb      	str	r3, [r7, #8]
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	429a      	cmp	r2, r3
 800238a:	d307      	bcc.n	800239c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f2      	bne.n	8002380 <HAL_DMA_IRQHandler+0x2cc>
 800239a:	e000      	b.n	800239e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800239c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d005      	beq.n	80023c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	4798      	blx	r3
 80023be:	e000      	b.n	80023c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80023c0:	bf00      	nop
    }
  }
}
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	3b10      	subs	r3, #16
 80023d8:	4a14      	ldr	r2, [pc, #80]	@ (800242c <DMA_CalcBaseAndBitshift+0x64>)
 80023da:	fba2 2303 	umull	r2, r3, r2, r3
 80023de:	091b      	lsrs	r3, r3, #4
 80023e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023e2:	4a13      	ldr	r2, [pc, #76]	@ (8002430 <DMA_CalcBaseAndBitshift+0x68>)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4413      	add	r3, r2
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	461a      	mov	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	d909      	bls.n	800240a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80023fe:	f023 0303 	bic.w	r3, r3, #3
 8002402:	1d1a      	adds	r2, r3, #4
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	659a      	str	r2, [r3, #88]	@ 0x58
 8002408:	e007      	b.n	800241a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002412:	f023 0303 	bic.w	r3, r3, #3
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800241e:	4618      	mov	r0, r3
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	aaaaaaab 	.word	0xaaaaaaab
 8002430:	0800d168 	.word	0x0800d168

08002434 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800243c:	2300      	movs	r3, #0
 800243e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002444:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d11f      	bne.n	800248e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	2b03      	cmp	r3, #3
 8002452:	d856      	bhi.n	8002502 <DMA_CheckFifoParam+0xce>
 8002454:	a201      	add	r2, pc, #4	@ (adr r2, 800245c <DMA_CheckFifoParam+0x28>)
 8002456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245a:	bf00      	nop
 800245c:	0800246d 	.word	0x0800246d
 8002460:	0800247f 	.word	0x0800247f
 8002464:	0800246d 	.word	0x0800246d
 8002468:	08002503 	.word	0x08002503
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002470:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d046      	beq.n	8002506 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800247c:	e043      	b.n	8002506 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002482:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002486:	d140      	bne.n	800250a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800248c:	e03d      	b.n	800250a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002496:	d121      	bne.n	80024dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	2b03      	cmp	r3, #3
 800249c:	d837      	bhi.n	800250e <DMA_CheckFifoParam+0xda>
 800249e:	a201      	add	r2, pc, #4	@ (adr r2, 80024a4 <DMA_CheckFifoParam+0x70>)
 80024a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a4:	080024b5 	.word	0x080024b5
 80024a8:	080024bb 	.word	0x080024bb
 80024ac:	080024b5 	.word	0x080024b5
 80024b0:	080024cd 	.word	0x080024cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	73fb      	strb	r3, [r7, #15]
      break;
 80024b8:	e030      	b.n	800251c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d025      	beq.n	8002512 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ca:	e022      	b.n	8002512 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80024d4:	d11f      	bne.n	8002516 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024da:	e01c      	b.n	8002516 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d903      	bls.n	80024ea <DMA_CheckFifoParam+0xb6>
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2b03      	cmp	r3, #3
 80024e6:	d003      	beq.n	80024f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024e8:	e018      	b.n	800251c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	73fb      	strb	r3, [r7, #15]
      break;
 80024ee:	e015      	b.n	800251c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00e      	beq.n	800251a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002500:	e00b      	b.n	800251a <DMA_CheckFifoParam+0xe6>
      break;
 8002502:	bf00      	nop
 8002504:	e00a      	b.n	800251c <DMA_CheckFifoParam+0xe8>
      break;
 8002506:	bf00      	nop
 8002508:	e008      	b.n	800251c <DMA_CheckFifoParam+0xe8>
      break;
 800250a:	bf00      	nop
 800250c:	e006      	b.n	800251c <DMA_CheckFifoParam+0xe8>
      break;
 800250e:	bf00      	nop
 8002510:	e004      	b.n	800251c <DMA_CheckFifoParam+0xe8>
      break;
 8002512:	bf00      	nop
 8002514:	e002      	b.n	800251c <DMA_CheckFifoParam+0xe8>
      break;   
 8002516:	bf00      	nop
 8002518:	e000      	b.n	800251c <DMA_CheckFifoParam+0xe8>
      break;
 800251a:	bf00      	nop
    }
  } 
  
  return status; 
 800251c:	7bfb      	ldrb	r3, [r7, #15]
}
 800251e:	4618      	mov	r0, r3
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop

0800252c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800252c:	b480      	push	{r7}
 800252e:	b089      	sub	sp, #36	@ 0x24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002536:	2300      	movs	r3, #0
 8002538:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800253a:	2300      	movs	r3, #0
 800253c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800253e:	2300      	movs	r3, #0
 8002540:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002542:	2300      	movs	r3, #0
 8002544:	61fb      	str	r3, [r7, #28]
 8002546:	e16b      	b.n	8002820 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002548:	2201      	movs	r2, #1
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	4013      	ands	r3, r2
 800255a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	429a      	cmp	r2, r3
 8002562:	f040 815a 	bne.w	800281a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	2b01      	cmp	r3, #1
 8002570:	d005      	beq.n	800257e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800257a:	2b02      	cmp	r3, #2
 800257c:	d130      	bne.n	80025e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	2203      	movs	r2, #3
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	68da      	ldr	r2, [r3, #12]
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025b4:	2201      	movs	r2, #1
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	091b      	lsrs	r3, r3, #4
 80025ca:	f003 0201 	and.w	r2, r3, #1
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 0303 	and.w	r3, r3, #3
 80025e8:	2b03      	cmp	r3, #3
 80025ea:	d017      	beq.n	800261c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	2203      	movs	r2, #3
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4013      	ands	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 0303 	and.w	r3, r3, #3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d123      	bne.n	8002670 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	08da      	lsrs	r2, r3, #3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3208      	adds	r2, #8
 8002630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002634:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	220f      	movs	r2, #15
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	691a      	ldr	r2, [r3, #16]
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	08da      	lsrs	r2, r3, #3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	3208      	adds	r2, #8
 800266a:	69b9      	ldr	r1, [r7, #24]
 800266c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	2203      	movs	r2, #3
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 0203 	and.w	r2, r3, #3
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 80b4 	beq.w	800281a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	4b60      	ldr	r3, [pc, #384]	@ (8002838 <HAL_GPIO_Init+0x30c>)
 80026b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ba:	4a5f      	ldr	r2, [pc, #380]	@ (8002838 <HAL_GPIO_Init+0x30c>)
 80026bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80026c2:	4b5d      	ldr	r3, [pc, #372]	@ (8002838 <HAL_GPIO_Init+0x30c>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026ce:	4a5b      	ldr	r2, [pc, #364]	@ (800283c <HAL_GPIO_Init+0x310>)
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	089b      	lsrs	r3, r3, #2
 80026d4:	3302      	adds	r3, #2
 80026d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f003 0303 	and.w	r3, r3, #3
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	220f      	movs	r2, #15
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43db      	mvns	r3, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4013      	ands	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a52      	ldr	r2, [pc, #328]	@ (8002840 <HAL_GPIO_Init+0x314>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d02b      	beq.n	8002752 <HAL_GPIO_Init+0x226>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a51      	ldr	r2, [pc, #324]	@ (8002844 <HAL_GPIO_Init+0x318>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d025      	beq.n	800274e <HAL_GPIO_Init+0x222>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a50      	ldr	r2, [pc, #320]	@ (8002848 <HAL_GPIO_Init+0x31c>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d01f      	beq.n	800274a <HAL_GPIO_Init+0x21e>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a4f      	ldr	r2, [pc, #316]	@ (800284c <HAL_GPIO_Init+0x320>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d019      	beq.n	8002746 <HAL_GPIO_Init+0x21a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a4e      	ldr	r2, [pc, #312]	@ (8002850 <HAL_GPIO_Init+0x324>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d013      	beq.n	8002742 <HAL_GPIO_Init+0x216>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a4d      	ldr	r2, [pc, #308]	@ (8002854 <HAL_GPIO_Init+0x328>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d00d      	beq.n	800273e <HAL_GPIO_Init+0x212>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a4c      	ldr	r2, [pc, #304]	@ (8002858 <HAL_GPIO_Init+0x32c>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d007      	beq.n	800273a <HAL_GPIO_Init+0x20e>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a4b      	ldr	r2, [pc, #300]	@ (800285c <HAL_GPIO_Init+0x330>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d101      	bne.n	8002736 <HAL_GPIO_Init+0x20a>
 8002732:	2307      	movs	r3, #7
 8002734:	e00e      	b.n	8002754 <HAL_GPIO_Init+0x228>
 8002736:	2308      	movs	r3, #8
 8002738:	e00c      	b.n	8002754 <HAL_GPIO_Init+0x228>
 800273a:	2306      	movs	r3, #6
 800273c:	e00a      	b.n	8002754 <HAL_GPIO_Init+0x228>
 800273e:	2305      	movs	r3, #5
 8002740:	e008      	b.n	8002754 <HAL_GPIO_Init+0x228>
 8002742:	2304      	movs	r3, #4
 8002744:	e006      	b.n	8002754 <HAL_GPIO_Init+0x228>
 8002746:	2303      	movs	r3, #3
 8002748:	e004      	b.n	8002754 <HAL_GPIO_Init+0x228>
 800274a:	2302      	movs	r3, #2
 800274c:	e002      	b.n	8002754 <HAL_GPIO_Init+0x228>
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <HAL_GPIO_Init+0x228>
 8002752:	2300      	movs	r3, #0
 8002754:	69fa      	ldr	r2, [r7, #28]
 8002756:	f002 0203 	and.w	r2, r2, #3
 800275a:	0092      	lsls	r2, r2, #2
 800275c:	4093      	lsls	r3, r2
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4313      	orrs	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002764:	4935      	ldr	r1, [pc, #212]	@ (800283c <HAL_GPIO_Init+0x310>)
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	089b      	lsrs	r3, r3, #2
 800276a:	3302      	adds	r3, #2
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002772:	4b3b      	ldr	r3, [pc, #236]	@ (8002860 <HAL_GPIO_Init+0x334>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	43db      	mvns	r3, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4013      	ands	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	4313      	orrs	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002796:	4a32      	ldr	r2, [pc, #200]	@ (8002860 <HAL_GPIO_Init+0x334>)
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800279c:	4b30      	ldr	r3, [pc, #192]	@ (8002860 <HAL_GPIO_Init+0x334>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	43db      	mvns	r3, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4013      	ands	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	4313      	orrs	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027c0:	4a27      	ldr	r2, [pc, #156]	@ (8002860 <HAL_GPIO_Init+0x334>)
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027c6:	4b26      	ldr	r3, [pc, #152]	@ (8002860 <HAL_GPIO_Init+0x334>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	43db      	mvns	r3, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4013      	ands	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027ea:	4a1d      	ldr	r2, [pc, #116]	@ (8002860 <HAL_GPIO_Init+0x334>)
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002860 <HAL_GPIO_Init+0x334>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	43db      	mvns	r3, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	4313      	orrs	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002814:	4a12      	ldr	r2, [pc, #72]	@ (8002860 <HAL_GPIO_Init+0x334>)
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	3301      	adds	r3, #1
 800281e:	61fb      	str	r3, [r7, #28]
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	2b0f      	cmp	r3, #15
 8002824:	f67f ae90 	bls.w	8002548 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002828:	bf00      	nop
 800282a:	bf00      	nop
 800282c:	3724      	adds	r7, #36	@ 0x24
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	40023800 	.word	0x40023800
 800283c:	40013800 	.word	0x40013800
 8002840:	40020000 	.word	0x40020000
 8002844:	40020400 	.word	0x40020400
 8002848:	40020800 	.word	0x40020800
 800284c:	40020c00 	.word	0x40020c00
 8002850:	40021000 	.word	0x40021000
 8002854:	40021400 	.word	0x40021400
 8002858:	40021800 	.word	0x40021800
 800285c:	40021c00 	.word	0x40021c00
 8002860:	40013c00 	.word	0x40013c00

08002864 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	460b      	mov	r3, r1
 800286e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691a      	ldr	r2, [r3, #16]
 8002874:	887b      	ldrh	r3, [r7, #2]
 8002876:	4013      	ands	r3, r2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d002      	beq.n	8002882 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800287c:	2301      	movs	r3, #1
 800287e:	73fb      	strb	r3, [r7, #15]
 8002880:	e001      	b.n	8002886 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002882:	2300      	movs	r3, #0
 8002884:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002886:	7bfb      	ldrb	r3, [r7, #15]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	807b      	strh	r3, [r7, #2]
 80028a0:	4613      	mov	r3, r2
 80028a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028a4:	787b      	ldrb	r3, [r7, #1]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028aa:	887a      	ldrh	r2, [r7, #2]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028b0:	e003      	b.n	80028ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028b2:	887b      	ldrh	r3, [r7, #2]
 80028b4:	041a      	lsls	r2, r3, #16
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	619a      	str	r2, [r3, #24]
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b085      	sub	sp, #20
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
 80028ce:	460b      	mov	r3, r1
 80028d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028d8:	887a      	ldrh	r2, [r7, #2]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	4013      	ands	r3, r2
 80028de:	041a      	lsls	r2, r3, #16
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	43d9      	mvns	r1, r3
 80028e4:	887b      	ldrh	r3, [r7, #2]
 80028e6:	400b      	ands	r3, r1
 80028e8:	431a      	orrs	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	619a      	str	r2, [r3, #24]
}
 80028ee:	bf00      	nop
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b086      	sub	sp, #24
 80028fe:	af02      	add	r7, sp, #8
 8002900:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e059      	b.n	80029c0 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d106      	bne.n	800292c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f008 f9b6 	bl	800ac98 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2203      	movs	r2, #3
 8002930:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800293a:	d102      	bne.n	8002942 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f004 ffc3 	bl	80078d2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6818      	ldr	r0, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	7c1a      	ldrb	r2, [r3, #16]
 8002954:	f88d 2000 	strb.w	r2, [sp]
 8002958:	3304      	adds	r3, #4
 800295a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800295c:	f004 ff44 	bl	80077e8 <USB_CoreInit>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d005      	beq.n	8002972 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2202      	movs	r2, #2
 800296a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e026      	b.n	80029c0 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2101      	movs	r1, #1
 8002978:	4618      	mov	r0, r3
 800297a:	f004 ffbb 	bl	80078f4 <USB_SetCurrentMode>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2202      	movs	r2, #2
 8002988:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e017      	b.n	80029c0 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6818      	ldr	r0, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	7c1a      	ldrb	r2, [r3, #16]
 8002998:	f88d 2000 	strb.w	r2, [sp]
 800299c:	3304      	adds	r3, #4
 800299e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029a0:	f005 f964 	bl	8007c6c <USB_HostInit>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d005      	beq.n	80029b6 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2202      	movs	r2, #2
 80029ae:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e004      	b.n	80029c0 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80029c8:	b590      	push	{r4, r7, lr}
 80029ca:	b08b      	sub	sp, #44	@ 0x2c
 80029cc:	af04      	add	r7, sp, #16
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	4608      	mov	r0, r1
 80029d2:	4611      	mov	r1, r2
 80029d4:	461a      	mov	r2, r3
 80029d6:	4603      	mov	r3, r0
 80029d8:	70fb      	strb	r3, [r7, #3]
 80029da:	460b      	mov	r3, r1
 80029dc:	70bb      	strb	r3, [r7, #2]
 80029de:	4613      	mov	r3, r2
 80029e0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80029e2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80029e4:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d101      	bne.n	80029f4 <HAL_HCD_HC_Init+0x2c>
 80029f0:	2302      	movs	r3, #2
 80029f2:	e09d      	b.n	8002b30 <HAL_HCD_HC_Init+0x168>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80029fc:	78fa      	ldrb	r2, [r7, #3]
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	011b      	lsls	r3, r3, #4
 8002a04:	1a9b      	subs	r3, r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	3319      	adds	r3, #25
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002a10:	78fa      	ldrb	r2, [r7, #3]
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	4613      	mov	r3, r2
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	1a9b      	subs	r3, r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	3314      	adds	r3, #20
 8002a20:	787a      	ldrb	r2, [r7, #1]
 8002a22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002a24:	78fa      	ldrb	r2, [r7, #3]
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	011b      	lsls	r3, r3, #4
 8002a2c:	1a9b      	subs	r3, r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	3315      	adds	r3, #21
 8002a34:	78fa      	ldrb	r2, [r7, #3]
 8002a36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002a38:	78fa      	ldrb	r2, [r7, #3]
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	1a9b      	subs	r3, r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	3326      	adds	r3, #38	@ 0x26
 8002a48:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002a4c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002a4e:	78fa      	ldrb	r2, [r7, #3]
 8002a50:	78bb      	ldrb	r3, [r7, #2]
 8002a52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a56:	b2d8      	uxtb	r0, r3
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	011b      	lsls	r3, r3, #4
 8002a5e:	1a9b      	subs	r3, r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	440b      	add	r3, r1
 8002a64:	3316      	adds	r3, #22
 8002a66:	4602      	mov	r2, r0
 8002a68:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002a6a:	78fb      	ldrb	r3, [r7, #3]
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 fbc8 	bl	8003204 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002a74:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	da0a      	bge.n	8002a92 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002a7c:	78fa      	ldrb	r2, [r7, #3]
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	4613      	mov	r3, r2
 8002a82:	011b      	lsls	r3, r3, #4
 8002a84:	1a9b      	subs	r3, r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	3317      	adds	r3, #23
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	701a      	strb	r2, [r3, #0]
 8002a90:	e009      	b.n	8002aa6 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002a92:	78fa      	ldrb	r2, [r7, #3]
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	1a9b      	subs	r3, r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	3317      	adds	r3, #23
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f005 fa42 	bl	8007f34 <USB_GetHostSpeed>
 8002ab0:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002ab2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d10b      	bne.n	8002ad2 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002aba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d107      	bne.n	8002ad2 <HAL_HCD_HC_Init+0x10a>
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d104      	bne.n	8002ad2 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	2bbc      	cmp	r3, #188	@ 0xbc
 8002acc:	d901      	bls.n	8002ad2 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002ace:	23bc      	movs	r3, #188	@ 0xbc
 8002ad0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002ad2:	78fa      	ldrb	r2, [r7, #3]
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	011b      	lsls	r3, r3, #4
 8002ada:	1a9b      	subs	r3, r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	440b      	add	r3, r1
 8002ae0:	3318      	adds	r3, #24
 8002ae2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002ae6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002ae8:	78fa      	ldrb	r2, [r7, #3]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	b298      	uxth	r0, r3
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	4613      	mov	r3, r2
 8002af2:	011b      	lsls	r3, r3, #4
 8002af4:	1a9b      	subs	r3, r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	3328      	adds	r3, #40	@ 0x28
 8002afc:	4602      	mov	r2, r0
 8002afe:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6818      	ldr	r0, [r3, #0]
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	787c      	ldrb	r4, [r7, #1]
 8002b0a:	78ba      	ldrb	r2, [r7, #2]
 8002b0c:	78f9      	ldrb	r1, [r7, #3]
 8002b0e:	9302      	str	r3, [sp, #8]
 8002b10:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002b14:	9301      	str	r3, [sp, #4]
 8002b16:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	4623      	mov	r3, r4
 8002b1e:	f005 fa31 	bl	8007f84 <USB_HC_Init>
 8002b22:	4603      	mov	r3, r0
 8002b24:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	371c      	adds	r7, #28
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd90      	pop	{r4, r7, pc}

08002b38 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	460b      	mov	r3, r1
 8002b42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002b44:	2300      	movs	r3, #0
 8002b46:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d101      	bne.n	8002b56 <HAL_HCD_HC_Halt+0x1e>
 8002b52:	2302      	movs	r3, #2
 8002b54:	e00f      	b.n	8002b76 <HAL_HCD_HC_Halt+0x3e>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	78fa      	ldrb	r2, [r7, #3]
 8002b64:	4611      	mov	r1, r2
 8002b66:	4618      	mov	r0, r3
 8002b68:	f005 fdc3 	bl	80086f2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
	...

08002b80 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	4608      	mov	r0, r1
 8002b8a:	4611      	mov	r1, r2
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4603      	mov	r3, r0
 8002b90:	70fb      	strb	r3, [r7, #3]
 8002b92:	460b      	mov	r3, r1
 8002b94:	70bb      	strb	r3, [r7, #2]
 8002b96:	4613      	mov	r3, r2
 8002b98:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002b9a:	78fa      	ldrb	r2, [r7, #3]
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	1a9b      	subs	r3, r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	3317      	adds	r3, #23
 8002baa:	78ba      	ldrb	r2, [r7, #2]
 8002bac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002bae:	78fa      	ldrb	r2, [r7, #3]
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	1a9b      	subs	r3, r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	440b      	add	r3, r1
 8002bbc:	3326      	adds	r3, #38	@ 0x26
 8002bbe:	787a      	ldrb	r2, [r7, #1]
 8002bc0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002bc2:	7c3b      	ldrb	r3, [r7, #16]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d114      	bne.n	8002bf2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002bc8:	78fa      	ldrb	r2, [r7, #3]
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	011b      	lsls	r3, r3, #4
 8002bd0:	1a9b      	subs	r3, r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	332a      	adds	r3, #42	@ 0x2a
 8002bd8:	2203      	movs	r2, #3
 8002bda:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002bdc:	78fa      	ldrb	r2, [r7, #3]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	011b      	lsls	r3, r3, #4
 8002be4:	1a9b      	subs	r3, r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	3319      	adds	r3, #25
 8002bec:	7f3a      	ldrb	r2, [r7, #28]
 8002bee:	701a      	strb	r2, [r3, #0]
 8002bf0:	e009      	b.n	8002c06 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002bf2:	78fa      	ldrb	r2, [r7, #3]
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	011b      	lsls	r3, r3, #4
 8002bfa:	1a9b      	subs	r3, r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	440b      	add	r3, r1
 8002c00:	332a      	adds	r3, #42	@ 0x2a
 8002c02:	2202      	movs	r2, #2
 8002c04:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002c06:	787b      	ldrb	r3, [r7, #1]
 8002c08:	2b03      	cmp	r3, #3
 8002c0a:	f200 8102 	bhi.w	8002e12 <HAL_HCD_HC_SubmitRequest+0x292>
 8002c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8002c14 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c14:	08002c25 	.word	0x08002c25
 8002c18:	08002dfd 	.word	0x08002dfd
 8002c1c:	08002ce9 	.word	0x08002ce9
 8002c20:	08002d73 	.word	0x08002d73
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002c24:	7c3b      	ldrb	r3, [r7, #16]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	f040 80f5 	bne.w	8002e16 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002c2c:	78bb      	ldrb	r3, [r7, #2]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d12d      	bne.n	8002c8e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002c32:	8b3b      	ldrh	r3, [r7, #24]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d109      	bne.n	8002c4c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002c38:	78fa      	ldrb	r2, [r7, #3]
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	011b      	lsls	r3, r3, #4
 8002c40:	1a9b      	subs	r3, r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	333d      	adds	r3, #61	@ 0x3d
 8002c48:	2201      	movs	r2, #1
 8002c4a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002c4c:	78fa      	ldrb	r2, [r7, #3]
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	4613      	mov	r3, r2
 8002c52:	011b      	lsls	r3, r3, #4
 8002c54:	1a9b      	subs	r3, r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	333d      	adds	r3, #61	@ 0x3d
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10a      	bne.n	8002c78 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c62:	78fa      	ldrb	r2, [r7, #3]
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	4613      	mov	r3, r2
 8002c68:	011b      	lsls	r3, r3, #4
 8002c6a:	1a9b      	subs	r3, r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	440b      	add	r3, r1
 8002c70:	332a      	adds	r3, #42	@ 0x2a
 8002c72:	2200      	movs	r2, #0
 8002c74:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002c76:	e0ce      	b.n	8002e16 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c78:	78fa      	ldrb	r2, [r7, #3]
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	011b      	lsls	r3, r3, #4
 8002c80:	1a9b      	subs	r3, r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	332a      	adds	r3, #42	@ 0x2a
 8002c88:	2202      	movs	r2, #2
 8002c8a:	701a      	strb	r2, [r3, #0]
      break;
 8002c8c:	e0c3      	b.n	8002e16 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002c8e:	78fa      	ldrb	r2, [r7, #3]
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	4613      	mov	r3, r2
 8002c94:	011b      	lsls	r3, r3, #4
 8002c96:	1a9b      	subs	r3, r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	440b      	add	r3, r1
 8002c9c:	331a      	adds	r3, #26
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	f040 80b8 	bne.w	8002e16 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002ca6:	78fa      	ldrb	r2, [r7, #3]
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	4613      	mov	r3, r2
 8002cac:	011b      	lsls	r3, r3, #4
 8002cae:	1a9b      	subs	r3, r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	333c      	adds	r3, #60	@ 0x3c
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10a      	bne.n	8002cd2 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002cbc:	78fa      	ldrb	r2, [r7, #3]
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	332a      	adds	r3, #42	@ 0x2a
 8002ccc:	2200      	movs	r2, #0
 8002cce:	701a      	strb	r2, [r3, #0]
      break;
 8002cd0:	e0a1      	b.n	8002e16 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	011b      	lsls	r3, r3, #4
 8002cda:	1a9b      	subs	r3, r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	440b      	add	r3, r1
 8002ce0:	332a      	adds	r3, #42	@ 0x2a
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	701a      	strb	r2, [r3, #0]
      break;
 8002ce6:	e096      	b.n	8002e16 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002ce8:	78bb      	ldrb	r3, [r7, #2]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d120      	bne.n	8002d30 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002cee:	78fa      	ldrb	r2, [r7, #3]
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	1a9b      	subs	r3, r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	333d      	adds	r3, #61	@ 0x3d
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10a      	bne.n	8002d1a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d04:	78fa      	ldrb	r2, [r7, #3]
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	011b      	lsls	r3, r3, #4
 8002d0c:	1a9b      	subs	r3, r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	332a      	adds	r3, #42	@ 0x2a
 8002d14:	2200      	movs	r2, #0
 8002d16:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002d18:	e07e      	b.n	8002e18 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d1a:	78fa      	ldrb	r2, [r7, #3]
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	011b      	lsls	r3, r3, #4
 8002d22:	1a9b      	subs	r3, r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	440b      	add	r3, r1
 8002d28:	332a      	adds	r3, #42	@ 0x2a
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	701a      	strb	r2, [r3, #0]
      break;
 8002d2e:	e073      	b.n	8002e18 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002d30:	78fa      	ldrb	r2, [r7, #3]
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	4613      	mov	r3, r2
 8002d36:	011b      	lsls	r3, r3, #4
 8002d38:	1a9b      	subs	r3, r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	333c      	adds	r3, #60	@ 0x3c
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10a      	bne.n	8002d5c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d46:	78fa      	ldrb	r2, [r7, #3]
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	011b      	lsls	r3, r3, #4
 8002d4e:	1a9b      	subs	r3, r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	440b      	add	r3, r1
 8002d54:	332a      	adds	r3, #42	@ 0x2a
 8002d56:	2200      	movs	r2, #0
 8002d58:	701a      	strb	r2, [r3, #0]
      break;
 8002d5a:	e05d      	b.n	8002e18 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d5c:	78fa      	ldrb	r2, [r7, #3]
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	4613      	mov	r3, r2
 8002d62:	011b      	lsls	r3, r3, #4
 8002d64:	1a9b      	subs	r3, r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	332a      	adds	r3, #42	@ 0x2a
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	701a      	strb	r2, [r3, #0]
      break;
 8002d70:	e052      	b.n	8002e18 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002d72:	78bb      	ldrb	r3, [r7, #2]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d120      	bne.n	8002dba <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d78:	78fa      	ldrb	r2, [r7, #3]
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	011b      	lsls	r3, r3, #4
 8002d80:	1a9b      	subs	r3, r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	333d      	adds	r3, #61	@ 0x3d
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10a      	bne.n	8002da4 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d8e:	78fa      	ldrb	r2, [r7, #3]
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	4613      	mov	r3, r2
 8002d94:	011b      	lsls	r3, r3, #4
 8002d96:	1a9b      	subs	r3, r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	440b      	add	r3, r1
 8002d9c:	332a      	adds	r3, #42	@ 0x2a
 8002d9e:	2200      	movs	r2, #0
 8002da0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002da2:	e039      	b.n	8002e18 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002da4:	78fa      	ldrb	r2, [r7, #3]
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	4613      	mov	r3, r2
 8002daa:	011b      	lsls	r3, r3, #4
 8002dac:	1a9b      	subs	r3, r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	332a      	adds	r3, #42	@ 0x2a
 8002db4:	2202      	movs	r2, #2
 8002db6:	701a      	strb	r2, [r3, #0]
      break;
 8002db8:	e02e      	b.n	8002e18 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002dba:	78fa      	ldrb	r2, [r7, #3]
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	011b      	lsls	r3, r3, #4
 8002dc2:	1a9b      	subs	r3, r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	440b      	add	r3, r1
 8002dc8:	333c      	adds	r3, #60	@ 0x3c
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10a      	bne.n	8002de6 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002dd0:	78fa      	ldrb	r2, [r7, #3]
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	011b      	lsls	r3, r3, #4
 8002dd8:	1a9b      	subs	r3, r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	332a      	adds	r3, #42	@ 0x2a
 8002de0:	2200      	movs	r2, #0
 8002de2:	701a      	strb	r2, [r3, #0]
      break;
 8002de4:	e018      	b.n	8002e18 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002de6:	78fa      	ldrb	r2, [r7, #3]
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	4613      	mov	r3, r2
 8002dec:	011b      	lsls	r3, r3, #4
 8002dee:	1a9b      	subs	r3, r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	440b      	add	r3, r1
 8002df4:	332a      	adds	r3, #42	@ 0x2a
 8002df6:	2202      	movs	r2, #2
 8002df8:	701a      	strb	r2, [r3, #0]
      break;
 8002dfa:	e00d      	b.n	8002e18 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002dfc:	78fa      	ldrb	r2, [r7, #3]
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	4613      	mov	r3, r2
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	1a9b      	subs	r3, r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	440b      	add	r3, r1
 8002e0a:	332a      	adds	r3, #42	@ 0x2a
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	701a      	strb	r2, [r3, #0]
      break;
 8002e10:	e002      	b.n	8002e18 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002e12:	bf00      	nop
 8002e14:	e000      	b.n	8002e18 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002e16:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002e18:	78fa      	ldrb	r2, [r7, #3]
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	1a9b      	subs	r3, r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	332c      	adds	r3, #44	@ 0x2c
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002e2c:	78fa      	ldrb	r2, [r7, #3]
 8002e2e:	8b39      	ldrh	r1, [r7, #24]
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	4613      	mov	r3, r2
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	1a9b      	subs	r3, r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4403      	add	r3, r0
 8002e3c:	3334      	adds	r3, #52	@ 0x34
 8002e3e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002e40:	78fa      	ldrb	r2, [r7, #3]
 8002e42:	6879      	ldr	r1, [r7, #4]
 8002e44:	4613      	mov	r3, r2
 8002e46:	011b      	lsls	r3, r3, #4
 8002e48:	1a9b      	subs	r3, r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	440b      	add	r3, r1
 8002e4e:	334c      	adds	r3, #76	@ 0x4c
 8002e50:	2200      	movs	r2, #0
 8002e52:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002e54:	78fa      	ldrb	r2, [r7, #3]
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	011b      	lsls	r3, r3, #4
 8002e5c:	1a9b      	subs	r3, r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	440b      	add	r3, r1
 8002e62:	3338      	adds	r3, #56	@ 0x38
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002e68:	78fa      	ldrb	r2, [r7, #3]
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	011b      	lsls	r3, r3, #4
 8002e70:	1a9b      	subs	r3, r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	440b      	add	r3, r1
 8002e76:	3315      	adds	r3, #21
 8002e78:	78fa      	ldrb	r2, [r7, #3]
 8002e7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002e7c:	78fa      	ldrb	r2, [r7, #3]
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	011b      	lsls	r3, r3, #4
 8002e84:	1a9b      	subs	r3, r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	334d      	adds	r3, #77	@ 0x4d
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6818      	ldr	r0, [r3, #0]
 8002e94:	78fa      	ldrb	r2, [r7, #3]
 8002e96:	4613      	mov	r3, r2
 8002e98:	011b      	lsls	r3, r3, #4
 8002e9a:	1a9b      	subs	r3, r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	3310      	adds	r3, #16
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	1d19      	adds	r1, r3, #4
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	799b      	ldrb	r3, [r3, #6]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	f005 f996 	bl	80081dc <USB_HC_StartXfer>
 8002eb0:	4603      	mov	r3, r0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop

08002ebc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f004 fe84 	bl	8007be0 <USB_GetMode>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	f040 80fb 	bne.w	80030d6 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f004 fe47 	bl	8007b78 <USB_ReadInterrupts>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f000 80f1 	beq.w	80030d4 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f004 fe3e 	bl	8007b78 <USB_ReadInterrupts>
 8002efc:	4603      	mov	r3, r0
 8002efe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f06:	d104      	bne.n	8002f12 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002f10:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f004 fe2e 	bl	8007b78 <USB_ReadInterrupts>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f26:	d104      	bne.n	8002f32 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002f30:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f004 fe1e 	bl	8007b78 <USB_ReadInterrupts>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f42:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f46:	d104      	bne.n	8002f52 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002f50:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f004 fe0e 	bl	8007b78 <USB_ReadInterrupts>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d103      	bne.n	8002f6e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f004 fe00 	bl	8007b78 <USB_ReadInterrupts>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f82:	d120      	bne.n	8002fc6 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002f8c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d113      	bne.n	8002fc6 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002f9e:	2110      	movs	r1, #16
 8002fa0:	6938      	ldr	r0, [r7, #16]
 8002fa2:	f004 fcf3 	bl	800798c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002fa6:	6938      	ldr	r0, [r7, #16]
 8002fa8:	f004 fd22 	bl	80079f0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	7a5b      	ldrb	r3, [r3, #9]
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d105      	bne.n	8002fc0 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2101      	movs	r1, #1
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f004 ff1a 	bl	8007df4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f007 fee7 	bl	800ad94 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f004 fdd4 	bl	8007b78 <USB_ReadInterrupts>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fda:	d102      	bne.n	8002fe2 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f001 fd4d 	bl	8004a7c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f004 fdc6 	bl	8007b78 <USB_ReadInterrupts>
 8002fec:	4603      	mov	r3, r0
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d106      	bne.n	8003004 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f007 feb0 	bl	800ad5c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2208      	movs	r2, #8
 8003002:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f004 fdb5 	bl	8007b78 <USB_ReadInterrupts>
 800300e:	4603      	mov	r3, r0
 8003010:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003014:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003018:	d139      	bne.n	800308e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f005 fb56 	bl	80086d0 <USB_HC_ReadInterrupt>
 8003024:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003026:	2300      	movs	r3, #0
 8003028:	617b      	str	r3, [r7, #20]
 800302a:	e025      	b.n	8003078 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	f003 030f 	and.w	r3, r3, #15
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	fa22 f303 	lsr.w	r3, r2, r3
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b00      	cmp	r3, #0
 800303e:	d018      	beq.n	8003072 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	015a      	lsls	r2, r3, #5
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4413      	add	r3, r2
 8003048:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003052:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003056:	d106      	bne.n	8003066 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	b2db      	uxtb	r3, r3
 800305c:	4619      	mov	r1, r3
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f905 	bl	800326e <HCD_HC_IN_IRQHandler>
 8003064:	e005      	b.n	8003072 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	b2db      	uxtb	r3, r3
 800306a:	4619      	mov	r1, r3
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 ff67 	bl	8003f40 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	3301      	adds	r3, #1
 8003076:	617b      	str	r3, [r7, #20]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	795b      	ldrb	r3, [r3, #5]
 800307c:	461a      	mov	r2, r3
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	4293      	cmp	r3, r2
 8003082:	d3d3      	bcc.n	800302c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800308c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	f004 fd70 	bl	8007b78 <USB_ReadInterrupts>
 8003098:	4603      	mov	r3, r0
 800309a:	f003 0310 	and.w	r3, r3, #16
 800309e:	2b10      	cmp	r3, #16
 80030a0:	d101      	bne.n	80030a6 <HAL_HCD_IRQHandler+0x1ea>
 80030a2:	2301      	movs	r3, #1
 80030a4:	e000      	b.n	80030a8 <HAL_HCD_IRQHandler+0x1ec>
 80030a6:	2300      	movs	r3, #0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d014      	beq.n	80030d6 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	699a      	ldr	r2, [r3, #24]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0210 	bic.w	r2, r2, #16
 80030ba:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f001 fbfe 	bl	80048be <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	699a      	ldr	r2, [r3, #24]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f042 0210 	orr.w	r2, r2, #16
 80030d0:	619a      	str	r2, [r3, #24]
 80030d2:	e000      	b.n	80030d6 <HAL_HCD_IRQHandler+0x21a>
      return;
 80030d4:	bf00      	nop
    }
  }
}
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d101      	bne.n	80030f2 <HAL_HCD_Start+0x16>
 80030ee:	2302      	movs	r3, #2
 80030f0:	e013      	b.n	800311a <HAL_HCD_Start+0x3e>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2101      	movs	r1, #1
 8003100:	4618      	mov	r0, r3
 8003102:	f004 fede 	bl	8007ec2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f004 fbd0 	bl	80078b0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b082      	sub	sp, #8
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003130:	2b01      	cmp	r3, #1
 8003132:	d101      	bne.n	8003138 <HAL_HCD_Stop+0x16>
 8003134:	2302      	movs	r3, #2
 8003136:	e00d      	b.n	8003154 <HAL_HCD_Stop+0x32>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4618      	mov	r0, r3
 8003146:	f005 fc31 	bl	80089ac <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	f004 fe80 	bl	8007e6e <USB_ResetPort>
 800316e:	4603      	mov	r3, r0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	460b      	mov	r3, r1
 8003182:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003184:	78fa      	ldrb	r2, [r7, #3]
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	4613      	mov	r3, r2
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	1a9b      	subs	r3, r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	334c      	adds	r3, #76	@ 0x4c
 8003194:	781b      	ldrb	r3, [r3, #0]
}
 8003196:	4618      	mov	r0, r3
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
 80031aa:	460b      	mov	r3, r1
 80031ac:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80031ae:	78fa      	ldrb	r2, [r7, #3]
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	4613      	mov	r3, r2
 80031b4:	011b      	lsls	r3, r3, #4
 80031b6:	1a9b      	subs	r3, r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	440b      	add	r3, r1
 80031bc:	3338      	adds	r3, #56	@ 0x38
 80031be:	681b      	ldr	r3, [r3, #0]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f004 fec2 	bl	8007f62 <USB_GetCurrentFrame>
 80031de:	4603      	mov	r3, r0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f004 fe9d 	bl	8007f34 <USB_GetHostSpeed>
 80031fa:	4603      	mov	r3, r0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	460b      	mov	r3, r1
 800320e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003210:	78fa      	ldrb	r2, [r7, #3]
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	4613      	mov	r3, r2
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	1a9b      	subs	r3, r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	331a      	adds	r3, #26
 8003220:	2200      	movs	r2, #0
 8003222:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003224:	78fa      	ldrb	r2, [r7, #3]
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	011b      	lsls	r3, r3, #4
 800322c:	1a9b      	subs	r3, r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	331b      	adds	r3, #27
 8003234:	2200      	movs	r2, #0
 8003236:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003238:	78fa      	ldrb	r2, [r7, #3]
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	4613      	mov	r3, r2
 800323e:	011b      	lsls	r3, r3, #4
 8003240:	1a9b      	subs	r3, r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	3325      	adds	r3, #37	@ 0x25
 8003248:	2200      	movs	r2, #0
 800324a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 800324c:	78fa      	ldrb	r2, [r7, #3]
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	4613      	mov	r3, r2
 8003252:	011b      	lsls	r3, r3, #4
 8003254:	1a9b      	subs	r3, r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	3324      	adds	r3, #36	@ 0x24
 800325c:	2200      	movs	r2, #0
 800325e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b086      	sub	sp, #24
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
 8003276:	460b      	mov	r3, r1
 8003278:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	78fa      	ldrb	r2, [r7, #3]
 800328a:	4611      	mov	r1, r2
 800328c:	4618      	mov	r0, r3
 800328e:	f004 fc86 	bl	8007b9e <USB_ReadChInterrupts>
 8003292:	4603      	mov	r3, r0
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b04      	cmp	r3, #4
 800329a:	d11a      	bne.n	80032d2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800329c:	78fb      	ldrb	r3, [r7, #3]
 800329e:	015a      	lsls	r2, r3, #5
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	4413      	add	r3, r2
 80032a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032a8:	461a      	mov	r2, r3
 80032aa:	2304      	movs	r3, #4
 80032ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80032ae:	78fa      	ldrb	r2, [r7, #3]
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	1a9b      	subs	r3, r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	334d      	adds	r3, #77	@ 0x4d
 80032be:	2207      	movs	r2, #7
 80032c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	78fa      	ldrb	r2, [r7, #3]
 80032c8:	4611      	mov	r1, r2
 80032ca:	4618      	mov	r0, r3
 80032cc:	f005 fa11 	bl	80086f2 <USB_HC_Halt>
 80032d0:	e09e      	b.n	8003410 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	78fa      	ldrb	r2, [r7, #3]
 80032d8:	4611      	mov	r1, r2
 80032da:	4618      	mov	r0, r3
 80032dc:	f004 fc5f 	bl	8007b9e <USB_ReadChInterrupts>
 80032e0:	4603      	mov	r3, r0
 80032e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032ea:	d11b      	bne.n	8003324 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80032ec:	78fb      	ldrb	r3, [r7, #3]
 80032ee:	015a      	lsls	r2, r3, #5
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	4413      	add	r3, r2
 80032f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032f8:	461a      	mov	r2, r3
 80032fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003300:	78fa      	ldrb	r2, [r7, #3]
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	4613      	mov	r3, r2
 8003306:	011b      	lsls	r3, r3, #4
 8003308:	1a9b      	subs	r3, r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	334d      	adds	r3, #77	@ 0x4d
 8003310:	2208      	movs	r2, #8
 8003312:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	78fa      	ldrb	r2, [r7, #3]
 800331a:	4611      	mov	r1, r2
 800331c:	4618      	mov	r0, r3
 800331e:	f005 f9e8 	bl	80086f2 <USB_HC_Halt>
 8003322:	e075      	b.n	8003410 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	78fa      	ldrb	r2, [r7, #3]
 800332a:	4611      	mov	r1, r2
 800332c:	4618      	mov	r0, r3
 800332e:	f004 fc36 	bl	8007b9e <USB_ReadChInterrupts>
 8003332:	4603      	mov	r3, r0
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b08      	cmp	r3, #8
 800333a:	d11a      	bne.n	8003372 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800333c:	78fb      	ldrb	r3, [r7, #3]
 800333e:	015a      	lsls	r2, r3, #5
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	4413      	add	r3, r2
 8003344:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003348:	461a      	mov	r2, r3
 800334a:	2308      	movs	r3, #8
 800334c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800334e:	78fa      	ldrb	r2, [r7, #3]
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	334d      	adds	r3, #77	@ 0x4d
 800335e:	2206      	movs	r2, #6
 8003360:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	78fa      	ldrb	r2, [r7, #3]
 8003368:	4611      	mov	r1, r2
 800336a:	4618      	mov	r0, r3
 800336c:	f005 f9c1 	bl	80086f2 <USB_HC_Halt>
 8003370:	e04e      	b.n	8003410 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	78fa      	ldrb	r2, [r7, #3]
 8003378:	4611      	mov	r1, r2
 800337a:	4618      	mov	r0, r3
 800337c:	f004 fc0f 	bl	8007b9e <USB_ReadChInterrupts>
 8003380:	4603      	mov	r3, r0
 8003382:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003386:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800338a:	d11b      	bne.n	80033c4 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800338c:	78fb      	ldrb	r3, [r7, #3]
 800338e:	015a      	lsls	r2, r3, #5
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	4413      	add	r3, r2
 8003394:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003398:	461a      	mov	r2, r3
 800339a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800339e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80033a0:	78fa      	ldrb	r2, [r7, #3]
 80033a2:	6879      	ldr	r1, [r7, #4]
 80033a4:	4613      	mov	r3, r2
 80033a6:	011b      	lsls	r3, r3, #4
 80033a8:	1a9b      	subs	r3, r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	440b      	add	r3, r1
 80033ae:	334d      	adds	r3, #77	@ 0x4d
 80033b0:	2209      	movs	r2, #9
 80033b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	78fa      	ldrb	r2, [r7, #3]
 80033ba:	4611      	mov	r1, r2
 80033bc:	4618      	mov	r0, r3
 80033be:	f005 f998 	bl	80086f2 <USB_HC_Halt>
 80033c2:	e025      	b.n	8003410 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	78fa      	ldrb	r2, [r7, #3]
 80033ca:	4611      	mov	r1, r2
 80033cc:	4618      	mov	r0, r3
 80033ce:	f004 fbe6 	bl	8007b9e <USB_ReadChInterrupts>
 80033d2:	4603      	mov	r3, r0
 80033d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033d8:	2b80      	cmp	r3, #128	@ 0x80
 80033da:	d119      	bne.n	8003410 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80033dc:	78fb      	ldrb	r3, [r7, #3]
 80033de:	015a      	lsls	r2, r3, #5
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033e8:	461a      	mov	r2, r3
 80033ea:	2380      	movs	r3, #128	@ 0x80
 80033ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80033ee:	78fa      	ldrb	r2, [r7, #3]
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	4613      	mov	r3, r2
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	1a9b      	subs	r3, r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	440b      	add	r3, r1
 80033fc:	334d      	adds	r3, #77	@ 0x4d
 80033fe:	2207      	movs	r2, #7
 8003400:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	78fa      	ldrb	r2, [r7, #3]
 8003408:	4611      	mov	r1, r2
 800340a:	4618      	mov	r0, r3
 800340c:	f005 f971 	bl	80086f2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	78fa      	ldrb	r2, [r7, #3]
 8003416:	4611      	mov	r1, r2
 8003418:	4618      	mov	r0, r3
 800341a:	f004 fbc0 	bl	8007b9e <USB_ReadChInterrupts>
 800341e:	4603      	mov	r3, r0
 8003420:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003424:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003428:	d112      	bne.n	8003450 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	78fa      	ldrb	r2, [r7, #3]
 8003430:	4611      	mov	r1, r2
 8003432:	4618      	mov	r0, r3
 8003434:	f005 f95d 	bl	80086f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003438:	78fb      	ldrb	r3, [r7, #3]
 800343a:	015a      	lsls	r2, r3, #5
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	4413      	add	r3, r2
 8003440:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003444:	461a      	mov	r2, r3
 8003446:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800344a:	6093      	str	r3, [r2, #8]
 800344c:	f000 bd75 	b.w	8003f3a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	78fa      	ldrb	r2, [r7, #3]
 8003456:	4611      	mov	r1, r2
 8003458:	4618      	mov	r0, r3
 800345a:	f004 fba0 	bl	8007b9e <USB_ReadChInterrupts>
 800345e:	4603      	mov	r3, r0
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b01      	cmp	r3, #1
 8003466:	f040 8128 	bne.w	80036ba <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800346a:	78fb      	ldrb	r3, [r7, #3]
 800346c:	015a      	lsls	r2, r3, #5
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	4413      	add	r3, r2
 8003472:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003476:	461a      	mov	r2, r3
 8003478:	2320      	movs	r3, #32
 800347a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800347c:	78fa      	ldrb	r2, [r7, #3]
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	4613      	mov	r3, r2
 8003482:	011b      	lsls	r3, r3, #4
 8003484:	1a9b      	subs	r3, r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	331b      	adds	r3, #27
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d119      	bne.n	80034c6 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003492:	78fa      	ldrb	r2, [r7, #3]
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	4613      	mov	r3, r2
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	1a9b      	subs	r3, r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	440b      	add	r3, r1
 80034a0:	331b      	adds	r3, #27
 80034a2:	2200      	movs	r2, #0
 80034a4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80034a6:	78fb      	ldrb	r3, [r7, #3]
 80034a8:	015a      	lsls	r2, r3, #5
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	4413      	add	r3, r2
 80034ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	78fa      	ldrb	r2, [r7, #3]
 80034b6:	0151      	lsls	r1, r2, #5
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	440a      	add	r2, r1
 80034bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80034c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034c4:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	799b      	ldrb	r3, [r3, #6]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d01b      	beq.n	8003506 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80034ce:	78fa      	ldrb	r2, [r7, #3]
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	1a9b      	subs	r3, r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	440b      	add	r3, r1
 80034dc:	3330      	adds	r3, #48	@ 0x30
 80034de:	6819      	ldr	r1, [r3, #0]
 80034e0:	78fb      	ldrb	r3, [r7, #3]
 80034e2:	015a      	lsls	r2, r3, #5
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	4413      	add	r3, r2
 80034e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034f2:	78fa      	ldrb	r2, [r7, #3]
 80034f4:	1ac9      	subs	r1, r1, r3
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	4613      	mov	r3, r2
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	1a9b      	subs	r3, r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4403      	add	r3, r0
 8003502:	3338      	adds	r3, #56	@ 0x38
 8003504:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003506:	78fa      	ldrb	r2, [r7, #3]
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	4613      	mov	r3, r2
 800350c:	011b      	lsls	r3, r3, #4
 800350e:	1a9b      	subs	r3, r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	440b      	add	r3, r1
 8003514:	334d      	adds	r3, #77	@ 0x4d
 8003516:	2201      	movs	r2, #1
 8003518:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800351a:	78fa      	ldrb	r2, [r7, #3]
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	4613      	mov	r3, r2
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	1a9b      	subs	r3, r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	440b      	add	r3, r1
 8003528:	3344      	adds	r3, #68	@ 0x44
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800352e:	78fb      	ldrb	r3, [r7, #3]
 8003530:	015a      	lsls	r2, r3, #5
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	4413      	add	r3, r2
 8003536:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800353a:	461a      	mov	r2, r3
 800353c:	2301      	movs	r3, #1
 800353e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003540:	78fa      	ldrb	r2, [r7, #3]
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	4613      	mov	r3, r2
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	1a9b      	subs	r3, r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	440b      	add	r3, r1
 800354e:	3326      	adds	r3, #38	@ 0x26
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00a      	beq.n	800356c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003556:	78fa      	ldrb	r2, [r7, #3]
 8003558:	6879      	ldr	r1, [r7, #4]
 800355a:	4613      	mov	r3, r2
 800355c:	011b      	lsls	r3, r3, #4
 800355e:	1a9b      	subs	r3, r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	440b      	add	r3, r1
 8003564:	3326      	adds	r3, #38	@ 0x26
 8003566:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003568:	2b02      	cmp	r3, #2
 800356a:	d110      	bne.n	800358e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	78fa      	ldrb	r2, [r7, #3]
 8003572:	4611      	mov	r1, r2
 8003574:	4618      	mov	r0, r3
 8003576:	f005 f8bc 	bl	80086f2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800357a:	78fb      	ldrb	r3, [r7, #3]
 800357c:	015a      	lsls	r2, r3, #5
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	4413      	add	r3, r2
 8003582:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003586:	461a      	mov	r2, r3
 8003588:	2310      	movs	r3, #16
 800358a:	6093      	str	r3, [r2, #8]
 800358c:	e03d      	b.n	800360a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800358e:	78fa      	ldrb	r2, [r7, #3]
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	1a9b      	subs	r3, r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	3326      	adds	r3, #38	@ 0x26
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	2b03      	cmp	r3, #3
 80035a2:	d00a      	beq.n	80035ba <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80035a4:	78fa      	ldrb	r2, [r7, #3]
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	1a9b      	subs	r3, r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	3326      	adds	r3, #38	@ 0x26
 80035b4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d127      	bne.n	800360a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80035ba:	78fb      	ldrb	r3, [r7, #3]
 80035bc:	015a      	lsls	r2, r3, #5
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	4413      	add	r3, r2
 80035c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	78fa      	ldrb	r2, [r7, #3]
 80035ca:	0151      	lsls	r1, r2, #5
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	440a      	add	r2, r1
 80035d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80035d4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80035d8:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80035da:	78fa      	ldrb	r2, [r7, #3]
 80035dc:	6879      	ldr	r1, [r7, #4]
 80035de:	4613      	mov	r3, r2
 80035e0:	011b      	lsls	r3, r3, #4
 80035e2:	1a9b      	subs	r3, r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	440b      	add	r3, r1
 80035e8:	334c      	adds	r3, #76	@ 0x4c
 80035ea:	2201      	movs	r2, #1
 80035ec:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80035ee:	78fa      	ldrb	r2, [r7, #3]
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	4613      	mov	r3, r2
 80035f4:	011b      	lsls	r3, r3, #4
 80035f6:	1a9b      	subs	r3, r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	440b      	add	r3, r1
 80035fc:	334c      	adds	r3, #76	@ 0x4c
 80035fe:	781a      	ldrb	r2, [r3, #0]
 8003600:	78fb      	ldrb	r3, [r7, #3]
 8003602:	4619      	mov	r1, r3
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f007 fbd3 	bl	800adb0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	799b      	ldrb	r3, [r3, #6]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d13b      	bne.n	800368a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003612:	78fa      	ldrb	r2, [r7, #3]
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	4613      	mov	r3, r2
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	1a9b      	subs	r3, r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	440b      	add	r3, r1
 8003620:	3338      	adds	r3, #56	@ 0x38
 8003622:	6819      	ldr	r1, [r3, #0]
 8003624:	78fa      	ldrb	r2, [r7, #3]
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	4613      	mov	r3, r2
 800362a:	011b      	lsls	r3, r3, #4
 800362c:	1a9b      	subs	r3, r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4403      	add	r3, r0
 8003632:	3328      	adds	r3, #40	@ 0x28
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	440b      	add	r3, r1
 8003638:	1e59      	subs	r1, r3, #1
 800363a:	78fa      	ldrb	r2, [r7, #3]
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	4613      	mov	r3, r2
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	1a9b      	subs	r3, r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4403      	add	r3, r0
 8003648:	3328      	adds	r3, #40	@ 0x28
 800364a:	881b      	ldrh	r3, [r3, #0]
 800364c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 8470 	beq.w	8003f3a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800365a:	78fa      	ldrb	r2, [r7, #3]
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	4613      	mov	r3, r2
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	1a9b      	subs	r3, r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	440b      	add	r3, r1
 8003668:	333c      	adds	r3, #60	@ 0x3c
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	78fa      	ldrb	r2, [r7, #3]
 800366e:	f083 0301 	eor.w	r3, r3, #1
 8003672:	b2d8      	uxtb	r0, r3
 8003674:	6879      	ldr	r1, [r7, #4]
 8003676:	4613      	mov	r3, r2
 8003678:	011b      	lsls	r3, r3, #4
 800367a:	1a9b      	subs	r3, r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	440b      	add	r3, r1
 8003680:	333c      	adds	r3, #60	@ 0x3c
 8003682:	4602      	mov	r2, r0
 8003684:	701a      	strb	r2, [r3, #0]
 8003686:	f000 bc58 	b.w	8003f3a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800368a:	78fa      	ldrb	r2, [r7, #3]
 800368c:	6879      	ldr	r1, [r7, #4]
 800368e:	4613      	mov	r3, r2
 8003690:	011b      	lsls	r3, r3, #4
 8003692:	1a9b      	subs	r3, r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	440b      	add	r3, r1
 8003698:	333c      	adds	r3, #60	@ 0x3c
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	78fa      	ldrb	r2, [r7, #3]
 800369e:	f083 0301 	eor.w	r3, r3, #1
 80036a2:	b2d8      	uxtb	r0, r3
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	4613      	mov	r3, r2
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	1a9b      	subs	r3, r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	440b      	add	r3, r1
 80036b0:	333c      	adds	r3, #60	@ 0x3c
 80036b2:	4602      	mov	r2, r0
 80036b4:	701a      	strb	r2, [r3, #0]
 80036b6:	f000 bc40 	b.w	8003f3a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	78fa      	ldrb	r2, [r7, #3]
 80036c0:	4611      	mov	r1, r2
 80036c2:	4618      	mov	r0, r3
 80036c4:	f004 fa6b 	bl	8007b9e <USB_ReadChInterrupts>
 80036c8:	4603      	mov	r3, r0
 80036ca:	f003 0320 	and.w	r3, r3, #32
 80036ce:	2b20      	cmp	r3, #32
 80036d0:	d131      	bne.n	8003736 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80036d2:	78fb      	ldrb	r3, [r7, #3]
 80036d4:	015a      	lsls	r2, r3, #5
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	4413      	add	r3, r2
 80036da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036de:	461a      	mov	r2, r3
 80036e0:	2320      	movs	r3, #32
 80036e2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80036e4:	78fa      	ldrb	r2, [r7, #3]
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	4613      	mov	r3, r2
 80036ea:	011b      	lsls	r3, r3, #4
 80036ec:	1a9b      	subs	r3, r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	440b      	add	r3, r1
 80036f2:	331a      	adds	r3, #26
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	f040 841f 	bne.w	8003f3a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80036fc:	78fa      	ldrb	r2, [r7, #3]
 80036fe:	6879      	ldr	r1, [r7, #4]
 8003700:	4613      	mov	r3, r2
 8003702:	011b      	lsls	r3, r3, #4
 8003704:	1a9b      	subs	r3, r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	331b      	adds	r3, #27
 800370c:	2201      	movs	r2, #1
 800370e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003710:	78fa      	ldrb	r2, [r7, #3]
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	4613      	mov	r3, r2
 8003716:	011b      	lsls	r3, r3, #4
 8003718:	1a9b      	subs	r3, r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	440b      	add	r3, r1
 800371e:	334d      	adds	r3, #77	@ 0x4d
 8003720:	2203      	movs	r2, #3
 8003722:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	78fa      	ldrb	r2, [r7, #3]
 800372a:	4611      	mov	r1, r2
 800372c:	4618      	mov	r0, r3
 800372e:	f004 ffe0 	bl	80086f2 <USB_HC_Halt>
 8003732:	f000 bc02 	b.w	8003f3a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	78fa      	ldrb	r2, [r7, #3]
 800373c:	4611      	mov	r1, r2
 800373e:	4618      	mov	r0, r3
 8003740:	f004 fa2d 	bl	8007b9e <USB_ReadChInterrupts>
 8003744:	4603      	mov	r3, r0
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b02      	cmp	r3, #2
 800374c:	f040 8305 	bne.w	8003d5a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003750:	78fb      	ldrb	r3, [r7, #3]
 8003752:	015a      	lsls	r2, r3, #5
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	4413      	add	r3, r2
 8003758:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800375c:	461a      	mov	r2, r3
 800375e:	2302      	movs	r3, #2
 8003760:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003762:	78fa      	ldrb	r2, [r7, #3]
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	4613      	mov	r3, r2
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	1a9b      	subs	r3, r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	334d      	adds	r3, #77	@ 0x4d
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d114      	bne.n	80037a2 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003778:	78fa      	ldrb	r2, [r7, #3]
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	1a9b      	subs	r3, r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	334d      	adds	r3, #77	@ 0x4d
 8003788:	2202      	movs	r2, #2
 800378a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800378c:	78fa      	ldrb	r2, [r7, #3]
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	4613      	mov	r3, r2
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	1a9b      	subs	r3, r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	334c      	adds	r3, #76	@ 0x4c
 800379c:	2201      	movs	r2, #1
 800379e:	701a      	strb	r2, [r3, #0]
 80037a0:	e2cc      	b.n	8003d3c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80037a2:	78fa      	ldrb	r2, [r7, #3]
 80037a4:	6879      	ldr	r1, [r7, #4]
 80037a6:	4613      	mov	r3, r2
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	1a9b      	subs	r3, r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	440b      	add	r3, r1
 80037b0:	334d      	adds	r3, #77	@ 0x4d
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	2b06      	cmp	r3, #6
 80037b6:	d114      	bne.n	80037e2 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80037b8:	78fa      	ldrb	r2, [r7, #3]
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	4613      	mov	r3, r2
 80037be:	011b      	lsls	r3, r3, #4
 80037c0:	1a9b      	subs	r3, r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	440b      	add	r3, r1
 80037c6:	334d      	adds	r3, #77	@ 0x4d
 80037c8:	2202      	movs	r2, #2
 80037ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80037cc:	78fa      	ldrb	r2, [r7, #3]
 80037ce:	6879      	ldr	r1, [r7, #4]
 80037d0:	4613      	mov	r3, r2
 80037d2:	011b      	lsls	r3, r3, #4
 80037d4:	1a9b      	subs	r3, r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	334c      	adds	r3, #76	@ 0x4c
 80037dc:	2205      	movs	r2, #5
 80037de:	701a      	strb	r2, [r3, #0]
 80037e0:	e2ac      	b.n	8003d3c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80037e2:	78fa      	ldrb	r2, [r7, #3]
 80037e4:	6879      	ldr	r1, [r7, #4]
 80037e6:	4613      	mov	r3, r2
 80037e8:	011b      	lsls	r3, r3, #4
 80037ea:	1a9b      	subs	r3, r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	440b      	add	r3, r1
 80037f0:	334d      	adds	r3, #77	@ 0x4d
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b07      	cmp	r3, #7
 80037f6:	d00b      	beq.n	8003810 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80037f8:	78fa      	ldrb	r2, [r7, #3]
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	4613      	mov	r3, r2
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	1a9b      	subs	r3, r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	440b      	add	r3, r1
 8003806:	334d      	adds	r3, #77	@ 0x4d
 8003808:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800380a:	2b09      	cmp	r3, #9
 800380c:	f040 80a6 	bne.w	800395c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003810:	78fa      	ldrb	r2, [r7, #3]
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	4613      	mov	r3, r2
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	1a9b      	subs	r3, r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	440b      	add	r3, r1
 800381e:	334d      	adds	r3, #77	@ 0x4d
 8003820:	2202      	movs	r2, #2
 8003822:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003824:	78fa      	ldrb	r2, [r7, #3]
 8003826:	6879      	ldr	r1, [r7, #4]
 8003828:	4613      	mov	r3, r2
 800382a:	011b      	lsls	r3, r3, #4
 800382c:	1a9b      	subs	r3, r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	440b      	add	r3, r1
 8003832:	3344      	adds	r3, #68	@ 0x44
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	1c59      	adds	r1, r3, #1
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	4613      	mov	r3, r2
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	1a9b      	subs	r3, r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4403      	add	r3, r0
 8003844:	3344      	adds	r3, #68	@ 0x44
 8003846:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003848:	78fa      	ldrb	r2, [r7, #3]
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	4613      	mov	r3, r2
 800384e:	011b      	lsls	r3, r3, #4
 8003850:	1a9b      	subs	r3, r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	440b      	add	r3, r1
 8003856:	3344      	adds	r3, #68	@ 0x44
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b02      	cmp	r3, #2
 800385c:	d943      	bls.n	80038e6 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800385e:	78fa      	ldrb	r2, [r7, #3]
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	4613      	mov	r3, r2
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	1a9b      	subs	r3, r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	440b      	add	r3, r1
 800386c:	3344      	adds	r3, #68	@ 0x44
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003872:	78fa      	ldrb	r2, [r7, #3]
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	4613      	mov	r3, r2
 8003878:	011b      	lsls	r3, r3, #4
 800387a:	1a9b      	subs	r3, r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	440b      	add	r3, r1
 8003880:	331a      	adds	r3, #26
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d123      	bne.n	80038d0 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003888:	78fa      	ldrb	r2, [r7, #3]
 800388a:	6879      	ldr	r1, [r7, #4]
 800388c:	4613      	mov	r3, r2
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	1a9b      	subs	r3, r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	331b      	adds	r3, #27
 8003898:	2200      	movs	r2, #0
 800389a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800389c:	78fa      	ldrb	r2, [r7, #3]
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	4613      	mov	r3, r2
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	1a9b      	subs	r3, r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	331c      	adds	r3, #28
 80038ac:	2200      	movs	r2, #0
 80038ae:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80038b0:	78fb      	ldrb	r3, [r7, #3]
 80038b2:	015a      	lsls	r2, r3, #5
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	4413      	add	r3, r2
 80038b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	78fa      	ldrb	r2, [r7, #3]
 80038c0:	0151      	lsls	r1, r2, #5
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	440a      	add	r2, r1
 80038c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80038ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038ce:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80038d0:	78fa      	ldrb	r2, [r7, #3]
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	4613      	mov	r3, r2
 80038d6:	011b      	lsls	r3, r3, #4
 80038d8:	1a9b      	subs	r3, r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	440b      	add	r3, r1
 80038de:	334c      	adds	r3, #76	@ 0x4c
 80038e0:	2204      	movs	r2, #4
 80038e2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80038e4:	e229      	b.n	8003d3a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80038e6:	78fa      	ldrb	r2, [r7, #3]
 80038e8:	6879      	ldr	r1, [r7, #4]
 80038ea:	4613      	mov	r3, r2
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	1a9b      	subs	r3, r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	440b      	add	r3, r1
 80038f4:	334c      	adds	r3, #76	@ 0x4c
 80038f6:	2202      	movs	r2, #2
 80038f8:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038fa:	78fa      	ldrb	r2, [r7, #3]
 80038fc:	6879      	ldr	r1, [r7, #4]
 80038fe:	4613      	mov	r3, r2
 8003900:	011b      	lsls	r3, r3, #4
 8003902:	1a9b      	subs	r3, r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	440b      	add	r3, r1
 8003908:	3326      	adds	r3, #38	@ 0x26
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00b      	beq.n	8003928 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003910:	78fa      	ldrb	r2, [r7, #3]
 8003912:	6879      	ldr	r1, [r7, #4]
 8003914:	4613      	mov	r3, r2
 8003916:	011b      	lsls	r3, r3, #4
 8003918:	1a9b      	subs	r3, r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	440b      	add	r3, r1
 800391e:	3326      	adds	r3, #38	@ 0x26
 8003920:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003922:	2b02      	cmp	r3, #2
 8003924:	f040 8209 	bne.w	8003d3a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003928:	78fb      	ldrb	r3, [r7, #3]
 800392a:	015a      	lsls	r2, r3, #5
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	4413      	add	r3, r2
 8003930:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800393e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003946:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003948:	78fb      	ldrb	r3, [r7, #3]
 800394a:	015a      	lsls	r2, r3, #5
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	4413      	add	r3, r2
 8003950:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003954:	461a      	mov	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800395a:	e1ee      	b.n	8003d3a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800395c:	78fa      	ldrb	r2, [r7, #3]
 800395e:	6879      	ldr	r1, [r7, #4]
 8003960:	4613      	mov	r3, r2
 8003962:	011b      	lsls	r3, r3, #4
 8003964:	1a9b      	subs	r3, r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	440b      	add	r3, r1
 800396a:	334d      	adds	r3, #77	@ 0x4d
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b05      	cmp	r3, #5
 8003970:	f040 80c8 	bne.w	8003b04 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003974:	78fa      	ldrb	r2, [r7, #3]
 8003976:	6879      	ldr	r1, [r7, #4]
 8003978:	4613      	mov	r3, r2
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	1a9b      	subs	r3, r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	440b      	add	r3, r1
 8003982:	334d      	adds	r3, #77	@ 0x4d
 8003984:	2202      	movs	r2, #2
 8003986:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003988:	78fa      	ldrb	r2, [r7, #3]
 800398a:	6879      	ldr	r1, [r7, #4]
 800398c:	4613      	mov	r3, r2
 800398e:	011b      	lsls	r3, r3, #4
 8003990:	1a9b      	subs	r3, r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	440b      	add	r3, r1
 8003996:	331b      	adds	r3, #27
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	2b01      	cmp	r3, #1
 800399c:	f040 81ce 	bne.w	8003d3c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80039a0:	78fa      	ldrb	r2, [r7, #3]
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	4613      	mov	r3, r2
 80039a6:	011b      	lsls	r3, r3, #4
 80039a8:	1a9b      	subs	r3, r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	3326      	adds	r3, #38	@ 0x26
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	2b03      	cmp	r3, #3
 80039b4:	d16b      	bne.n	8003a8e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80039b6:	78fa      	ldrb	r2, [r7, #3]
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	4613      	mov	r3, r2
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	1a9b      	subs	r3, r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	440b      	add	r3, r1
 80039c4:	3348      	adds	r3, #72	@ 0x48
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	1c59      	adds	r1, r3, #1
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	4613      	mov	r3, r2
 80039ce:	011b      	lsls	r3, r3, #4
 80039d0:	1a9b      	subs	r3, r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4403      	add	r3, r0
 80039d6:	3348      	adds	r3, #72	@ 0x48
 80039d8:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80039da:	78fa      	ldrb	r2, [r7, #3]
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	4613      	mov	r3, r2
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	1a9b      	subs	r3, r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	440b      	add	r3, r1
 80039e8:	3348      	adds	r3, #72	@ 0x48
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d943      	bls.n	8003a78 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80039f0:	78fa      	ldrb	r2, [r7, #3]
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	4613      	mov	r3, r2
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	1a9b      	subs	r3, r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	440b      	add	r3, r1
 80039fe:	3348      	adds	r3, #72	@ 0x48
 8003a00:	2200      	movs	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003a04:	78fa      	ldrb	r2, [r7, #3]
 8003a06:	6879      	ldr	r1, [r7, #4]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	011b      	lsls	r3, r3, #4
 8003a0c:	1a9b      	subs	r3, r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	440b      	add	r3, r1
 8003a12:	331b      	adds	r3, #27
 8003a14:	2200      	movs	r2, #0
 8003a16:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003a18:	78fa      	ldrb	r2, [r7, #3]
 8003a1a:	6879      	ldr	r1, [r7, #4]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	011b      	lsls	r3, r3, #4
 8003a20:	1a9b      	subs	r3, r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	3344      	adds	r3, #68	@ 0x44
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d809      	bhi.n	8003a42 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003a2e:	78fa      	ldrb	r2, [r7, #3]
 8003a30:	6879      	ldr	r1, [r7, #4]
 8003a32:	4613      	mov	r3, r2
 8003a34:	011b      	lsls	r3, r3, #4
 8003a36:	1a9b      	subs	r3, r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	440b      	add	r3, r1
 8003a3c:	331c      	adds	r3, #28
 8003a3e:	2201      	movs	r2, #1
 8003a40:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003a42:	78fb      	ldrb	r3, [r7, #3]
 8003a44:	015a      	lsls	r2, r3, #5
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	4413      	add	r3, r2
 8003a4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	78fa      	ldrb	r2, [r7, #3]
 8003a52:	0151      	lsls	r1, r2, #5
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	440a      	add	r2, r1
 8003a58:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a60:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003a62:	78fa      	ldrb	r2, [r7, #3]
 8003a64:	6879      	ldr	r1, [r7, #4]
 8003a66:	4613      	mov	r3, r2
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	1a9b      	subs	r3, r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	334c      	adds	r3, #76	@ 0x4c
 8003a72:	2204      	movs	r2, #4
 8003a74:	701a      	strb	r2, [r3, #0]
 8003a76:	e014      	b.n	8003aa2 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a78:	78fa      	ldrb	r2, [r7, #3]
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	1a9b      	subs	r3, r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	334c      	adds	r3, #76	@ 0x4c
 8003a88:	2202      	movs	r2, #2
 8003a8a:	701a      	strb	r2, [r3, #0]
 8003a8c:	e009      	b.n	8003aa2 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a8e:	78fa      	ldrb	r2, [r7, #3]
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	4613      	mov	r3, r2
 8003a94:	011b      	lsls	r3, r3, #4
 8003a96:	1a9b      	subs	r3, r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	334c      	adds	r3, #76	@ 0x4c
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003aa2:	78fa      	ldrb	r2, [r7, #3]
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	011b      	lsls	r3, r3, #4
 8003aaa:	1a9b      	subs	r3, r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	440b      	add	r3, r1
 8003ab0:	3326      	adds	r3, #38	@ 0x26
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00b      	beq.n	8003ad0 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003ab8:	78fa      	ldrb	r2, [r7, #3]
 8003aba:	6879      	ldr	r1, [r7, #4]
 8003abc:	4613      	mov	r3, r2
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	1a9b      	subs	r3, r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	3326      	adds	r3, #38	@ 0x26
 8003ac8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	f040 8136 	bne.w	8003d3c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003ad0:	78fb      	ldrb	r3, [r7, #3]
 8003ad2:	015a      	lsls	r2, r3, #5
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003ae6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003aee:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003af0:	78fb      	ldrb	r3, [r7, #3]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003afc:	461a      	mov	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6013      	str	r3, [r2, #0]
 8003b02:	e11b      	b.n	8003d3c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003b04:	78fa      	ldrb	r2, [r7, #3]
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	011b      	lsls	r3, r3, #4
 8003b0c:	1a9b      	subs	r3, r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	334d      	adds	r3, #77	@ 0x4d
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	2b03      	cmp	r3, #3
 8003b18:	f040 8081 	bne.w	8003c1e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b1c:	78fa      	ldrb	r2, [r7, #3]
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	4613      	mov	r3, r2
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	1a9b      	subs	r3, r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	334d      	adds	r3, #77	@ 0x4d
 8003b2c:	2202      	movs	r2, #2
 8003b2e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003b30:	78fa      	ldrb	r2, [r7, #3]
 8003b32:	6879      	ldr	r1, [r7, #4]
 8003b34:	4613      	mov	r3, r2
 8003b36:	011b      	lsls	r3, r3, #4
 8003b38:	1a9b      	subs	r3, r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	440b      	add	r3, r1
 8003b3e:	331b      	adds	r3, #27
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	f040 80fa 	bne.w	8003d3c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b48:	78fa      	ldrb	r2, [r7, #3]
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	1a9b      	subs	r3, r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	334c      	adds	r3, #76	@ 0x4c
 8003b58:	2202      	movs	r2, #2
 8003b5a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003b5c:	78fb      	ldrb	r3, [r7, #3]
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	78fa      	ldrb	r2, [r7, #3]
 8003b6c:	0151      	lsls	r1, r2, #5
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	440a      	add	r2, r1
 8003b72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b7a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003b7c:	78fb      	ldrb	r3, [r7, #3]
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	78fa      	ldrb	r2, [r7, #3]
 8003b8c:	0151      	lsls	r1, r2, #5
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	440a      	add	r2, r1
 8003b92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b9a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003b9c:	78fb      	ldrb	r3, [r7, #3]
 8003b9e:	015a      	lsls	r2, r3, #5
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	78fa      	ldrb	r2, [r7, #3]
 8003bac:	0151      	lsls	r1, r2, #5
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	440a      	add	r2, r1
 8003bb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003bb6:	f023 0320 	bic.w	r3, r3, #32
 8003bba:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003bbc:	78fa      	ldrb	r2, [r7, #3]
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	011b      	lsls	r3, r3, #4
 8003bc4:	1a9b      	subs	r3, r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	3326      	adds	r3, #38	@ 0x26
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00b      	beq.n	8003bea <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003bd2:	78fa      	ldrb	r2, [r7, #3]
 8003bd4:	6879      	ldr	r1, [r7, #4]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	1a9b      	subs	r3, r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	440b      	add	r3, r1
 8003be0:	3326      	adds	r3, #38	@ 0x26
 8003be2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	f040 80a9 	bne.w	8003d3c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003bea:	78fb      	ldrb	r3, [r7, #3]
 8003bec:	015a      	lsls	r2, r3, #5
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003c00:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003c08:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003c0a:	78fb      	ldrb	r3, [r7, #3]
 8003c0c:	015a      	lsls	r2, r3, #5
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	4413      	add	r3, r2
 8003c12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c16:	461a      	mov	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6013      	str	r3, [r2, #0]
 8003c1c:	e08e      	b.n	8003d3c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003c1e:	78fa      	ldrb	r2, [r7, #3]
 8003c20:	6879      	ldr	r1, [r7, #4]
 8003c22:	4613      	mov	r3, r2
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	1a9b      	subs	r3, r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	440b      	add	r3, r1
 8003c2c:	334d      	adds	r3, #77	@ 0x4d
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	d143      	bne.n	8003cbc <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c34:	78fa      	ldrb	r2, [r7, #3]
 8003c36:	6879      	ldr	r1, [r7, #4]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	1a9b      	subs	r3, r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	440b      	add	r3, r1
 8003c42:	334d      	adds	r3, #77	@ 0x4d
 8003c44:	2202      	movs	r2, #2
 8003c46:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c48:	78fa      	ldrb	r2, [r7, #3]
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	1a9b      	subs	r3, r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	334c      	adds	r3, #76	@ 0x4c
 8003c58:	2202      	movs	r2, #2
 8003c5a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c5c:	78fa      	ldrb	r2, [r7, #3]
 8003c5e:	6879      	ldr	r1, [r7, #4]
 8003c60:	4613      	mov	r3, r2
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	1a9b      	subs	r3, r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	440b      	add	r3, r1
 8003c6a:	3326      	adds	r3, #38	@ 0x26
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00a      	beq.n	8003c88 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003c72:	78fa      	ldrb	r2, [r7, #3]
 8003c74:	6879      	ldr	r1, [r7, #4]
 8003c76:	4613      	mov	r3, r2
 8003c78:	011b      	lsls	r3, r3, #4
 8003c7a:	1a9b      	subs	r3, r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	440b      	add	r3, r1
 8003c80:	3326      	adds	r3, #38	@ 0x26
 8003c82:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d159      	bne.n	8003d3c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003c88:	78fb      	ldrb	r3, [r7, #3]
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003c9e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ca6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003ca8:	78fb      	ldrb	r3, [r7, #3]
 8003caa:	015a      	lsls	r2, r3, #5
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	4413      	add	r3, r2
 8003cb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	e03f      	b.n	8003d3c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003cbc:	78fa      	ldrb	r2, [r7, #3]
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	011b      	lsls	r3, r3, #4
 8003cc4:	1a9b      	subs	r3, r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	334d      	adds	r3, #77	@ 0x4d
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	2b08      	cmp	r3, #8
 8003cd0:	d126      	bne.n	8003d20 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003cd2:	78fa      	ldrb	r2, [r7, #3]
 8003cd4:	6879      	ldr	r1, [r7, #4]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	011b      	lsls	r3, r3, #4
 8003cda:	1a9b      	subs	r3, r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	440b      	add	r3, r1
 8003ce0:	334d      	adds	r3, #77	@ 0x4d
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003ce6:	78fa      	ldrb	r2, [r7, #3]
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	4613      	mov	r3, r2
 8003cec:	011b      	lsls	r3, r3, #4
 8003cee:	1a9b      	subs	r3, r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	440b      	add	r3, r1
 8003cf4:	3344      	adds	r3, #68	@ 0x44
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	1c59      	adds	r1, r3, #1
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	1a9b      	subs	r3, r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4403      	add	r3, r0
 8003d06:	3344      	adds	r3, #68	@ 0x44
 8003d08:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003d0a:	78fa      	ldrb	r2, [r7, #3]
 8003d0c:	6879      	ldr	r1, [r7, #4]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	011b      	lsls	r3, r3, #4
 8003d12:	1a9b      	subs	r3, r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	440b      	add	r3, r1
 8003d18:	334c      	adds	r3, #76	@ 0x4c
 8003d1a:	2204      	movs	r2, #4
 8003d1c:	701a      	strb	r2, [r3, #0]
 8003d1e:	e00d      	b.n	8003d3c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003d20:	78fa      	ldrb	r2, [r7, #3]
 8003d22:	6879      	ldr	r1, [r7, #4]
 8003d24:	4613      	mov	r3, r2
 8003d26:	011b      	lsls	r3, r3, #4
 8003d28:	1a9b      	subs	r3, r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	440b      	add	r3, r1
 8003d2e:	334d      	adds	r3, #77	@ 0x4d
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	f000 8100 	beq.w	8003f38 <HCD_HC_IN_IRQHandler+0xcca>
 8003d38:	e000      	b.n	8003d3c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003d3a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003d3c:	78fa      	ldrb	r2, [r7, #3]
 8003d3e:	6879      	ldr	r1, [r7, #4]
 8003d40:	4613      	mov	r3, r2
 8003d42:	011b      	lsls	r3, r3, #4
 8003d44:	1a9b      	subs	r3, r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	440b      	add	r3, r1
 8003d4a:	334c      	adds	r3, #76	@ 0x4c
 8003d4c:	781a      	ldrb	r2, [r3, #0]
 8003d4e:	78fb      	ldrb	r3, [r7, #3]
 8003d50:	4619      	mov	r1, r3
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f007 f82c 	bl	800adb0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003d58:	e0ef      	b.n	8003f3a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	78fa      	ldrb	r2, [r7, #3]
 8003d60:	4611      	mov	r1, r2
 8003d62:	4618      	mov	r0, r3
 8003d64:	f003 ff1b 	bl	8007b9e <USB_ReadChInterrupts>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d6e:	2b40      	cmp	r3, #64	@ 0x40
 8003d70:	d12f      	bne.n	8003dd2 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003d72:	78fb      	ldrb	r3, [r7, #3]
 8003d74:	015a      	lsls	r2, r3, #5
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	4413      	add	r3, r2
 8003d7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d7e:	461a      	mov	r2, r3
 8003d80:	2340      	movs	r3, #64	@ 0x40
 8003d82:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003d84:	78fa      	ldrb	r2, [r7, #3]
 8003d86:	6879      	ldr	r1, [r7, #4]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	011b      	lsls	r3, r3, #4
 8003d8c:	1a9b      	subs	r3, r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	440b      	add	r3, r1
 8003d92:	334d      	adds	r3, #77	@ 0x4d
 8003d94:	2205      	movs	r2, #5
 8003d96:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003d98:	78fa      	ldrb	r2, [r7, #3]
 8003d9a:	6879      	ldr	r1, [r7, #4]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	011b      	lsls	r3, r3, #4
 8003da0:	1a9b      	subs	r3, r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	440b      	add	r3, r1
 8003da6:	331a      	adds	r3, #26
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d109      	bne.n	8003dc2 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003dae:	78fa      	ldrb	r2, [r7, #3]
 8003db0:	6879      	ldr	r1, [r7, #4]
 8003db2:	4613      	mov	r3, r2
 8003db4:	011b      	lsls	r3, r3, #4
 8003db6:	1a9b      	subs	r3, r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	440b      	add	r3, r1
 8003dbc:	3344      	adds	r3, #68	@ 0x44
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	78fa      	ldrb	r2, [r7, #3]
 8003dc8:	4611      	mov	r1, r2
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f004 fc91 	bl	80086f2 <USB_HC_Halt>
 8003dd0:	e0b3      	b.n	8003f3a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	78fa      	ldrb	r2, [r7, #3]
 8003dd8:	4611      	mov	r1, r2
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f003 fedf 	bl	8007b9e <USB_ReadChInterrupts>
 8003de0:	4603      	mov	r3, r0
 8003de2:	f003 0310 	and.w	r3, r3, #16
 8003de6:	2b10      	cmp	r3, #16
 8003de8:	f040 80a7 	bne.w	8003f3a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003dec:	78fa      	ldrb	r2, [r7, #3]
 8003dee:	6879      	ldr	r1, [r7, #4]
 8003df0:	4613      	mov	r3, r2
 8003df2:	011b      	lsls	r3, r3, #4
 8003df4:	1a9b      	subs	r3, r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	440b      	add	r3, r1
 8003dfa:	3326      	adds	r3, #38	@ 0x26
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	2b03      	cmp	r3, #3
 8003e00:	d11b      	bne.n	8003e3a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003e02:	78fa      	ldrb	r2, [r7, #3]
 8003e04:	6879      	ldr	r1, [r7, #4]
 8003e06:	4613      	mov	r3, r2
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	1a9b      	subs	r3, r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	440b      	add	r3, r1
 8003e10:	3344      	adds	r3, #68	@ 0x44
 8003e12:	2200      	movs	r2, #0
 8003e14:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003e16:	78fa      	ldrb	r2, [r7, #3]
 8003e18:	6879      	ldr	r1, [r7, #4]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	011b      	lsls	r3, r3, #4
 8003e1e:	1a9b      	subs	r3, r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	440b      	add	r3, r1
 8003e24:	334d      	adds	r3, #77	@ 0x4d
 8003e26:	2204      	movs	r2, #4
 8003e28:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	78fa      	ldrb	r2, [r7, #3]
 8003e30:	4611      	mov	r1, r2
 8003e32:	4618      	mov	r0, r3
 8003e34:	f004 fc5d 	bl	80086f2 <USB_HC_Halt>
 8003e38:	e03f      	b.n	8003eba <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e3a:	78fa      	ldrb	r2, [r7, #3]
 8003e3c:	6879      	ldr	r1, [r7, #4]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	011b      	lsls	r3, r3, #4
 8003e42:	1a9b      	subs	r3, r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	440b      	add	r3, r1
 8003e48:	3326      	adds	r3, #38	@ 0x26
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00a      	beq.n	8003e66 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003e50:	78fa      	ldrb	r2, [r7, #3]
 8003e52:	6879      	ldr	r1, [r7, #4]
 8003e54:	4613      	mov	r3, r2
 8003e56:	011b      	lsls	r3, r3, #4
 8003e58:	1a9b      	subs	r3, r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	440b      	add	r3, r1
 8003e5e:	3326      	adds	r3, #38	@ 0x26
 8003e60:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d129      	bne.n	8003eba <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003e66:	78fa      	ldrb	r2, [r7, #3]
 8003e68:	6879      	ldr	r1, [r7, #4]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	011b      	lsls	r3, r3, #4
 8003e6e:	1a9b      	subs	r3, r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	440b      	add	r3, r1
 8003e74:	3344      	adds	r3, #68	@ 0x44
 8003e76:	2200      	movs	r2, #0
 8003e78:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	799b      	ldrb	r3, [r3, #6]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00a      	beq.n	8003e98 <HCD_HC_IN_IRQHandler+0xc2a>
 8003e82:	78fa      	ldrb	r2, [r7, #3]
 8003e84:	6879      	ldr	r1, [r7, #4]
 8003e86:	4613      	mov	r3, r2
 8003e88:	011b      	lsls	r3, r3, #4
 8003e8a:	1a9b      	subs	r3, r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	440b      	add	r3, r1
 8003e90:	331b      	adds	r3, #27
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d110      	bne.n	8003eba <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003e98:	78fa      	ldrb	r2, [r7, #3]
 8003e9a:	6879      	ldr	r1, [r7, #4]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	011b      	lsls	r3, r3, #4
 8003ea0:	1a9b      	subs	r3, r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	440b      	add	r3, r1
 8003ea6:	334d      	adds	r3, #77	@ 0x4d
 8003ea8:	2204      	movs	r2, #4
 8003eaa:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	78fa      	ldrb	r2, [r7, #3]
 8003eb2:	4611      	mov	r1, r2
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f004 fc1c 	bl	80086f2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003eba:	78fa      	ldrb	r2, [r7, #3]
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	011b      	lsls	r3, r3, #4
 8003ec2:	1a9b      	subs	r3, r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	331b      	adds	r3, #27
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d129      	bne.n	8003f24 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003ed0:	78fa      	ldrb	r2, [r7, #3]
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	1a9b      	subs	r3, r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	331b      	adds	r3, #27
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003ee4:	78fb      	ldrb	r3, [r7, #3]
 8003ee6:	015a      	lsls	r2, r3, #5
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	78fa      	ldrb	r2, [r7, #3]
 8003ef4:	0151      	lsls	r1, r2, #5
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	440a      	add	r2, r1
 8003efa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003efe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f02:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003f04:	78fb      	ldrb	r3, [r7, #3]
 8003f06:	015a      	lsls	r2, r3, #5
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	78fa      	ldrb	r2, [r7, #3]
 8003f14:	0151      	lsls	r1, r2, #5
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	440a      	add	r2, r1
 8003f1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003f1e:	f043 0320 	orr.w	r3, r3, #32
 8003f22:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003f24:	78fb      	ldrb	r3, [r7, #3]
 8003f26:	015a      	lsls	r2, r3, #5
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f30:	461a      	mov	r2, r3
 8003f32:	2310      	movs	r3, #16
 8003f34:	6093      	str	r3, [r2, #8]
 8003f36:	e000      	b.n	8003f3a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003f38:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	460b      	mov	r3, r1
 8003f4a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	78fa      	ldrb	r2, [r7, #3]
 8003f5c:	4611      	mov	r1, r2
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f003 fe1d 	bl	8007b9e <USB_ReadChInterrupts>
 8003f64:	4603      	mov	r3, r0
 8003f66:	f003 0304 	and.w	r3, r3, #4
 8003f6a:	2b04      	cmp	r3, #4
 8003f6c:	d11b      	bne.n	8003fa6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003f6e:	78fb      	ldrb	r3, [r7, #3]
 8003f70:	015a      	lsls	r2, r3, #5
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	4413      	add	r3, r2
 8003f76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	2304      	movs	r3, #4
 8003f7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003f80:	78fa      	ldrb	r2, [r7, #3]
 8003f82:	6879      	ldr	r1, [r7, #4]
 8003f84:	4613      	mov	r3, r2
 8003f86:	011b      	lsls	r3, r3, #4
 8003f88:	1a9b      	subs	r3, r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	440b      	add	r3, r1
 8003f8e:	334d      	adds	r3, #77	@ 0x4d
 8003f90:	2207      	movs	r2, #7
 8003f92:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	78fa      	ldrb	r2, [r7, #3]
 8003f9a:	4611      	mov	r1, r2
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f004 fba8 	bl	80086f2 <USB_HC_Halt>
 8003fa2:	f000 bc89 	b.w	80048b8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	78fa      	ldrb	r2, [r7, #3]
 8003fac:	4611      	mov	r1, r2
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f003 fdf5 	bl	8007b9e <USB_ReadChInterrupts>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	f003 0320 	and.w	r3, r3, #32
 8003fba:	2b20      	cmp	r3, #32
 8003fbc:	f040 8082 	bne.w	80040c4 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003fc0:	78fb      	ldrb	r3, [r7, #3]
 8003fc2:	015a      	lsls	r2, r3, #5
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fcc:	461a      	mov	r2, r3
 8003fce:	2320      	movs	r3, #32
 8003fd0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003fd2:	78fa      	ldrb	r2, [r7, #3]
 8003fd4:	6879      	ldr	r1, [r7, #4]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	011b      	lsls	r3, r3, #4
 8003fda:	1a9b      	subs	r3, r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	440b      	add	r3, r1
 8003fe0:	3319      	adds	r3, #25
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d124      	bne.n	8004032 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003fe8:	78fa      	ldrb	r2, [r7, #3]
 8003fea:	6879      	ldr	r1, [r7, #4]
 8003fec:	4613      	mov	r3, r2
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	1a9b      	subs	r3, r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	3319      	adds	r3, #25
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ffc:	78fa      	ldrb	r2, [r7, #3]
 8003ffe:	6879      	ldr	r1, [r7, #4]
 8004000:	4613      	mov	r3, r2
 8004002:	011b      	lsls	r3, r3, #4
 8004004:	1a9b      	subs	r3, r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	440b      	add	r3, r1
 800400a:	334c      	adds	r3, #76	@ 0x4c
 800400c:	2202      	movs	r2, #2
 800400e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004010:	78fa      	ldrb	r2, [r7, #3]
 8004012:	6879      	ldr	r1, [r7, #4]
 8004014:	4613      	mov	r3, r2
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	1a9b      	subs	r3, r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	440b      	add	r3, r1
 800401e:	334d      	adds	r3, #77	@ 0x4d
 8004020:	2203      	movs	r2, #3
 8004022:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	78fa      	ldrb	r2, [r7, #3]
 800402a:	4611      	mov	r1, r2
 800402c:	4618      	mov	r0, r3
 800402e:	f004 fb60 	bl	80086f2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004032:	78fa      	ldrb	r2, [r7, #3]
 8004034:	6879      	ldr	r1, [r7, #4]
 8004036:	4613      	mov	r3, r2
 8004038:	011b      	lsls	r3, r3, #4
 800403a:	1a9b      	subs	r3, r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	440b      	add	r3, r1
 8004040:	331a      	adds	r3, #26
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	2b01      	cmp	r3, #1
 8004046:	f040 8437 	bne.w	80048b8 <HCD_HC_OUT_IRQHandler+0x978>
 800404a:	78fa      	ldrb	r2, [r7, #3]
 800404c:	6879      	ldr	r1, [r7, #4]
 800404e:	4613      	mov	r3, r2
 8004050:	011b      	lsls	r3, r3, #4
 8004052:	1a9b      	subs	r3, r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	440b      	add	r3, r1
 8004058:	331b      	adds	r3, #27
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	f040 842b 	bne.w	80048b8 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004062:	78fa      	ldrb	r2, [r7, #3]
 8004064:	6879      	ldr	r1, [r7, #4]
 8004066:	4613      	mov	r3, r2
 8004068:	011b      	lsls	r3, r3, #4
 800406a:	1a9b      	subs	r3, r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	440b      	add	r3, r1
 8004070:	3326      	adds	r3, #38	@ 0x26
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d009      	beq.n	800408c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004078:	78fa      	ldrb	r2, [r7, #3]
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	4613      	mov	r3, r2
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	1a9b      	subs	r3, r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	440b      	add	r3, r1
 8004086:	331b      	adds	r3, #27
 8004088:	2201      	movs	r2, #1
 800408a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800408c:	78fa      	ldrb	r2, [r7, #3]
 800408e:	6879      	ldr	r1, [r7, #4]
 8004090:	4613      	mov	r3, r2
 8004092:	011b      	lsls	r3, r3, #4
 8004094:	1a9b      	subs	r3, r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	440b      	add	r3, r1
 800409a:	334d      	adds	r3, #77	@ 0x4d
 800409c:	2203      	movs	r2, #3
 800409e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	78fa      	ldrb	r2, [r7, #3]
 80040a6:	4611      	mov	r1, r2
 80040a8:	4618      	mov	r0, r3
 80040aa:	f004 fb22 	bl	80086f2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80040ae:	78fa      	ldrb	r2, [r7, #3]
 80040b0:	6879      	ldr	r1, [r7, #4]
 80040b2:	4613      	mov	r3, r2
 80040b4:	011b      	lsls	r3, r3, #4
 80040b6:	1a9b      	subs	r3, r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	440b      	add	r3, r1
 80040bc:	3344      	adds	r3, #68	@ 0x44
 80040be:	2200      	movs	r2, #0
 80040c0:	601a      	str	r2, [r3, #0]
 80040c2:	e3f9      	b.n	80048b8 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	78fa      	ldrb	r2, [r7, #3]
 80040ca:	4611      	mov	r1, r2
 80040cc:	4618      	mov	r0, r3
 80040ce:	f003 fd66 	bl	8007b9e <USB_ReadChInterrupts>
 80040d2:	4603      	mov	r3, r0
 80040d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040dc:	d111      	bne.n	8004102 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80040de:	78fb      	ldrb	r3, [r7, #3]
 80040e0:	015a      	lsls	r2, r3, #5
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	4413      	add	r3, r2
 80040e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040ea:	461a      	mov	r2, r3
 80040ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80040f0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	78fa      	ldrb	r2, [r7, #3]
 80040f8:	4611      	mov	r1, r2
 80040fa:	4618      	mov	r0, r3
 80040fc:	f004 faf9 	bl	80086f2 <USB_HC_Halt>
 8004100:	e3da      	b.n	80048b8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	78fa      	ldrb	r2, [r7, #3]
 8004108:	4611      	mov	r1, r2
 800410a:	4618      	mov	r0, r3
 800410c:	f003 fd47 	bl	8007b9e <USB_ReadChInterrupts>
 8004110:	4603      	mov	r3, r0
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b01      	cmp	r3, #1
 8004118:	d168      	bne.n	80041ec <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800411a:	78fa      	ldrb	r2, [r7, #3]
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	4613      	mov	r3, r2
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	1a9b      	subs	r3, r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	440b      	add	r3, r1
 8004128:	3344      	adds	r3, #68	@ 0x44
 800412a:	2200      	movs	r2, #0
 800412c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	78fa      	ldrb	r2, [r7, #3]
 8004134:	4611      	mov	r1, r2
 8004136:	4618      	mov	r0, r3
 8004138:	f003 fd31 	bl	8007b9e <USB_ReadChInterrupts>
 800413c:	4603      	mov	r3, r0
 800413e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004142:	2b40      	cmp	r3, #64	@ 0x40
 8004144:	d112      	bne.n	800416c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004146:	78fa      	ldrb	r2, [r7, #3]
 8004148:	6879      	ldr	r1, [r7, #4]
 800414a:	4613      	mov	r3, r2
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	1a9b      	subs	r3, r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	440b      	add	r3, r1
 8004154:	3319      	adds	r3, #25
 8004156:	2201      	movs	r2, #1
 8004158:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800415a:	78fb      	ldrb	r3, [r7, #3]
 800415c:	015a      	lsls	r2, r3, #5
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	4413      	add	r3, r2
 8004162:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004166:	461a      	mov	r2, r3
 8004168:	2340      	movs	r3, #64	@ 0x40
 800416a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800416c:	78fa      	ldrb	r2, [r7, #3]
 800416e:	6879      	ldr	r1, [r7, #4]
 8004170:	4613      	mov	r3, r2
 8004172:	011b      	lsls	r3, r3, #4
 8004174:	1a9b      	subs	r3, r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	440b      	add	r3, r1
 800417a:	331b      	adds	r3, #27
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d019      	beq.n	80041b6 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004182:	78fa      	ldrb	r2, [r7, #3]
 8004184:	6879      	ldr	r1, [r7, #4]
 8004186:	4613      	mov	r3, r2
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	1a9b      	subs	r3, r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	440b      	add	r3, r1
 8004190:	331b      	adds	r3, #27
 8004192:	2200      	movs	r2, #0
 8004194:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004196:	78fb      	ldrb	r3, [r7, #3]
 8004198:	015a      	lsls	r2, r3, #5
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	4413      	add	r3, r2
 800419e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	78fa      	ldrb	r2, [r7, #3]
 80041a6:	0151      	lsls	r1, r2, #5
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	440a      	add	r2, r1
 80041ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80041b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041b4:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80041b6:	78fb      	ldrb	r3, [r7, #3]
 80041b8:	015a      	lsls	r2, r3, #5
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	4413      	add	r3, r2
 80041be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041c2:	461a      	mov	r2, r3
 80041c4:	2301      	movs	r3, #1
 80041c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80041c8:	78fa      	ldrb	r2, [r7, #3]
 80041ca:	6879      	ldr	r1, [r7, #4]
 80041cc:	4613      	mov	r3, r2
 80041ce:	011b      	lsls	r3, r3, #4
 80041d0:	1a9b      	subs	r3, r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	440b      	add	r3, r1
 80041d6:	334d      	adds	r3, #77	@ 0x4d
 80041d8:	2201      	movs	r2, #1
 80041da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	78fa      	ldrb	r2, [r7, #3]
 80041e2:	4611      	mov	r1, r2
 80041e4:	4618      	mov	r0, r3
 80041e6:	f004 fa84 	bl	80086f2 <USB_HC_Halt>
 80041ea:	e365      	b.n	80048b8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	78fa      	ldrb	r2, [r7, #3]
 80041f2:	4611      	mov	r1, r2
 80041f4:	4618      	mov	r0, r3
 80041f6:	f003 fcd2 	bl	8007b9e <USB_ReadChInterrupts>
 80041fa:	4603      	mov	r3, r0
 80041fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004200:	2b40      	cmp	r3, #64	@ 0x40
 8004202:	d139      	bne.n	8004278 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004204:	78fa      	ldrb	r2, [r7, #3]
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	4613      	mov	r3, r2
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	1a9b      	subs	r3, r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	440b      	add	r3, r1
 8004212:	334d      	adds	r3, #77	@ 0x4d
 8004214:	2205      	movs	r2, #5
 8004216:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004218:	78fa      	ldrb	r2, [r7, #3]
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	4613      	mov	r3, r2
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	1a9b      	subs	r3, r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	440b      	add	r3, r1
 8004226:	331a      	adds	r3, #26
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d109      	bne.n	8004242 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800422e:	78fa      	ldrb	r2, [r7, #3]
 8004230:	6879      	ldr	r1, [r7, #4]
 8004232:	4613      	mov	r3, r2
 8004234:	011b      	lsls	r3, r3, #4
 8004236:	1a9b      	subs	r3, r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	440b      	add	r3, r1
 800423c:	3319      	adds	r3, #25
 800423e:	2201      	movs	r2, #1
 8004240:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004242:	78fa      	ldrb	r2, [r7, #3]
 8004244:	6879      	ldr	r1, [r7, #4]
 8004246:	4613      	mov	r3, r2
 8004248:	011b      	lsls	r3, r3, #4
 800424a:	1a9b      	subs	r3, r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	440b      	add	r3, r1
 8004250:	3344      	adds	r3, #68	@ 0x44
 8004252:	2200      	movs	r2, #0
 8004254:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	78fa      	ldrb	r2, [r7, #3]
 800425c:	4611      	mov	r1, r2
 800425e:	4618      	mov	r0, r3
 8004260:	f004 fa47 	bl	80086f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004264:	78fb      	ldrb	r3, [r7, #3]
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	4413      	add	r3, r2
 800426c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004270:	461a      	mov	r2, r3
 8004272:	2340      	movs	r3, #64	@ 0x40
 8004274:	6093      	str	r3, [r2, #8]
 8004276:	e31f      	b.n	80048b8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	78fa      	ldrb	r2, [r7, #3]
 800427e:	4611      	mov	r1, r2
 8004280:	4618      	mov	r0, r3
 8004282:	f003 fc8c 	bl	8007b9e <USB_ReadChInterrupts>
 8004286:	4603      	mov	r3, r0
 8004288:	f003 0308 	and.w	r3, r3, #8
 800428c:	2b08      	cmp	r3, #8
 800428e:	d11a      	bne.n	80042c6 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004290:	78fb      	ldrb	r3, [r7, #3]
 8004292:	015a      	lsls	r2, r3, #5
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	4413      	add	r3, r2
 8004298:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800429c:	461a      	mov	r2, r3
 800429e:	2308      	movs	r3, #8
 80042a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80042a2:	78fa      	ldrb	r2, [r7, #3]
 80042a4:	6879      	ldr	r1, [r7, #4]
 80042a6:	4613      	mov	r3, r2
 80042a8:	011b      	lsls	r3, r3, #4
 80042aa:	1a9b      	subs	r3, r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	440b      	add	r3, r1
 80042b0:	334d      	adds	r3, #77	@ 0x4d
 80042b2:	2206      	movs	r2, #6
 80042b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	78fa      	ldrb	r2, [r7, #3]
 80042bc:	4611      	mov	r1, r2
 80042be:	4618      	mov	r0, r3
 80042c0:	f004 fa17 	bl	80086f2 <USB_HC_Halt>
 80042c4:	e2f8      	b.n	80048b8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	78fa      	ldrb	r2, [r7, #3]
 80042cc:	4611      	mov	r1, r2
 80042ce:	4618      	mov	r0, r3
 80042d0:	f003 fc65 	bl	8007b9e <USB_ReadChInterrupts>
 80042d4:	4603      	mov	r3, r0
 80042d6:	f003 0310 	and.w	r3, r3, #16
 80042da:	2b10      	cmp	r3, #16
 80042dc:	d144      	bne.n	8004368 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80042de:	78fa      	ldrb	r2, [r7, #3]
 80042e0:	6879      	ldr	r1, [r7, #4]
 80042e2:	4613      	mov	r3, r2
 80042e4:	011b      	lsls	r3, r3, #4
 80042e6:	1a9b      	subs	r3, r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	440b      	add	r3, r1
 80042ec:	3344      	adds	r3, #68	@ 0x44
 80042ee:	2200      	movs	r2, #0
 80042f0:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80042f2:	78fa      	ldrb	r2, [r7, #3]
 80042f4:	6879      	ldr	r1, [r7, #4]
 80042f6:	4613      	mov	r3, r2
 80042f8:	011b      	lsls	r3, r3, #4
 80042fa:	1a9b      	subs	r3, r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	440b      	add	r3, r1
 8004300:	334d      	adds	r3, #77	@ 0x4d
 8004302:	2204      	movs	r2, #4
 8004304:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004306:	78fa      	ldrb	r2, [r7, #3]
 8004308:	6879      	ldr	r1, [r7, #4]
 800430a:	4613      	mov	r3, r2
 800430c:	011b      	lsls	r3, r3, #4
 800430e:	1a9b      	subs	r3, r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	440b      	add	r3, r1
 8004314:	3319      	adds	r3, #25
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d114      	bne.n	8004346 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800431c:	78fa      	ldrb	r2, [r7, #3]
 800431e:	6879      	ldr	r1, [r7, #4]
 8004320:	4613      	mov	r3, r2
 8004322:	011b      	lsls	r3, r3, #4
 8004324:	1a9b      	subs	r3, r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	440b      	add	r3, r1
 800432a:	3318      	adds	r3, #24
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d109      	bne.n	8004346 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004332:	78fa      	ldrb	r2, [r7, #3]
 8004334:	6879      	ldr	r1, [r7, #4]
 8004336:	4613      	mov	r3, r2
 8004338:	011b      	lsls	r3, r3, #4
 800433a:	1a9b      	subs	r3, r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	440b      	add	r3, r1
 8004340:	3319      	adds	r3, #25
 8004342:	2201      	movs	r2, #1
 8004344:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	78fa      	ldrb	r2, [r7, #3]
 800434c:	4611      	mov	r1, r2
 800434e:	4618      	mov	r0, r3
 8004350:	f004 f9cf 	bl	80086f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004354:	78fb      	ldrb	r3, [r7, #3]
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	4413      	add	r3, r2
 800435c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004360:	461a      	mov	r2, r3
 8004362:	2310      	movs	r3, #16
 8004364:	6093      	str	r3, [r2, #8]
 8004366:	e2a7      	b.n	80048b8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	78fa      	ldrb	r2, [r7, #3]
 800436e:	4611      	mov	r1, r2
 8004370:	4618      	mov	r0, r3
 8004372:	f003 fc14 	bl	8007b9e <USB_ReadChInterrupts>
 8004376:	4603      	mov	r3, r0
 8004378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800437c:	2b80      	cmp	r3, #128	@ 0x80
 800437e:	f040 8083 	bne.w	8004488 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	799b      	ldrb	r3, [r3, #6]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d111      	bne.n	80043ae <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800438a:	78fa      	ldrb	r2, [r7, #3]
 800438c:	6879      	ldr	r1, [r7, #4]
 800438e:	4613      	mov	r3, r2
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	1a9b      	subs	r3, r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	440b      	add	r3, r1
 8004398:	334d      	adds	r3, #77	@ 0x4d
 800439a:	2207      	movs	r2, #7
 800439c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	78fa      	ldrb	r2, [r7, #3]
 80043a4:	4611      	mov	r1, r2
 80043a6:	4618      	mov	r0, r3
 80043a8:	f004 f9a3 	bl	80086f2 <USB_HC_Halt>
 80043ac:	e062      	b.n	8004474 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80043ae:	78fa      	ldrb	r2, [r7, #3]
 80043b0:	6879      	ldr	r1, [r7, #4]
 80043b2:	4613      	mov	r3, r2
 80043b4:	011b      	lsls	r3, r3, #4
 80043b6:	1a9b      	subs	r3, r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	440b      	add	r3, r1
 80043bc:	3344      	adds	r3, #68	@ 0x44
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	1c59      	adds	r1, r3, #1
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	4613      	mov	r3, r2
 80043c6:	011b      	lsls	r3, r3, #4
 80043c8:	1a9b      	subs	r3, r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4403      	add	r3, r0
 80043ce:	3344      	adds	r3, #68	@ 0x44
 80043d0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80043d2:	78fa      	ldrb	r2, [r7, #3]
 80043d4:	6879      	ldr	r1, [r7, #4]
 80043d6:	4613      	mov	r3, r2
 80043d8:	011b      	lsls	r3, r3, #4
 80043da:	1a9b      	subs	r3, r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	440b      	add	r3, r1
 80043e0:	3344      	adds	r3, #68	@ 0x44
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d922      	bls.n	800442e <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80043e8:	78fa      	ldrb	r2, [r7, #3]
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	4613      	mov	r3, r2
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	1a9b      	subs	r3, r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	3344      	adds	r3, #68	@ 0x44
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80043fc:	78fa      	ldrb	r2, [r7, #3]
 80043fe:	6879      	ldr	r1, [r7, #4]
 8004400:	4613      	mov	r3, r2
 8004402:	011b      	lsls	r3, r3, #4
 8004404:	1a9b      	subs	r3, r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	440b      	add	r3, r1
 800440a:	334c      	adds	r3, #76	@ 0x4c
 800440c:	2204      	movs	r2, #4
 800440e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004410:	78fa      	ldrb	r2, [r7, #3]
 8004412:	6879      	ldr	r1, [r7, #4]
 8004414:	4613      	mov	r3, r2
 8004416:	011b      	lsls	r3, r3, #4
 8004418:	1a9b      	subs	r3, r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	334c      	adds	r3, #76	@ 0x4c
 8004420:	781a      	ldrb	r2, [r3, #0]
 8004422:	78fb      	ldrb	r3, [r7, #3]
 8004424:	4619      	mov	r1, r3
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f006 fcc2 	bl	800adb0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800442c:	e022      	b.n	8004474 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800442e:	78fa      	ldrb	r2, [r7, #3]
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	4613      	mov	r3, r2
 8004434:	011b      	lsls	r3, r3, #4
 8004436:	1a9b      	subs	r3, r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	440b      	add	r3, r1
 800443c:	334c      	adds	r3, #76	@ 0x4c
 800443e:	2202      	movs	r2, #2
 8004440:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004442:	78fb      	ldrb	r3, [r7, #3]
 8004444:	015a      	lsls	r2, r3, #5
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	4413      	add	r3, r2
 800444a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004458:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004460:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004462:	78fb      	ldrb	r3, [r7, #3]
 8004464:	015a      	lsls	r2, r3, #5
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	4413      	add	r3, r2
 800446a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800446e:	461a      	mov	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004474:	78fb      	ldrb	r3, [r7, #3]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	4413      	add	r3, r2
 800447c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004480:	461a      	mov	r2, r3
 8004482:	2380      	movs	r3, #128	@ 0x80
 8004484:	6093      	str	r3, [r2, #8]
 8004486:	e217      	b.n	80048b8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	78fa      	ldrb	r2, [r7, #3]
 800448e:	4611      	mov	r1, r2
 8004490:	4618      	mov	r0, r3
 8004492:	f003 fb84 	bl	8007b9e <USB_ReadChInterrupts>
 8004496:	4603      	mov	r3, r0
 8004498:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800449c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044a0:	d11b      	bne.n	80044da <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80044a2:	78fa      	ldrb	r2, [r7, #3]
 80044a4:	6879      	ldr	r1, [r7, #4]
 80044a6:	4613      	mov	r3, r2
 80044a8:	011b      	lsls	r3, r3, #4
 80044aa:	1a9b      	subs	r3, r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	440b      	add	r3, r1
 80044b0:	334d      	adds	r3, #77	@ 0x4d
 80044b2:	2209      	movs	r2, #9
 80044b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	78fa      	ldrb	r2, [r7, #3]
 80044bc:	4611      	mov	r1, r2
 80044be:	4618      	mov	r0, r3
 80044c0:	f004 f917 	bl	80086f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80044c4:	78fb      	ldrb	r3, [r7, #3]
 80044c6:	015a      	lsls	r2, r3, #5
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	4413      	add	r3, r2
 80044cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044d0:	461a      	mov	r2, r3
 80044d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80044d6:	6093      	str	r3, [r2, #8]
 80044d8:	e1ee      	b.n	80048b8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	78fa      	ldrb	r2, [r7, #3]
 80044e0:	4611      	mov	r1, r2
 80044e2:	4618      	mov	r0, r3
 80044e4:	f003 fb5b 	bl	8007b9e <USB_ReadChInterrupts>
 80044e8:	4603      	mov	r3, r0
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	f040 81df 	bne.w	80048b2 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80044f4:	78fb      	ldrb	r3, [r7, #3]
 80044f6:	015a      	lsls	r2, r3, #5
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	4413      	add	r3, r2
 80044fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004500:	461a      	mov	r2, r3
 8004502:	2302      	movs	r3, #2
 8004504:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004506:	78fa      	ldrb	r2, [r7, #3]
 8004508:	6879      	ldr	r1, [r7, #4]
 800450a:	4613      	mov	r3, r2
 800450c:	011b      	lsls	r3, r3, #4
 800450e:	1a9b      	subs	r3, r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	440b      	add	r3, r1
 8004514:	334d      	adds	r3, #77	@ 0x4d
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	2b01      	cmp	r3, #1
 800451a:	f040 8093 	bne.w	8004644 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800451e:	78fa      	ldrb	r2, [r7, #3]
 8004520:	6879      	ldr	r1, [r7, #4]
 8004522:	4613      	mov	r3, r2
 8004524:	011b      	lsls	r3, r3, #4
 8004526:	1a9b      	subs	r3, r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	440b      	add	r3, r1
 800452c:	334d      	adds	r3, #77	@ 0x4d
 800452e:	2202      	movs	r2, #2
 8004530:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004532:	78fa      	ldrb	r2, [r7, #3]
 8004534:	6879      	ldr	r1, [r7, #4]
 8004536:	4613      	mov	r3, r2
 8004538:	011b      	lsls	r3, r3, #4
 800453a:	1a9b      	subs	r3, r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	440b      	add	r3, r1
 8004540:	334c      	adds	r3, #76	@ 0x4c
 8004542:	2201      	movs	r2, #1
 8004544:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004546:	78fa      	ldrb	r2, [r7, #3]
 8004548:	6879      	ldr	r1, [r7, #4]
 800454a:	4613      	mov	r3, r2
 800454c:	011b      	lsls	r3, r3, #4
 800454e:	1a9b      	subs	r3, r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	440b      	add	r3, r1
 8004554:	3326      	adds	r3, #38	@ 0x26
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	2b02      	cmp	r3, #2
 800455a:	d00b      	beq.n	8004574 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800455c:	78fa      	ldrb	r2, [r7, #3]
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	4613      	mov	r3, r2
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	1a9b      	subs	r3, r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	440b      	add	r3, r1
 800456a:	3326      	adds	r3, #38	@ 0x26
 800456c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800456e:	2b03      	cmp	r3, #3
 8004570:	f040 8190 	bne.w	8004894 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	799b      	ldrb	r3, [r3, #6]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d115      	bne.n	80045a8 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800457c:	78fa      	ldrb	r2, [r7, #3]
 800457e:	6879      	ldr	r1, [r7, #4]
 8004580:	4613      	mov	r3, r2
 8004582:	011b      	lsls	r3, r3, #4
 8004584:	1a9b      	subs	r3, r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	440b      	add	r3, r1
 800458a:	333d      	adds	r3, #61	@ 0x3d
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	78fa      	ldrb	r2, [r7, #3]
 8004590:	f083 0301 	eor.w	r3, r3, #1
 8004594:	b2d8      	uxtb	r0, r3
 8004596:	6879      	ldr	r1, [r7, #4]
 8004598:	4613      	mov	r3, r2
 800459a:	011b      	lsls	r3, r3, #4
 800459c:	1a9b      	subs	r3, r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	440b      	add	r3, r1
 80045a2:	333d      	adds	r3, #61	@ 0x3d
 80045a4:	4602      	mov	r2, r0
 80045a6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	799b      	ldrb	r3, [r3, #6]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	f040 8171 	bne.w	8004894 <HCD_HC_OUT_IRQHandler+0x954>
 80045b2:	78fa      	ldrb	r2, [r7, #3]
 80045b4:	6879      	ldr	r1, [r7, #4]
 80045b6:	4613      	mov	r3, r2
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	1a9b      	subs	r3, r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	440b      	add	r3, r1
 80045c0:	3334      	adds	r3, #52	@ 0x34
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 8165 	beq.w	8004894 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80045ca:	78fa      	ldrb	r2, [r7, #3]
 80045cc:	6879      	ldr	r1, [r7, #4]
 80045ce:	4613      	mov	r3, r2
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	1a9b      	subs	r3, r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	440b      	add	r3, r1
 80045d8:	3334      	adds	r3, #52	@ 0x34
 80045da:	6819      	ldr	r1, [r3, #0]
 80045dc:	78fa      	ldrb	r2, [r7, #3]
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	4613      	mov	r3, r2
 80045e2:	011b      	lsls	r3, r3, #4
 80045e4:	1a9b      	subs	r3, r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4403      	add	r3, r0
 80045ea:	3328      	adds	r3, #40	@ 0x28
 80045ec:	881b      	ldrh	r3, [r3, #0]
 80045ee:	440b      	add	r3, r1
 80045f0:	1e59      	subs	r1, r3, #1
 80045f2:	78fa      	ldrb	r2, [r7, #3]
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	4613      	mov	r3, r2
 80045f8:	011b      	lsls	r3, r3, #4
 80045fa:	1a9b      	subs	r3, r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4403      	add	r3, r0
 8004600:	3328      	adds	r3, #40	@ 0x28
 8004602:	881b      	ldrh	r3, [r3, #0]
 8004604:	fbb1 f3f3 	udiv	r3, r1, r3
 8004608:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 813f 	beq.w	8004894 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004616:	78fa      	ldrb	r2, [r7, #3]
 8004618:	6879      	ldr	r1, [r7, #4]
 800461a:	4613      	mov	r3, r2
 800461c:	011b      	lsls	r3, r3, #4
 800461e:	1a9b      	subs	r3, r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	440b      	add	r3, r1
 8004624:	333d      	adds	r3, #61	@ 0x3d
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	78fa      	ldrb	r2, [r7, #3]
 800462a:	f083 0301 	eor.w	r3, r3, #1
 800462e:	b2d8      	uxtb	r0, r3
 8004630:	6879      	ldr	r1, [r7, #4]
 8004632:	4613      	mov	r3, r2
 8004634:	011b      	lsls	r3, r3, #4
 8004636:	1a9b      	subs	r3, r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	440b      	add	r3, r1
 800463c:	333d      	adds	r3, #61	@ 0x3d
 800463e:	4602      	mov	r2, r0
 8004640:	701a      	strb	r2, [r3, #0]
 8004642:	e127      	b.n	8004894 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004644:	78fa      	ldrb	r2, [r7, #3]
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	4613      	mov	r3, r2
 800464a:	011b      	lsls	r3, r3, #4
 800464c:	1a9b      	subs	r3, r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	440b      	add	r3, r1
 8004652:	334d      	adds	r3, #77	@ 0x4d
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	2b03      	cmp	r3, #3
 8004658:	d120      	bne.n	800469c <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800465a:	78fa      	ldrb	r2, [r7, #3]
 800465c:	6879      	ldr	r1, [r7, #4]
 800465e:	4613      	mov	r3, r2
 8004660:	011b      	lsls	r3, r3, #4
 8004662:	1a9b      	subs	r3, r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	440b      	add	r3, r1
 8004668:	334d      	adds	r3, #77	@ 0x4d
 800466a:	2202      	movs	r2, #2
 800466c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800466e:	78fa      	ldrb	r2, [r7, #3]
 8004670:	6879      	ldr	r1, [r7, #4]
 8004672:	4613      	mov	r3, r2
 8004674:	011b      	lsls	r3, r3, #4
 8004676:	1a9b      	subs	r3, r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	440b      	add	r3, r1
 800467c:	331b      	adds	r3, #27
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	2b01      	cmp	r3, #1
 8004682:	f040 8107 	bne.w	8004894 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004686:	78fa      	ldrb	r2, [r7, #3]
 8004688:	6879      	ldr	r1, [r7, #4]
 800468a:	4613      	mov	r3, r2
 800468c:	011b      	lsls	r3, r3, #4
 800468e:	1a9b      	subs	r3, r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	440b      	add	r3, r1
 8004694:	334c      	adds	r3, #76	@ 0x4c
 8004696:	2202      	movs	r2, #2
 8004698:	701a      	strb	r2, [r3, #0]
 800469a:	e0fb      	b.n	8004894 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800469c:	78fa      	ldrb	r2, [r7, #3]
 800469e:	6879      	ldr	r1, [r7, #4]
 80046a0:	4613      	mov	r3, r2
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	1a9b      	subs	r3, r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	440b      	add	r3, r1
 80046aa:	334d      	adds	r3, #77	@ 0x4d
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	d13a      	bne.n	8004728 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80046b2:	78fa      	ldrb	r2, [r7, #3]
 80046b4:	6879      	ldr	r1, [r7, #4]
 80046b6:	4613      	mov	r3, r2
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	1a9b      	subs	r3, r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	440b      	add	r3, r1
 80046c0:	334d      	adds	r3, #77	@ 0x4d
 80046c2:	2202      	movs	r2, #2
 80046c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80046c6:	78fa      	ldrb	r2, [r7, #3]
 80046c8:	6879      	ldr	r1, [r7, #4]
 80046ca:	4613      	mov	r3, r2
 80046cc:	011b      	lsls	r3, r3, #4
 80046ce:	1a9b      	subs	r3, r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	440b      	add	r3, r1
 80046d4:	334c      	adds	r3, #76	@ 0x4c
 80046d6:	2202      	movs	r2, #2
 80046d8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80046da:	78fa      	ldrb	r2, [r7, #3]
 80046dc:	6879      	ldr	r1, [r7, #4]
 80046de:	4613      	mov	r3, r2
 80046e0:	011b      	lsls	r3, r3, #4
 80046e2:	1a9b      	subs	r3, r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	440b      	add	r3, r1
 80046e8:	331b      	adds	r3, #27
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	f040 80d1 	bne.w	8004894 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80046f2:	78fa      	ldrb	r2, [r7, #3]
 80046f4:	6879      	ldr	r1, [r7, #4]
 80046f6:	4613      	mov	r3, r2
 80046f8:	011b      	lsls	r3, r3, #4
 80046fa:	1a9b      	subs	r3, r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	440b      	add	r3, r1
 8004700:	331b      	adds	r3, #27
 8004702:	2200      	movs	r2, #0
 8004704:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004706:	78fb      	ldrb	r3, [r7, #3]
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	4413      	add	r3, r2
 800470e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	78fa      	ldrb	r2, [r7, #3]
 8004716:	0151      	lsls	r1, r2, #5
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	440a      	add	r2, r1
 800471c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004720:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004724:	6053      	str	r3, [r2, #4]
 8004726:	e0b5      	b.n	8004894 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004728:	78fa      	ldrb	r2, [r7, #3]
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	4613      	mov	r3, r2
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	1a9b      	subs	r3, r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	440b      	add	r3, r1
 8004736:	334d      	adds	r3, #77	@ 0x4d
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	2b05      	cmp	r3, #5
 800473c:	d114      	bne.n	8004768 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800473e:	78fa      	ldrb	r2, [r7, #3]
 8004740:	6879      	ldr	r1, [r7, #4]
 8004742:	4613      	mov	r3, r2
 8004744:	011b      	lsls	r3, r3, #4
 8004746:	1a9b      	subs	r3, r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	440b      	add	r3, r1
 800474c:	334d      	adds	r3, #77	@ 0x4d
 800474e:	2202      	movs	r2, #2
 8004750:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004752:	78fa      	ldrb	r2, [r7, #3]
 8004754:	6879      	ldr	r1, [r7, #4]
 8004756:	4613      	mov	r3, r2
 8004758:	011b      	lsls	r3, r3, #4
 800475a:	1a9b      	subs	r3, r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	440b      	add	r3, r1
 8004760:	334c      	adds	r3, #76	@ 0x4c
 8004762:	2202      	movs	r2, #2
 8004764:	701a      	strb	r2, [r3, #0]
 8004766:	e095      	b.n	8004894 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004768:	78fa      	ldrb	r2, [r7, #3]
 800476a:	6879      	ldr	r1, [r7, #4]
 800476c:	4613      	mov	r3, r2
 800476e:	011b      	lsls	r3, r3, #4
 8004770:	1a9b      	subs	r3, r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	440b      	add	r3, r1
 8004776:	334d      	adds	r3, #77	@ 0x4d
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	2b06      	cmp	r3, #6
 800477c:	d114      	bne.n	80047a8 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800477e:	78fa      	ldrb	r2, [r7, #3]
 8004780:	6879      	ldr	r1, [r7, #4]
 8004782:	4613      	mov	r3, r2
 8004784:	011b      	lsls	r3, r3, #4
 8004786:	1a9b      	subs	r3, r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	440b      	add	r3, r1
 800478c:	334d      	adds	r3, #77	@ 0x4d
 800478e:	2202      	movs	r2, #2
 8004790:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004792:	78fa      	ldrb	r2, [r7, #3]
 8004794:	6879      	ldr	r1, [r7, #4]
 8004796:	4613      	mov	r3, r2
 8004798:	011b      	lsls	r3, r3, #4
 800479a:	1a9b      	subs	r3, r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	440b      	add	r3, r1
 80047a0:	334c      	adds	r3, #76	@ 0x4c
 80047a2:	2205      	movs	r2, #5
 80047a4:	701a      	strb	r2, [r3, #0]
 80047a6:	e075      	b.n	8004894 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80047a8:	78fa      	ldrb	r2, [r7, #3]
 80047aa:	6879      	ldr	r1, [r7, #4]
 80047ac:	4613      	mov	r3, r2
 80047ae:	011b      	lsls	r3, r3, #4
 80047b0:	1a9b      	subs	r3, r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	440b      	add	r3, r1
 80047b6:	334d      	adds	r3, #77	@ 0x4d
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	2b07      	cmp	r3, #7
 80047bc:	d00a      	beq.n	80047d4 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80047be:	78fa      	ldrb	r2, [r7, #3]
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	4613      	mov	r3, r2
 80047c4:	011b      	lsls	r3, r3, #4
 80047c6:	1a9b      	subs	r3, r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	440b      	add	r3, r1
 80047cc:	334d      	adds	r3, #77	@ 0x4d
 80047ce:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80047d0:	2b09      	cmp	r3, #9
 80047d2:	d170      	bne.n	80048b6 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80047d4:	78fa      	ldrb	r2, [r7, #3]
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	4613      	mov	r3, r2
 80047da:	011b      	lsls	r3, r3, #4
 80047dc:	1a9b      	subs	r3, r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	440b      	add	r3, r1
 80047e2:	334d      	adds	r3, #77	@ 0x4d
 80047e4:	2202      	movs	r2, #2
 80047e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80047e8:	78fa      	ldrb	r2, [r7, #3]
 80047ea:	6879      	ldr	r1, [r7, #4]
 80047ec:	4613      	mov	r3, r2
 80047ee:	011b      	lsls	r3, r3, #4
 80047f0:	1a9b      	subs	r3, r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	440b      	add	r3, r1
 80047f6:	3344      	adds	r3, #68	@ 0x44
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	1c59      	adds	r1, r3, #1
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	4613      	mov	r3, r2
 8004800:	011b      	lsls	r3, r3, #4
 8004802:	1a9b      	subs	r3, r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4403      	add	r3, r0
 8004808:	3344      	adds	r3, #68	@ 0x44
 800480a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800480c:	78fa      	ldrb	r2, [r7, #3]
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	4613      	mov	r3, r2
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	1a9b      	subs	r3, r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	3344      	adds	r3, #68	@ 0x44
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2b02      	cmp	r3, #2
 8004820:	d914      	bls.n	800484c <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004822:	78fa      	ldrb	r2, [r7, #3]
 8004824:	6879      	ldr	r1, [r7, #4]
 8004826:	4613      	mov	r3, r2
 8004828:	011b      	lsls	r3, r3, #4
 800482a:	1a9b      	subs	r3, r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	440b      	add	r3, r1
 8004830:	3344      	adds	r3, #68	@ 0x44
 8004832:	2200      	movs	r2, #0
 8004834:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004836:	78fa      	ldrb	r2, [r7, #3]
 8004838:	6879      	ldr	r1, [r7, #4]
 800483a:	4613      	mov	r3, r2
 800483c:	011b      	lsls	r3, r3, #4
 800483e:	1a9b      	subs	r3, r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	440b      	add	r3, r1
 8004844:	334c      	adds	r3, #76	@ 0x4c
 8004846:	2204      	movs	r2, #4
 8004848:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800484a:	e022      	b.n	8004892 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800484c:	78fa      	ldrb	r2, [r7, #3]
 800484e:	6879      	ldr	r1, [r7, #4]
 8004850:	4613      	mov	r3, r2
 8004852:	011b      	lsls	r3, r3, #4
 8004854:	1a9b      	subs	r3, r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	440b      	add	r3, r1
 800485a:	334c      	adds	r3, #76	@ 0x4c
 800485c:	2202      	movs	r2, #2
 800485e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004860:	78fb      	ldrb	r3, [r7, #3]
 8004862:	015a      	lsls	r2, r3, #5
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	4413      	add	r3, r2
 8004868:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004876:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800487e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004880:	78fb      	ldrb	r3, [r7, #3]
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	4413      	add	r3, r2
 8004888:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800488c:	461a      	mov	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004892:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004894:	78fa      	ldrb	r2, [r7, #3]
 8004896:	6879      	ldr	r1, [r7, #4]
 8004898:	4613      	mov	r3, r2
 800489a:	011b      	lsls	r3, r3, #4
 800489c:	1a9b      	subs	r3, r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	440b      	add	r3, r1
 80048a2:	334c      	adds	r3, #76	@ 0x4c
 80048a4:	781a      	ldrb	r2, [r3, #0]
 80048a6:	78fb      	ldrb	r3, [r7, #3]
 80048a8:	4619      	mov	r1, r3
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f006 fa80 	bl	800adb0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80048b0:	e002      	b.n	80048b8 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80048b2:	bf00      	nop
 80048b4:	e000      	b.n	80048b8 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80048b6:	bf00      	nop
  }
}
 80048b8:	3718      	adds	r7, #24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b08a      	sub	sp, #40	@ 0x28
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ce:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	f003 030f 	and.w	r3, r3, #15
 80048de:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	0c5b      	lsrs	r3, r3, #17
 80048e4:	f003 030f 	and.w	r3, r3, #15
 80048e8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	091b      	lsrs	r3, r3, #4
 80048ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048f2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d004      	beq.n	8004904 <HCD_RXQLVL_IRQHandler+0x46>
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	2b05      	cmp	r3, #5
 80048fe:	f000 80b6 	beq.w	8004a6e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004902:	e0b7      	b.n	8004a74 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	2b00      	cmp	r3, #0
 8004908:	f000 80b3 	beq.w	8004a72 <HCD_RXQLVL_IRQHandler+0x1b4>
 800490c:	6879      	ldr	r1, [r7, #4]
 800490e:	69ba      	ldr	r2, [r7, #24]
 8004910:	4613      	mov	r3, r2
 8004912:	011b      	lsls	r3, r3, #4
 8004914:	1a9b      	subs	r3, r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	440b      	add	r3, r1
 800491a:	332c      	adds	r3, #44	@ 0x2c
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	f000 80a7 	beq.w	8004a72 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004924:	6879      	ldr	r1, [r7, #4]
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	4613      	mov	r3, r2
 800492a:	011b      	lsls	r3, r3, #4
 800492c:	1a9b      	subs	r3, r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	440b      	add	r3, r1
 8004932:	3338      	adds	r3, #56	@ 0x38
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	18d1      	adds	r1, r2, r3
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	4613      	mov	r3, r2
 8004940:	011b      	lsls	r3, r3, #4
 8004942:	1a9b      	subs	r3, r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	4403      	add	r3, r0
 8004948:	3334      	adds	r3, #52	@ 0x34
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4299      	cmp	r1, r3
 800494e:	f200 8083 	bhi.w	8004a58 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6818      	ldr	r0, [r3, #0]
 8004956:	6879      	ldr	r1, [r7, #4]
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	4613      	mov	r3, r2
 800495c:	011b      	lsls	r3, r3, #4
 800495e:	1a9b      	subs	r3, r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	440b      	add	r3, r1
 8004964:	332c      	adds	r3, #44	@ 0x2c
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	b292      	uxth	r2, r2
 800496c:	4619      	mov	r1, r3
 800496e:	f003 f8ab 	bl	8007ac8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004972:	6879      	ldr	r1, [r7, #4]
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	4613      	mov	r3, r2
 8004978:	011b      	lsls	r3, r3, #4
 800497a:	1a9b      	subs	r3, r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	440b      	add	r3, r1
 8004980:	332c      	adds	r3, #44	@ 0x2c
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	18d1      	adds	r1, r2, r3
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	4613      	mov	r3, r2
 800498e:	011b      	lsls	r3, r3, #4
 8004990:	1a9b      	subs	r3, r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4403      	add	r3, r0
 8004996:	332c      	adds	r3, #44	@ 0x2c
 8004998:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800499a:	6879      	ldr	r1, [r7, #4]
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	4613      	mov	r3, r2
 80049a0:	011b      	lsls	r3, r3, #4
 80049a2:	1a9b      	subs	r3, r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	440b      	add	r3, r1
 80049a8:	3338      	adds	r3, #56	@ 0x38
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	18d1      	adds	r1, r2, r3
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	4613      	mov	r3, r2
 80049b6:	011b      	lsls	r3, r3, #4
 80049b8:	1a9b      	subs	r3, r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4403      	add	r3, r0
 80049be:	3338      	adds	r3, #56	@ 0x38
 80049c0:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	015a      	lsls	r2, r3, #5
 80049c6:	6a3b      	ldr	r3, [r7, #32]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	0cdb      	lsrs	r3, r3, #19
 80049d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049d6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80049d8:	6879      	ldr	r1, [r7, #4]
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	4613      	mov	r3, r2
 80049de:	011b      	lsls	r3, r3, #4
 80049e0:	1a9b      	subs	r3, r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	440b      	add	r3, r1
 80049e6:	3328      	adds	r3, #40	@ 0x28
 80049e8:	881b      	ldrh	r3, [r3, #0]
 80049ea:	461a      	mov	r2, r3
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d13f      	bne.n	8004a72 <HCD_RXQLVL_IRQHandler+0x1b4>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d03c      	beq.n	8004a72 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	015a      	lsls	r2, r3, #5
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004a0e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004a16:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	015a      	lsls	r2, r3, #5
 8004a1c:	6a3b      	ldr	r3, [r7, #32]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a24:	461a      	mov	r2, r3
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004a2a:	6879      	ldr	r1, [r7, #4]
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	011b      	lsls	r3, r3, #4
 8004a32:	1a9b      	subs	r3, r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	440b      	add	r3, r1
 8004a38:	333c      	adds	r3, #60	@ 0x3c
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	f083 0301 	eor.w	r3, r3, #1
 8004a40:	b2d8      	uxtb	r0, r3
 8004a42:	6879      	ldr	r1, [r7, #4]
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	4613      	mov	r3, r2
 8004a48:	011b      	lsls	r3, r3, #4
 8004a4a:	1a9b      	subs	r3, r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	440b      	add	r3, r1
 8004a50:	333c      	adds	r3, #60	@ 0x3c
 8004a52:	4602      	mov	r2, r0
 8004a54:	701a      	strb	r2, [r3, #0]
      break;
 8004a56:	e00c      	b.n	8004a72 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004a58:	6879      	ldr	r1, [r7, #4]
 8004a5a:	69ba      	ldr	r2, [r7, #24]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	011b      	lsls	r3, r3, #4
 8004a60:	1a9b      	subs	r3, r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	440b      	add	r3, r1
 8004a66:	334c      	adds	r3, #76	@ 0x4c
 8004a68:	2204      	movs	r2, #4
 8004a6a:	701a      	strb	r2, [r3, #0]
      break;
 8004a6c:	e001      	b.n	8004a72 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004a6e:	bf00      	nop
 8004a70:	e000      	b.n	8004a74 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004a72:	bf00      	nop
  }
}
 8004a74:	bf00      	nop
 8004a76:	3728      	adds	r7, #40	@ 0x28
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004aa8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d10b      	bne.n	8004acc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d102      	bne.n	8004ac4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f006 f95a 	bl	800ad78 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	f043 0302 	orr.w	r3, r3, #2
 8004aca:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f003 0308 	and.w	r3, r3, #8
 8004ad2:	2b08      	cmp	r3, #8
 8004ad4:	d132      	bne.n	8004b3c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	f043 0308 	orr.w	r3, r3, #8
 8004adc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f003 0304 	and.w	r3, r3, #4
 8004ae4:	2b04      	cmp	r3, #4
 8004ae6:	d126      	bne.n	8004b36 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	7a5b      	ldrb	r3, [r3, #9]
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d113      	bne.n	8004b18 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004af6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004afa:	d106      	bne.n	8004b0a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2102      	movs	r1, #2
 8004b02:	4618      	mov	r0, r3
 8004b04:	f003 f976 	bl	8007df4 <USB_InitFSLSPClkSel>
 8004b08:	e011      	b.n	8004b2e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2101      	movs	r1, #1
 8004b10:	4618      	mov	r0, r3
 8004b12:	f003 f96f 	bl	8007df4 <USB_InitFSLSPClkSel>
 8004b16:	e00a      	b.n	8004b2e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	79db      	ldrb	r3, [r3, #7]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d106      	bne.n	8004b2e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b26:	461a      	mov	r2, r3
 8004b28:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004b2c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f006 f94c 	bl	800adcc <HAL_HCD_PortEnabled_Callback>
 8004b34:	e002      	b.n	8004b3c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f006 f956 	bl	800ade8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f003 0320 	and.w	r3, r3, #32
 8004b42:	2b20      	cmp	r3, #32
 8004b44:	d103      	bne.n	8004b4e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	f043 0320 	orr.w	r3, r3, #32
 8004b4c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004b54:	461a      	mov	r2, r3
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	6013      	str	r3, [r2, #0]
}
 8004b5a:	bf00      	nop
 8004b5c:	3718      	adds	r7, #24
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
	...

08004b64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d101      	bne.n	8004b76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e12b      	b.n	8004dce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d106      	bne.n	8004b90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7fc fac4 	bl	8001118 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2224      	movs	r2, #36	@ 0x24
 8004b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0201 	bic.w	r2, r2, #1
 8004ba6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004bb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004bc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004bc8:	f001 fd8a 	bl	80066e0 <HAL_RCC_GetPCLK1Freq>
 8004bcc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	4a81      	ldr	r2, [pc, #516]	@ (8004dd8 <HAL_I2C_Init+0x274>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d807      	bhi.n	8004be8 <HAL_I2C_Init+0x84>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4a80      	ldr	r2, [pc, #512]	@ (8004ddc <HAL_I2C_Init+0x278>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	bf94      	ite	ls
 8004be0:	2301      	movls	r3, #1
 8004be2:	2300      	movhi	r3, #0
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	e006      	b.n	8004bf6 <HAL_I2C_Init+0x92>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4a7d      	ldr	r2, [pc, #500]	@ (8004de0 <HAL_I2C_Init+0x27c>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	bf94      	ite	ls
 8004bf0:	2301      	movls	r3, #1
 8004bf2:	2300      	movhi	r3, #0
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e0e7      	b.n	8004dce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	4a78      	ldr	r2, [pc, #480]	@ (8004de4 <HAL_I2C_Init+0x280>)
 8004c02:	fba2 2303 	umull	r2, r3, r2, r3
 8004c06:	0c9b      	lsrs	r3, r3, #18
 8004c08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	4a6a      	ldr	r2, [pc, #424]	@ (8004dd8 <HAL_I2C_Init+0x274>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d802      	bhi.n	8004c38 <HAL_I2C_Init+0xd4>
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	3301      	adds	r3, #1
 8004c36:	e009      	b.n	8004c4c <HAL_I2C_Init+0xe8>
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004c3e:	fb02 f303 	mul.w	r3, r2, r3
 8004c42:	4a69      	ldr	r2, [pc, #420]	@ (8004de8 <HAL_I2C_Init+0x284>)
 8004c44:	fba2 2303 	umull	r2, r3, r2, r3
 8004c48:	099b      	lsrs	r3, r3, #6
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	6812      	ldr	r2, [r2, #0]
 8004c50:	430b      	orrs	r3, r1
 8004c52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	69db      	ldr	r3, [r3, #28]
 8004c5a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004c5e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	495c      	ldr	r1, [pc, #368]	@ (8004dd8 <HAL_I2C_Init+0x274>)
 8004c68:	428b      	cmp	r3, r1
 8004c6a:	d819      	bhi.n	8004ca0 <HAL_I2C_Init+0x13c>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	1e59      	subs	r1, r3, #1
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c7a:	1c59      	adds	r1, r3, #1
 8004c7c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004c80:	400b      	ands	r3, r1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00a      	beq.n	8004c9c <HAL_I2C_Init+0x138>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	1e59      	subs	r1, r3, #1
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c94:	3301      	adds	r3, #1
 8004c96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c9a:	e051      	b.n	8004d40 <HAL_I2C_Init+0x1dc>
 8004c9c:	2304      	movs	r3, #4
 8004c9e:	e04f      	b.n	8004d40 <HAL_I2C_Init+0x1dc>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d111      	bne.n	8004ccc <HAL_I2C_Init+0x168>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	1e58      	subs	r0, r3, #1
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6859      	ldr	r1, [r3, #4]
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	440b      	add	r3, r1
 8004cb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cba:	3301      	adds	r3, #1
 8004cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	bf0c      	ite	eq
 8004cc4:	2301      	moveq	r3, #1
 8004cc6:	2300      	movne	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	e012      	b.n	8004cf2 <HAL_I2C_Init+0x18e>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	1e58      	subs	r0, r3, #1
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6859      	ldr	r1, [r3, #4]
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	440b      	add	r3, r1
 8004cda:	0099      	lsls	r1, r3, #2
 8004cdc:	440b      	add	r3, r1
 8004cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	bf0c      	ite	eq
 8004cec:	2301      	moveq	r3, #1
 8004cee:	2300      	movne	r3, #0
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <HAL_I2C_Init+0x196>
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e022      	b.n	8004d40 <HAL_I2C_Init+0x1dc>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10e      	bne.n	8004d20 <HAL_I2C_Init+0x1bc>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	1e58      	subs	r0, r3, #1
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6859      	ldr	r1, [r3, #4]
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	440b      	add	r3, r1
 8004d10:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d14:	3301      	adds	r3, #1
 8004d16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d1e:	e00f      	b.n	8004d40 <HAL_I2C_Init+0x1dc>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	1e58      	subs	r0, r3, #1
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6859      	ldr	r1, [r3, #4]
 8004d28:	460b      	mov	r3, r1
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	440b      	add	r3, r1
 8004d2e:	0099      	lsls	r1, r3, #2
 8004d30:	440b      	add	r3, r1
 8004d32:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d36:	3301      	adds	r3, #1
 8004d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d40:	6879      	ldr	r1, [r7, #4]
 8004d42:	6809      	ldr	r1, [r1, #0]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69da      	ldr	r2, [r3, #28]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004d6e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	6911      	ldr	r1, [r2, #16]
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	68d2      	ldr	r2, [r2, #12]
 8004d7a:	4311      	orrs	r1, r2
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	6812      	ldr	r2, [r2, #0]
 8004d80:	430b      	orrs	r3, r1
 8004d82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	695a      	ldr	r2, [r3, #20]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	431a      	orrs	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f042 0201 	orr.w	r2, r2, #1
 8004dae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2220      	movs	r2, #32
 8004dba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	000186a0 	.word	0x000186a0
 8004ddc:	001e847f 	.word	0x001e847f
 8004de0:	003d08ff 	.word	0x003d08ff
 8004de4:	431bde83 	.word	0x431bde83
 8004de8:	10624dd3 	.word	0x10624dd3

08004dec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b088      	sub	sp, #32
 8004df0:	af02      	add	r7, sp, #8
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	4608      	mov	r0, r1
 8004df6:	4611      	mov	r1, r2
 8004df8:	461a      	mov	r2, r3
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	817b      	strh	r3, [r7, #10]
 8004dfe:	460b      	mov	r3, r1
 8004e00:	813b      	strh	r3, [r7, #8]
 8004e02:	4613      	mov	r3, r2
 8004e04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e06:	f7fc ff65 	bl	8001cd4 <HAL_GetTick>
 8004e0a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	2b20      	cmp	r3, #32
 8004e16:	f040 80d9 	bne.w	8004fcc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	2319      	movs	r3, #25
 8004e20:	2201      	movs	r2, #1
 8004e22:	496d      	ldr	r1, [pc, #436]	@ (8004fd8 <HAL_I2C_Mem_Write+0x1ec>)
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f000 f971 	bl	800510c <I2C_WaitOnFlagUntilTimeout>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d001      	beq.n	8004e34 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004e30:	2302      	movs	r3, #2
 8004e32:	e0cc      	b.n	8004fce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d101      	bne.n	8004e42 <HAL_I2C_Mem_Write+0x56>
 8004e3e:	2302      	movs	r3, #2
 8004e40:	e0c5      	b.n	8004fce <HAL_I2C_Mem_Write+0x1e2>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d007      	beq.n	8004e68 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f042 0201 	orr.w	r2, r2, #1
 8004e66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2221      	movs	r2, #33	@ 0x21
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2240      	movs	r2, #64	@ 0x40
 8004e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6a3a      	ldr	r2, [r7, #32]
 8004e92:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004e98:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4a4d      	ldr	r2, [pc, #308]	@ (8004fdc <HAL_I2C_Mem_Write+0x1f0>)
 8004ea8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004eaa:	88f8      	ldrh	r0, [r7, #6]
 8004eac:	893a      	ldrh	r2, [r7, #8]
 8004eae:	8979      	ldrh	r1, [r7, #10]
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	9301      	str	r3, [sp, #4]
 8004eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	4603      	mov	r3, r0
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 f890 	bl	8004fe0 <I2C_RequestMemoryWrite>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d052      	beq.n	8004f6c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e081      	b.n	8004fce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f000 fa36 	bl	8005340 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00d      	beq.n	8004ef6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ede:	2b04      	cmp	r3, #4
 8004ee0:	d107      	bne.n	8004ef2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ef0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e06b      	b.n	8004fce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efa:	781a      	ldrb	r2, [r3, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f06:	1c5a      	adds	r2, r3, #1
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f10:	3b01      	subs	r3, #1
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	695b      	ldr	r3, [r3, #20]
 8004f2c:	f003 0304 	and.w	r3, r3, #4
 8004f30:	2b04      	cmp	r3, #4
 8004f32:	d11b      	bne.n	8004f6c <HAL_I2C_Mem_Write+0x180>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d017      	beq.n	8004f6c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f40:	781a      	ldrb	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4c:	1c5a      	adds	r2, r3, #1
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f56:	3b01      	subs	r3, #1
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	3b01      	subs	r3, #1
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1aa      	bne.n	8004eca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f000 fa29 	bl	80053d0 <I2C_WaitOnBTFFlagUntilTimeout>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00d      	beq.n	8004fa0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f88:	2b04      	cmp	r3, #4
 8004f8a:	d107      	bne.n	8004f9c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f9a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e016      	b.n	8004fce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	e000      	b.n	8004fce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004fcc:	2302      	movs	r3, #2
  }
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3718      	adds	r7, #24
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	00100002 	.word	0x00100002
 8004fdc:	ffff0000 	.word	0xffff0000

08004fe0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b088      	sub	sp, #32
 8004fe4:	af02      	add	r7, sp, #8
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	4608      	mov	r0, r1
 8004fea:	4611      	mov	r1, r2
 8004fec:	461a      	mov	r2, r3
 8004fee:	4603      	mov	r3, r0
 8004ff0:	817b      	strh	r3, [r7, #10]
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	813b      	strh	r3, [r7, #8]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005008:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800500a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	6a3b      	ldr	r3, [r7, #32]
 8005010:	2200      	movs	r2, #0
 8005012:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f000 f878 	bl	800510c <I2C_WaitOnFlagUntilTimeout>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00d      	beq.n	800503e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800502c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005030:	d103      	bne.n	800503a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005038:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e05f      	b.n	80050fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800503e:	897b      	ldrh	r3, [r7, #10]
 8005040:	b2db      	uxtb	r3, r3
 8005042:	461a      	mov	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800504c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800504e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005050:	6a3a      	ldr	r2, [r7, #32]
 8005052:	492d      	ldr	r1, [pc, #180]	@ (8005108 <I2C_RequestMemoryWrite+0x128>)
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f000 f8d3 	bl	8005200 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d001      	beq.n	8005064 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e04c      	b.n	80050fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005064:	2300      	movs	r3, #0
 8005066:	617b      	str	r3, [r7, #20]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	617b      	str	r3, [r7, #20]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	617b      	str	r3, [r7, #20]
 8005078:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800507a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800507c:	6a39      	ldr	r1, [r7, #32]
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f000 f95e 	bl	8005340 <I2C_WaitOnTXEFlagUntilTimeout>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00d      	beq.n	80050a6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800508e:	2b04      	cmp	r3, #4
 8005090:	d107      	bne.n	80050a2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e02b      	b.n	80050fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050a6:	88fb      	ldrh	r3, [r7, #6]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d105      	bne.n	80050b8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050ac:	893b      	ldrh	r3, [r7, #8]
 80050ae:	b2da      	uxtb	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	611a      	str	r2, [r3, #16]
 80050b6:	e021      	b.n	80050fc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80050b8:	893b      	ldrh	r3, [r7, #8]
 80050ba:	0a1b      	lsrs	r3, r3, #8
 80050bc:	b29b      	uxth	r3, r3
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050c8:	6a39      	ldr	r1, [r7, #32]
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f000 f938 	bl	8005340 <I2C_WaitOnTXEFlagUntilTimeout>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00d      	beq.n	80050f2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050da:	2b04      	cmp	r3, #4
 80050dc:	d107      	bne.n	80050ee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e005      	b.n	80050fe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050f2:	893b      	ldrh	r3, [r7, #8]
 80050f4:	b2da      	uxtb	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3718      	adds	r7, #24
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	00010002 	.word	0x00010002

0800510c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	603b      	str	r3, [r7, #0]
 8005118:	4613      	mov	r3, r2
 800511a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800511c:	e048      	b.n	80051b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005124:	d044      	beq.n	80051b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005126:	f7fc fdd5 	bl	8001cd4 <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	429a      	cmp	r2, r3
 8005134:	d302      	bcc.n	800513c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d139      	bne.n	80051b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	0c1b      	lsrs	r3, r3, #16
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b01      	cmp	r3, #1
 8005144:	d10d      	bne.n	8005162 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	43da      	mvns	r2, r3
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	4013      	ands	r3, r2
 8005152:	b29b      	uxth	r3, r3
 8005154:	2b00      	cmp	r3, #0
 8005156:	bf0c      	ite	eq
 8005158:	2301      	moveq	r3, #1
 800515a:	2300      	movne	r3, #0
 800515c:	b2db      	uxtb	r3, r3
 800515e:	461a      	mov	r2, r3
 8005160:	e00c      	b.n	800517c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	43da      	mvns	r2, r3
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	4013      	ands	r3, r2
 800516e:	b29b      	uxth	r3, r3
 8005170:	2b00      	cmp	r3, #0
 8005172:	bf0c      	ite	eq
 8005174:	2301      	moveq	r3, #1
 8005176:	2300      	movne	r3, #0
 8005178:	b2db      	uxtb	r3, r3
 800517a:	461a      	mov	r2, r3
 800517c:	79fb      	ldrb	r3, [r7, #7]
 800517e:	429a      	cmp	r2, r3
 8005180:	d116      	bne.n	80051b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2220      	movs	r2, #32
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519c:	f043 0220 	orr.w	r2, r3, #32
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e023      	b.n	80051f8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	0c1b      	lsrs	r3, r3, #16
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d10d      	bne.n	80051d6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	695b      	ldr	r3, [r3, #20]
 80051c0:	43da      	mvns	r2, r3
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	4013      	ands	r3, r2
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	bf0c      	ite	eq
 80051cc:	2301      	moveq	r3, #1
 80051ce:	2300      	movne	r3, #0
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	461a      	mov	r2, r3
 80051d4:	e00c      	b.n	80051f0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	43da      	mvns	r2, r3
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	4013      	ands	r3, r2
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	bf0c      	ite	eq
 80051e8:	2301      	moveq	r3, #1
 80051ea:	2300      	movne	r3, #0
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	461a      	mov	r2, r3
 80051f0:	79fb      	ldrb	r3, [r7, #7]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d093      	beq.n	800511e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
 800520c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800520e:	e071      	b.n	80052f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800521a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800521e:	d123      	bne.n	8005268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800522e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005238:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2220      	movs	r2, #32
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005254:	f043 0204 	orr.w	r2, r3, #4
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e067      	b.n	8005338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526e:	d041      	beq.n	80052f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005270:	f7fc fd30 	bl	8001cd4 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	429a      	cmp	r2, r3
 800527e:	d302      	bcc.n	8005286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d136      	bne.n	80052f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	0c1b      	lsrs	r3, r3, #16
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b01      	cmp	r3, #1
 800528e:	d10c      	bne.n	80052aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	43da      	mvns	r2, r3
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	4013      	ands	r3, r2
 800529c:	b29b      	uxth	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	bf14      	ite	ne
 80052a2:	2301      	movne	r3, #1
 80052a4:	2300      	moveq	r3, #0
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	e00b      	b.n	80052c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	43da      	mvns	r2, r3
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	4013      	ands	r3, r2
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	bf14      	ite	ne
 80052bc:	2301      	movne	r3, #1
 80052be:	2300      	moveq	r3, #0
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d016      	beq.n	80052f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2220      	movs	r2, #32
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e0:	f043 0220 	orr.w	r2, r3, #32
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e021      	b.n	8005338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	0c1b      	lsrs	r3, r3, #16
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d10c      	bne.n	8005318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	43da      	mvns	r2, r3
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	4013      	ands	r3, r2
 800530a:	b29b      	uxth	r3, r3
 800530c:	2b00      	cmp	r3, #0
 800530e:	bf14      	ite	ne
 8005310:	2301      	movne	r3, #1
 8005312:	2300      	moveq	r3, #0
 8005314:	b2db      	uxtb	r3, r3
 8005316:	e00b      	b.n	8005330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	43da      	mvns	r2, r3
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	4013      	ands	r3, r2
 8005324:	b29b      	uxth	r3, r3
 8005326:	2b00      	cmp	r3, #0
 8005328:	bf14      	ite	ne
 800532a:	2301      	movne	r3, #1
 800532c:	2300      	moveq	r3, #0
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b00      	cmp	r3, #0
 8005332:	f47f af6d 	bne.w	8005210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800534c:	e034      	b.n	80053b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 f886 	bl	8005460 <I2C_IsAcknowledgeFailed>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e034      	b.n	80053c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005364:	d028      	beq.n	80053b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005366:	f7fc fcb5 	bl	8001cd4 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	429a      	cmp	r2, r3
 8005374:	d302      	bcc.n	800537c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d11d      	bne.n	80053b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005386:	2b80      	cmp	r3, #128	@ 0x80
 8005388:	d016      	beq.n	80053b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2220      	movs	r2, #32
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a4:	f043 0220 	orr.w	r2, r3, #32
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e007      	b.n	80053c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053c2:	2b80      	cmp	r3, #128	@ 0x80
 80053c4:	d1c3      	bne.n	800534e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053dc:	e034      	b.n	8005448 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f000 f83e 	bl	8005460 <I2C_IsAcknowledgeFailed>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d001      	beq.n	80053ee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e034      	b.n	8005458 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f4:	d028      	beq.n	8005448 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053f6:	f7fc fc6d 	bl	8001cd4 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	429a      	cmp	r2, r3
 8005404:	d302      	bcc.n	800540c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d11d      	bne.n	8005448 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	f003 0304 	and.w	r3, r3, #4
 8005416:	2b04      	cmp	r3, #4
 8005418:	d016      	beq.n	8005448 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2220      	movs	r2, #32
 8005424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005434:	f043 0220 	orr.w	r2, r3, #32
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e007      	b.n	8005458 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	f003 0304 	and.w	r3, r3, #4
 8005452:	2b04      	cmp	r3, #4
 8005454:	d1c3      	bne.n	80053de <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3710      	adds	r7, #16
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005472:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005476:	d11b      	bne.n	80054b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005480:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2220      	movs	r2, #32
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800549c:	f043 0204 	orr.w	r2, r3, #4
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e000      	b.n	80054b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
	...

080054c0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b088      	sub	sp, #32
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e128      	b.n	8005724 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d109      	bne.n	80054f2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a90      	ldr	r2, [pc, #576]	@ (800572c <HAL_I2S_Init+0x26c>)
 80054ea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f7fb fe89 	bl	8001204 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2202      	movs	r2, #2
 80054f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	69db      	ldr	r3, [r3, #28]
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	6812      	ldr	r2, [r2, #0]
 8005504:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005508:	f023 030f 	bic.w	r3, r3, #15
 800550c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2202      	movs	r2, #2
 8005514:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	2b02      	cmp	r3, #2
 800551c:	d060      	beq.n	80055e0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d102      	bne.n	800552c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005526:	2310      	movs	r3, #16
 8005528:	617b      	str	r3, [r7, #20]
 800552a:	e001      	b.n	8005530 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800552c:	2320      	movs	r3, #32
 800552e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	2b20      	cmp	r3, #32
 8005536:	d802      	bhi.n	800553e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	005b      	lsls	r3, r3, #1
 800553c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800553e:	2001      	movs	r0, #1
 8005540:	f001 f9d8 	bl	80068f4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005544:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800554e:	d125      	bne.n	800559c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d010      	beq.n	800557a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005562:	4613      	mov	r3, r2
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	4413      	add	r3, r2
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	461a      	mov	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	fbb2 f3f3 	udiv	r3, r2, r3
 8005574:	3305      	adds	r3, #5
 8005576:	613b      	str	r3, [r7, #16]
 8005578:	e01f      	b.n	80055ba <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	00db      	lsls	r3, r3, #3
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	fbb2 f2f3 	udiv	r2, r2, r3
 8005584:	4613      	mov	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4413      	add	r3, r2
 800558a:	005b      	lsls	r3, r3, #1
 800558c:	461a      	mov	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	fbb2 f3f3 	udiv	r3, r2, r3
 8005596:	3305      	adds	r3, #5
 8005598:	613b      	str	r3, [r7, #16]
 800559a:	e00e      	b.n	80055ba <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80055a4:	4613      	mov	r3, r2
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4413      	add	r3, r2
 80055aa:	005b      	lsls	r3, r3, #1
 80055ac:	461a      	mov	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b6:	3305      	adds	r3, #5
 80055b8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	4a5c      	ldr	r2, [pc, #368]	@ (8005730 <HAL_I2S_Init+0x270>)
 80055be:	fba2 2303 	umull	r2, r3, r2, r3
 80055c2:	08db      	lsrs	r3, r3, #3
 80055c4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	085b      	lsrs	r3, r3, #1
 80055d6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	021b      	lsls	r3, r3, #8
 80055dc:	61bb      	str	r3, [r7, #24]
 80055de:	e003      	b.n	80055e8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80055e0:	2302      	movs	r3, #2
 80055e2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d902      	bls.n	80055f4 <HAL_I2S_Init+0x134>
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	2bff      	cmp	r3, #255	@ 0xff
 80055f2:	d907      	bls.n	8005604 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055f8:	f043 0210 	orr.w	r2, r3, #16
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e08f      	b.n	8005724 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	691a      	ldr	r2, [r3, #16]
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	ea42 0103 	orr.w	r1, r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	69fa      	ldr	r2, [r7, #28]
 8005614:	430a      	orrs	r2, r1
 8005616:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	69db      	ldr	r3, [r3, #28]
 800561e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005622:	f023 030f 	bic.w	r3, r3, #15
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	6851      	ldr	r1, [r2, #4]
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	6892      	ldr	r2, [r2, #8]
 800562e:	4311      	orrs	r1, r2
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	68d2      	ldr	r2, [r2, #12]
 8005634:	4311      	orrs	r1, r2
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	6992      	ldr	r2, [r2, #24]
 800563a:	430a      	orrs	r2, r1
 800563c:	431a      	orrs	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005646:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a1b      	ldr	r3, [r3, #32]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d161      	bne.n	8005714 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a38      	ldr	r2, [pc, #224]	@ (8005734 <HAL_I2S_Init+0x274>)
 8005654:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a37      	ldr	r2, [pc, #220]	@ (8005738 <HAL_I2S_Init+0x278>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d101      	bne.n	8005664 <HAL_I2S_Init+0x1a4>
 8005660:	4b36      	ldr	r3, [pc, #216]	@ (800573c <HAL_I2S_Init+0x27c>)
 8005662:	e001      	b.n	8005668 <HAL_I2S_Init+0x1a8>
 8005664:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005668:	69db      	ldr	r3, [r3, #28]
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	6812      	ldr	r2, [r2, #0]
 800566e:	4932      	ldr	r1, [pc, #200]	@ (8005738 <HAL_I2S_Init+0x278>)
 8005670:	428a      	cmp	r2, r1
 8005672:	d101      	bne.n	8005678 <HAL_I2S_Init+0x1b8>
 8005674:	4a31      	ldr	r2, [pc, #196]	@ (800573c <HAL_I2S_Init+0x27c>)
 8005676:	e001      	b.n	800567c <HAL_I2S_Init+0x1bc>
 8005678:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800567c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005680:	f023 030f 	bic.w	r3, r3, #15
 8005684:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a2b      	ldr	r2, [pc, #172]	@ (8005738 <HAL_I2S_Init+0x278>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d101      	bne.n	8005694 <HAL_I2S_Init+0x1d4>
 8005690:	4b2a      	ldr	r3, [pc, #168]	@ (800573c <HAL_I2S_Init+0x27c>)
 8005692:	e001      	b.n	8005698 <HAL_I2S_Init+0x1d8>
 8005694:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005698:	2202      	movs	r2, #2
 800569a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a25      	ldr	r2, [pc, #148]	@ (8005738 <HAL_I2S_Init+0x278>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d101      	bne.n	80056aa <HAL_I2S_Init+0x1ea>
 80056a6:	4b25      	ldr	r3, [pc, #148]	@ (800573c <HAL_I2S_Init+0x27c>)
 80056a8:	e001      	b.n	80056ae <HAL_I2S_Init+0x1ee>
 80056aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80056ae:	69db      	ldr	r3, [r3, #28]
 80056b0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056ba:	d003      	beq.n	80056c4 <HAL_I2S_Init+0x204>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d103      	bne.n	80056cc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80056c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80056c8:	613b      	str	r3, [r7, #16]
 80056ca:	e001      	b.n	80056d0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80056cc:	2300      	movs	r3, #0
 80056ce:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80056da:	4313      	orrs	r3, r2
 80056dc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80056e4:	4313      	orrs	r3, r2
 80056e6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80056ee:	4313      	orrs	r3, r2
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	897b      	ldrh	r3, [r7, #10]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80056fc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a0d      	ldr	r2, [pc, #52]	@ (8005738 <HAL_I2S_Init+0x278>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d101      	bne.n	800570c <HAL_I2S_Init+0x24c>
 8005708:	4b0c      	ldr	r3, [pc, #48]	@ (800573c <HAL_I2S_Init+0x27c>)
 800570a:	e001      	b.n	8005710 <HAL_I2S_Init+0x250>
 800570c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005710:	897a      	ldrh	r2, [r7, #10]
 8005712:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3720      	adds	r7, #32
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	08005837 	.word	0x08005837
 8005730:	cccccccd 	.word	0xcccccccd
 8005734:	0800594d 	.word	0x0800594d
 8005738:	40003800 	.word	0x40003800
 800573c:	40003400 	.word	0x40003400

08005740 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005788:	881a      	ldrh	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005794:	1c9a      	adds	r2, r3, #2
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800579e:	b29b      	uxth	r3, r3
 80057a0:	3b01      	subs	r3, #1
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10e      	bne.n	80057d0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80057c0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f7ff ffb8 	bl	8005740 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80057d0:	bf00      	nop
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68da      	ldr	r2, [r3, #12]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ea:	b292      	uxth	r2, r2
 80057ec:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f2:	1c9a      	adds	r2, r3, #2
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	3b01      	subs	r3, #1
 8005800:	b29a      	uxth	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800580a:	b29b      	uxth	r3, r3
 800580c:	2b00      	cmp	r3, #0
 800580e:	d10e      	bne.n	800582e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800581e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f7ff ff93 	bl	8005754 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800582e:	bf00      	nop
 8005830:	3708      	adds	r7, #8
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}

08005836 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005836:	b580      	push	{r7, lr}
 8005838:	b086      	sub	sp, #24
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b04      	cmp	r3, #4
 8005850:	d13a      	bne.n	80058c8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f003 0301 	and.w	r3, r3, #1
 8005858:	2b01      	cmp	r3, #1
 800585a:	d109      	bne.n	8005870 <I2S_IRQHandler+0x3a>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005866:	2b40      	cmp	r3, #64	@ 0x40
 8005868:	d102      	bne.n	8005870 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f7ff ffb4 	bl	80057d8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005876:	2b40      	cmp	r3, #64	@ 0x40
 8005878:	d126      	bne.n	80058c8 <I2S_IRQHandler+0x92>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f003 0320 	and.w	r3, r3, #32
 8005884:	2b20      	cmp	r3, #32
 8005886:	d11f      	bne.n	80058c8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685a      	ldr	r2, [r3, #4]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005896:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005898:	2300      	movs	r3, #0
 800589a:	613b      	str	r3, [r7, #16]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	613b      	str	r3, [r7, #16]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	613b      	str	r3, [r7, #16]
 80058ac:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ba:	f043 0202 	orr.w	r2, r3, #2
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7ff ff50 	bl	8005768 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	2b03      	cmp	r3, #3
 80058d2:	d136      	bne.n	8005942 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f003 0302 	and.w	r3, r3, #2
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d109      	bne.n	80058f2 <I2S_IRQHandler+0xbc>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058e8:	2b80      	cmp	r3, #128	@ 0x80
 80058ea:	d102      	bne.n	80058f2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f7ff ff45 	bl	800577c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f003 0308 	and.w	r3, r3, #8
 80058f8:	2b08      	cmp	r3, #8
 80058fa:	d122      	bne.n	8005942 <I2S_IRQHandler+0x10c>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f003 0320 	and.w	r3, r3, #32
 8005906:	2b20      	cmp	r3, #32
 8005908:	d11b      	bne.n	8005942 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	685a      	ldr	r2, [r3, #4]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005918:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800591a:	2300      	movs	r3, #0
 800591c:	60fb      	str	r3, [r7, #12]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	60fb      	str	r3, [r7, #12]
 8005926:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005934:	f043 0204 	orr.w	r2, r3, #4
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f7ff ff13 	bl	8005768 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005942:	bf00      	nop
 8005944:	3718      	adds	r7, #24
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
	...

0800594c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b088      	sub	sp, #32
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a92      	ldr	r2, [pc, #584]	@ (8005bac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d101      	bne.n	800596a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005966:	4b92      	ldr	r3, [pc, #584]	@ (8005bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005968:	e001      	b.n	800596e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800596a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a8b      	ldr	r2, [pc, #556]	@ (8005bac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d101      	bne.n	8005988 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005984:	4b8a      	ldr	r3, [pc, #552]	@ (8005bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005986:	e001      	b.n	800598c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005988:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005998:	d004      	beq.n	80059a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f040 8099 	bne.w	8005ad6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d107      	bne.n	80059be <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d002      	beq.n	80059be <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 f925 	bl	8005c08 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d107      	bne.n	80059d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d002      	beq.n	80059d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f9c8 	bl	8005d68 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059de:	2b40      	cmp	r3, #64	@ 0x40
 80059e0:	d13a      	bne.n	8005a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	f003 0320 	and.w	r3, r3, #32
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d035      	beq.n	8005a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a6e      	ldr	r2, [pc, #440]	@ (8005bac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d101      	bne.n	80059fa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80059f6:	4b6e      	ldr	r3, [pc, #440]	@ (8005bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80059f8:	e001      	b.n	80059fe <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80059fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059fe:	685a      	ldr	r2, [r3, #4]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4969      	ldr	r1, [pc, #420]	@ (8005bac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a06:	428b      	cmp	r3, r1
 8005a08:	d101      	bne.n	8005a0e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005a0a:	4b69      	ldr	r3, [pc, #420]	@ (8005bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a0c:	e001      	b.n	8005a12 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005a0e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a12:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005a16:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005a26:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005a28:	2300      	movs	r3, #0
 8005a2a:	60fb      	str	r3, [r7, #12]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	60fb      	str	r3, [r7, #12]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	60fb      	str	r3, [r7, #12]
 8005a3c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a4a:	f043 0202 	orr.w	r2, r3, #2
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7ff fe88 	bl	8005768 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	f003 0308 	and.w	r3, r3, #8
 8005a5e:	2b08      	cmp	r3, #8
 8005a60:	f040 80c3 	bne.w	8005bea <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	f003 0320 	and.w	r3, r3, #32
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f000 80bd 	beq.w	8005bea <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005a7e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a49      	ldr	r2, [pc, #292]	@ (8005bac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d101      	bne.n	8005a8e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005a8a:	4b49      	ldr	r3, [pc, #292]	@ (8005bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a8c:	e001      	b.n	8005a92 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005a8e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a92:	685a      	ldr	r2, [r3, #4]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4944      	ldr	r1, [pc, #272]	@ (8005bac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a9a:	428b      	cmp	r3, r1
 8005a9c:	d101      	bne.n	8005aa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005a9e:	4b44      	ldr	r3, [pc, #272]	@ (8005bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005aa0:	e001      	b.n	8005aa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005aa2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005aa6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005aaa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005aac:	2300      	movs	r3, #0
 8005aae:	60bb      	str	r3, [r7, #8]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	60bb      	str	r3, [r7, #8]
 8005ab8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ac6:	f043 0204 	orr.w	r2, r3, #4
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f7ff fe4a 	bl	8005768 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005ad4:	e089      	b.n	8005bea <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	f003 0302 	and.w	r3, r3, #2
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d107      	bne.n	8005af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d002      	beq.n	8005af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f8be 	bl	8005c6c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	f003 0301 	and.w	r3, r3, #1
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d107      	bne.n	8005b0a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d002      	beq.n	8005b0a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 f8fd 	bl	8005d04 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b10:	2b40      	cmp	r3, #64	@ 0x40
 8005b12:	d12f      	bne.n	8005b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	f003 0320 	and.w	r3, r3, #32
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d02a      	beq.n	8005b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685a      	ldr	r2, [r3, #4]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005b2c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a1e      	ldr	r2, [pc, #120]	@ (8005bac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d101      	bne.n	8005b3c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005b38:	4b1d      	ldr	r3, [pc, #116]	@ (8005bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b3a:	e001      	b.n	8005b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005b3c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4919      	ldr	r1, [pc, #100]	@ (8005bac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b48:	428b      	cmp	r3, r1
 8005b4a:	d101      	bne.n	8005b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005b4c:	4b18      	ldr	r3, [pc, #96]	@ (8005bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b4e:	e001      	b.n	8005b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005b50:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b54:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005b58:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b66:	f043 0202 	orr.w	r2, r3, #2
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f7ff fdfa 	bl	8005768 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	f003 0308 	and.w	r3, r3, #8
 8005b7a:	2b08      	cmp	r3, #8
 8005b7c:	d136      	bne.n	8005bec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	f003 0320 	and.w	r3, r3, #32
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d031      	beq.n	8005bec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a07      	ldr	r2, [pc, #28]	@ (8005bac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d101      	bne.n	8005b96 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005b92:	4b07      	ldr	r3, [pc, #28]	@ (8005bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b94:	e001      	b.n	8005b9a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005b96:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b9a:	685a      	ldr	r2, [r3, #4]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4902      	ldr	r1, [pc, #8]	@ (8005bac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ba2:	428b      	cmp	r3, r1
 8005ba4:	d106      	bne.n	8005bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005ba6:	4b02      	ldr	r3, [pc, #8]	@ (8005bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ba8:	e006      	b.n	8005bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005baa:	bf00      	nop
 8005bac:	40003800 	.word	0x40003800
 8005bb0:	40003400 	.word	0x40003400
 8005bb4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005bb8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005bbc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	685a      	ldr	r2, [r3, #4]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005bcc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bda:	f043 0204 	orr.w	r2, r3, #4
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f7ff fdc0 	bl	8005768 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005be8:	e000      	b.n	8005bec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005bea:	bf00      	nop
}
 8005bec:	bf00      	nop
 8005bee:	3720      	adds	r7, #32
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c14:	1c99      	adds	r1, r3, #2
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	6251      	str	r1, [r2, #36]	@ 0x24
 8005c1a:	881a      	ldrh	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d113      	bne.n	8005c62 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	685a      	ldr	r2, [r3, #4]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005c48:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d106      	bne.n	8005c62 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7ff ffc9 	bl	8005bf4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005c62:	bf00      	nop
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
	...

08005c6c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c78:	1c99      	adds	r1, r3, #2
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	6251      	str	r1, [r2, #36]	@ 0x24
 8005c7e:	8819      	ldrh	r1, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a1d      	ldr	r2, [pc, #116]	@ (8005cfc <I2SEx_TxISR_I2SExt+0x90>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d101      	bne.n	8005c8e <I2SEx_TxISR_I2SExt+0x22>
 8005c8a:	4b1d      	ldr	r3, [pc, #116]	@ (8005d00 <I2SEx_TxISR_I2SExt+0x94>)
 8005c8c:	e001      	b.n	8005c92 <I2SEx_TxISR_I2SExt+0x26>
 8005c8e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c92:	460a      	mov	r2, r1
 8005c94:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d121      	bne.n	8005cf2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a12      	ldr	r2, [pc, #72]	@ (8005cfc <I2SEx_TxISR_I2SExt+0x90>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d101      	bne.n	8005cbc <I2SEx_TxISR_I2SExt+0x50>
 8005cb8:	4b11      	ldr	r3, [pc, #68]	@ (8005d00 <I2SEx_TxISR_I2SExt+0x94>)
 8005cba:	e001      	b.n	8005cc0 <I2SEx_TxISR_I2SExt+0x54>
 8005cbc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005cc0:	685a      	ldr	r2, [r3, #4]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	490d      	ldr	r1, [pc, #52]	@ (8005cfc <I2SEx_TxISR_I2SExt+0x90>)
 8005cc8:	428b      	cmp	r3, r1
 8005cca:	d101      	bne.n	8005cd0 <I2SEx_TxISR_I2SExt+0x64>
 8005ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8005d00 <I2SEx_TxISR_I2SExt+0x94>)
 8005cce:	e001      	b.n	8005cd4 <I2SEx_TxISR_I2SExt+0x68>
 8005cd0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005cd4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005cd8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d106      	bne.n	8005cf2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f7ff ff81 	bl	8005bf4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005cf2:	bf00      	nop
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	40003800 	.word	0x40003800
 8005d00:	40003400 	.word	0x40003400

08005d04 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68d8      	ldr	r0, [r3, #12]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d16:	1c99      	adds	r1, r3, #2
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005d1c:	b282      	uxth	r2, r0
 8005d1e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	3b01      	subs	r3, #1
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d113      	bne.n	8005d60 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005d46:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d106      	bne.n	8005d60 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7ff ff4a 	bl	8005bf4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005d60:	bf00      	nop
 8005d62:	3708      	adds	r7, #8
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a20      	ldr	r2, [pc, #128]	@ (8005df8 <I2SEx_RxISR_I2SExt+0x90>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d101      	bne.n	8005d7e <I2SEx_RxISR_I2SExt+0x16>
 8005d7a:	4b20      	ldr	r3, [pc, #128]	@ (8005dfc <I2SEx_RxISR_I2SExt+0x94>)
 8005d7c:	e001      	b.n	8005d82 <I2SEx_RxISR_I2SExt+0x1a>
 8005d7e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d82:	68d8      	ldr	r0, [r3, #12]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d88:	1c99      	adds	r1, r3, #2
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005d8e:	b282      	uxth	r2, r0
 8005d90:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d121      	bne.n	8005dee <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a12      	ldr	r2, [pc, #72]	@ (8005df8 <I2SEx_RxISR_I2SExt+0x90>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d101      	bne.n	8005db8 <I2SEx_RxISR_I2SExt+0x50>
 8005db4:	4b11      	ldr	r3, [pc, #68]	@ (8005dfc <I2SEx_RxISR_I2SExt+0x94>)
 8005db6:	e001      	b.n	8005dbc <I2SEx_RxISR_I2SExt+0x54>
 8005db8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005dbc:	685a      	ldr	r2, [r3, #4]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	490d      	ldr	r1, [pc, #52]	@ (8005df8 <I2SEx_RxISR_I2SExt+0x90>)
 8005dc4:	428b      	cmp	r3, r1
 8005dc6:	d101      	bne.n	8005dcc <I2SEx_RxISR_I2SExt+0x64>
 8005dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8005dfc <I2SEx_RxISR_I2SExt+0x94>)
 8005dca:	e001      	b.n	8005dd0 <I2SEx_RxISR_I2SExt+0x68>
 8005dcc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005dd0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005dd4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d106      	bne.n	8005dee <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f7ff ff03 	bl	8005bf4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005dee:	bf00      	nop
 8005df0:	3708      	adds	r7, #8
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	40003800 	.word	0x40003800
 8005dfc:	40003400 	.word	0x40003400

08005e00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e267      	b.n	80062e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0301 	and.w	r3, r3, #1
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d075      	beq.n	8005f0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005e1e:	4b88      	ldr	r3, [pc, #544]	@ (8006040 <HAL_RCC_OscConfig+0x240>)
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f003 030c 	and.w	r3, r3, #12
 8005e26:	2b04      	cmp	r3, #4
 8005e28:	d00c      	beq.n	8005e44 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e2a:	4b85      	ldr	r3, [pc, #532]	@ (8006040 <HAL_RCC_OscConfig+0x240>)
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005e32:	2b08      	cmp	r3, #8
 8005e34:	d112      	bne.n	8005e5c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e36:	4b82      	ldr	r3, [pc, #520]	@ (8006040 <HAL_RCC_OscConfig+0x240>)
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e42:	d10b      	bne.n	8005e5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e44:	4b7e      	ldr	r3, [pc, #504]	@ (8006040 <HAL_RCC_OscConfig+0x240>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d05b      	beq.n	8005f08 <HAL_RCC_OscConfig+0x108>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d157      	bne.n	8005f08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e242      	b.n	80062e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e64:	d106      	bne.n	8005e74 <HAL_RCC_OscConfig+0x74>
 8005e66:	4b76      	ldr	r3, [pc, #472]	@ (8006040 <HAL_RCC_OscConfig+0x240>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a75      	ldr	r2, [pc, #468]	@ (8006040 <HAL_RCC_OscConfig+0x240>)
 8005e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e70:	6013      	str	r3, [r2, #0]
 8005e72:	e01d      	b.n	8005eb0 <HAL_RCC_OscConfig+0xb0>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e7c:	d10c      	bne.n	8005e98 <HAL_RCC_OscConfig+0x98>
 8005e7e:	4b70      	ldr	r3, [pc, #448]	@ (8006040 <HAL_RCC_OscConfig+0x240>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a6f      	ldr	r2, [pc, #444]	@ (8006040 <HAL_RCC_OscConfig+0x240>)
 8005e84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e88:	6013      	str	r3, [r2, #0]
 8005e8a:	4b6d      	ldr	r3, [pc, #436]	@ (8006040 <HAL_RCC_OscConfig+0x240>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a6c      	ldr	r2, [pc, #432]	@ (8006040 <HAL_RCC_OscConfig+0x240>)
 8005e90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e94:	6013      	str	r3, [r2, #0]
 8005e96:	e00b      	b.n	8005eb0 <HAL_RCC_OscConfig+0xb0>
 8005e98:	4b69      	ldr	r3, [pc, #420]	@ (8006040 <HAL_RCC_OscConfig+0x240>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a68      	ldr	r2, [pc, #416]	@ (8006040 <HAL_RCC_OscConfig+0x240>)
 8005e9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ea2:	6013      	str	r3, [r2, #0]
 8005ea4:	4b66      	ldr	r3, [pc, #408]	@ (8006040 <HAL_RCC_OscConfig+0x240>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a65      	ldr	r2, [pc, #404]	@ (8006040 <HAL_RCC_OscConfig+0x240>)
 8005eaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005eae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d013      	beq.n	8005ee0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eb8:	f7fb ff0c 	bl	8001cd4 <HAL_GetTick>
 8005ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ebe:	e008      	b.n	8005ed2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ec0:	f7fb ff08 	bl	8001cd4 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b64      	cmp	r3, #100	@ 0x64
 8005ecc:	d901      	bls.n	8005ed2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e207      	b.n	80062e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ed2:	4b5b      	ldr	r3, [pc, #364]	@ (8006040 <HAL_RCC_OscConfig+0x240>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d0f0      	beq.n	8005ec0 <HAL_RCC_OscConfig+0xc0>
 8005ede:	e014      	b.n	8005f0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ee0:	f7fb fef8 	bl	8001cd4 <HAL_GetTick>
 8005ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ee6:	e008      	b.n	8005efa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ee8:	f7fb fef4 	bl	8001cd4 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b64      	cmp	r3, #100	@ 0x64
 8005ef4:	d901      	bls.n	8005efa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e1f3      	b.n	80062e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005efa:	4b51      	ldr	r3, [pc, #324]	@ (8006040 <HAL_RCC_OscConfig+0x240>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1f0      	bne.n	8005ee8 <HAL_RCC_OscConfig+0xe8>
 8005f06:	e000      	b.n	8005f0a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0302 	and.w	r3, r3, #2
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d063      	beq.n	8005fde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005f16:	4b4a      	ldr	r3, [pc, #296]	@ (8006040 <HAL_RCC_OscConfig+0x240>)
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f003 030c 	and.w	r3, r3, #12
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00b      	beq.n	8005f3a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f22:	4b47      	ldr	r3, [pc, #284]	@ (8006040 <HAL_RCC_OscConfig+0x240>)
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005f2a:	2b08      	cmp	r3, #8
 8005f2c:	d11c      	bne.n	8005f68 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f2e:	4b44      	ldr	r3, [pc, #272]	@ (8006040 <HAL_RCC_OscConfig+0x240>)
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d116      	bne.n	8005f68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f3a:	4b41      	ldr	r3, [pc, #260]	@ (8006040 <HAL_RCC_OscConfig+0x240>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d005      	beq.n	8005f52 <HAL_RCC_OscConfig+0x152>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d001      	beq.n	8005f52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e1c7      	b.n	80062e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f52:	4b3b      	ldr	r3, [pc, #236]	@ (8006040 <HAL_RCC_OscConfig+0x240>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	00db      	lsls	r3, r3, #3
 8005f60:	4937      	ldr	r1, [pc, #220]	@ (8006040 <HAL_RCC_OscConfig+0x240>)
 8005f62:	4313      	orrs	r3, r2
 8005f64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f66:	e03a      	b.n	8005fde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d020      	beq.n	8005fb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f70:	4b34      	ldr	r3, [pc, #208]	@ (8006044 <HAL_RCC_OscConfig+0x244>)
 8005f72:	2201      	movs	r2, #1
 8005f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f76:	f7fb fead 	bl	8001cd4 <HAL_GetTick>
 8005f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f7c:	e008      	b.n	8005f90 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f7e:	f7fb fea9 	bl	8001cd4 <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d901      	bls.n	8005f90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e1a8      	b.n	80062e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f90:	4b2b      	ldr	r3, [pc, #172]	@ (8006040 <HAL_RCC_OscConfig+0x240>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0302 	and.w	r3, r3, #2
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d0f0      	beq.n	8005f7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f9c:	4b28      	ldr	r3, [pc, #160]	@ (8006040 <HAL_RCC_OscConfig+0x240>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	00db      	lsls	r3, r3, #3
 8005faa:	4925      	ldr	r1, [pc, #148]	@ (8006040 <HAL_RCC_OscConfig+0x240>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	600b      	str	r3, [r1, #0]
 8005fb0:	e015      	b.n	8005fde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fb2:	4b24      	ldr	r3, [pc, #144]	@ (8006044 <HAL_RCC_OscConfig+0x244>)
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb8:	f7fb fe8c 	bl	8001cd4 <HAL_GetTick>
 8005fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fbe:	e008      	b.n	8005fd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fc0:	f7fb fe88 	bl	8001cd4 <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d901      	bls.n	8005fd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e187      	b.n	80062e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8006040 <HAL_RCC_OscConfig+0x240>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0302 	and.w	r3, r3, #2
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1f0      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0308 	and.w	r3, r3, #8
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d036      	beq.n	8006058 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d016      	beq.n	8006020 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ff2:	4b15      	ldr	r3, [pc, #84]	@ (8006048 <HAL_RCC_OscConfig+0x248>)
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ff8:	f7fb fe6c 	bl	8001cd4 <HAL_GetTick>
 8005ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ffe:	e008      	b.n	8006012 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006000:	f7fb fe68 	bl	8001cd4 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	2b02      	cmp	r3, #2
 800600c:	d901      	bls.n	8006012 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e167      	b.n	80062e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006012:	4b0b      	ldr	r3, [pc, #44]	@ (8006040 <HAL_RCC_OscConfig+0x240>)
 8006014:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0f0      	beq.n	8006000 <HAL_RCC_OscConfig+0x200>
 800601e:	e01b      	b.n	8006058 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006020:	4b09      	ldr	r3, [pc, #36]	@ (8006048 <HAL_RCC_OscConfig+0x248>)
 8006022:	2200      	movs	r2, #0
 8006024:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006026:	f7fb fe55 	bl	8001cd4 <HAL_GetTick>
 800602a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800602c:	e00e      	b.n	800604c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800602e:	f7fb fe51 	bl	8001cd4 <HAL_GetTick>
 8006032:	4602      	mov	r2, r0
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	2b02      	cmp	r3, #2
 800603a:	d907      	bls.n	800604c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e150      	b.n	80062e2 <HAL_RCC_OscConfig+0x4e2>
 8006040:	40023800 	.word	0x40023800
 8006044:	42470000 	.word	0x42470000
 8006048:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800604c:	4b88      	ldr	r3, [pc, #544]	@ (8006270 <HAL_RCC_OscConfig+0x470>)
 800604e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006050:	f003 0302 	and.w	r3, r3, #2
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1ea      	bne.n	800602e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0304 	and.w	r3, r3, #4
 8006060:	2b00      	cmp	r3, #0
 8006062:	f000 8097 	beq.w	8006194 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006066:	2300      	movs	r3, #0
 8006068:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800606a:	4b81      	ldr	r3, [pc, #516]	@ (8006270 <HAL_RCC_OscConfig+0x470>)
 800606c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800606e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10f      	bne.n	8006096 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006076:	2300      	movs	r3, #0
 8006078:	60bb      	str	r3, [r7, #8]
 800607a:	4b7d      	ldr	r3, [pc, #500]	@ (8006270 <HAL_RCC_OscConfig+0x470>)
 800607c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800607e:	4a7c      	ldr	r2, [pc, #496]	@ (8006270 <HAL_RCC_OscConfig+0x470>)
 8006080:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006084:	6413      	str	r3, [r2, #64]	@ 0x40
 8006086:	4b7a      	ldr	r3, [pc, #488]	@ (8006270 <HAL_RCC_OscConfig+0x470>)
 8006088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800608a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800608e:	60bb      	str	r3, [r7, #8]
 8006090:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006092:	2301      	movs	r3, #1
 8006094:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006096:	4b77      	ldr	r3, [pc, #476]	@ (8006274 <HAL_RCC_OscConfig+0x474>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d118      	bne.n	80060d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060a2:	4b74      	ldr	r3, [pc, #464]	@ (8006274 <HAL_RCC_OscConfig+0x474>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a73      	ldr	r2, [pc, #460]	@ (8006274 <HAL_RCC_OscConfig+0x474>)
 80060a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060ae:	f7fb fe11 	bl	8001cd4 <HAL_GetTick>
 80060b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060b4:	e008      	b.n	80060c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060b6:	f7fb fe0d 	bl	8001cd4 <HAL_GetTick>
 80060ba:	4602      	mov	r2, r0
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d901      	bls.n	80060c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e10c      	b.n	80062e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060c8:	4b6a      	ldr	r3, [pc, #424]	@ (8006274 <HAL_RCC_OscConfig+0x474>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d0f0      	beq.n	80060b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d106      	bne.n	80060ea <HAL_RCC_OscConfig+0x2ea>
 80060dc:	4b64      	ldr	r3, [pc, #400]	@ (8006270 <HAL_RCC_OscConfig+0x470>)
 80060de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060e0:	4a63      	ldr	r2, [pc, #396]	@ (8006270 <HAL_RCC_OscConfig+0x470>)
 80060e2:	f043 0301 	orr.w	r3, r3, #1
 80060e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80060e8:	e01c      	b.n	8006124 <HAL_RCC_OscConfig+0x324>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	2b05      	cmp	r3, #5
 80060f0:	d10c      	bne.n	800610c <HAL_RCC_OscConfig+0x30c>
 80060f2:	4b5f      	ldr	r3, [pc, #380]	@ (8006270 <HAL_RCC_OscConfig+0x470>)
 80060f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060f6:	4a5e      	ldr	r2, [pc, #376]	@ (8006270 <HAL_RCC_OscConfig+0x470>)
 80060f8:	f043 0304 	orr.w	r3, r3, #4
 80060fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80060fe:	4b5c      	ldr	r3, [pc, #368]	@ (8006270 <HAL_RCC_OscConfig+0x470>)
 8006100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006102:	4a5b      	ldr	r2, [pc, #364]	@ (8006270 <HAL_RCC_OscConfig+0x470>)
 8006104:	f043 0301 	orr.w	r3, r3, #1
 8006108:	6713      	str	r3, [r2, #112]	@ 0x70
 800610a:	e00b      	b.n	8006124 <HAL_RCC_OscConfig+0x324>
 800610c:	4b58      	ldr	r3, [pc, #352]	@ (8006270 <HAL_RCC_OscConfig+0x470>)
 800610e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006110:	4a57      	ldr	r2, [pc, #348]	@ (8006270 <HAL_RCC_OscConfig+0x470>)
 8006112:	f023 0301 	bic.w	r3, r3, #1
 8006116:	6713      	str	r3, [r2, #112]	@ 0x70
 8006118:	4b55      	ldr	r3, [pc, #340]	@ (8006270 <HAL_RCC_OscConfig+0x470>)
 800611a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800611c:	4a54      	ldr	r2, [pc, #336]	@ (8006270 <HAL_RCC_OscConfig+0x470>)
 800611e:	f023 0304 	bic.w	r3, r3, #4
 8006122:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d015      	beq.n	8006158 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800612c:	f7fb fdd2 	bl	8001cd4 <HAL_GetTick>
 8006130:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006132:	e00a      	b.n	800614a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006134:	f7fb fdce 	bl	8001cd4 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006142:	4293      	cmp	r3, r2
 8006144:	d901      	bls.n	800614a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e0cb      	b.n	80062e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800614a:	4b49      	ldr	r3, [pc, #292]	@ (8006270 <HAL_RCC_OscConfig+0x470>)
 800614c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800614e:	f003 0302 	and.w	r3, r3, #2
 8006152:	2b00      	cmp	r3, #0
 8006154:	d0ee      	beq.n	8006134 <HAL_RCC_OscConfig+0x334>
 8006156:	e014      	b.n	8006182 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006158:	f7fb fdbc 	bl	8001cd4 <HAL_GetTick>
 800615c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800615e:	e00a      	b.n	8006176 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006160:	f7fb fdb8 	bl	8001cd4 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800616e:	4293      	cmp	r3, r2
 8006170:	d901      	bls.n	8006176 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e0b5      	b.n	80062e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006176:	4b3e      	ldr	r3, [pc, #248]	@ (8006270 <HAL_RCC_OscConfig+0x470>)
 8006178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800617a:	f003 0302 	and.w	r3, r3, #2
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1ee      	bne.n	8006160 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006182:	7dfb      	ldrb	r3, [r7, #23]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d105      	bne.n	8006194 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006188:	4b39      	ldr	r3, [pc, #228]	@ (8006270 <HAL_RCC_OscConfig+0x470>)
 800618a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800618c:	4a38      	ldr	r2, [pc, #224]	@ (8006270 <HAL_RCC_OscConfig+0x470>)
 800618e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006192:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	699b      	ldr	r3, [r3, #24]
 8006198:	2b00      	cmp	r3, #0
 800619a:	f000 80a1 	beq.w	80062e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800619e:	4b34      	ldr	r3, [pc, #208]	@ (8006270 <HAL_RCC_OscConfig+0x470>)
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f003 030c 	and.w	r3, r3, #12
 80061a6:	2b08      	cmp	r3, #8
 80061a8:	d05c      	beq.n	8006264 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d141      	bne.n	8006236 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061b2:	4b31      	ldr	r3, [pc, #196]	@ (8006278 <HAL_RCC_OscConfig+0x478>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061b8:	f7fb fd8c 	bl	8001cd4 <HAL_GetTick>
 80061bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061be:	e008      	b.n	80061d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061c0:	f7fb fd88 	bl	8001cd4 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d901      	bls.n	80061d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e087      	b.n	80062e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061d2:	4b27      	ldr	r3, [pc, #156]	@ (8006270 <HAL_RCC_OscConfig+0x470>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1f0      	bne.n	80061c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	69da      	ldr	r2, [r3, #28]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	431a      	orrs	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ec:	019b      	lsls	r3, r3, #6
 80061ee:	431a      	orrs	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061f4:	085b      	lsrs	r3, r3, #1
 80061f6:	3b01      	subs	r3, #1
 80061f8:	041b      	lsls	r3, r3, #16
 80061fa:	431a      	orrs	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006200:	061b      	lsls	r3, r3, #24
 8006202:	491b      	ldr	r1, [pc, #108]	@ (8006270 <HAL_RCC_OscConfig+0x470>)
 8006204:	4313      	orrs	r3, r2
 8006206:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006208:	4b1b      	ldr	r3, [pc, #108]	@ (8006278 <HAL_RCC_OscConfig+0x478>)
 800620a:	2201      	movs	r2, #1
 800620c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800620e:	f7fb fd61 	bl	8001cd4 <HAL_GetTick>
 8006212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006214:	e008      	b.n	8006228 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006216:	f7fb fd5d 	bl	8001cd4 <HAL_GetTick>
 800621a:	4602      	mov	r2, r0
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	2b02      	cmp	r3, #2
 8006222:	d901      	bls.n	8006228 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	e05c      	b.n	80062e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006228:	4b11      	ldr	r3, [pc, #68]	@ (8006270 <HAL_RCC_OscConfig+0x470>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d0f0      	beq.n	8006216 <HAL_RCC_OscConfig+0x416>
 8006234:	e054      	b.n	80062e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006236:	4b10      	ldr	r3, [pc, #64]	@ (8006278 <HAL_RCC_OscConfig+0x478>)
 8006238:	2200      	movs	r2, #0
 800623a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800623c:	f7fb fd4a 	bl	8001cd4 <HAL_GetTick>
 8006240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006242:	e008      	b.n	8006256 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006244:	f7fb fd46 	bl	8001cd4 <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	2b02      	cmp	r3, #2
 8006250:	d901      	bls.n	8006256 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e045      	b.n	80062e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006256:	4b06      	ldr	r3, [pc, #24]	@ (8006270 <HAL_RCC_OscConfig+0x470>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1f0      	bne.n	8006244 <HAL_RCC_OscConfig+0x444>
 8006262:	e03d      	b.n	80062e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	699b      	ldr	r3, [r3, #24]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d107      	bne.n	800627c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e038      	b.n	80062e2 <HAL_RCC_OscConfig+0x4e2>
 8006270:	40023800 	.word	0x40023800
 8006274:	40007000 	.word	0x40007000
 8006278:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800627c:	4b1b      	ldr	r3, [pc, #108]	@ (80062ec <HAL_RCC_OscConfig+0x4ec>)
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d028      	beq.n	80062dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006294:	429a      	cmp	r2, r3
 8006296:	d121      	bne.n	80062dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d11a      	bne.n	80062dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80062ac:	4013      	ands	r3, r2
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80062b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d111      	bne.n	80062dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c2:	085b      	lsrs	r3, r3, #1
 80062c4:	3b01      	subs	r3, #1
 80062c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d107      	bne.n	80062dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062d8:	429a      	cmp	r2, r3
 80062da:	d001      	beq.n	80062e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e000      	b.n	80062e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3718      	adds	r7, #24
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	40023800 	.word	0x40023800

080062f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d101      	bne.n	8006304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e0cc      	b.n	800649e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006304:	4b68      	ldr	r3, [pc, #416]	@ (80064a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0307 	and.w	r3, r3, #7
 800630c:	683a      	ldr	r2, [r7, #0]
 800630e:	429a      	cmp	r2, r3
 8006310:	d90c      	bls.n	800632c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006312:	4b65      	ldr	r3, [pc, #404]	@ (80064a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	b2d2      	uxtb	r2, r2
 8006318:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800631a:	4b63      	ldr	r3, [pc, #396]	@ (80064a8 <HAL_RCC_ClockConfig+0x1b8>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 0307 	and.w	r3, r3, #7
 8006322:	683a      	ldr	r2, [r7, #0]
 8006324:	429a      	cmp	r2, r3
 8006326:	d001      	beq.n	800632c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e0b8      	b.n	800649e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0302 	and.w	r3, r3, #2
 8006334:	2b00      	cmp	r3, #0
 8006336:	d020      	beq.n	800637a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0304 	and.w	r3, r3, #4
 8006340:	2b00      	cmp	r3, #0
 8006342:	d005      	beq.n	8006350 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006344:	4b59      	ldr	r3, [pc, #356]	@ (80064ac <HAL_RCC_ClockConfig+0x1bc>)
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	4a58      	ldr	r2, [pc, #352]	@ (80064ac <HAL_RCC_ClockConfig+0x1bc>)
 800634a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800634e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0308 	and.w	r3, r3, #8
 8006358:	2b00      	cmp	r3, #0
 800635a:	d005      	beq.n	8006368 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800635c:	4b53      	ldr	r3, [pc, #332]	@ (80064ac <HAL_RCC_ClockConfig+0x1bc>)
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	4a52      	ldr	r2, [pc, #328]	@ (80064ac <HAL_RCC_ClockConfig+0x1bc>)
 8006362:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006366:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006368:	4b50      	ldr	r3, [pc, #320]	@ (80064ac <HAL_RCC_ClockConfig+0x1bc>)
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	494d      	ldr	r1, [pc, #308]	@ (80064ac <HAL_RCC_ClockConfig+0x1bc>)
 8006376:	4313      	orrs	r3, r2
 8006378:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0301 	and.w	r3, r3, #1
 8006382:	2b00      	cmp	r3, #0
 8006384:	d044      	beq.n	8006410 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	2b01      	cmp	r3, #1
 800638c:	d107      	bne.n	800639e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800638e:	4b47      	ldr	r3, [pc, #284]	@ (80064ac <HAL_RCC_ClockConfig+0x1bc>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d119      	bne.n	80063ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e07f      	b.n	800649e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d003      	beq.n	80063ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063aa:	2b03      	cmp	r3, #3
 80063ac:	d107      	bne.n	80063be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063ae:	4b3f      	ldr	r3, [pc, #252]	@ (80064ac <HAL_RCC_ClockConfig+0x1bc>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d109      	bne.n	80063ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e06f      	b.n	800649e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063be:	4b3b      	ldr	r3, [pc, #236]	@ (80064ac <HAL_RCC_ClockConfig+0x1bc>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0302 	and.w	r3, r3, #2
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d101      	bne.n	80063ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e067      	b.n	800649e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063ce:	4b37      	ldr	r3, [pc, #220]	@ (80064ac <HAL_RCC_ClockConfig+0x1bc>)
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f023 0203 	bic.w	r2, r3, #3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	4934      	ldr	r1, [pc, #208]	@ (80064ac <HAL_RCC_ClockConfig+0x1bc>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063e0:	f7fb fc78 	bl	8001cd4 <HAL_GetTick>
 80063e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063e6:	e00a      	b.n	80063fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063e8:	f7fb fc74 	bl	8001cd4 <HAL_GetTick>
 80063ec:	4602      	mov	r2, r0
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d901      	bls.n	80063fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e04f      	b.n	800649e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063fe:	4b2b      	ldr	r3, [pc, #172]	@ (80064ac <HAL_RCC_ClockConfig+0x1bc>)
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f003 020c 	and.w	r2, r3, #12
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	429a      	cmp	r2, r3
 800640e:	d1eb      	bne.n	80063e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006410:	4b25      	ldr	r3, [pc, #148]	@ (80064a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0307 	and.w	r3, r3, #7
 8006418:	683a      	ldr	r2, [r7, #0]
 800641a:	429a      	cmp	r2, r3
 800641c:	d20c      	bcs.n	8006438 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800641e:	4b22      	ldr	r3, [pc, #136]	@ (80064a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006420:	683a      	ldr	r2, [r7, #0]
 8006422:	b2d2      	uxtb	r2, r2
 8006424:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006426:	4b20      	ldr	r3, [pc, #128]	@ (80064a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0307 	and.w	r3, r3, #7
 800642e:	683a      	ldr	r2, [r7, #0]
 8006430:	429a      	cmp	r2, r3
 8006432:	d001      	beq.n	8006438 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e032      	b.n	800649e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 0304 	and.w	r3, r3, #4
 8006440:	2b00      	cmp	r3, #0
 8006442:	d008      	beq.n	8006456 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006444:	4b19      	ldr	r3, [pc, #100]	@ (80064ac <HAL_RCC_ClockConfig+0x1bc>)
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	4916      	ldr	r1, [pc, #88]	@ (80064ac <HAL_RCC_ClockConfig+0x1bc>)
 8006452:	4313      	orrs	r3, r2
 8006454:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0308 	and.w	r3, r3, #8
 800645e:	2b00      	cmp	r3, #0
 8006460:	d009      	beq.n	8006476 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006462:	4b12      	ldr	r3, [pc, #72]	@ (80064ac <HAL_RCC_ClockConfig+0x1bc>)
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	00db      	lsls	r3, r3, #3
 8006470:	490e      	ldr	r1, [pc, #56]	@ (80064ac <HAL_RCC_ClockConfig+0x1bc>)
 8006472:	4313      	orrs	r3, r2
 8006474:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006476:	f000 f821 	bl	80064bc <HAL_RCC_GetSysClockFreq>
 800647a:	4602      	mov	r2, r0
 800647c:	4b0b      	ldr	r3, [pc, #44]	@ (80064ac <HAL_RCC_ClockConfig+0x1bc>)
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	091b      	lsrs	r3, r3, #4
 8006482:	f003 030f 	and.w	r3, r3, #15
 8006486:	490a      	ldr	r1, [pc, #40]	@ (80064b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006488:	5ccb      	ldrb	r3, [r1, r3]
 800648a:	fa22 f303 	lsr.w	r3, r2, r3
 800648e:	4a09      	ldr	r2, [pc, #36]	@ (80064b4 <HAL_RCC_ClockConfig+0x1c4>)
 8006490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006492:	4b09      	ldr	r3, [pc, #36]	@ (80064b8 <HAL_RCC_ClockConfig+0x1c8>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4618      	mov	r0, r3
 8006498:	f7fb fbd8 	bl	8001c4c <HAL_InitTick>

  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	40023c00 	.word	0x40023c00
 80064ac:	40023800 	.word	0x40023800
 80064b0:	0800d150 	.word	0x0800d150
 80064b4:	20000000 	.word	0x20000000
 80064b8:	20000004 	.word	0x20000004

080064bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064c0:	b094      	sub	sp, #80	@ 0x50
 80064c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80064c4:	2300      	movs	r3, #0
 80064c6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80064c8:	2300      	movs	r3, #0
 80064ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80064cc:	2300      	movs	r3, #0
 80064ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80064d0:	2300      	movs	r3, #0
 80064d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064d4:	4b79      	ldr	r3, [pc, #484]	@ (80066bc <HAL_RCC_GetSysClockFreq+0x200>)
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	f003 030c 	and.w	r3, r3, #12
 80064dc:	2b08      	cmp	r3, #8
 80064de:	d00d      	beq.n	80064fc <HAL_RCC_GetSysClockFreq+0x40>
 80064e0:	2b08      	cmp	r3, #8
 80064e2:	f200 80e1 	bhi.w	80066a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d002      	beq.n	80064f0 <HAL_RCC_GetSysClockFreq+0x34>
 80064ea:	2b04      	cmp	r3, #4
 80064ec:	d003      	beq.n	80064f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80064ee:	e0db      	b.n	80066a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064f0:	4b73      	ldr	r3, [pc, #460]	@ (80066c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80064f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80064f4:	e0db      	b.n	80066ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80064f6:	4b73      	ldr	r3, [pc, #460]	@ (80066c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80064f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80064fa:	e0d8      	b.n	80066ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064fc:	4b6f      	ldr	r3, [pc, #444]	@ (80066bc <HAL_RCC_GetSysClockFreq+0x200>)
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006504:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006506:	4b6d      	ldr	r3, [pc, #436]	@ (80066bc <HAL_RCC_GetSysClockFreq+0x200>)
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d063      	beq.n	80065da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006512:	4b6a      	ldr	r3, [pc, #424]	@ (80066bc <HAL_RCC_GetSysClockFreq+0x200>)
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	099b      	lsrs	r3, r3, #6
 8006518:	2200      	movs	r2, #0
 800651a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800651c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800651e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006524:	633b      	str	r3, [r7, #48]	@ 0x30
 8006526:	2300      	movs	r3, #0
 8006528:	637b      	str	r3, [r7, #52]	@ 0x34
 800652a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800652e:	4622      	mov	r2, r4
 8006530:	462b      	mov	r3, r5
 8006532:	f04f 0000 	mov.w	r0, #0
 8006536:	f04f 0100 	mov.w	r1, #0
 800653a:	0159      	lsls	r1, r3, #5
 800653c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006540:	0150      	lsls	r0, r2, #5
 8006542:	4602      	mov	r2, r0
 8006544:	460b      	mov	r3, r1
 8006546:	4621      	mov	r1, r4
 8006548:	1a51      	subs	r1, r2, r1
 800654a:	6139      	str	r1, [r7, #16]
 800654c:	4629      	mov	r1, r5
 800654e:	eb63 0301 	sbc.w	r3, r3, r1
 8006552:	617b      	str	r3, [r7, #20]
 8006554:	f04f 0200 	mov.w	r2, #0
 8006558:	f04f 0300 	mov.w	r3, #0
 800655c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006560:	4659      	mov	r1, fp
 8006562:	018b      	lsls	r3, r1, #6
 8006564:	4651      	mov	r1, sl
 8006566:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800656a:	4651      	mov	r1, sl
 800656c:	018a      	lsls	r2, r1, #6
 800656e:	4651      	mov	r1, sl
 8006570:	ebb2 0801 	subs.w	r8, r2, r1
 8006574:	4659      	mov	r1, fp
 8006576:	eb63 0901 	sbc.w	r9, r3, r1
 800657a:	f04f 0200 	mov.w	r2, #0
 800657e:	f04f 0300 	mov.w	r3, #0
 8006582:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006586:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800658a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800658e:	4690      	mov	r8, r2
 8006590:	4699      	mov	r9, r3
 8006592:	4623      	mov	r3, r4
 8006594:	eb18 0303 	adds.w	r3, r8, r3
 8006598:	60bb      	str	r3, [r7, #8]
 800659a:	462b      	mov	r3, r5
 800659c:	eb49 0303 	adc.w	r3, r9, r3
 80065a0:	60fb      	str	r3, [r7, #12]
 80065a2:	f04f 0200 	mov.w	r2, #0
 80065a6:	f04f 0300 	mov.w	r3, #0
 80065aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80065ae:	4629      	mov	r1, r5
 80065b0:	024b      	lsls	r3, r1, #9
 80065b2:	4621      	mov	r1, r4
 80065b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80065b8:	4621      	mov	r1, r4
 80065ba:	024a      	lsls	r2, r1, #9
 80065bc:	4610      	mov	r0, r2
 80065be:	4619      	mov	r1, r3
 80065c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065c2:	2200      	movs	r2, #0
 80065c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80065c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80065cc:	f7fa face 	bl	8000b6c <__aeabi_uldivmod>
 80065d0:	4602      	mov	r2, r0
 80065d2:	460b      	mov	r3, r1
 80065d4:	4613      	mov	r3, r2
 80065d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065d8:	e058      	b.n	800668c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065da:	4b38      	ldr	r3, [pc, #224]	@ (80066bc <HAL_RCC_GetSysClockFreq+0x200>)
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	099b      	lsrs	r3, r3, #6
 80065e0:	2200      	movs	r2, #0
 80065e2:	4618      	mov	r0, r3
 80065e4:	4611      	mov	r1, r2
 80065e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80065ea:	623b      	str	r3, [r7, #32]
 80065ec:	2300      	movs	r3, #0
 80065ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80065f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80065f4:	4642      	mov	r2, r8
 80065f6:	464b      	mov	r3, r9
 80065f8:	f04f 0000 	mov.w	r0, #0
 80065fc:	f04f 0100 	mov.w	r1, #0
 8006600:	0159      	lsls	r1, r3, #5
 8006602:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006606:	0150      	lsls	r0, r2, #5
 8006608:	4602      	mov	r2, r0
 800660a:	460b      	mov	r3, r1
 800660c:	4641      	mov	r1, r8
 800660e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006612:	4649      	mov	r1, r9
 8006614:	eb63 0b01 	sbc.w	fp, r3, r1
 8006618:	f04f 0200 	mov.w	r2, #0
 800661c:	f04f 0300 	mov.w	r3, #0
 8006620:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006624:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006628:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800662c:	ebb2 040a 	subs.w	r4, r2, sl
 8006630:	eb63 050b 	sbc.w	r5, r3, fp
 8006634:	f04f 0200 	mov.w	r2, #0
 8006638:	f04f 0300 	mov.w	r3, #0
 800663c:	00eb      	lsls	r3, r5, #3
 800663e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006642:	00e2      	lsls	r2, r4, #3
 8006644:	4614      	mov	r4, r2
 8006646:	461d      	mov	r5, r3
 8006648:	4643      	mov	r3, r8
 800664a:	18e3      	adds	r3, r4, r3
 800664c:	603b      	str	r3, [r7, #0]
 800664e:	464b      	mov	r3, r9
 8006650:	eb45 0303 	adc.w	r3, r5, r3
 8006654:	607b      	str	r3, [r7, #4]
 8006656:	f04f 0200 	mov.w	r2, #0
 800665a:	f04f 0300 	mov.w	r3, #0
 800665e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006662:	4629      	mov	r1, r5
 8006664:	028b      	lsls	r3, r1, #10
 8006666:	4621      	mov	r1, r4
 8006668:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800666c:	4621      	mov	r1, r4
 800666e:	028a      	lsls	r2, r1, #10
 8006670:	4610      	mov	r0, r2
 8006672:	4619      	mov	r1, r3
 8006674:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006676:	2200      	movs	r2, #0
 8006678:	61bb      	str	r3, [r7, #24]
 800667a:	61fa      	str	r2, [r7, #28]
 800667c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006680:	f7fa fa74 	bl	8000b6c <__aeabi_uldivmod>
 8006684:	4602      	mov	r2, r0
 8006686:	460b      	mov	r3, r1
 8006688:	4613      	mov	r3, r2
 800668a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800668c:	4b0b      	ldr	r3, [pc, #44]	@ (80066bc <HAL_RCC_GetSysClockFreq+0x200>)
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	0c1b      	lsrs	r3, r3, #16
 8006692:	f003 0303 	and.w	r3, r3, #3
 8006696:	3301      	adds	r3, #1
 8006698:	005b      	lsls	r3, r3, #1
 800669a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800669c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800669e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80066a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80066a6:	e002      	b.n	80066ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80066a8:	4b05      	ldr	r3, [pc, #20]	@ (80066c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80066aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80066ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80066ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3750      	adds	r7, #80	@ 0x50
 80066b4:	46bd      	mov	sp, r7
 80066b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066ba:	bf00      	nop
 80066bc:	40023800 	.word	0x40023800
 80066c0:	00f42400 	.word	0x00f42400
 80066c4:	007a1200 	.word	0x007a1200

080066c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066c8:	b480      	push	{r7}
 80066ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066cc:	4b03      	ldr	r3, [pc, #12]	@ (80066dc <HAL_RCC_GetHCLKFreq+0x14>)
 80066ce:	681b      	ldr	r3, [r3, #0]
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	20000000 	.word	0x20000000

080066e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80066e4:	f7ff fff0 	bl	80066c8 <HAL_RCC_GetHCLKFreq>
 80066e8:	4602      	mov	r2, r0
 80066ea:	4b05      	ldr	r3, [pc, #20]	@ (8006700 <HAL_RCC_GetPCLK1Freq+0x20>)
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	0a9b      	lsrs	r3, r3, #10
 80066f0:	f003 0307 	and.w	r3, r3, #7
 80066f4:	4903      	ldr	r1, [pc, #12]	@ (8006704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066f6:	5ccb      	ldrb	r3, [r1, r3]
 80066f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	40023800 	.word	0x40023800
 8006704:	0800d160 	.word	0x0800d160

08006708 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800670c:	f7ff ffdc 	bl	80066c8 <HAL_RCC_GetHCLKFreq>
 8006710:	4602      	mov	r2, r0
 8006712:	4b05      	ldr	r3, [pc, #20]	@ (8006728 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	0b5b      	lsrs	r3, r3, #13
 8006718:	f003 0307 	and.w	r3, r3, #7
 800671c:	4903      	ldr	r1, [pc, #12]	@ (800672c <HAL_RCC_GetPCLK2Freq+0x24>)
 800671e:	5ccb      	ldrb	r3, [r1, r3]
 8006720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006724:	4618      	mov	r0, r3
 8006726:	bd80      	pop	{r7, pc}
 8006728:	40023800 	.word	0x40023800
 800672c:	0800d160 	.word	0x0800d160

08006730 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b086      	sub	sp, #24
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006738:	2300      	movs	r3, #0
 800673a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800673c:	2300      	movs	r3, #0
 800673e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0301 	and.w	r3, r3, #1
 8006748:	2b00      	cmp	r3, #0
 800674a:	d105      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006754:	2b00      	cmp	r3, #0
 8006756:	d035      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006758:	4b62      	ldr	r3, [pc, #392]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800675a:	2200      	movs	r2, #0
 800675c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800675e:	f7fb fab9 	bl	8001cd4 <HAL_GetTick>
 8006762:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006764:	e008      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006766:	f7fb fab5 	bl	8001cd4 <HAL_GetTick>
 800676a:	4602      	mov	r2, r0
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	2b02      	cmp	r3, #2
 8006772:	d901      	bls.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006774:	2303      	movs	r3, #3
 8006776:	e0b0      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006778:	4b5b      	ldr	r3, [pc, #364]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1f0      	bne.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	019a      	lsls	r2, r3, #6
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	071b      	lsls	r3, r3, #28
 8006790:	4955      	ldr	r1, [pc, #340]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006792:	4313      	orrs	r3, r2
 8006794:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006798:	4b52      	ldr	r3, [pc, #328]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800679a:	2201      	movs	r2, #1
 800679c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800679e:	f7fb fa99 	bl	8001cd4 <HAL_GetTick>
 80067a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067a4:	e008      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80067a6:	f7fb fa95 	bl	8001cd4 <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d901      	bls.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e090      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067b8:	4b4b      	ldr	r3, [pc, #300]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d0f0      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0302 	and.w	r3, r3, #2
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	f000 8083 	beq.w	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80067d2:	2300      	movs	r3, #0
 80067d4:	60fb      	str	r3, [r7, #12]
 80067d6:	4b44      	ldr	r3, [pc, #272]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067da:	4a43      	ldr	r2, [pc, #268]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80067e2:	4b41      	ldr	r3, [pc, #260]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067ea:	60fb      	str	r3, [r7, #12]
 80067ec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80067ee:	4b3f      	ldr	r3, [pc, #252]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a3e      	ldr	r2, [pc, #248]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80067f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067f8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80067fa:	f7fb fa6b 	bl	8001cd4 <HAL_GetTick>
 80067fe:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006800:	e008      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006802:	f7fb fa67 	bl	8001cd4 <HAL_GetTick>
 8006806:	4602      	mov	r2, r0
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	2b02      	cmp	r3, #2
 800680e:	d901      	bls.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e062      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006814:	4b35      	ldr	r3, [pc, #212]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800681c:	2b00      	cmp	r3, #0
 800681e:	d0f0      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006820:	4b31      	ldr	r3, [pc, #196]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006824:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006828:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d02f      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	429a      	cmp	r2, r3
 800683c:	d028      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800683e:	4b2a      	ldr	r3, [pc, #168]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006842:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006846:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006848:	4b29      	ldr	r3, [pc, #164]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800684a:	2201      	movs	r2, #1
 800684c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800684e:	4b28      	ldr	r3, [pc, #160]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006850:	2200      	movs	r2, #0
 8006852:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006854:	4a24      	ldr	r2, [pc, #144]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800685a:	4b23      	ldr	r3, [pc, #140]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800685c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800685e:	f003 0301 	and.w	r3, r3, #1
 8006862:	2b01      	cmp	r3, #1
 8006864:	d114      	bne.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006866:	f7fb fa35 	bl	8001cd4 <HAL_GetTick>
 800686a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800686c:	e00a      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800686e:	f7fb fa31 	bl	8001cd4 <HAL_GetTick>
 8006872:	4602      	mov	r2, r0
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	f241 3288 	movw	r2, #5000	@ 0x1388
 800687c:	4293      	cmp	r3, r2
 800687e:	d901      	bls.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	e02a      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006884:	4b18      	ldr	r3, [pc, #96]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006888:	f003 0302 	and.w	r3, r3, #2
 800688c:	2b00      	cmp	r3, #0
 800688e:	d0ee      	beq.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006898:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800689c:	d10d      	bne.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800689e:	4b12      	ldr	r3, [pc, #72]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80068ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068b2:	490d      	ldr	r1, [pc, #52]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068b4:	4313      	orrs	r3, r2
 80068b6:	608b      	str	r3, [r1, #8]
 80068b8:	e005      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80068ba:	4b0b      	ldr	r3, [pc, #44]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	4a0a      	ldr	r2, [pc, #40]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068c0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80068c4:	6093      	str	r3, [r2, #8]
 80068c6:	4b08      	ldr	r3, [pc, #32]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068c8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068d2:	4905      	ldr	r1, [pc, #20]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068d4:	4313      	orrs	r3, r2
 80068d6:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3718      	adds	r7, #24
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	42470068 	.word	0x42470068
 80068e8:	40023800 	.word	0x40023800
 80068ec:	40007000 	.word	0x40007000
 80068f0:	42470e40 	.word	0x42470e40

080068f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b087      	sub	sp, #28
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80068fc:	2300      	movs	r3, #0
 80068fe:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006900:	2300      	movs	r3, #0
 8006902:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006904:	2300      	movs	r3, #0
 8006906:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006908:	2300      	movs	r3, #0
 800690a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b01      	cmp	r3, #1
 8006910:	d13f      	bne.n	8006992 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006912:	4b24      	ldr	r3, [pc, #144]	@ (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800691a:	60fb      	str	r3, [r7, #12]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d006      	beq.n	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006928:	d12f      	bne.n	800698a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800692a:	4b1f      	ldr	r3, [pc, #124]	@ (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800692c:	617b      	str	r3, [r7, #20]
          break;
 800692e:	e02f      	b.n	8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006930:	4b1c      	ldr	r3, [pc, #112]	@ (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006938:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800693c:	d108      	bne.n	8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800693e:	4b19      	ldr	r3, [pc, #100]	@ (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006946:	4a19      	ldr	r2, [pc, #100]	@ (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006948:	fbb2 f3f3 	udiv	r3, r2, r3
 800694c:	613b      	str	r3, [r7, #16]
 800694e:	e007      	b.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006950:	4b14      	ldr	r3, [pc, #80]	@ (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006958:	4a15      	ldr	r2, [pc, #84]	@ (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800695a:	fbb2 f3f3 	udiv	r3, r2, r3
 800695e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006960:	4b10      	ldr	r3, [pc, #64]	@ (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006962:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006966:	099b      	lsrs	r3, r3, #6
 8006968:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	fb02 f303 	mul.w	r3, r2, r3
 8006972:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006974:	4b0b      	ldr	r3, [pc, #44]	@ (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006976:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800697a:	0f1b      	lsrs	r3, r3, #28
 800697c:	f003 0307 	and.w	r3, r3, #7
 8006980:	68ba      	ldr	r2, [r7, #8]
 8006982:	fbb2 f3f3 	udiv	r3, r2, r3
 8006986:	617b      	str	r3, [r7, #20]
          break;
 8006988:	e002      	b.n	8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800698a:	2300      	movs	r3, #0
 800698c:	617b      	str	r3, [r7, #20]
          break;
 800698e:	bf00      	nop
        }
      }
      break;
 8006990:	e000      	b.n	8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8006992:	bf00      	nop
    }
  }
  return frequency;
 8006994:	697b      	ldr	r3, [r7, #20]
}
 8006996:	4618      	mov	r0, r3
 8006998:	371c      	adds	r7, #28
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	40023800 	.word	0x40023800
 80069a8:	00bb8000 	.word	0x00bb8000
 80069ac:	007a1200 	.word	0x007a1200
 80069b0:	00f42400 	.word	0x00f42400

080069b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d101      	bne.n	80069c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e07b      	b.n	8006abe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d108      	bne.n	80069e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80069d6:	d009      	beq.n	80069ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	61da      	str	r2, [r3, #28]
 80069de:	e005      	b.n	80069ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d106      	bne.n	8006a0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f7fa ff14 	bl	8001834 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2202      	movs	r2, #2
 8006a10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a22:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006a34:	431a      	orrs	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a3e:	431a      	orrs	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	f003 0302 	and.w	r3, r3, #2
 8006a48:	431a      	orrs	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	431a      	orrs	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a5c:	431a      	orrs	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	69db      	ldr	r3, [r3, #28]
 8006a62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a66:	431a      	orrs	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a70:	ea42 0103 	orr.w	r1, r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a78:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	430a      	orrs	r2, r1
 8006a82:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	0c1b      	lsrs	r3, r3, #16
 8006a8a:	f003 0104 	and.w	r1, r3, #4
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a92:	f003 0210 	and.w	r2, r3, #16
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	430a      	orrs	r2, r1
 8006a9c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	69da      	ldr	r2, [r3, #28]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006aac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3708      	adds	r7, #8
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b08a      	sub	sp, #40	@ 0x28
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	60f8      	str	r0, [r7, #12]
 8006ace:	60b9      	str	r1, [r7, #8]
 8006ad0:	607a      	str	r2, [r7, #4]
 8006ad2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ad8:	f7fb f8fc 	bl	8001cd4 <HAL_GetTick>
 8006adc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ae4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006aec:	887b      	ldrh	r3, [r7, #2]
 8006aee:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006af0:	7ffb      	ldrb	r3, [r7, #31]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d00c      	beq.n	8006b10 <HAL_SPI_TransmitReceive+0x4a>
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006afc:	d106      	bne.n	8006b0c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d102      	bne.n	8006b0c <HAL_SPI_TransmitReceive+0x46>
 8006b06:	7ffb      	ldrb	r3, [r7, #31]
 8006b08:	2b04      	cmp	r3, #4
 8006b0a:	d001      	beq.n	8006b10 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	e17f      	b.n	8006e10 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d005      	beq.n	8006b22 <HAL_SPI_TransmitReceive+0x5c>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d002      	beq.n	8006b22 <HAL_SPI_TransmitReceive+0x5c>
 8006b1c:	887b      	ldrh	r3, [r7, #2]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d101      	bne.n	8006b26 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e174      	b.n	8006e10 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d101      	bne.n	8006b34 <HAL_SPI_TransmitReceive+0x6e>
 8006b30:	2302      	movs	r3, #2
 8006b32:	e16d      	b.n	8006e10 <HAL_SPI_TransmitReceive+0x34a>
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	2b04      	cmp	r3, #4
 8006b46:	d003      	beq.n	8006b50 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2205      	movs	r2, #5
 8006b4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	887a      	ldrh	r2, [r7, #2]
 8006b60:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	887a      	ldrh	r2, [r7, #2]
 8006b66:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	68ba      	ldr	r2, [r7, #8]
 8006b6c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	887a      	ldrh	r2, [r7, #2]
 8006b72:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	887a      	ldrh	r2, [r7, #2]
 8006b78:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b90:	2b40      	cmp	r3, #64	@ 0x40
 8006b92:	d007      	beq.n	8006ba4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ba2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bac:	d17e      	bne.n	8006cac <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d002      	beq.n	8006bbc <HAL_SPI_TransmitReceive+0xf6>
 8006bb6:	8afb      	ldrh	r3, [r7, #22]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d16c      	bne.n	8006c96 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bc0:	881a      	ldrh	r2, [r3, #0]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bcc:	1c9a      	adds	r2, r3, #2
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006be0:	e059      	b.n	8006c96 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	f003 0302 	and.w	r3, r3, #2
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d11b      	bne.n	8006c28 <HAL_SPI_TransmitReceive+0x162>
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d016      	beq.n	8006c28 <HAL_SPI_TransmitReceive+0x162>
 8006bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d113      	bne.n	8006c28 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c04:	881a      	ldrh	r2, [r3, #0]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c10:	1c9a      	adds	r2, r3, #2
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c24:	2300      	movs	r3, #0
 8006c26:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d119      	bne.n	8006c6a <HAL_SPI_TransmitReceive+0x1a4>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d014      	beq.n	8006c6a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68da      	ldr	r2, [r3, #12]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c4a:	b292      	uxth	r2, r2
 8006c4c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c52:	1c9a      	adds	r2, r3, #2
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	3b01      	subs	r3, #1
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c66:	2301      	movs	r3, #1
 8006c68:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006c6a:	f7fb f833 	bl	8001cd4 <HAL_GetTick>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	6a3b      	ldr	r3, [r7, #32]
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d80d      	bhi.n	8006c96 <HAL_SPI_TransmitReceive+0x1d0>
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c80:	d009      	beq.n	8006c96 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e0bc      	b.n	8006e10 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d1a0      	bne.n	8006be2 <HAL_SPI_TransmitReceive+0x11c>
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d19b      	bne.n	8006be2 <HAL_SPI_TransmitReceive+0x11c>
 8006caa:	e082      	b.n	8006db2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d002      	beq.n	8006cba <HAL_SPI_TransmitReceive+0x1f4>
 8006cb4:	8afb      	ldrh	r3, [r7, #22]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d171      	bne.n	8006d9e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	330c      	adds	r3, #12
 8006cc4:	7812      	ldrb	r2, [r2, #0]
 8006cc6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ccc:	1c5a      	adds	r2, r3, #1
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ce0:	e05d      	b.n	8006d9e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	f003 0302 	and.w	r3, r3, #2
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d11c      	bne.n	8006d2a <HAL_SPI_TransmitReceive+0x264>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d017      	beq.n	8006d2a <HAL_SPI_TransmitReceive+0x264>
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d114      	bne.n	8006d2a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	330c      	adds	r3, #12
 8006d0a:	7812      	ldrb	r2, [r2, #0]
 8006d0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d12:	1c5a      	adds	r2, r3, #1
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d26:	2300      	movs	r3, #0
 8006d28:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d119      	bne.n	8006d6c <HAL_SPI_TransmitReceive+0x2a6>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d014      	beq.n	8006d6c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68da      	ldr	r2, [r3, #12]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d4c:	b2d2      	uxtb	r2, r2
 8006d4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d54:	1c5a      	adds	r2, r3, #1
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	3b01      	subs	r3, #1
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006d6c:	f7fa ffb2 	bl	8001cd4 <HAL_GetTick>
 8006d70:	4602      	mov	r2, r0
 8006d72:	6a3b      	ldr	r3, [r7, #32]
 8006d74:	1ad3      	subs	r3, r2, r3
 8006d76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d803      	bhi.n	8006d84 <HAL_SPI_TransmitReceive+0x2be>
 8006d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d82:	d102      	bne.n	8006d8a <HAL_SPI_TransmitReceive+0x2c4>
 8006d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d109      	bne.n	8006d9e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e038      	b.n	8006e10 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d19c      	bne.n	8006ce2 <HAL_SPI_TransmitReceive+0x21c>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d197      	bne.n	8006ce2 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006db2:	6a3a      	ldr	r2, [r7, #32]
 8006db4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	f000 f8b6 	bl	8006f28 <SPI_EndRxTxTransaction>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d008      	beq.n	8006dd4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2220      	movs	r2, #32
 8006dc6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e01d      	b.n	8006e10 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d10a      	bne.n	8006df2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ddc:	2300      	movs	r3, #0
 8006dde:	613b      	str	r3, [r7, #16]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	613b      	str	r3, [r7, #16]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	613b      	str	r3, [r7, #16]
 8006df0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2201      	movs	r2, #1
 8006df6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d001      	beq.n	8006e0e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e000      	b.n	8006e10 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
  }
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3728      	adds	r7, #40	@ 0x28
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b088      	sub	sp, #32
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	603b      	str	r3, [r7, #0]
 8006e24:	4613      	mov	r3, r2
 8006e26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006e28:	f7fa ff54 	bl	8001cd4 <HAL_GetTick>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e30:	1a9b      	subs	r3, r3, r2
 8006e32:	683a      	ldr	r2, [r7, #0]
 8006e34:	4413      	add	r3, r2
 8006e36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006e38:	f7fa ff4c 	bl	8001cd4 <HAL_GetTick>
 8006e3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006e3e:	4b39      	ldr	r3, [pc, #228]	@ (8006f24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	015b      	lsls	r3, r3, #5
 8006e44:	0d1b      	lsrs	r3, r3, #20
 8006e46:	69fa      	ldr	r2, [r7, #28]
 8006e48:	fb02 f303 	mul.w	r3, r2, r3
 8006e4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e4e:	e055      	b.n	8006efc <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e56:	d051      	beq.n	8006efc <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e58:	f7fa ff3c 	bl	8001cd4 <HAL_GetTick>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	69fa      	ldr	r2, [r7, #28]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d902      	bls.n	8006e6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d13d      	bne.n	8006eea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	685a      	ldr	r2, [r3, #4]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006e7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e86:	d111      	bne.n	8006eac <SPI_WaitFlagStateUntilTimeout+0x94>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e90:	d004      	beq.n	8006e9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e9a:	d107      	bne.n	8006eac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006eaa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006eb4:	d10f      	bne.n	8006ed6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006ec4:	601a      	str	r2, [r3, #0]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006ed4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e018      	b.n	8006f1c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d102      	bne.n	8006ef6 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	61fb      	str	r3, [r7, #28]
 8006ef4:	e002      	b.n	8006efc <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	689a      	ldr	r2, [r3, #8]
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	4013      	ands	r3, r2
 8006f06:	68ba      	ldr	r2, [r7, #8]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	bf0c      	ite	eq
 8006f0c:	2301      	moveq	r3, #1
 8006f0e:	2300      	movne	r3, #0
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	461a      	mov	r2, r3
 8006f14:	79fb      	ldrb	r3, [r7, #7]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d19a      	bne.n	8006e50 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3720      	adds	r7, #32
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	20000000 	.word	0x20000000

08006f28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b088      	sub	sp, #32
 8006f2c:	af02      	add	r7, sp, #8
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	2102      	movs	r1, #2
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f7ff ff6a 	bl	8006e18 <SPI_WaitFlagStateUntilTimeout>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d007      	beq.n	8006f5a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f4e:	f043 0220 	orr.w	r2, r3, #32
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e032      	b.n	8006fc0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006f5a:	4b1b      	ldr	r3, [pc, #108]	@ (8006fc8 <SPI_EndRxTxTransaction+0xa0>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a1b      	ldr	r2, [pc, #108]	@ (8006fcc <SPI_EndRxTxTransaction+0xa4>)
 8006f60:	fba2 2303 	umull	r2, r3, r2, r3
 8006f64:	0d5b      	lsrs	r3, r3, #21
 8006f66:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006f6a:	fb02 f303 	mul.w	r3, r2, r3
 8006f6e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f78:	d112      	bne.n	8006fa0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	9300      	str	r3, [sp, #0]
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	2200      	movs	r2, #0
 8006f82:	2180      	movs	r1, #128	@ 0x80
 8006f84:	68f8      	ldr	r0, [r7, #12]
 8006f86:	f7ff ff47 	bl	8006e18 <SPI_WaitFlagStateUntilTimeout>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d016      	beq.n	8006fbe <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f94:	f043 0220 	orr.w	r2, r3, #32
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e00f      	b.n	8006fc0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00a      	beq.n	8006fbc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fb6:	2b80      	cmp	r3, #128	@ 0x80
 8006fb8:	d0f2      	beq.n	8006fa0 <SPI_EndRxTxTransaction+0x78>
 8006fba:	e000      	b.n	8006fbe <SPI_EndRxTxTransaction+0x96>
        break;
 8006fbc:	bf00      	nop
  }

  return HAL_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3718      	adds	r7, #24
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	20000000 	.word	0x20000000
 8006fcc:	165e9f81 	.word	0x165e9f81

08006fd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d101      	bne.n	8006fe2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e042      	b.n	8007068 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d106      	bne.n	8006ffc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f7fa fd94 	bl	8001b24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2224      	movs	r2, #36	@ 0x24
 8007000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68da      	ldr	r2, [r3, #12]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007012:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 f973 	bl	8007300 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	691a      	ldr	r2, [r3, #16]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007028:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	695a      	ldr	r2, [r3, #20]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007038:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68da      	ldr	r2, [r3, #12]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007048:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2220      	movs	r2, #32
 8007054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2220      	movs	r2, #32
 800705c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3708      	adds	r7, #8
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b08a      	sub	sp, #40	@ 0x28
 8007074:	af02      	add	r7, sp, #8
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	603b      	str	r3, [r7, #0]
 800707c:	4613      	mov	r3, r2
 800707e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007080:	2300      	movs	r3, #0
 8007082:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b20      	cmp	r3, #32
 800708e:	d175      	bne.n	800717c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d002      	beq.n	800709c <HAL_UART_Transmit+0x2c>
 8007096:	88fb      	ldrh	r3, [r7, #6]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d101      	bne.n	80070a0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	e06e      	b.n	800717e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2200      	movs	r2, #0
 80070a4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2221      	movs	r2, #33	@ 0x21
 80070aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80070ae:	f7fa fe11 	bl	8001cd4 <HAL_GetTick>
 80070b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	88fa      	ldrh	r2, [r7, #6]
 80070b8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	88fa      	ldrh	r2, [r7, #6]
 80070be:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070c8:	d108      	bne.n	80070dc <HAL_UART_Transmit+0x6c>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d104      	bne.n	80070dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80070d2:	2300      	movs	r3, #0
 80070d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	61bb      	str	r3, [r7, #24]
 80070da:	e003      	b.n	80070e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070e0:	2300      	movs	r3, #0
 80070e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80070e4:	e02e      	b.n	8007144 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	9300      	str	r3, [sp, #0]
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	2200      	movs	r2, #0
 80070ee:	2180      	movs	r1, #128	@ 0x80
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f000 f848 	bl	8007186 <UART_WaitOnFlagUntilTimeout>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d005      	beq.n	8007108 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2220      	movs	r2, #32
 8007100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007104:	2303      	movs	r3, #3
 8007106:	e03a      	b.n	800717e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10b      	bne.n	8007126 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	881b      	ldrh	r3, [r3, #0]
 8007112:	461a      	mov	r2, r3
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800711c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	3302      	adds	r3, #2
 8007122:	61bb      	str	r3, [r7, #24]
 8007124:	e007      	b.n	8007136 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	781a      	ldrb	r2, [r3, #0]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	3301      	adds	r3, #1
 8007134:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800713a:	b29b      	uxth	r3, r3
 800713c:	3b01      	subs	r3, #1
 800713e:	b29a      	uxth	r2, r3
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007148:	b29b      	uxth	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	d1cb      	bne.n	80070e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	9300      	str	r3, [sp, #0]
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	2200      	movs	r2, #0
 8007156:	2140      	movs	r1, #64	@ 0x40
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f000 f814 	bl	8007186 <UART_WaitOnFlagUntilTimeout>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d005      	beq.n	8007170 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2220      	movs	r2, #32
 8007168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800716c:	2303      	movs	r3, #3
 800716e:	e006      	b.n	800717e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2220      	movs	r2, #32
 8007174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007178:	2300      	movs	r3, #0
 800717a:	e000      	b.n	800717e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800717c:	2302      	movs	r3, #2
  }
}
 800717e:	4618      	mov	r0, r3
 8007180:	3720      	adds	r7, #32
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b086      	sub	sp, #24
 800718a:	af00      	add	r7, sp, #0
 800718c:	60f8      	str	r0, [r7, #12]
 800718e:	60b9      	str	r1, [r7, #8]
 8007190:	603b      	str	r3, [r7, #0]
 8007192:	4613      	mov	r3, r2
 8007194:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007196:	e03b      	b.n	8007210 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007198:	6a3b      	ldr	r3, [r7, #32]
 800719a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800719e:	d037      	beq.n	8007210 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071a0:	f7fa fd98 	bl	8001cd4 <HAL_GetTick>
 80071a4:	4602      	mov	r2, r0
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	6a3a      	ldr	r2, [r7, #32]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d302      	bcc.n	80071b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80071b0:	6a3b      	ldr	r3, [r7, #32]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d101      	bne.n	80071ba <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e03a      	b.n	8007230 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	f003 0304 	and.w	r3, r3, #4
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d023      	beq.n	8007210 <UART_WaitOnFlagUntilTimeout+0x8a>
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	2b80      	cmp	r3, #128	@ 0x80
 80071cc:	d020      	beq.n	8007210 <UART_WaitOnFlagUntilTimeout+0x8a>
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	2b40      	cmp	r3, #64	@ 0x40
 80071d2:	d01d      	beq.n	8007210 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 0308 	and.w	r3, r3, #8
 80071de:	2b08      	cmp	r3, #8
 80071e0:	d116      	bne.n	8007210 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80071e2:	2300      	movs	r3, #0
 80071e4:	617b      	str	r3, [r7, #20]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	617b      	str	r3, [r7, #20]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	617b      	str	r3, [r7, #20]
 80071f6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f000 f81d 	bl	8007238 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2208      	movs	r2, #8
 8007202:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2200      	movs	r2, #0
 8007208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	e00f      	b.n	8007230 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	4013      	ands	r3, r2
 800721a:	68ba      	ldr	r2, [r7, #8]
 800721c:	429a      	cmp	r2, r3
 800721e:	bf0c      	ite	eq
 8007220:	2301      	moveq	r3, #1
 8007222:	2300      	movne	r3, #0
 8007224:	b2db      	uxtb	r3, r3
 8007226:	461a      	mov	r2, r3
 8007228:	79fb      	ldrb	r3, [r7, #7]
 800722a:	429a      	cmp	r2, r3
 800722c:	d0b4      	beq.n	8007198 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3718      	adds	r7, #24
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007238:	b480      	push	{r7}
 800723a:	b095      	sub	sp, #84	@ 0x54
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	330c      	adds	r3, #12
 8007246:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800724a:	e853 3f00 	ldrex	r3, [r3]
 800724e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007252:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007256:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	330c      	adds	r3, #12
 800725e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007260:	643a      	str	r2, [r7, #64]	@ 0x40
 8007262:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007264:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007266:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007268:	e841 2300 	strex	r3, r2, [r1]
 800726c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800726e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007270:	2b00      	cmp	r3, #0
 8007272:	d1e5      	bne.n	8007240 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	3314      	adds	r3, #20
 800727a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727c:	6a3b      	ldr	r3, [r7, #32]
 800727e:	e853 3f00 	ldrex	r3, [r3]
 8007282:	61fb      	str	r3, [r7, #28]
   return(result);
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	f023 0301 	bic.w	r3, r3, #1
 800728a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	3314      	adds	r3, #20
 8007292:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007294:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007296:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007298:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800729a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800729c:	e841 2300 	strex	r3, r2, [r1]
 80072a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80072a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d1e5      	bne.n	8007274 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d119      	bne.n	80072e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	330c      	adds	r3, #12
 80072b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	e853 3f00 	ldrex	r3, [r3]
 80072be:	60bb      	str	r3, [r7, #8]
   return(result);
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	f023 0310 	bic.w	r3, r3, #16
 80072c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	330c      	adds	r3, #12
 80072ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072d0:	61ba      	str	r2, [r7, #24]
 80072d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d4:	6979      	ldr	r1, [r7, #20]
 80072d6:	69ba      	ldr	r2, [r7, #24]
 80072d8:	e841 2300 	strex	r3, r2, [r1]
 80072dc:	613b      	str	r3, [r7, #16]
   return(result);
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d1e5      	bne.n	80072b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2220      	movs	r2, #32
 80072e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80072f2:	bf00      	nop
 80072f4:	3754      	adds	r7, #84	@ 0x54
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr
	...

08007300 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007304:	b0c0      	sub	sp, #256	@ 0x100
 8007306:	af00      	add	r7, sp, #0
 8007308:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800730c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800731c:	68d9      	ldr	r1, [r3, #12]
 800731e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	ea40 0301 	orr.w	r3, r0, r1
 8007328:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800732a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800732e:	689a      	ldr	r2, [r3, #8]
 8007330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	431a      	orrs	r2, r3
 8007338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800733c:	695b      	ldr	r3, [r3, #20]
 800733e:	431a      	orrs	r2, r3
 8007340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007344:	69db      	ldr	r3, [r3, #28]
 8007346:	4313      	orrs	r3, r2
 8007348:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800734c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007358:	f021 010c 	bic.w	r1, r1, #12
 800735c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007366:	430b      	orrs	r3, r1
 8007368:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800736a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800737a:	6999      	ldr	r1, [r3, #24]
 800737c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	ea40 0301 	orr.w	r3, r0, r1
 8007386:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	4b8f      	ldr	r3, [pc, #572]	@ (80075cc <UART_SetConfig+0x2cc>)
 8007390:	429a      	cmp	r2, r3
 8007392:	d005      	beq.n	80073a0 <UART_SetConfig+0xa0>
 8007394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	4b8d      	ldr	r3, [pc, #564]	@ (80075d0 <UART_SetConfig+0x2d0>)
 800739c:	429a      	cmp	r2, r3
 800739e:	d104      	bne.n	80073aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80073a0:	f7ff f9b2 	bl	8006708 <HAL_RCC_GetPCLK2Freq>
 80073a4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80073a8:	e003      	b.n	80073b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80073aa:	f7ff f999 	bl	80066e0 <HAL_RCC_GetPCLK1Freq>
 80073ae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073b6:	69db      	ldr	r3, [r3, #28]
 80073b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073bc:	f040 810c 	bne.w	80075d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80073c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073c4:	2200      	movs	r2, #0
 80073c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80073ca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80073ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80073d2:	4622      	mov	r2, r4
 80073d4:	462b      	mov	r3, r5
 80073d6:	1891      	adds	r1, r2, r2
 80073d8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80073da:	415b      	adcs	r3, r3
 80073dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80073de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80073e2:	4621      	mov	r1, r4
 80073e4:	eb12 0801 	adds.w	r8, r2, r1
 80073e8:	4629      	mov	r1, r5
 80073ea:	eb43 0901 	adc.w	r9, r3, r1
 80073ee:	f04f 0200 	mov.w	r2, #0
 80073f2:	f04f 0300 	mov.w	r3, #0
 80073f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80073fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007402:	4690      	mov	r8, r2
 8007404:	4699      	mov	r9, r3
 8007406:	4623      	mov	r3, r4
 8007408:	eb18 0303 	adds.w	r3, r8, r3
 800740c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007410:	462b      	mov	r3, r5
 8007412:	eb49 0303 	adc.w	r3, r9, r3
 8007416:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800741a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007426:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800742a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800742e:	460b      	mov	r3, r1
 8007430:	18db      	adds	r3, r3, r3
 8007432:	653b      	str	r3, [r7, #80]	@ 0x50
 8007434:	4613      	mov	r3, r2
 8007436:	eb42 0303 	adc.w	r3, r2, r3
 800743a:	657b      	str	r3, [r7, #84]	@ 0x54
 800743c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007440:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007444:	f7f9 fb92 	bl	8000b6c <__aeabi_uldivmod>
 8007448:	4602      	mov	r2, r0
 800744a:	460b      	mov	r3, r1
 800744c:	4b61      	ldr	r3, [pc, #388]	@ (80075d4 <UART_SetConfig+0x2d4>)
 800744e:	fba3 2302 	umull	r2, r3, r3, r2
 8007452:	095b      	lsrs	r3, r3, #5
 8007454:	011c      	lsls	r4, r3, #4
 8007456:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800745a:	2200      	movs	r2, #0
 800745c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007460:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007464:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007468:	4642      	mov	r2, r8
 800746a:	464b      	mov	r3, r9
 800746c:	1891      	adds	r1, r2, r2
 800746e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007470:	415b      	adcs	r3, r3
 8007472:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007474:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007478:	4641      	mov	r1, r8
 800747a:	eb12 0a01 	adds.w	sl, r2, r1
 800747e:	4649      	mov	r1, r9
 8007480:	eb43 0b01 	adc.w	fp, r3, r1
 8007484:	f04f 0200 	mov.w	r2, #0
 8007488:	f04f 0300 	mov.w	r3, #0
 800748c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007490:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007494:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007498:	4692      	mov	sl, r2
 800749a:	469b      	mov	fp, r3
 800749c:	4643      	mov	r3, r8
 800749e:	eb1a 0303 	adds.w	r3, sl, r3
 80074a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80074a6:	464b      	mov	r3, r9
 80074a8:	eb4b 0303 	adc.w	r3, fp, r3
 80074ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80074b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80074bc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80074c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80074c4:	460b      	mov	r3, r1
 80074c6:	18db      	adds	r3, r3, r3
 80074c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80074ca:	4613      	mov	r3, r2
 80074cc:	eb42 0303 	adc.w	r3, r2, r3
 80074d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80074d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80074d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80074da:	f7f9 fb47 	bl	8000b6c <__aeabi_uldivmod>
 80074de:	4602      	mov	r2, r0
 80074e0:	460b      	mov	r3, r1
 80074e2:	4611      	mov	r1, r2
 80074e4:	4b3b      	ldr	r3, [pc, #236]	@ (80075d4 <UART_SetConfig+0x2d4>)
 80074e6:	fba3 2301 	umull	r2, r3, r3, r1
 80074ea:	095b      	lsrs	r3, r3, #5
 80074ec:	2264      	movs	r2, #100	@ 0x64
 80074ee:	fb02 f303 	mul.w	r3, r2, r3
 80074f2:	1acb      	subs	r3, r1, r3
 80074f4:	00db      	lsls	r3, r3, #3
 80074f6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80074fa:	4b36      	ldr	r3, [pc, #216]	@ (80075d4 <UART_SetConfig+0x2d4>)
 80074fc:	fba3 2302 	umull	r2, r3, r3, r2
 8007500:	095b      	lsrs	r3, r3, #5
 8007502:	005b      	lsls	r3, r3, #1
 8007504:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007508:	441c      	add	r4, r3
 800750a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800750e:	2200      	movs	r2, #0
 8007510:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007514:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007518:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800751c:	4642      	mov	r2, r8
 800751e:	464b      	mov	r3, r9
 8007520:	1891      	adds	r1, r2, r2
 8007522:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007524:	415b      	adcs	r3, r3
 8007526:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007528:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800752c:	4641      	mov	r1, r8
 800752e:	1851      	adds	r1, r2, r1
 8007530:	6339      	str	r1, [r7, #48]	@ 0x30
 8007532:	4649      	mov	r1, r9
 8007534:	414b      	adcs	r3, r1
 8007536:	637b      	str	r3, [r7, #52]	@ 0x34
 8007538:	f04f 0200 	mov.w	r2, #0
 800753c:	f04f 0300 	mov.w	r3, #0
 8007540:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007544:	4659      	mov	r1, fp
 8007546:	00cb      	lsls	r3, r1, #3
 8007548:	4651      	mov	r1, sl
 800754a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800754e:	4651      	mov	r1, sl
 8007550:	00ca      	lsls	r2, r1, #3
 8007552:	4610      	mov	r0, r2
 8007554:	4619      	mov	r1, r3
 8007556:	4603      	mov	r3, r0
 8007558:	4642      	mov	r2, r8
 800755a:	189b      	adds	r3, r3, r2
 800755c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007560:	464b      	mov	r3, r9
 8007562:	460a      	mov	r2, r1
 8007564:	eb42 0303 	adc.w	r3, r2, r3
 8007568:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800756c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007578:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800757c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007580:	460b      	mov	r3, r1
 8007582:	18db      	adds	r3, r3, r3
 8007584:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007586:	4613      	mov	r3, r2
 8007588:	eb42 0303 	adc.w	r3, r2, r3
 800758c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800758e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007592:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007596:	f7f9 fae9 	bl	8000b6c <__aeabi_uldivmod>
 800759a:	4602      	mov	r2, r0
 800759c:	460b      	mov	r3, r1
 800759e:	4b0d      	ldr	r3, [pc, #52]	@ (80075d4 <UART_SetConfig+0x2d4>)
 80075a0:	fba3 1302 	umull	r1, r3, r3, r2
 80075a4:	095b      	lsrs	r3, r3, #5
 80075a6:	2164      	movs	r1, #100	@ 0x64
 80075a8:	fb01 f303 	mul.w	r3, r1, r3
 80075ac:	1ad3      	subs	r3, r2, r3
 80075ae:	00db      	lsls	r3, r3, #3
 80075b0:	3332      	adds	r3, #50	@ 0x32
 80075b2:	4a08      	ldr	r2, [pc, #32]	@ (80075d4 <UART_SetConfig+0x2d4>)
 80075b4:	fba2 2303 	umull	r2, r3, r2, r3
 80075b8:	095b      	lsrs	r3, r3, #5
 80075ba:	f003 0207 	and.w	r2, r3, #7
 80075be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4422      	add	r2, r4
 80075c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80075c8:	e106      	b.n	80077d8 <UART_SetConfig+0x4d8>
 80075ca:	bf00      	nop
 80075cc:	40011000 	.word	0x40011000
 80075d0:	40011400 	.word	0x40011400
 80075d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075dc:	2200      	movs	r2, #0
 80075de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80075e2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80075e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80075ea:	4642      	mov	r2, r8
 80075ec:	464b      	mov	r3, r9
 80075ee:	1891      	adds	r1, r2, r2
 80075f0:	6239      	str	r1, [r7, #32]
 80075f2:	415b      	adcs	r3, r3
 80075f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80075f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80075fa:	4641      	mov	r1, r8
 80075fc:	1854      	adds	r4, r2, r1
 80075fe:	4649      	mov	r1, r9
 8007600:	eb43 0501 	adc.w	r5, r3, r1
 8007604:	f04f 0200 	mov.w	r2, #0
 8007608:	f04f 0300 	mov.w	r3, #0
 800760c:	00eb      	lsls	r3, r5, #3
 800760e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007612:	00e2      	lsls	r2, r4, #3
 8007614:	4614      	mov	r4, r2
 8007616:	461d      	mov	r5, r3
 8007618:	4643      	mov	r3, r8
 800761a:	18e3      	adds	r3, r4, r3
 800761c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007620:	464b      	mov	r3, r9
 8007622:	eb45 0303 	adc.w	r3, r5, r3
 8007626:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800762a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007636:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800763a:	f04f 0200 	mov.w	r2, #0
 800763e:	f04f 0300 	mov.w	r3, #0
 8007642:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007646:	4629      	mov	r1, r5
 8007648:	008b      	lsls	r3, r1, #2
 800764a:	4621      	mov	r1, r4
 800764c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007650:	4621      	mov	r1, r4
 8007652:	008a      	lsls	r2, r1, #2
 8007654:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007658:	f7f9 fa88 	bl	8000b6c <__aeabi_uldivmod>
 800765c:	4602      	mov	r2, r0
 800765e:	460b      	mov	r3, r1
 8007660:	4b60      	ldr	r3, [pc, #384]	@ (80077e4 <UART_SetConfig+0x4e4>)
 8007662:	fba3 2302 	umull	r2, r3, r3, r2
 8007666:	095b      	lsrs	r3, r3, #5
 8007668:	011c      	lsls	r4, r3, #4
 800766a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800766e:	2200      	movs	r2, #0
 8007670:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007674:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007678:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800767c:	4642      	mov	r2, r8
 800767e:	464b      	mov	r3, r9
 8007680:	1891      	adds	r1, r2, r2
 8007682:	61b9      	str	r1, [r7, #24]
 8007684:	415b      	adcs	r3, r3
 8007686:	61fb      	str	r3, [r7, #28]
 8007688:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800768c:	4641      	mov	r1, r8
 800768e:	1851      	adds	r1, r2, r1
 8007690:	6139      	str	r1, [r7, #16]
 8007692:	4649      	mov	r1, r9
 8007694:	414b      	adcs	r3, r1
 8007696:	617b      	str	r3, [r7, #20]
 8007698:	f04f 0200 	mov.w	r2, #0
 800769c:	f04f 0300 	mov.w	r3, #0
 80076a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80076a4:	4659      	mov	r1, fp
 80076a6:	00cb      	lsls	r3, r1, #3
 80076a8:	4651      	mov	r1, sl
 80076aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076ae:	4651      	mov	r1, sl
 80076b0:	00ca      	lsls	r2, r1, #3
 80076b2:	4610      	mov	r0, r2
 80076b4:	4619      	mov	r1, r3
 80076b6:	4603      	mov	r3, r0
 80076b8:	4642      	mov	r2, r8
 80076ba:	189b      	adds	r3, r3, r2
 80076bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80076c0:	464b      	mov	r3, r9
 80076c2:	460a      	mov	r2, r1
 80076c4:	eb42 0303 	adc.w	r3, r2, r3
 80076c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80076cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80076d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80076d8:	f04f 0200 	mov.w	r2, #0
 80076dc:	f04f 0300 	mov.w	r3, #0
 80076e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80076e4:	4649      	mov	r1, r9
 80076e6:	008b      	lsls	r3, r1, #2
 80076e8:	4641      	mov	r1, r8
 80076ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076ee:	4641      	mov	r1, r8
 80076f0:	008a      	lsls	r2, r1, #2
 80076f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80076f6:	f7f9 fa39 	bl	8000b6c <__aeabi_uldivmod>
 80076fa:	4602      	mov	r2, r0
 80076fc:	460b      	mov	r3, r1
 80076fe:	4611      	mov	r1, r2
 8007700:	4b38      	ldr	r3, [pc, #224]	@ (80077e4 <UART_SetConfig+0x4e4>)
 8007702:	fba3 2301 	umull	r2, r3, r3, r1
 8007706:	095b      	lsrs	r3, r3, #5
 8007708:	2264      	movs	r2, #100	@ 0x64
 800770a:	fb02 f303 	mul.w	r3, r2, r3
 800770e:	1acb      	subs	r3, r1, r3
 8007710:	011b      	lsls	r3, r3, #4
 8007712:	3332      	adds	r3, #50	@ 0x32
 8007714:	4a33      	ldr	r2, [pc, #204]	@ (80077e4 <UART_SetConfig+0x4e4>)
 8007716:	fba2 2303 	umull	r2, r3, r2, r3
 800771a:	095b      	lsrs	r3, r3, #5
 800771c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007720:	441c      	add	r4, r3
 8007722:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007726:	2200      	movs	r2, #0
 8007728:	673b      	str	r3, [r7, #112]	@ 0x70
 800772a:	677a      	str	r2, [r7, #116]	@ 0x74
 800772c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007730:	4642      	mov	r2, r8
 8007732:	464b      	mov	r3, r9
 8007734:	1891      	adds	r1, r2, r2
 8007736:	60b9      	str	r1, [r7, #8]
 8007738:	415b      	adcs	r3, r3
 800773a:	60fb      	str	r3, [r7, #12]
 800773c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007740:	4641      	mov	r1, r8
 8007742:	1851      	adds	r1, r2, r1
 8007744:	6039      	str	r1, [r7, #0]
 8007746:	4649      	mov	r1, r9
 8007748:	414b      	adcs	r3, r1
 800774a:	607b      	str	r3, [r7, #4]
 800774c:	f04f 0200 	mov.w	r2, #0
 8007750:	f04f 0300 	mov.w	r3, #0
 8007754:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007758:	4659      	mov	r1, fp
 800775a:	00cb      	lsls	r3, r1, #3
 800775c:	4651      	mov	r1, sl
 800775e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007762:	4651      	mov	r1, sl
 8007764:	00ca      	lsls	r2, r1, #3
 8007766:	4610      	mov	r0, r2
 8007768:	4619      	mov	r1, r3
 800776a:	4603      	mov	r3, r0
 800776c:	4642      	mov	r2, r8
 800776e:	189b      	adds	r3, r3, r2
 8007770:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007772:	464b      	mov	r3, r9
 8007774:	460a      	mov	r2, r1
 8007776:	eb42 0303 	adc.w	r3, r2, r3
 800777a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800777c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	663b      	str	r3, [r7, #96]	@ 0x60
 8007786:	667a      	str	r2, [r7, #100]	@ 0x64
 8007788:	f04f 0200 	mov.w	r2, #0
 800778c:	f04f 0300 	mov.w	r3, #0
 8007790:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007794:	4649      	mov	r1, r9
 8007796:	008b      	lsls	r3, r1, #2
 8007798:	4641      	mov	r1, r8
 800779a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800779e:	4641      	mov	r1, r8
 80077a0:	008a      	lsls	r2, r1, #2
 80077a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80077a6:	f7f9 f9e1 	bl	8000b6c <__aeabi_uldivmod>
 80077aa:	4602      	mov	r2, r0
 80077ac:	460b      	mov	r3, r1
 80077ae:	4b0d      	ldr	r3, [pc, #52]	@ (80077e4 <UART_SetConfig+0x4e4>)
 80077b0:	fba3 1302 	umull	r1, r3, r3, r2
 80077b4:	095b      	lsrs	r3, r3, #5
 80077b6:	2164      	movs	r1, #100	@ 0x64
 80077b8:	fb01 f303 	mul.w	r3, r1, r3
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	011b      	lsls	r3, r3, #4
 80077c0:	3332      	adds	r3, #50	@ 0x32
 80077c2:	4a08      	ldr	r2, [pc, #32]	@ (80077e4 <UART_SetConfig+0x4e4>)
 80077c4:	fba2 2303 	umull	r2, r3, r2, r3
 80077c8:	095b      	lsrs	r3, r3, #5
 80077ca:	f003 020f 	and.w	r2, r3, #15
 80077ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4422      	add	r2, r4
 80077d6:	609a      	str	r2, [r3, #8]
}
 80077d8:	bf00      	nop
 80077da:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80077de:	46bd      	mov	sp, r7
 80077e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077e4:	51eb851f 	.word	0x51eb851f

080077e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077e8:	b084      	sub	sp, #16
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b084      	sub	sp, #16
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	f107 001c 	add.w	r0, r7, #28
 80077f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80077fa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d123      	bne.n	800784a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007806:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007816:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800782a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800782e:	2b01      	cmp	r3, #1
 8007830:	d105      	bne.n	800783e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f9dc 	bl	8007bfc <USB_CoreReset>
 8007844:	4603      	mov	r3, r0
 8007846:	73fb      	strb	r3, [r7, #15]
 8007848:	e01b      	b.n	8007882 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f9d0 	bl	8007bfc <USB_CoreReset>
 800785c:	4603      	mov	r3, r0
 800785e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007860:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007864:	2b00      	cmp	r3, #0
 8007866:	d106      	bne.n	8007876 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800786c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	639a      	str	r2, [r3, #56]	@ 0x38
 8007874:	e005      	b.n	8007882 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800787a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007882:	7fbb      	ldrb	r3, [r7, #30]
 8007884:	2b01      	cmp	r3, #1
 8007886:	d10b      	bne.n	80078a0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	f043 0206 	orr.w	r2, r3, #6
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	f043 0220 	orr.w	r2, r3, #32
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80078a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078ac:	b004      	add	sp, #16
 80078ae:	4770      	bx	lr

080078b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	f043 0201 	orr.w	r2, r3, #1
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	370c      	adds	r7, #12
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr

080078d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80078d2:	b480      	push	{r7}
 80078d4:	b083      	sub	sp, #12
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	f023 0201 	bic.w	r2, r3, #1
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	460b      	mov	r3, r1
 80078fe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007900:	2300      	movs	r3, #0
 8007902:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007910:	78fb      	ldrb	r3, [r7, #3]
 8007912:	2b01      	cmp	r3, #1
 8007914:	d115      	bne.n	8007942 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007922:	200a      	movs	r0, #10
 8007924:	f7fa f9e2 	bl	8001cec <HAL_Delay>
      ms += 10U;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	330a      	adds	r3, #10
 800792c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 f956 	bl	8007be0 <USB_GetMode>
 8007934:	4603      	mov	r3, r0
 8007936:	2b01      	cmp	r3, #1
 8007938:	d01e      	beq.n	8007978 <USB_SetCurrentMode+0x84>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2bc7      	cmp	r3, #199	@ 0xc7
 800793e:	d9f0      	bls.n	8007922 <USB_SetCurrentMode+0x2e>
 8007940:	e01a      	b.n	8007978 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007942:	78fb      	ldrb	r3, [r7, #3]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d115      	bne.n	8007974 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007954:	200a      	movs	r0, #10
 8007956:	f7fa f9c9 	bl	8001cec <HAL_Delay>
      ms += 10U;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	330a      	adds	r3, #10
 800795e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 f93d 	bl	8007be0 <USB_GetMode>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d005      	beq.n	8007978 <USB_SetCurrentMode+0x84>
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007970:	d9f0      	bls.n	8007954 <USB_SetCurrentMode+0x60>
 8007972:	e001      	b.n	8007978 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	e005      	b.n	8007984 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2bc8      	cmp	r3, #200	@ 0xc8
 800797c:	d101      	bne.n	8007982 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	e000      	b.n	8007984 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800798c:	b480      	push	{r7}
 800798e:	b085      	sub	sp, #20
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007996:	2300      	movs	r3, #0
 8007998:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	3301      	adds	r3, #1
 800799e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80079a6:	d901      	bls.n	80079ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80079a8:	2303      	movs	r3, #3
 80079aa:	e01b      	b.n	80079e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	691b      	ldr	r3, [r3, #16]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	daf2      	bge.n	800799a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80079b4:	2300      	movs	r3, #0
 80079b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	019b      	lsls	r3, r3, #6
 80079bc:	f043 0220 	orr.w	r2, r3, #32
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	3301      	adds	r3, #1
 80079c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80079d0:	d901      	bls.n	80079d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80079d2:	2303      	movs	r3, #3
 80079d4:	e006      	b.n	80079e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	f003 0320 	and.w	r3, r3, #32
 80079de:	2b20      	cmp	r3, #32
 80079e0:	d0f0      	beq.n	80079c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3714      	adds	r7, #20
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b085      	sub	sp, #20
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079f8:	2300      	movs	r3, #0
 80079fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	3301      	adds	r3, #1
 8007a00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a08:	d901      	bls.n	8007a0e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	e018      	b.n	8007a40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	daf2      	bge.n	80079fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007a16:	2300      	movs	r3, #0
 8007a18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2210      	movs	r2, #16
 8007a1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	3301      	adds	r3, #1
 8007a24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a2c:	d901      	bls.n	8007a32 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	e006      	b.n	8007a40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	691b      	ldr	r3, [r3, #16]
 8007a36:	f003 0310 	and.w	r3, r3, #16
 8007a3a:	2b10      	cmp	r3, #16
 8007a3c:	d0f0      	beq.n	8007a20 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3714      	adds	r7, #20
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b089      	sub	sp, #36	@ 0x24
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	4611      	mov	r1, r2
 8007a58:	461a      	mov	r2, r3
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	71fb      	strb	r3, [r7, #7]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007a6a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d123      	bne.n	8007aba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007a72:	88bb      	ldrh	r3, [r7, #4]
 8007a74:	3303      	adds	r3, #3
 8007a76:	089b      	lsrs	r3, r3, #2
 8007a78:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	61bb      	str	r3, [r7, #24]
 8007a7e:	e018      	b.n	8007ab2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007a80:	79fb      	ldrb	r3, [r7, #7]
 8007a82:	031a      	lsls	r2, r3, #12
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	4413      	add	r3, r2
 8007a88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	3301      	adds	r3, #1
 8007a98:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	61bb      	str	r3, [r7, #24]
 8007ab2:	69ba      	ldr	r2, [r7, #24]
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d3e2      	bcc.n	8007a80 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3724      	adds	r7, #36	@ 0x24
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b08b      	sub	sp, #44	@ 0x2c
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	60b9      	str	r1, [r7, #8]
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007ade:	88fb      	ldrh	r3, [r7, #6]
 8007ae0:	089b      	lsrs	r3, r3, #2
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007ae6:	88fb      	ldrh	r3, [r7, #6]
 8007ae8:	f003 0303 	and.w	r3, r3, #3
 8007aec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007aee:	2300      	movs	r3, #0
 8007af0:	623b      	str	r3, [r7, #32]
 8007af2:	e014      	b.n	8007b1e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007afe:	601a      	str	r2, [r3, #0]
    pDest++;
 8007b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b02:	3301      	adds	r3, #1
 8007b04:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b08:	3301      	adds	r3, #1
 8007b0a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b0e:	3301      	adds	r3, #1
 8007b10:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b14:	3301      	adds	r3, #1
 8007b16:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007b18:	6a3b      	ldr	r3, [r7, #32]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	623b      	str	r3, [r7, #32]
 8007b1e:	6a3a      	ldr	r2, [r7, #32]
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d3e6      	bcc.n	8007af4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007b26:	8bfb      	ldrh	r3, [r7, #30]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d01e      	beq.n	8007b6a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b36:	461a      	mov	r2, r3
 8007b38:	f107 0310 	add.w	r3, r7, #16
 8007b3c:	6812      	ldr	r2, [r2, #0]
 8007b3e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007b40:	693a      	ldr	r2, [r7, #16]
 8007b42:	6a3b      	ldr	r3, [r7, #32]
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	00db      	lsls	r3, r3, #3
 8007b48:	fa22 f303 	lsr.w	r3, r2, r3
 8007b4c:	b2da      	uxtb	r2, r3
 8007b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b50:	701a      	strb	r2, [r3, #0]
      i++;
 8007b52:	6a3b      	ldr	r3, [r7, #32]
 8007b54:	3301      	adds	r3, #1
 8007b56:	623b      	str	r3, [r7, #32]
      pDest++;
 8007b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007b5e:	8bfb      	ldrh	r3, [r7, #30]
 8007b60:	3b01      	subs	r3, #1
 8007b62:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007b64:	8bfb      	ldrh	r3, [r7, #30]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d1ea      	bne.n	8007b40 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	372c      	adds	r7, #44	@ 0x2c
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b085      	sub	sp, #20
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	695b      	ldr	r3, [r3, #20]
 8007b84:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	699b      	ldr	r3, [r3, #24]
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	4013      	ands	r3, r2
 8007b8e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007b90:	68fb      	ldr	r3, [r7, #12]
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3714      	adds	r7, #20
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr

08007b9e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007b9e:	b480      	push	{r7}
 8007ba0:	b085      	sub	sp, #20
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007bae:	78fb      	ldrb	r3, [r7, #3]
 8007bb0:	015a      	lsls	r2, r3, #5
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007bbe:	78fb      	ldrb	r3, [r7, #3]
 8007bc0:	015a      	lsls	r2, r3, #5
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	68ba      	ldr	r2, [r7, #8]
 8007bce:	4013      	ands	r3, r2
 8007bd0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007bd2:	68bb      	ldr	r3, [r7, #8]
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3714      	adds	r7, #20
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	695b      	ldr	r3, [r3, #20]
 8007bec:	f003 0301 	and.w	r3, r3, #1
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b085      	sub	sp, #20
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c04:	2300      	movs	r3, #0
 8007c06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c14:	d901      	bls.n	8007c1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007c16:	2303      	movs	r3, #3
 8007c18:	e022      	b.n	8007c60 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	daf2      	bge.n	8007c08 <USB_CoreReset+0xc>

  count = 10U;
 8007c22:	230a      	movs	r3, #10
 8007c24:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8007c26:	e002      	b.n	8007c2e <USB_CoreReset+0x32>
  {
    count--;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d1f9      	bne.n	8007c28 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	691b      	ldr	r3, [r3, #16]
 8007c38:	f043 0201 	orr.w	r2, r3, #1
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	3301      	adds	r3, #1
 8007c44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c4c:	d901      	bls.n	8007c52 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	e006      	b.n	8007c60 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	691b      	ldr	r3, [r3, #16]
 8007c56:	f003 0301 	and.w	r3, r3, #1
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d0f0      	beq.n	8007c40 <USB_CoreReset+0x44>

  return HAL_OK;
 8007c5e:	2300      	movs	r3, #0
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3714      	adds	r7, #20
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c6c:	b084      	sub	sp, #16
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b086      	sub	sp, #24
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
 8007c76:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007c7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	2300      	movs	r3, #0
 8007c90:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c96:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ca2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cae:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	68db      	ldr	r3, [r3, #12]
 8007cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d119      	bne.n	8007cf6 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007cc2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d10a      	bne.n	8007ce0 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007cd8:	f043 0304 	orr.w	r3, r3, #4
 8007cdc:	6013      	str	r3, [r2, #0]
 8007cde:	e014      	b.n	8007d0a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	68fa      	ldr	r2, [r7, #12]
 8007cea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007cee:	f023 0304 	bic.w	r3, r3, #4
 8007cf2:	6013      	str	r3, [r2, #0]
 8007cf4:	e009      	b.n	8007d0a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007d04:	f023 0304 	bic.w	r3, r3, #4
 8007d08:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007d0a:	2110      	movs	r1, #16
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f7ff fe3d 	bl	800798c <USB_FlushTxFifo>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d001      	beq.n	8007d1c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f7ff fe67 	bl	80079f0 <USB_FlushRxFifo>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d001      	beq.n	8007d2c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	613b      	str	r3, [r7, #16]
 8007d30:	e015      	b.n	8007d5e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	015a      	lsls	r2, r3, #5
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	4413      	add	r3, r2
 8007d3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d3e:	461a      	mov	r2, r3
 8007d40:	f04f 33ff 	mov.w	r3, #4294967295
 8007d44:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	015a      	lsls	r2, r3, #5
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d52:	461a      	mov	r2, r3
 8007d54:	2300      	movs	r3, #0
 8007d56:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	613b      	str	r3, [r7, #16]
 8007d5e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007d62:	461a      	mov	r2, r3
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d3e3      	bcc.n	8007d32 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f04f 32ff 	mov.w	r2, #4294967295
 8007d76:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4a18      	ldr	r2, [pc, #96]	@ (8007ddc <USB_HostInit+0x170>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d10b      	bne.n	8007d98 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d86:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a15      	ldr	r2, [pc, #84]	@ (8007de0 <USB_HostInit+0x174>)
 8007d8c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a14      	ldr	r2, [pc, #80]	@ (8007de4 <USB_HostInit+0x178>)
 8007d92:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8007d96:	e009      	b.n	8007dac <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2280      	movs	r2, #128	@ 0x80
 8007d9c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a11      	ldr	r2, [pc, #68]	@ (8007de8 <USB_HostInit+0x17c>)
 8007da2:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	4a11      	ldr	r2, [pc, #68]	@ (8007dec <USB_HostInit+0x180>)
 8007da8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007dac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d105      	bne.n	8007dc0 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	699b      	ldr	r3, [r3, #24]
 8007db8:	f043 0210 	orr.w	r2, r3, #16
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	699a      	ldr	r2, [r3, #24]
 8007dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8007df0 <USB_HostInit+0x184>)
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3718      	adds	r7, #24
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007dd8:	b004      	add	sp, #16
 8007dda:	4770      	bx	lr
 8007ddc:	40040000 	.word	0x40040000
 8007de0:	01000200 	.word	0x01000200
 8007de4:	00e00300 	.word	0x00e00300
 8007de8:	00600080 	.word	0x00600080
 8007dec:	004000e0 	.word	0x004000e0
 8007df0:	a3200008 	.word	0xa3200008

08007df4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b085      	sub	sp, #20
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007e12:	f023 0303 	bic.w	r3, r3, #3
 8007e16:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	78fb      	ldrb	r3, [r7, #3]
 8007e22:	f003 0303 	and.w	r3, r3, #3
 8007e26:	68f9      	ldr	r1, [r7, #12]
 8007e28:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007e30:	78fb      	ldrb	r3, [r7, #3]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d107      	bne.n	8007e46 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007e42:	6053      	str	r3, [r2, #4]
 8007e44:	e00c      	b.n	8007e60 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8007e46:	78fb      	ldrb	r3, [r7, #3]
 8007e48:	2b02      	cmp	r3, #2
 8007e4a:	d107      	bne.n	8007e5c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e52:	461a      	mov	r2, r3
 8007e54:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007e58:	6053      	str	r3, [r2, #4]
 8007e5a:	e001      	b.n	8007e60 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e000      	b.n	8007e62 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3714      	adds	r7, #20
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr

08007e6e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e6e:	b580      	push	{r7, lr}
 8007e70:	b084      	sub	sp, #16
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007e8e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007e98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e9c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007e9e:	2064      	movs	r0, #100	@ 0x64
 8007ea0:	f7f9 ff24 	bl	8001cec <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	68fa      	ldr	r2, [r7, #12]
 8007ea8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007eac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007eb0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007eb2:	200a      	movs	r0, #10
 8007eb4:	f7f9 ff1a 	bl	8001cec <HAL_Delay>

  return HAL_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3710      	adds	r7, #16
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007ec2:	b480      	push	{r7}
 8007ec4:	b085      	sub	sp, #20
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
 8007eca:	460b      	mov	r3, r1
 8007ecc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007ee6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d109      	bne.n	8007f06 <USB_DriveVbus+0x44>
 8007ef2:	78fb      	ldrb	r3, [r7, #3]
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d106      	bne.n	8007f06 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007f00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007f04:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007f0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f10:	d109      	bne.n	8007f26 <USB_DriveVbus+0x64>
 8007f12:	78fb      	ldrb	r3, [r7, #3]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d106      	bne.n	8007f26 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007f20:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f24:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007f26:	2300      	movs	r3, #0
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3714      	adds	r7, #20
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b085      	sub	sp, #20
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007f40:	2300      	movs	r3, #0
 8007f42:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	0c5b      	lsrs	r3, r3, #17
 8007f52:	f003 0303 	and.w	r3, r3, #3
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3714      	adds	r7, #20
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr

08007f62 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8007f62:	b480      	push	{r7}
 8007f64:	b085      	sub	sp, #20
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	b29b      	uxth	r3, r3
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3714      	adds	r7, #20
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b088      	sub	sp, #32
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	4608      	mov	r0, r1
 8007f8e:	4611      	mov	r1, r2
 8007f90:	461a      	mov	r2, r3
 8007f92:	4603      	mov	r3, r0
 8007f94:	70fb      	strb	r3, [r7, #3]
 8007f96:	460b      	mov	r3, r1
 8007f98:	70bb      	strb	r3, [r7, #2]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8007fa6:	78fb      	ldrb	r3, [r7, #3]
 8007fa8:	015a      	lsls	r2, r3, #5
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	4413      	add	r3, r2
 8007fae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8007fb8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007fba:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007fbe:	2b03      	cmp	r3, #3
 8007fc0:	d87c      	bhi.n	80080bc <USB_HC_Init+0x138>
 8007fc2:	a201      	add	r2, pc, #4	@ (adr r2, 8007fc8 <USB_HC_Init+0x44>)
 8007fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc8:	08007fd9 	.word	0x08007fd9
 8007fcc:	0800807f 	.word	0x0800807f
 8007fd0:	08007fd9 	.word	0x08007fd9
 8007fd4:	08008041 	.word	0x08008041
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007fd8:	78fb      	ldrb	r3, [r7, #3]
 8007fda:	015a      	lsls	r2, r3, #5
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	4413      	add	r3, r2
 8007fe0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	f240 439d 	movw	r3, #1181	@ 0x49d
 8007fea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007fec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	da10      	bge.n	8008016 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007ff4:	78fb      	ldrb	r3, [r7, #3]
 8007ff6:	015a      	lsls	r2, r3, #5
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	78fa      	ldrb	r2, [r7, #3]
 8008004:	0151      	lsls	r1, r2, #5
 8008006:	693a      	ldr	r2, [r7, #16]
 8008008:	440a      	add	r2, r1
 800800a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800800e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008012:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8008014:	e055      	b.n	80080c2 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a6f      	ldr	r2, [pc, #444]	@ (80081d8 <USB_HC_Init+0x254>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d151      	bne.n	80080c2 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800801e:	78fb      	ldrb	r3, [r7, #3]
 8008020:	015a      	lsls	r2, r3, #5
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	4413      	add	r3, r2
 8008026:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	78fa      	ldrb	r2, [r7, #3]
 800802e:	0151      	lsls	r1, r2, #5
 8008030:	693a      	ldr	r2, [r7, #16]
 8008032:	440a      	add	r2, r1
 8008034:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008038:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800803c:	60d3      	str	r3, [r2, #12]
      break;
 800803e:	e040      	b.n	80080c2 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008040:	78fb      	ldrb	r3, [r7, #3]
 8008042:	015a      	lsls	r2, r3, #5
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	4413      	add	r3, r2
 8008048:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800804c:	461a      	mov	r2, r3
 800804e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8008052:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008054:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008058:	2b00      	cmp	r3, #0
 800805a:	da34      	bge.n	80080c6 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800805c:	78fb      	ldrb	r3, [r7, #3]
 800805e:	015a      	lsls	r2, r3, #5
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	4413      	add	r3, r2
 8008064:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	78fa      	ldrb	r2, [r7, #3]
 800806c:	0151      	lsls	r1, r2, #5
 800806e:	693a      	ldr	r2, [r7, #16]
 8008070:	440a      	add	r2, r1
 8008072:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008076:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800807a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800807c:	e023      	b.n	80080c6 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800807e:	78fb      	ldrb	r3, [r7, #3]
 8008080:	015a      	lsls	r2, r3, #5
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	4413      	add	r3, r2
 8008086:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800808a:	461a      	mov	r2, r3
 800808c:	f240 2325 	movw	r3, #549	@ 0x225
 8008090:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008092:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008096:	2b00      	cmp	r3, #0
 8008098:	da17      	bge.n	80080ca <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800809a:	78fb      	ldrb	r3, [r7, #3]
 800809c:	015a      	lsls	r2, r3, #5
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	4413      	add	r3, r2
 80080a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	78fa      	ldrb	r2, [r7, #3]
 80080aa:	0151      	lsls	r1, r2, #5
 80080ac:	693a      	ldr	r2, [r7, #16]
 80080ae:	440a      	add	r2, r1
 80080b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080b4:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80080b8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80080ba:	e006      	b.n	80080ca <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	77fb      	strb	r3, [r7, #31]
      break;
 80080c0:	e004      	b.n	80080cc <USB_HC_Init+0x148>
      break;
 80080c2:	bf00      	nop
 80080c4:	e002      	b.n	80080cc <USB_HC_Init+0x148>
      break;
 80080c6:	bf00      	nop
 80080c8:	e000      	b.n	80080cc <USB_HC_Init+0x148>
      break;
 80080ca:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80080cc:	78fb      	ldrb	r3, [r7, #3]
 80080ce:	015a      	lsls	r2, r3, #5
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	4413      	add	r3, r2
 80080d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080d8:	461a      	mov	r2, r3
 80080da:	2300      	movs	r3, #0
 80080dc:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80080de:	78fb      	ldrb	r3, [r7, #3]
 80080e0:	015a      	lsls	r2, r3, #5
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	4413      	add	r3, r2
 80080e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	78fa      	ldrb	r2, [r7, #3]
 80080ee:	0151      	lsls	r1, r2, #5
 80080f0:	693a      	ldr	r2, [r7, #16]
 80080f2:	440a      	add	r2, r1
 80080f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080f8:	f043 0302 	orr.w	r3, r3, #2
 80080fc:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008104:	699a      	ldr	r2, [r3, #24]
 8008106:	78fb      	ldrb	r3, [r7, #3]
 8008108:	f003 030f 	and.w	r3, r3, #15
 800810c:	2101      	movs	r1, #1
 800810e:	fa01 f303 	lsl.w	r3, r1, r3
 8008112:	6939      	ldr	r1, [r7, #16]
 8008114:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008118:	4313      	orrs	r3, r2
 800811a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	699b      	ldr	r3, [r3, #24]
 8008120:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008128:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800812c:	2b00      	cmp	r3, #0
 800812e:	da03      	bge.n	8008138 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008130:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008134:	61bb      	str	r3, [r7, #24]
 8008136:	e001      	b.n	800813c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8008138:	2300      	movs	r3, #0
 800813a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f7ff fef9 	bl	8007f34 <USB_GetHostSpeed>
 8008142:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008144:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008148:	2b02      	cmp	r3, #2
 800814a:	d106      	bne.n	800815a <USB_HC_Init+0x1d6>
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2b02      	cmp	r3, #2
 8008150:	d003      	beq.n	800815a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008152:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008156:	617b      	str	r3, [r7, #20]
 8008158:	e001      	b.n	800815e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800815a:	2300      	movs	r3, #0
 800815c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800815e:	787b      	ldrb	r3, [r7, #1]
 8008160:	059b      	lsls	r3, r3, #22
 8008162:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008166:	78bb      	ldrb	r3, [r7, #2]
 8008168:	02db      	lsls	r3, r3, #11
 800816a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800816e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008170:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008174:	049b      	lsls	r3, r3, #18
 8008176:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800817a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800817c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800817e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008182:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	431a      	orrs	r2, r3
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800818c:	78fa      	ldrb	r2, [r7, #3]
 800818e:	0151      	lsls	r1, r2, #5
 8008190:	693a      	ldr	r2, [r7, #16]
 8008192:	440a      	add	r2, r1
 8008194:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008198:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800819c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800819e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80081a2:	2b03      	cmp	r3, #3
 80081a4:	d003      	beq.n	80081ae <USB_HC_Init+0x22a>
 80081a6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d10f      	bne.n	80081ce <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80081ae:	78fb      	ldrb	r3, [r7, #3]
 80081b0:	015a      	lsls	r2, r3, #5
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	4413      	add	r3, r2
 80081b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	78fa      	ldrb	r2, [r7, #3]
 80081be:	0151      	lsls	r1, r2, #5
 80081c0:	693a      	ldr	r2, [r7, #16]
 80081c2:	440a      	add	r2, r1
 80081c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80081c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80081cc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80081ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3720      	adds	r7, #32
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	40040000 	.word	0x40040000

080081dc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b08c      	sub	sp, #48	@ 0x30
 80081e0:	af02      	add	r7, sp, #8
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	4613      	mov	r3, r2
 80081e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	785b      	ldrb	r3, [r3, #1]
 80081f2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80081f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80081f8:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	4a5d      	ldr	r2, [pc, #372]	@ (8008374 <USB_HC_StartXfer+0x198>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d12f      	bne.n	8008262 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8008202:	79fb      	ldrb	r3, [r7, #7]
 8008204:	2b01      	cmp	r3, #1
 8008206:	d11c      	bne.n	8008242 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	7c9b      	ldrb	r3, [r3, #18]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d003      	beq.n	8008218 <USB_HC_StartXfer+0x3c>
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	7c9b      	ldrb	r3, [r3, #18]
 8008214:	2b02      	cmp	r3, #2
 8008216:	d124      	bne.n	8008262 <USB_HC_StartXfer+0x86>
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	799b      	ldrb	r3, [r3, #6]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d120      	bne.n	8008262 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	015a      	lsls	r2, r3, #5
 8008224:	6a3b      	ldr	r3, [r7, #32]
 8008226:	4413      	add	r3, r2
 8008228:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	69fa      	ldr	r2, [r7, #28]
 8008230:	0151      	lsls	r1, r2, #5
 8008232:	6a3a      	ldr	r2, [r7, #32]
 8008234:	440a      	add	r2, r1
 8008236:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800823a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800823e:	60d3      	str	r3, [r2, #12]
 8008240:	e00f      	b.n	8008262 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	791b      	ldrb	r3, [r3, #4]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d10b      	bne.n	8008262 <USB_HC_StartXfer+0x86>
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	795b      	ldrb	r3, [r3, #5]
 800824e:	2b01      	cmp	r3, #1
 8008250:	d107      	bne.n	8008262 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	785b      	ldrb	r3, [r3, #1]
 8008256:	4619      	mov	r1, r3
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	f000 fb6b 	bl	8008934 <USB_DoPing>
        return HAL_OK;
 800825e:	2300      	movs	r3, #0
 8008260:	e232      	b.n	80086c8 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	799b      	ldrb	r3, [r3, #6]
 8008266:	2b01      	cmp	r3, #1
 8008268:	d158      	bne.n	800831c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800826a:	2301      	movs	r3, #1
 800826c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	78db      	ldrb	r3, [r3, #3]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d007      	beq.n	8008286 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008276:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008278:	68ba      	ldr	r2, [r7, #8]
 800827a:	8a92      	ldrh	r2, [r2, #20]
 800827c:	fb03 f202 	mul.w	r2, r3, r2
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	61da      	str	r2, [r3, #28]
 8008284:	e07c      	b.n	8008380 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	7c9b      	ldrb	r3, [r3, #18]
 800828a:	2b01      	cmp	r3, #1
 800828c:	d130      	bne.n	80082f0 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	6a1b      	ldr	r3, [r3, #32]
 8008292:	2bbc      	cmp	r3, #188	@ 0xbc
 8008294:	d918      	bls.n	80082c8 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	8a9b      	ldrh	r3, [r3, #20]
 800829a:	461a      	mov	r2, r3
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	69da      	ldr	r2, [r3, #28]
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d003      	beq.n	80082b8 <USB_HC_StartXfer+0xdc>
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	2b02      	cmp	r3, #2
 80082b6:	d103      	bne.n	80082c0 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	2202      	movs	r2, #2
 80082bc:	60da      	str	r2, [r3, #12]
 80082be:	e05f      	b.n	8008380 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	2201      	movs	r2, #1
 80082c4:	60da      	str	r2, [r3, #12]
 80082c6:	e05b      	b.n	8008380 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	6a1a      	ldr	r2, [r3, #32]
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d007      	beq.n	80082e8 <USB_HC_StartXfer+0x10c>
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	2b02      	cmp	r3, #2
 80082de:	d003      	beq.n	80082e8 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	2204      	movs	r2, #4
 80082e4:	60da      	str	r2, [r3, #12]
 80082e6:	e04b      	b.n	8008380 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	2203      	movs	r2, #3
 80082ec:	60da      	str	r2, [r3, #12]
 80082ee:	e047      	b.n	8008380 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80082f0:	79fb      	ldrb	r3, [r7, #7]
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d10d      	bne.n	8008312 <USB_HC_StartXfer+0x136>
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	6a1b      	ldr	r3, [r3, #32]
 80082fa:	68ba      	ldr	r2, [r7, #8]
 80082fc:	8a92      	ldrh	r2, [r2, #20]
 80082fe:	4293      	cmp	r3, r2
 8008300:	d907      	bls.n	8008312 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008302:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008304:	68ba      	ldr	r2, [r7, #8]
 8008306:	8a92      	ldrh	r2, [r2, #20]
 8008308:	fb03 f202 	mul.w	r2, r3, r2
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	61da      	str	r2, [r3, #28]
 8008310:	e036      	b.n	8008380 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	6a1a      	ldr	r2, [r3, #32]
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	61da      	str	r2, [r3, #28]
 800831a:	e031      	b.n	8008380 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	6a1b      	ldr	r3, [r3, #32]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d018      	beq.n	8008356 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	6a1b      	ldr	r3, [r3, #32]
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	8a92      	ldrh	r2, [r2, #20]
 800832c:	4413      	add	r3, r2
 800832e:	3b01      	subs	r3, #1
 8008330:	68ba      	ldr	r2, [r7, #8]
 8008332:	8a92      	ldrh	r2, [r2, #20]
 8008334:	fbb3 f3f2 	udiv	r3, r3, r2
 8008338:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800833a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800833c:	8b7b      	ldrh	r3, [r7, #26]
 800833e:	429a      	cmp	r2, r3
 8008340:	d90b      	bls.n	800835a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8008342:	8b7b      	ldrh	r3, [r7, #26]
 8008344:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008346:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008348:	68ba      	ldr	r2, [r7, #8]
 800834a:	8a92      	ldrh	r2, [r2, #20]
 800834c:	fb03 f202 	mul.w	r2, r3, r2
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	61da      	str	r2, [r3, #28]
 8008354:	e001      	b.n	800835a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8008356:	2301      	movs	r3, #1
 8008358:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	78db      	ldrb	r3, [r3, #3]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00a      	beq.n	8008378 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008362:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008364:	68ba      	ldr	r2, [r7, #8]
 8008366:	8a92      	ldrh	r2, [r2, #20]
 8008368:	fb03 f202 	mul.w	r2, r3, r2
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	61da      	str	r2, [r3, #28]
 8008370:	e006      	b.n	8008380 <USB_HC_StartXfer+0x1a4>
 8008372:	bf00      	nop
 8008374:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	6a1a      	ldr	r2, [r3, #32]
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	69db      	ldr	r3, [r3, #28]
 8008384:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008388:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800838a:	04d9      	lsls	r1, r3, #19
 800838c:	4ba3      	ldr	r3, [pc, #652]	@ (800861c <USB_HC_StartXfer+0x440>)
 800838e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008390:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	7d9b      	ldrb	r3, [r3, #22]
 8008396:	075b      	lsls	r3, r3, #29
 8008398:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800839c:	69f9      	ldr	r1, [r7, #28]
 800839e:	0148      	lsls	r0, r1, #5
 80083a0:	6a39      	ldr	r1, [r7, #32]
 80083a2:	4401      	add	r1, r0
 80083a4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80083a8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80083aa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80083ac:	79fb      	ldrb	r3, [r7, #7]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d009      	beq.n	80083c6 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	6999      	ldr	r1, [r3, #24]
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	015a      	lsls	r2, r3, #5
 80083ba:	6a3b      	ldr	r3, [r7, #32]
 80083bc:	4413      	add	r3, r2
 80083be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083c2:	460a      	mov	r2, r1
 80083c4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80083c6:	6a3b      	ldr	r3, [r7, #32]
 80083c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	f003 0301 	and.w	r3, r3, #1
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	bf0c      	ite	eq
 80083d6:	2301      	moveq	r3, #1
 80083d8:	2300      	movne	r3, #0
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	015a      	lsls	r2, r3, #5
 80083e2:	6a3b      	ldr	r3, [r7, #32]
 80083e4:	4413      	add	r3, r2
 80083e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	69fa      	ldr	r2, [r7, #28]
 80083ee:	0151      	lsls	r1, r2, #5
 80083f0:	6a3a      	ldr	r2, [r7, #32]
 80083f2:	440a      	add	r2, r1
 80083f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80083f8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80083fc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80083fe:	69fb      	ldr	r3, [r7, #28]
 8008400:	015a      	lsls	r2, r3, #5
 8008402:	6a3b      	ldr	r3, [r7, #32]
 8008404:	4413      	add	r3, r2
 8008406:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	7e7b      	ldrb	r3, [r7, #25]
 800840e:	075b      	lsls	r3, r3, #29
 8008410:	69f9      	ldr	r1, [r7, #28]
 8008412:	0148      	lsls	r0, r1, #5
 8008414:	6a39      	ldr	r1, [r7, #32]
 8008416:	4401      	add	r1, r0
 8008418:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800841c:	4313      	orrs	r3, r2
 800841e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	799b      	ldrb	r3, [r3, #6]
 8008424:	2b01      	cmp	r3, #1
 8008426:	f040 80c3 	bne.w	80085b0 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	7c5b      	ldrb	r3, [r3, #17]
 800842e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008430:	68ba      	ldr	r2, [r7, #8]
 8008432:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008434:	4313      	orrs	r3, r2
 8008436:	69fa      	ldr	r2, [r7, #28]
 8008438:	0151      	lsls	r1, r2, #5
 800843a:	6a3a      	ldr	r2, [r7, #32]
 800843c:	440a      	add	r2, r1
 800843e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008442:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008446:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	015a      	lsls	r2, r3, #5
 800844c:	6a3b      	ldr	r3, [r7, #32]
 800844e:	4413      	add	r3, r2
 8008450:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	69fa      	ldr	r2, [r7, #28]
 8008458:	0151      	lsls	r1, r2, #5
 800845a:	6a3a      	ldr	r2, [r7, #32]
 800845c:	440a      	add	r2, r1
 800845e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008462:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008466:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	79db      	ldrb	r3, [r3, #7]
 800846c:	2b01      	cmp	r3, #1
 800846e:	d123      	bne.n	80084b8 <USB_HC_StartXfer+0x2dc>
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	78db      	ldrb	r3, [r3, #3]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d11f      	bne.n	80084b8 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008478:	69fb      	ldr	r3, [r7, #28]
 800847a:	015a      	lsls	r2, r3, #5
 800847c:	6a3b      	ldr	r3, [r7, #32]
 800847e:	4413      	add	r3, r2
 8008480:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	69fa      	ldr	r2, [r7, #28]
 8008488:	0151      	lsls	r1, r2, #5
 800848a:	6a3a      	ldr	r2, [r7, #32]
 800848c:	440a      	add	r2, r1
 800848e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008492:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008496:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008498:	69fb      	ldr	r3, [r7, #28]
 800849a:	015a      	lsls	r2, r3, #5
 800849c:	6a3b      	ldr	r3, [r7, #32]
 800849e:	4413      	add	r3, r2
 80084a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	69fa      	ldr	r2, [r7, #28]
 80084a8:	0151      	lsls	r1, r2, #5
 80084aa:	6a3a      	ldr	r2, [r7, #32]
 80084ac:	440a      	add	r2, r1
 80084ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80084b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084b6:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	7c9b      	ldrb	r3, [r3, #18]
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d003      	beq.n	80084c8 <USB_HC_StartXfer+0x2ec>
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	7c9b      	ldrb	r3, [r3, #18]
 80084c4:	2b03      	cmp	r3, #3
 80084c6:	d117      	bne.n	80084f8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d113      	bne.n	80084f8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	78db      	ldrb	r3, [r3, #3]
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d10f      	bne.n	80084f8 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	015a      	lsls	r2, r3, #5
 80084dc:	6a3b      	ldr	r3, [r7, #32]
 80084de:	4413      	add	r3, r2
 80084e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	69fa      	ldr	r2, [r7, #28]
 80084e8:	0151      	lsls	r1, r2, #5
 80084ea:	6a3a      	ldr	r2, [r7, #32]
 80084ec:	440a      	add	r2, r1
 80084ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80084f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80084f6:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	7c9b      	ldrb	r3, [r3, #18]
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d162      	bne.n	80085c6 <USB_HC_StartXfer+0x3ea>
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	78db      	ldrb	r3, [r3, #3]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d15e      	bne.n	80085c6 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	3b01      	subs	r3, #1
 800850e:	2b03      	cmp	r3, #3
 8008510:	d858      	bhi.n	80085c4 <USB_HC_StartXfer+0x3e8>
 8008512:	a201      	add	r2, pc, #4	@ (adr r2, 8008518 <USB_HC_StartXfer+0x33c>)
 8008514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008518:	08008529 	.word	0x08008529
 800851c:	0800854b 	.word	0x0800854b
 8008520:	0800856d 	.word	0x0800856d
 8008524:	0800858f 	.word	0x0800858f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	015a      	lsls	r2, r3, #5
 800852c:	6a3b      	ldr	r3, [r7, #32]
 800852e:	4413      	add	r3, r2
 8008530:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	69fa      	ldr	r2, [r7, #28]
 8008538:	0151      	lsls	r1, r2, #5
 800853a:	6a3a      	ldr	r2, [r7, #32]
 800853c:	440a      	add	r2, r1
 800853e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008542:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008546:	6053      	str	r3, [r2, #4]
          break;
 8008548:	e03d      	b.n	80085c6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	015a      	lsls	r2, r3, #5
 800854e:	6a3b      	ldr	r3, [r7, #32]
 8008550:	4413      	add	r3, r2
 8008552:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	69fa      	ldr	r2, [r7, #28]
 800855a:	0151      	lsls	r1, r2, #5
 800855c:	6a3a      	ldr	r2, [r7, #32]
 800855e:	440a      	add	r2, r1
 8008560:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008564:	f043 030e 	orr.w	r3, r3, #14
 8008568:	6053      	str	r3, [r2, #4]
          break;
 800856a:	e02c      	b.n	80085c6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	015a      	lsls	r2, r3, #5
 8008570:	6a3b      	ldr	r3, [r7, #32]
 8008572:	4413      	add	r3, r2
 8008574:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	69fa      	ldr	r2, [r7, #28]
 800857c:	0151      	lsls	r1, r2, #5
 800857e:	6a3a      	ldr	r2, [r7, #32]
 8008580:	440a      	add	r2, r1
 8008582:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008586:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800858a:	6053      	str	r3, [r2, #4]
          break;
 800858c:	e01b      	b.n	80085c6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	015a      	lsls	r2, r3, #5
 8008592:	6a3b      	ldr	r3, [r7, #32]
 8008594:	4413      	add	r3, r2
 8008596:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	69fa      	ldr	r2, [r7, #28]
 800859e:	0151      	lsls	r1, r2, #5
 80085a0:	6a3a      	ldr	r2, [r7, #32]
 80085a2:	440a      	add	r2, r1
 80085a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80085ac:	6053      	str	r3, [r2, #4]
          break;
 80085ae:	e00a      	b.n	80085c6 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	015a      	lsls	r2, r3, #5
 80085b4:	6a3b      	ldr	r3, [r7, #32]
 80085b6:	4413      	add	r3, r2
 80085b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085bc:	461a      	mov	r2, r3
 80085be:	2300      	movs	r3, #0
 80085c0:	6053      	str	r3, [r2, #4]
 80085c2:	e000      	b.n	80085c6 <USB_HC_StartXfer+0x3ea>
          break;
 80085c4:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	015a      	lsls	r2, r3, #5
 80085ca:	6a3b      	ldr	r3, [r7, #32]
 80085cc:	4413      	add	r3, r2
 80085ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80085dc:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	78db      	ldrb	r3, [r3, #3]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d004      	beq.n	80085f0 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085ec:	613b      	str	r3, [r7, #16]
 80085ee:	e003      	b.n	80085f8 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80085f6:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80085fe:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	015a      	lsls	r2, r3, #5
 8008604:	6a3b      	ldr	r3, [r7, #32]
 8008606:	4413      	add	r3, r2
 8008608:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800860c:	461a      	mov	r2, r3
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008612:	79fb      	ldrb	r3, [r7, #7]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d003      	beq.n	8008620 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8008618:	2300      	movs	r3, #0
 800861a:	e055      	b.n	80086c8 <USB_HC_StartXfer+0x4ec>
 800861c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	78db      	ldrb	r3, [r3, #3]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d14e      	bne.n	80086c6 <USB_HC_StartXfer+0x4ea>
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	6a1b      	ldr	r3, [r3, #32]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d04a      	beq.n	80086c6 <USB_HC_StartXfer+0x4ea>
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	79db      	ldrb	r3, [r3, #7]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d146      	bne.n	80086c6 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	7c9b      	ldrb	r3, [r3, #18]
 800863c:	2b03      	cmp	r3, #3
 800863e:	d831      	bhi.n	80086a4 <USB_HC_StartXfer+0x4c8>
 8008640:	a201      	add	r2, pc, #4	@ (adr r2, 8008648 <USB_HC_StartXfer+0x46c>)
 8008642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008646:	bf00      	nop
 8008648:	08008659 	.word	0x08008659
 800864c:	0800867d 	.word	0x0800867d
 8008650:	08008659 	.word	0x08008659
 8008654:	0800867d 	.word	0x0800867d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	6a1b      	ldr	r3, [r3, #32]
 800865c:	3303      	adds	r3, #3
 800865e:	089b      	lsrs	r3, r3, #2
 8008660:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008662:	8afa      	ldrh	r2, [r7, #22]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008668:	b29b      	uxth	r3, r3
 800866a:	429a      	cmp	r2, r3
 800866c:	d91c      	bls.n	80086a8 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	699b      	ldr	r3, [r3, #24]
 8008672:	f043 0220 	orr.w	r2, r3, #32
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	619a      	str	r2, [r3, #24]
        }
        break;
 800867a:	e015      	b.n	80086a8 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	6a1b      	ldr	r3, [r3, #32]
 8008680:	3303      	adds	r3, #3
 8008682:	089b      	lsrs	r3, r3, #2
 8008684:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008686:	8afa      	ldrh	r2, [r7, #22]
 8008688:	6a3b      	ldr	r3, [r7, #32]
 800868a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800868e:	691b      	ldr	r3, [r3, #16]
 8008690:	b29b      	uxth	r3, r3
 8008692:	429a      	cmp	r2, r3
 8008694:	d90a      	bls.n	80086ac <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	699b      	ldr	r3, [r3, #24]
 800869a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	619a      	str	r2, [r3, #24]
        }
        break;
 80086a2:	e003      	b.n	80086ac <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80086a4:	bf00      	nop
 80086a6:	e002      	b.n	80086ae <USB_HC_StartXfer+0x4d2>
        break;
 80086a8:	bf00      	nop
 80086aa:	e000      	b.n	80086ae <USB_HC_StartXfer+0x4d2>
        break;
 80086ac:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	6999      	ldr	r1, [r3, #24]
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	785a      	ldrb	r2, [r3, #1]
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	6a1b      	ldr	r3, [r3, #32]
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	2000      	movs	r0, #0
 80086be:	9000      	str	r0, [sp, #0]
 80086c0:	68f8      	ldr	r0, [r7, #12]
 80086c2:	f7ff f9c3 	bl	8007a4c <USB_WritePacket>
  }

  return HAL_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3728      	adds	r7, #40	@ 0x28
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b085      	sub	sp, #20
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80086e2:	695b      	ldr	r3, [r3, #20]
 80086e4:	b29b      	uxth	r3, r3
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3714      	adds	r7, #20
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr

080086f2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80086f2:	b480      	push	{r7}
 80086f4:	b089      	sub	sp, #36	@ 0x24
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
 80086fa:	460b      	mov	r3, r1
 80086fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008702:	78fb      	ldrb	r3, [r7, #3]
 8008704:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008706:	2300      	movs	r3, #0
 8008708:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	015a      	lsls	r2, r3, #5
 800870e:	69fb      	ldr	r3, [r7, #28]
 8008710:	4413      	add	r3, r2
 8008712:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	0c9b      	lsrs	r3, r3, #18
 800871a:	f003 0303 	and.w	r3, r3, #3
 800871e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008720:	69bb      	ldr	r3, [r7, #24]
 8008722:	015a      	lsls	r2, r3, #5
 8008724:	69fb      	ldr	r3, [r7, #28]
 8008726:	4413      	add	r3, r2
 8008728:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	0fdb      	lsrs	r3, r3, #31
 8008730:	f003 0301 	and.w	r3, r3, #1
 8008734:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	015a      	lsls	r2, r3, #5
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	4413      	add	r3, r2
 800873e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	0fdb      	lsrs	r3, r3, #31
 8008746:	f003 0301 	and.w	r3, r3, #1
 800874a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	f003 0320 	and.w	r3, r3, #32
 8008754:	2b20      	cmp	r3, #32
 8008756:	d10d      	bne.n	8008774 <USB_HC_Halt+0x82>
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d10a      	bne.n	8008774 <USB_HC_Halt+0x82>
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d005      	beq.n	8008770 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	2b01      	cmp	r3, #1
 8008768:	d002      	beq.n	8008770 <USB_HC_Halt+0x7e>
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	2b03      	cmp	r3, #3
 800876e:	d101      	bne.n	8008774 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008770:	2300      	movs	r3, #0
 8008772:	e0d8      	b.n	8008926 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d002      	beq.n	8008780 <USB_HC_Halt+0x8e>
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	2b02      	cmp	r3, #2
 800877e:	d173      	bne.n	8008868 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	015a      	lsls	r2, r3, #5
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	4413      	add	r3, r2
 8008788:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	69ba      	ldr	r2, [r7, #24]
 8008790:	0151      	lsls	r1, r2, #5
 8008792:	69fa      	ldr	r2, [r7, #28]
 8008794:	440a      	add	r2, r1
 8008796:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800879a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800879e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	f003 0320 	and.w	r3, r3, #32
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d14a      	bne.n	8008842 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d133      	bne.n	8008820 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80087b8:	69bb      	ldr	r3, [r7, #24]
 80087ba:	015a      	lsls	r2, r3, #5
 80087bc:	69fb      	ldr	r3, [r7, #28]
 80087be:	4413      	add	r3, r2
 80087c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	69ba      	ldr	r2, [r7, #24]
 80087c8:	0151      	lsls	r1, r2, #5
 80087ca:	69fa      	ldr	r2, [r7, #28]
 80087cc:	440a      	add	r2, r1
 80087ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80087d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80087d6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80087d8:	69bb      	ldr	r3, [r7, #24]
 80087da:	015a      	lsls	r2, r3, #5
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	4413      	add	r3, r2
 80087e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	69ba      	ldr	r2, [r7, #24]
 80087e8:	0151      	lsls	r1, r2, #5
 80087ea:	69fa      	ldr	r2, [r7, #28]
 80087ec:	440a      	add	r2, r1
 80087ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80087f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80087f6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	3301      	adds	r3, #1
 80087fc:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008804:	d82e      	bhi.n	8008864 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	015a      	lsls	r2, r3, #5
 800880a:	69fb      	ldr	r3, [r7, #28]
 800880c:	4413      	add	r3, r2
 800880e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008818:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800881c:	d0ec      	beq.n	80087f8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800881e:	e081      	b.n	8008924 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008820:	69bb      	ldr	r3, [r7, #24]
 8008822:	015a      	lsls	r2, r3, #5
 8008824:	69fb      	ldr	r3, [r7, #28]
 8008826:	4413      	add	r3, r2
 8008828:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	69ba      	ldr	r2, [r7, #24]
 8008830:	0151      	lsls	r1, r2, #5
 8008832:	69fa      	ldr	r2, [r7, #28]
 8008834:	440a      	add	r2, r1
 8008836:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800883a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800883e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008840:	e070      	b.n	8008924 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008842:	69bb      	ldr	r3, [r7, #24]
 8008844:	015a      	lsls	r2, r3, #5
 8008846:	69fb      	ldr	r3, [r7, #28]
 8008848:	4413      	add	r3, r2
 800884a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	69ba      	ldr	r2, [r7, #24]
 8008852:	0151      	lsls	r1, r2, #5
 8008854:	69fa      	ldr	r2, [r7, #28]
 8008856:	440a      	add	r2, r1
 8008858:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800885c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008860:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008862:	e05f      	b.n	8008924 <USB_HC_Halt+0x232>
            break;
 8008864:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008866:	e05d      	b.n	8008924 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008868:	69bb      	ldr	r3, [r7, #24]
 800886a:	015a      	lsls	r2, r3, #5
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	4413      	add	r3, r2
 8008870:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	69ba      	ldr	r2, [r7, #24]
 8008878:	0151      	lsls	r1, r2, #5
 800887a:	69fa      	ldr	r2, [r7, #28]
 800887c:	440a      	add	r2, r1
 800887e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008882:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008886:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008888:	69fb      	ldr	r3, [r7, #28]
 800888a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800888e:	691b      	ldr	r3, [r3, #16]
 8008890:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008894:	2b00      	cmp	r3, #0
 8008896:	d133      	bne.n	8008900 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008898:	69bb      	ldr	r3, [r7, #24]
 800889a:	015a      	lsls	r2, r3, #5
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	4413      	add	r3, r2
 80088a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	69ba      	ldr	r2, [r7, #24]
 80088a8:	0151      	lsls	r1, r2, #5
 80088aa:	69fa      	ldr	r2, [r7, #28]
 80088ac:	440a      	add	r2, r1
 80088ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80088b6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	015a      	lsls	r2, r3, #5
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	4413      	add	r3, r2
 80088c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	69ba      	ldr	r2, [r7, #24]
 80088c8:	0151      	lsls	r1, r2, #5
 80088ca:	69fa      	ldr	r2, [r7, #28]
 80088cc:	440a      	add	r2, r1
 80088ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80088d6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	3301      	adds	r3, #1
 80088dc:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80088e4:	d81d      	bhi.n	8008922 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80088e6:	69bb      	ldr	r3, [r7, #24]
 80088e8:	015a      	lsls	r2, r3, #5
 80088ea:	69fb      	ldr	r3, [r7, #28]
 80088ec:	4413      	add	r3, r2
 80088ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80088f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80088fc:	d0ec      	beq.n	80088d8 <USB_HC_Halt+0x1e6>
 80088fe:	e011      	b.n	8008924 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	015a      	lsls	r2, r3, #5
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	4413      	add	r3, r2
 8008908:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	69ba      	ldr	r2, [r7, #24]
 8008910:	0151      	lsls	r1, r2, #5
 8008912:	69fa      	ldr	r2, [r7, #28]
 8008914:	440a      	add	r2, r1
 8008916:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800891a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800891e:	6013      	str	r3, [r2, #0]
 8008920:	e000      	b.n	8008924 <USB_HC_Halt+0x232>
          break;
 8008922:	bf00      	nop
    }
  }

  return HAL_OK;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3724      	adds	r7, #36	@ 0x24
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr
	...

08008934 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008934:	b480      	push	{r7}
 8008936:	b087      	sub	sp, #28
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	460b      	mov	r3, r1
 800893e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008944:	78fb      	ldrb	r3, [r7, #3]
 8008946:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008948:	2301      	movs	r3, #1
 800894a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	04da      	lsls	r2, r3, #19
 8008950:	4b15      	ldr	r3, [pc, #84]	@ (80089a8 <USB_DoPing+0x74>)
 8008952:	4013      	ands	r3, r2
 8008954:	693a      	ldr	r2, [r7, #16]
 8008956:	0151      	lsls	r1, r2, #5
 8008958:	697a      	ldr	r2, [r7, #20]
 800895a:	440a      	add	r2, r1
 800895c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008960:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008964:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	015a      	lsls	r2, r3, #5
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	4413      	add	r3, r2
 800896e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800897c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008984:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	015a      	lsls	r2, r3, #5
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	4413      	add	r3, r2
 800898e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008992:	461a      	mov	r2, r3
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008998:	2300      	movs	r3, #0
}
 800899a:	4618      	mov	r0, r3
 800899c:	371c      	adds	r7, #28
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr
 80089a6:	bf00      	nop
 80089a8:	1ff80000 	.word	0x1ff80000

080089ac <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b088      	sub	sp, #32
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80089b4:	2300      	movs	r3, #0
 80089b6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80089bc:	2300      	movs	r3, #0
 80089be:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f7fe ff86 	bl	80078d2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80089c6:	2110      	movs	r1, #16
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f7fe ffdf 	bl	800798c <USB_FlushTxFifo>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d001      	beq.n	80089d8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f7ff f809 	bl	80079f0 <USB_FlushRxFifo>
 80089de:	4603      	mov	r3, r0
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d001      	beq.n	80089e8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80089e4:	2301      	movs	r3, #1
 80089e6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80089e8:	2300      	movs	r3, #0
 80089ea:	61bb      	str	r3, [r7, #24]
 80089ec:	e01f      	b.n	8008a2e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80089ee:	69bb      	ldr	r3, [r7, #24]
 80089f0:	015a      	lsls	r2, r3, #5
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	4413      	add	r3, r2
 80089f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008a04:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008a0c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008a14:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	015a      	lsls	r2, r3, #5
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a22:	461a      	mov	r2, r3
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008a28:	69bb      	ldr	r3, [r7, #24]
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	61bb      	str	r3, [r7, #24]
 8008a2e:	69bb      	ldr	r3, [r7, #24]
 8008a30:	2b0f      	cmp	r3, #15
 8008a32:	d9dc      	bls.n	80089ee <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008a34:	2300      	movs	r3, #0
 8008a36:	61bb      	str	r3, [r7, #24]
 8008a38:	e034      	b.n	8008aa4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	015a      	lsls	r2, r3, #5
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	4413      	add	r3, r2
 8008a42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008a50:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008a58:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008a60:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008a62:	69bb      	ldr	r3, [r7, #24]
 8008a64:	015a      	lsls	r2, r3, #5
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	4413      	add	r3, r2
 8008a6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a6e:	461a      	mov	r2, r3
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	3301      	adds	r3, #1
 8008a78:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008a80:	d80c      	bhi.n	8008a9c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	015a      	lsls	r2, r3, #5
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	4413      	add	r3, r2
 8008a8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008a94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008a98:	d0ec      	beq.n	8008a74 <USB_StopHost+0xc8>
 8008a9a:	e000      	b.n	8008a9e <USB_StopHost+0xf2>
        break;
 8008a9c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	61bb      	str	r3, [r7, #24]
 8008aa4:	69bb      	ldr	r3, [r7, #24]
 8008aa6:	2b0f      	cmp	r3, #15
 8008aa8:	d9c7      	bls.n	8008a3a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ab6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f04f 32ff 	mov.w	r2, #4294967295
 8008abe:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f7fe fef5 	bl	80078b0 <USB_EnableGlobalInt>

  return ret;
 8008ac6:	7ffb      	ldrb	r3, [r7, #31]
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3720      	adds	r7, #32
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008ad0:	b590      	push	{r4, r7, lr}
 8008ad2:	b089      	sub	sp, #36	@ 0x24
 8008ad4:	af04      	add	r7, sp, #16
 8008ad6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008ad8:	2301      	movs	r3, #1
 8008ada:	2202      	movs	r2, #2
 8008adc:	2102      	movs	r1, #2
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 fc83 	bl	80093ea <USBH_FindInterface>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008ae8:	7bfb      	ldrb	r3, [r7, #15]
 8008aea:	2bff      	cmp	r3, #255	@ 0xff
 8008aec:	d002      	beq.n	8008af4 <USBH_CDC_InterfaceInit+0x24>
 8008aee:	7bfb      	ldrb	r3, [r7, #15]
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d901      	bls.n	8008af8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008af4:	2302      	movs	r3, #2
 8008af6:	e13d      	b.n	8008d74 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008af8:	7bfb      	ldrb	r3, [r7, #15]
 8008afa:	4619      	mov	r1, r3
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 fc58 	bl	80093b2 <USBH_SelectInterface>
 8008b02:	4603      	mov	r3, r0
 8008b04:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008b06:	7bbb      	ldrb	r3, [r7, #14]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d001      	beq.n	8008b10 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008b0c:	2302      	movs	r3, #2
 8008b0e:	e131      	b.n	8008d74 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8008b16:	2050      	movs	r0, #80	@ 0x50
 8008b18:	f002 fb6a 	bl	800b1f0 <malloc>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b26:	69db      	ldr	r3, [r3, #28]
 8008b28:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d101      	bne.n	8008b34 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008b30:	2302      	movs	r3, #2
 8008b32:	e11f      	b.n	8008d74 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008b34:	2250      	movs	r2, #80	@ 0x50
 8008b36:	2100      	movs	r1, #0
 8008b38:	68b8      	ldr	r0, [r7, #8]
 8008b3a:	f002 fd2e 	bl	800b59a <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008b3e:	7bfb      	ldrb	r3, [r7, #15]
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	211a      	movs	r1, #26
 8008b44:	fb01 f303 	mul.w	r3, r1, r3
 8008b48:	4413      	add	r3, r2
 8008b4a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	b25b      	sxtb	r3, r3
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	da15      	bge.n	8008b82 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008b56:	7bfb      	ldrb	r3, [r7, #15]
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	211a      	movs	r1, #26
 8008b5c:	fb01 f303 	mul.w	r3, r1, r3
 8008b60:	4413      	add	r3, r2
 8008b62:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008b66:	781a      	ldrb	r2, [r3, #0]
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008b6c:	7bfb      	ldrb	r3, [r7, #15]
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	211a      	movs	r1, #26
 8008b72:	fb01 f303 	mul.w	r3, r1, r3
 8008b76:	4413      	add	r3, r2
 8008b78:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008b7c:	881a      	ldrh	r2, [r3, #0]
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	785b      	ldrb	r3, [r3, #1]
 8008b86:	4619      	mov	r1, r3
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f001 ffc4 	bl	800ab16 <USBH_AllocPipe>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	461a      	mov	r2, r3
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	7819      	ldrb	r1, [r3, #0]
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	7858      	ldrb	r0, [r3, #1]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008baa:	68ba      	ldr	r2, [r7, #8]
 8008bac:	8952      	ldrh	r2, [r2, #10]
 8008bae:	9202      	str	r2, [sp, #8]
 8008bb0:	2203      	movs	r2, #3
 8008bb2:	9201      	str	r2, [sp, #4]
 8008bb4:	9300      	str	r3, [sp, #0]
 8008bb6:	4623      	mov	r3, r4
 8008bb8:	4602      	mov	r2, r0
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f001 ff7c 	bl	800aab8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f002 fa8b 	bl	800b0e4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008bce:	2300      	movs	r3, #0
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	210a      	movs	r1, #10
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 fc08 	bl	80093ea <USBH_FindInterface>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008bde:	7bfb      	ldrb	r3, [r7, #15]
 8008be0:	2bff      	cmp	r3, #255	@ 0xff
 8008be2:	d002      	beq.n	8008bea <USBH_CDC_InterfaceInit+0x11a>
 8008be4:	7bfb      	ldrb	r3, [r7, #15]
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d901      	bls.n	8008bee <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008bea:	2302      	movs	r3, #2
 8008bec:	e0c2      	b.n	8008d74 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008bee:	7bfb      	ldrb	r3, [r7, #15]
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	211a      	movs	r1, #26
 8008bf4:	fb01 f303 	mul.w	r3, r1, r3
 8008bf8:	4413      	add	r3, r2
 8008bfa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	b25b      	sxtb	r3, r3
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	da16      	bge.n	8008c34 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008c06:	7bfb      	ldrb	r3, [r7, #15]
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	211a      	movs	r1, #26
 8008c0c:	fb01 f303 	mul.w	r3, r1, r3
 8008c10:	4413      	add	r3, r2
 8008c12:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008c16:	781a      	ldrb	r2, [r3, #0]
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008c1c:	7bfb      	ldrb	r3, [r7, #15]
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	211a      	movs	r1, #26
 8008c22:	fb01 f303 	mul.w	r3, r1, r3
 8008c26:	4413      	add	r3, r2
 8008c28:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008c2c:	881a      	ldrh	r2, [r3, #0]
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	835a      	strh	r2, [r3, #26]
 8008c32:	e015      	b.n	8008c60 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008c34:	7bfb      	ldrb	r3, [r7, #15]
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	211a      	movs	r1, #26
 8008c3a:	fb01 f303 	mul.w	r3, r1, r3
 8008c3e:	4413      	add	r3, r2
 8008c40:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008c44:	781a      	ldrb	r2, [r3, #0]
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008c4a:	7bfb      	ldrb	r3, [r7, #15]
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	211a      	movs	r1, #26
 8008c50:	fb01 f303 	mul.w	r3, r1, r3
 8008c54:	4413      	add	r3, r2
 8008c56:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008c5a:	881a      	ldrh	r2, [r3, #0]
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008c60:	7bfb      	ldrb	r3, [r7, #15]
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	211a      	movs	r1, #26
 8008c66:	fb01 f303 	mul.w	r3, r1, r3
 8008c6a:	4413      	add	r3, r2
 8008c6c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	b25b      	sxtb	r3, r3
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	da16      	bge.n	8008ca6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008c78:	7bfb      	ldrb	r3, [r7, #15]
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	211a      	movs	r1, #26
 8008c7e:	fb01 f303 	mul.w	r3, r1, r3
 8008c82:	4413      	add	r3, r2
 8008c84:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008c88:	781a      	ldrb	r2, [r3, #0]
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008c8e:	7bfb      	ldrb	r3, [r7, #15]
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	211a      	movs	r1, #26
 8008c94:	fb01 f303 	mul.w	r3, r1, r3
 8008c98:	4413      	add	r3, r2
 8008c9a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008c9e:	881a      	ldrh	r2, [r3, #0]
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	835a      	strh	r2, [r3, #26]
 8008ca4:	e015      	b.n	8008cd2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008ca6:	7bfb      	ldrb	r3, [r7, #15]
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	211a      	movs	r1, #26
 8008cac:	fb01 f303 	mul.w	r3, r1, r3
 8008cb0:	4413      	add	r3, r2
 8008cb2:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008cb6:	781a      	ldrb	r2, [r3, #0]
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008cbc:	7bfb      	ldrb	r3, [r7, #15]
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	211a      	movs	r1, #26
 8008cc2:	fb01 f303 	mul.w	r3, r1, r3
 8008cc6:	4413      	add	r3, r2
 8008cc8:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008ccc:	881a      	ldrh	r2, [r3, #0]
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	7b9b      	ldrb	r3, [r3, #14]
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f001 ff1c 	bl	800ab16 <USBH_AllocPipe>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	7bdb      	ldrb	r3, [r3, #15]
 8008cea:	4619      	mov	r1, r3
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f001 ff12 	bl	800ab16 <USBH_AllocPipe>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	7b59      	ldrb	r1, [r3, #13]
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	7b98      	ldrb	r0, [r3, #14]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008d0e:	68ba      	ldr	r2, [r7, #8]
 8008d10:	8b12      	ldrh	r2, [r2, #24]
 8008d12:	9202      	str	r2, [sp, #8]
 8008d14:	2202      	movs	r2, #2
 8008d16:	9201      	str	r2, [sp, #4]
 8008d18:	9300      	str	r3, [sp, #0]
 8008d1a:	4623      	mov	r3, r4
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f001 feca 	bl	800aab8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	7b19      	ldrb	r1, [r3, #12]
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	7bd8      	ldrb	r0, [r3, #15]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008d38:	68ba      	ldr	r2, [r7, #8]
 8008d3a:	8b52      	ldrh	r2, [r2, #26]
 8008d3c:	9202      	str	r2, [sp, #8]
 8008d3e:	2202      	movs	r2, #2
 8008d40:	9201      	str	r2, [sp, #4]
 8008d42:	9300      	str	r3, [sp, #0]
 8008d44:	4623      	mov	r3, r4
 8008d46:	4602      	mov	r2, r0
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f001 feb5 	bl	800aab8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	2200      	movs	r2, #0
 8008d52:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	7b5b      	ldrb	r3, [r3, #13]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f002 f9c0 	bl	800b0e4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	7b1b      	ldrb	r3, [r3, #12]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f002 f9b9 	bl	800b0e4 <USBH_LL_SetToggle>

  return USBH_OK;
 8008d72:	2300      	movs	r3, #0
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3714      	adds	r7, #20
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd90      	pop	{r4, r7, pc}

08008d7c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d8a:	69db      	ldr	r3, [r3, #28]
 8008d8c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d00e      	beq.n	8008db4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	4619      	mov	r1, r3
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f001 feaa 	bl	800aaf6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	4619      	mov	r1, r3
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f001 fed5 	bl	800ab58 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2200      	movs	r2, #0
 8008db2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	7b1b      	ldrb	r3, [r3, #12]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d00e      	beq.n	8008dda <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	7b1b      	ldrb	r3, [r3, #12]
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f001 fe97 	bl	800aaf6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	7b1b      	ldrb	r3, [r3, #12]
 8008dcc:	4619      	mov	r1, r3
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f001 fec2 	bl	800ab58 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	7b5b      	ldrb	r3, [r3, #13]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d00e      	beq.n	8008e00 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	7b5b      	ldrb	r3, [r3, #13]
 8008de6:	4619      	mov	r1, r3
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f001 fe84 	bl	800aaf6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	7b5b      	ldrb	r3, [r3, #13]
 8008df2:	4619      	mov	r1, r3
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f001 feaf 	bl	800ab58 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e06:	69db      	ldr	r3, [r3, #28]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d00b      	beq.n	8008e24 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e12:	69db      	ldr	r3, [r3, #28]
 8008e14:	4618      	mov	r0, r3
 8008e16:	f002 f9f3 	bl	800b200 <free>
    phost->pActiveClass->pData = 0U;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e20:	2200      	movs	r2, #0
 8008e22:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008e24:	2300      	movs	r3, #0
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008e2e:	b580      	push	{r7, lr}
 8008e30:	b084      	sub	sp, #16
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e3c:	69db      	ldr	r3, [r3, #28]
 8008e3e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	3340      	adds	r3, #64	@ 0x40
 8008e44:	4619      	mov	r1, r3
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 f8b1 	bl	8008fae <GetLineCoding>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008e50:	7afb      	ldrb	r3, [r7, #11]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d105      	bne.n	8008e62 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008e5c:	2102      	movs	r1, #2
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008e62:	7afb      	ldrb	r3, [r7, #11]
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3710      	adds	r7, #16
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008e74:	2301      	movs	r3, #1
 8008e76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e82:	69db      	ldr	r3, [r3, #28]
 8008e84:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008e8c:	2b04      	cmp	r3, #4
 8008e8e:	d877      	bhi.n	8008f80 <USBH_CDC_Process+0x114>
 8008e90:	a201      	add	r2, pc, #4	@ (adr r2, 8008e98 <USBH_CDC_Process+0x2c>)
 8008e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e96:	bf00      	nop
 8008e98:	08008ead 	.word	0x08008ead
 8008e9c:	08008eb3 	.word	0x08008eb3
 8008ea0:	08008ee3 	.word	0x08008ee3
 8008ea4:	08008f57 	.word	0x08008f57
 8008ea8:	08008f65 	.word	0x08008f65
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008eac:	2300      	movs	r3, #0
 8008eae:	73fb      	strb	r3, [r7, #15]
      break;
 8008eb0:	e06d      	b.n	8008f8e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 f897 	bl	8008fec <SetLineCoding>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008ec2:	7bbb      	ldrb	r3, [r7, #14]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d104      	bne.n	8008ed2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	2202      	movs	r2, #2
 8008ecc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008ed0:	e058      	b.n	8008f84 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008ed2:	7bbb      	ldrb	r3, [r7, #14]
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d055      	beq.n	8008f84 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	2204      	movs	r2, #4
 8008edc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008ee0:	e050      	b.n	8008f84 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	3340      	adds	r3, #64	@ 0x40
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 f860 	bl	8008fae <GetLineCoding>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008ef2:	7bbb      	ldrb	r3, [r7, #14]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d126      	bne.n	8008f46 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	2200      	movs	r2, #0
 8008efc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f0a:	791b      	ldrb	r3, [r3, #4]
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d13b      	bne.n	8008f88 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f1a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d133      	bne.n	8008f88 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f2a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d12b      	bne.n	8008f88 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f38:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d124      	bne.n	8008f88 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 f958 	bl	80091f4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008f44:	e020      	b.n	8008f88 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008f46:	7bbb      	ldrb	r3, [r7, #14]
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d01d      	beq.n	8008f88 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	2204      	movs	r2, #4
 8008f50:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008f54:	e018      	b.n	8008f88 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 f867 	bl	800902a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 f8da 	bl	8009116 <CDC_ProcessReception>
      break;
 8008f62:	e014      	b.n	8008f8e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008f64:	2100      	movs	r1, #0
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f001 f81e 	bl	8009fa8 <USBH_ClrFeature>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008f70:	7bbb      	ldrb	r3, [r7, #14]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d10a      	bne.n	8008f8c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8008f7e:	e005      	b.n	8008f8c <USBH_CDC_Process+0x120>

    default:
      break;
 8008f80:	bf00      	nop
 8008f82:	e004      	b.n	8008f8e <USBH_CDC_Process+0x122>
      break;
 8008f84:	bf00      	nop
 8008f86:	e002      	b.n	8008f8e <USBH_CDC_Process+0x122>
      break;
 8008f88:	bf00      	nop
 8008f8a:	e000      	b.n	8008f8e <USBH_CDC_Process+0x122>
      break;
 8008f8c:	bf00      	nop

  }

  return status;
 8008f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3710      	adds	r7, #16
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	370c      	adds	r7, #12
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr

08008fae <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b082      	sub	sp, #8
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
 8008fb6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	22a1      	movs	r2, #161	@ 0xa1
 8008fbc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2221      	movs	r2, #33	@ 0x21
 8008fc2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2207      	movs	r2, #7
 8008fd4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	2207      	movs	r2, #7
 8008fda:	4619      	mov	r1, r3
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f001 fb17 	bl	800a610 <USBH_CtlReq>
 8008fe2:	4603      	mov	r3, r0
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3708      	adds	r7, #8
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b082      	sub	sp, #8
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2221      	movs	r2, #33	@ 0x21
 8008ffa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2220      	movs	r2, #32
 8009000:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2207      	movs	r2, #7
 8009012:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	2207      	movs	r2, #7
 8009018:	4619      	mov	r1, r3
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f001 faf8 	bl	800a610 <USBH_CtlReq>
 8009020:	4603      	mov	r3, r0
}
 8009022:	4618      	mov	r0, r3
 8009024:	3708      	adds	r7, #8
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b086      	sub	sp, #24
 800902e:	af02      	add	r7, sp, #8
 8009030:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009038:	69db      	ldr	r3, [r3, #28]
 800903a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800903c:	2300      	movs	r3, #0
 800903e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009046:	2b01      	cmp	r3, #1
 8009048:	d002      	beq.n	8009050 <CDC_ProcessTransmission+0x26>
 800904a:	2b02      	cmp	r3, #2
 800904c:	d023      	beq.n	8009096 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800904e:	e05e      	b.n	800910e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009054:	68fa      	ldr	r2, [r7, #12]
 8009056:	8b12      	ldrh	r2, [r2, #24]
 8009058:	4293      	cmp	r3, r2
 800905a:	d90b      	bls.n	8009074 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	69d9      	ldr	r1, [r3, #28]
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	8b1a      	ldrh	r2, [r3, #24]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	7b5b      	ldrb	r3, [r3, #13]
 8009068:	2001      	movs	r0, #1
 800906a:	9000      	str	r0, [sp, #0]
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f001 fce0 	bl	800aa32 <USBH_BulkSendData>
 8009072:	e00b      	b.n	800908c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800907c:	b29a      	uxth	r2, r3
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	7b5b      	ldrb	r3, [r3, #13]
 8009082:	2001      	movs	r0, #1
 8009084:	9000      	str	r0, [sp, #0]
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f001 fcd3 	bl	800aa32 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2202      	movs	r2, #2
 8009090:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009094:	e03b      	b.n	800910e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	7b5b      	ldrb	r3, [r3, #13]
 800909a:	4619      	mov	r1, r3
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f001 fff7 	bl	800b090 <USBH_LL_GetURBState>
 80090a2:	4603      	mov	r3, r0
 80090a4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80090a6:	7afb      	ldrb	r3, [r7, #11]
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d128      	bne.n	80090fe <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090b0:	68fa      	ldr	r2, [r7, #12]
 80090b2:	8b12      	ldrh	r2, [r2, #24]
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d90e      	bls.n	80090d6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090bc:	68fa      	ldr	r2, [r7, #12]
 80090be:	8b12      	ldrh	r2, [r2, #24]
 80090c0:	1a9a      	subs	r2, r3, r2
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	69db      	ldr	r3, [r3, #28]
 80090ca:	68fa      	ldr	r2, [r7, #12]
 80090cc:	8b12      	ldrh	r2, [r2, #24]
 80090ce:	441a      	add	r2, r3
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	61da      	str	r2, [r3, #28]
 80090d4:	e002      	b.n	80090dc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2200      	movs	r2, #0
 80090da:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d004      	beq.n	80090ee <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2201      	movs	r2, #1
 80090e8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80090ec:	e00e      	b.n	800910c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2200      	movs	r2, #0
 80090f2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 f868 	bl	80091cc <USBH_CDC_TransmitCallback>
      break;
 80090fc:	e006      	b.n	800910c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80090fe:	7afb      	ldrb	r3, [r7, #11]
 8009100:	2b02      	cmp	r3, #2
 8009102:	d103      	bne.n	800910c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2201      	movs	r2, #1
 8009108:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800910c:	bf00      	nop
  }
}
 800910e:	bf00      	nop
 8009110:	3710      	adds	r7, #16
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}

08009116 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009116:	b580      	push	{r7, lr}
 8009118:	b086      	sub	sp, #24
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009124:	69db      	ldr	r3, [r3, #28]
 8009126:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009128:	2300      	movs	r3, #0
 800912a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8009132:	2b03      	cmp	r3, #3
 8009134:	d002      	beq.n	800913c <CDC_ProcessReception+0x26>
 8009136:	2b04      	cmp	r3, #4
 8009138:	d00e      	beq.n	8009158 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 800913a:	e043      	b.n	80091c4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	6a19      	ldr	r1, [r3, #32]
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	8b5a      	ldrh	r2, [r3, #26]
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	7b1b      	ldrb	r3, [r3, #12]
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f001 fc97 	bl	800aa7c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	2204      	movs	r2, #4
 8009152:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8009156:	e035      	b.n	80091c4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	7b1b      	ldrb	r3, [r3, #12]
 800915c:	4619      	mov	r1, r3
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f001 ff96 	bl	800b090 <USBH_LL_GetURBState>
 8009164:	4603      	mov	r3, r0
 8009166:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009168:	7cfb      	ldrb	r3, [r7, #19]
 800916a:	2b01      	cmp	r3, #1
 800916c:	d129      	bne.n	80091c2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	7b1b      	ldrb	r3, [r3, #12]
 8009172:	4619      	mov	r1, r3
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f001 fef9 	bl	800af6c <USBH_LL_GetLastXferSize>
 800917a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009180:	68fa      	ldr	r2, [r7, #12]
 8009182:	429a      	cmp	r2, r3
 8009184:	d016      	beq.n	80091b4 <CDC_ProcessReception+0x9e>
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	8b5b      	ldrh	r3, [r3, #26]
 800918a:	461a      	mov	r2, r3
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	4293      	cmp	r3, r2
 8009190:	d110      	bne.n	80091b4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	1ad2      	subs	r2, r2, r3
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	6a1a      	ldr	r2, [r3, #32]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	441a      	add	r2, r3
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	2203      	movs	r2, #3
 80091ae:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80091b2:	e006      	b.n	80091c2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	2200      	movs	r2, #0
 80091b8:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 f80f 	bl	80091e0 <USBH_CDC_ReceiveCallback>
      break;
 80091c2:	bf00      	nop
  }
}
 80091c4:	bf00      	nop
 80091c6:	3718      	adds	r7, #24
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}

080091cc <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80091d4:	bf00      	nop
 80091d6:	370c      	adds	r7, #12
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80091e8:	bf00      	nop
 80091ea:	370c      	adds	r7, #12
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b083      	sub	sp, #12
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80091fc:	bf00      	nop
 80091fe:	370c      	adds	r7, #12
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr

08009208 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b084      	sub	sp, #16
 800920c:	af00      	add	r7, sp, #0
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	60b9      	str	r1, [r7, #8]
 8009212:	4613      	mov	r3, r2
 8009214:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d101      	bne.n	8009220 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800921c:	2302      	movs	r3, #2
 800921e:	e029      	b.n	8009274 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	79fa      	ldrb	r2, [r7, #7]
 8009224:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2200      	movs	r2, #0
 800922c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2200      	movs	r2, #0
 8009234:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009238:	68f8      	ldr	r0, [r7, #12]
 800923a:	f000 f81f 	bl	800927c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2200      	movs	r2, #0
 8009242:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2200      	movs	r2, #0
 800924a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2200      	movs	r2, #0
 8009252:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2200      	movs	r2, #0
 800925a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d003      	beq.n	800926c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	68ba      	ldr	r2, [r7, #8]
 8009268:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800926c:	68f8      	ldr	r0, [r7, #12]
 800926e:	f001 fdc9 	bl	800ae04 <USBH_LL_Init>

  return USBH_OK;
 8009272:	2300      	movs	r3, #0
}
 8009274:	4618      	mov	r0, r3
 8009276:	3710      	adds	r7, #16
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009284:	2300      	movs	r3, #0
 8009286:	60fb      	str	r3, [r7, #12]
 8009288:	e009      	b.n	800929e <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	33e0      	adds	r3, #224	@ 0xe0
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	4413      	add	r3, r2
 8009294:	2200      	movs	r2, #0
 8009296:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	3301      	adds	r3, #1
 800929c:	60fb      	str	r3, [r7, #12]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2b0f      	cmp	r3, #15
 80092a2:	d9f2      	bls.n	800928a <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80092a4:	2300      	movs	r3, #0
 80092a6:	60fb      	str	r3, [r7, #12]
 80092a8:	e009      	b.n	80092be <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	4413      	add	r3, r2
 80092b0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80092b4:	2200      	movs	r2, #0
 80092b6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	3301      	adds	r3, #1
 80092bc:	60fb      	str	r3, [r7, #12]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092c4:	d3f1      	bcc.n	80092aa <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2200      	movs	r2, #0
 80092ca:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2201      	movs	r2, #1
 80092d6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2240      	movs	r2, #64	@ 0x40
 80092ea:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2200      	movs	r2, #0
 80092f0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2200      	movs	r2, #0
 80092f6:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2201      	movs	r2, #1
 80092fe:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2200      	movs	r2, #0
 8009306:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	331c      	adds	r3, #28
 8009316:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800931a:	2100      	movs	r1, #0
 800931c:	4618      	mov	r0, r3
 800931e:	f002 f93c 	bl	800b59a <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009328:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800932c:	2100      	movs	r1, #0
 800932e:	4618      	mov	r0, r3
 8009330:	f002 f933 	bl	800b59a <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800933a:	2212      	movs	r2, #18
 800933c:	2100      	movs	r1, #0
 800933e:	4618      	mov	r0, r3
 8009340:	f002 f92b 	bl	800b59a <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800934a:	223e      	movs	r2, #62	@ 0x3e
 800934c:	2100      	movs	r1, #0
 800934e:	4618      	mov	r0, r3
 8009350:	f002 f923 	bl	800b59a <memset>

  return USBH_OK;
 8009354:	2300      	movs	r3, #0
}
 8009356:	4618      	mov	r0, r3
 8009358:	3710      	adds	r7, #16
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}

0800935e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800935e:	b480      	push	{r7}
 8009360:	b085      	sub	sp, #20
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
 8009366:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009368:	2300      	movs	r3, #0
 800936a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d016      	beq.n	80093a0 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009378:	2b00      	cmp	r3, #0
 800937a:	d10e      	bne.n	800939a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009382:	1c59      	adds	r1, r3, #1
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	33de      	adds	r3, #222	@ 0xde
 800938e:	6839      	ldr	r1, [r7, #0]
 8009390:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009394:	2300      	movs	r3, #0
 8009396:	73fb      	strb	r3, [r7, #15]
 8009398:	e004      	b.n	80093a4 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800939a:	2302      	movs	r3, #2
 800939c:	73fb      	strb	r3, [r7, #15]
 800939e:	e001      	b.n	80093a4 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80093a0:	2302      	movs	r3, #2
 80093a2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80093a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3714      	adds	r7, #20
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr

080093b2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80093b2:	b480      	push	{r7}
 80093b4:	b085      	sub	sp, #20
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
 80093ba:	460b      	mov	r3, r1
 80093bc:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80093be:	2300      	movs	r3, #0
 80093c0:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80093c8:	78fa      	ldrb	r2, [r7, #3]
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d204      	bcs.n	80093d8 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	78fa      	ldrb	r2, [r7, #3]
 80093d2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80093d6:	e001      	b.n	80093dc <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80093d8:	2302      	movs	r3, #2
 80093da:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80093dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3714      	adds	r7, #20
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr

080093ea <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80093ea:	b480      	push	{r7}
 80093ec:	b087      	sub	sp, #28
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
 80093f2:	4608      	mov	r0, r1
 80093f4:	4611      	mov	r1, r2
 80093f6:	461a      	mov	r2, r3
 80093f8:	4603      	mov	r3, r0
 80093fa:	70fb      	strb	r3, [r7, #3]
 80093fc:	460b      	mov	r3, r1
 80093fe:	70bb      	strb	r3, [r7, #2]
 8009400:	4613      	mov	r3, r2
 8009402:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009404:	2300      	movs	r3, #0
 8009406:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009408:	2300      	movs	r3, #0
 800940a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009412:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009414:	e025      	b.n	8009462 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009416:	7dfb      	ldrb	r3, [r7, #23]
 8009418:	221a      	movs	r2, #26
 800941a:	fb02 f303 	mul.w	r3, r2, r3
 800941e:	3308      	adds	r3, #8
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	4413      	add	r3, r2
 8009424:	3302      	adds	r3, #2
 8009426:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	795b      	ldrb	r3, [r3, #5]
 800942c:	78fa      	ldrb	r2, [r7, #3]
 800942e:	429a      	cmp	r2, r3
 8009430:	d002      	beq.n	8009438 <USBH_FindInterface+0x4e>
 8009432:	78fb      	ldrb	r3, [r7, #3]
 8009434:	2bff      	cmp	r3, #255	@ 0xff
 8009436:	d111      	bne.n	800945c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800943c:	78ba      	ldrb	r2, [r7, #2]
 800943e:	429a      	cmp	r2, r3
 8009440:	d002      	beq.n	8009448 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009442:	78bb      	ldrb	r3, [r7, #2]
 8009444:	2bff      	cmp	r3, #255	@ 0xff
 8009446:	d109      	bne.n	800945c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800944c:	787a      	ldrb	r2, [r7, #1]
 800944e:	429a      	cmp	r2, r3
 8009450:	d002      	beq.n	8009458 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009452:	787b      	ldrb	r3, [r7, #1]
 8009454:	2bff      	cmp	r3, #255	@ 0xff
 8009456:	d101      	bne.n	800945c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009458:	7dfb      	ldrb	r3, [r7, #23]
 800945a:	e006      	b.n	800946a <USBH_FindInterface+0x80>
    }
    if_ix++;
 800945c:	7dfb      	ldrb	r3, [r7, #23]
 800945e:	3301      	adds	r3, #1
 8009460:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009462:	7dfb      	ldrb	r3, [r7, #23]
 8009464:	2b01      	cmp	r3, #1
 8009466:	d9d6      	bls.n	8009416 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009468:	23ff      	movs	r3, #255	@ 0xff
}
 800946a:	4618      	mov	r0, r3
 800946c:	371c      	adds	r7, #28
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr

08009476 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8009476:	b580      	push	{r7, lr}
 8009478:	b082      	sub	sp, #8
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f001 fcfc 	bl	800ae7c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009484:	2101      	movs	r1, #1
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f001 fe15 	bl	800b0b6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800948c:	2300      	movs	r3, #0
}
 800948e:	4618      	mov	r0, r3
 8009490:	3708      	adds	r7, #8
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
	...

08009498 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b088      	sub	sp, #32
 800949c:	af04      	add	r7, sp, #16
 800949e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80094a0:	2302      	movs	r3, #2
 80094a2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80094a4:	2300      	movs	r3, #0
 80094a6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80094ae:	b2db      	uxtb	r3, r3
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d102      	bne.n	80094ba <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2203      	movs	r2, #3
 80094b8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	b2db      	uxtb	r3, r3
 80094c0:	2b0b      	cmp	r3, #11
 80094c2:	f200 81bc 	bhi.w	800983e <USBH_Process+0x3a6>
 80094c6:	a201      	add	r2, pc, #4	@ (adr r2, 80094cc <USBH_Process+0x34>)
 80094c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094cc:	080094fd 	.word	0x080094fd
 80094d0:	0800952f 	.word	0x0800952f
 80094d4:	08009599 	.word	0x08009599
 80094d8:	080097d9 	.word	0x080097d9
 80094dc:	0800983f 	.word	0x0800983f
 80094e0:	08009639 	.word	0x08009639
 80094e4:	0800977f 	.word	0x0800977f
 80094e8:	0800966f 	.word	0x0800966f
 80094ec:	0800968f 	.word	0x0800968f
 80094f0:	080096ad 	.word	0x080096ad
 80094f4:	080096f1 	.word	0x080096f1
 80094f8:	080097c1 	.word	0x080097c1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8009502:	b2db      	uxtb	r3, r3
 8009504:	2b00      	cmp	r3, #0
 8009506:	f000 819c 	beq.w	8009842 <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2201      	movs	r2, #1
 800950e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009510:	20c8      	movs	r0, #200	@ 0xc8
 8009512:	f001 fe1a 	bl	800b14a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f001 fd0d 	bl	800af36 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800952c:	e189      	b.n	8009842 <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8009534:	b2db      	uxtb	r3, r3
 8009536:	2b01      	cmp	r3, #1
 8009538:	d107      	bne.n	800954a <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2202      	movs	r2, #2
 8009546:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009548:	e18a      	b.n	8009860 <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009550:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009554:	d914      	bls.n	8009580 <USBH_Process+0xe8>
          phost->device.RstCnt++;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800955c:	3301      	adds	r3, #1
 800955e:	b2da      	uxtb	r2, r3
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800956c:	2b03      	cmp	r3, #3
 800956e:	d903      	bls.n	8009578 <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	220d      	movs	r2, #13
 8009574:	701a      	strb	r2, [r3, #0]
      break;
 8009576:	e173      	b.n	8009860 <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	701a      	strb	r2, [r3, #0]
      break;
 800957e:	e16f      	b.n	8009860 <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009586:	f103 020a 	add.w	r2, r3, #10
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8009590:	200a      	movs	r0, #10
 8009592:	f001 fdda 	bl	800b14a <USBH_Delay>
      break;
 8009596:	e163      	b.n	8009860 <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d005      	beq.n	80095ae <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80095a8:	2104      	movs	r1, #4
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80095ae:	2064      	movs	r0, #100	@ 0x64
 80095b0:	f001 fdcb 	bl	800b14a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f001 fc97 	bl	800aee8 <USBH_LL_GetSpeed>
 80095ba:	4603      	mov	r3, r0
 80095bc:	461a      	mov	r2, r3
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2205      	movs	r2, #5
 80095c8:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80095ca:	2100      	movs	r1, #0
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f001 faa2 	bl	800ab16 <USBH_AllocPipe>
 80095d2:	4603      	mov	r3, r0
 80095d4:	461a      	mov	r2, r3
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80095da:	2180      	movs	r1, #128	@ 0x80
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f001 fa9a 	bl	800ab16 <USBH_AllocPipe>
 80095e2:	4603      	mov	r3, r0
 80095e4:	461a      	mov	r2, r3
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	7919      	ldrb	r1, [r3, #4]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80095fa:	687a      	ldr	r2, [r7, #4]
 80095fc:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80095fe:	9202      	str	r2, [sp, #8]
 8009600:	2200      	movs	r2, #0
 8009602:	9201      	str	r2, [sp, #4]
 8009604:	9300      	str	r3, [sp, #0]
 8009606:	4603      	mov	r3, r0
 8009608:	2280      	movs	r2, #128	@ 0x80
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f001 fa54 	bl	800aab8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	7959      	ldrb	r1, [r3, #5]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009624:	9202      	str	r2, [sp, #8]
 8009626:	2200      	movs	r2, #0
 8009628:	9201      	str	r2, [sp, #4]
 800962a:	9300      	str	r3, [sp, #0]
 800962c:	4603      	mov	r3, r0
 800962e:	2200      	movs	r2, #0
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f001 fa41 	bl	800aab8 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009636:	e113      	b.n	8009860 <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 f917 	bl	800986c <USBH_HandleEnum>
 800963e:	4603      	mov	r3, r0
 8009640:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009642:	7bbb      	ldrb	r3, [r7, #14]
 8009644:	b2db      	uxtb	r3, r3
 8009646:	2b00      	cmp	r3, #0
 8009648:	f040 80fd 	bne.w	8009846 <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2200      	movs	r2, #0
 8009650:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800965a:	2b01      	cmp	r3, #1
 800965c:	d103      	bne.n	8009666 <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2208      	movs	r2, #8
 8009662:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8009664:	e0ef      	b.n	8009846 <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2207      	movs	r2, #7
 800966a:	701a      	strb	r2, [r3, #0]
      break;
 800966c:	e0eb      	b.n	8009846 <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009674:	2b00      	cmp	r3, #0
 8009676:	f000 80e8 	beq.w	800984a <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009680:	2101      	movs	r1, #1
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2208      	movs	r2, #8
 800968a:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 800968c:	e0dd      	b.n	800984a <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8009694:	4619      	mov	r1, r3
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 fc3f 	bl	8009f1a <USBH_SetCfg>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	f040 80d5 	bne.w	800984e <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2209      	movs	r2, #9
 80096a8:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80096aa:	e0d0      	b.n	800984e <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80096b2:	f003 0320 	and.w	r3, r3, #32
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d016      	beq.n	80096e8 <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80096ba:	2101      	movs	r1, #1
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 fc4f 	bl	8009f60 <USBH_SetFeature>
 80096c2:	4603      	mov	r3, r0
 80096c4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80096c6:	7bbb      	ldrb	r3, [r7, #14]
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d103      	bne.n	80096d6 <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	220a      	movs	r2, #10
 80096d2:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80096d4:	e0bd      	b.n	8009852 <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 80096d6:	7bbb      	ldrb	r3, [r7, #14]
 80096d8:	b2db      	uxtb	r3, r3
 80096da:	2b03      	cmp	r3, #3
 80096dc:	f040 80b9 	bne.w	8009852 <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	220a      	movs	r2, #10
 80096e4:	701a      	strb	r2, [r3, #0]
      break;
 80096e6:	e0b4      	b.n	8009852 <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	220a      	movs	r2, #10
 80096ec:	701a      	strb	r2, [r3, #0]
      break;
 80096ee:	e0b0      	b.n	8009852 <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	f000 80ad 	beq.w	8009856 <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2200      	movs	r2, #0
 8009700:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009704:	2300      	movs	r3, #0
 8009706:	73fb      	strb	r3, [r7, #15]
 8009708:	e016      	b.n	8009738 <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800970a:	7bfa      	ldrb	r2, [r7, #15]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	32de      	adds	r2, #222	@ 0xde
 8009710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009714:	791a      	ldrb	r2, [r3, #4]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800971c:	429a      	cmp	r2, r3
 800971e:	d108      	bne.n	8009732 <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009720:	7bfa      	ldrb	r2, [r7, #15]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	32de      	adds	r2, #222	@ 0xde
 8009726:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8009730:	e005      	b.n	800973e <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009732:	7bfb      	ldrb	r3, [r7, #15]
 8009734:	3301      	adds	r3, #1
 8009736:	73fb      	strb	r3, [r7, #15]
 8009738:	7bfb      	ldrb	r3, [r7, #15]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d0e5      	beq.n	800970a <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009744:	2b00      	cmp	r3, #0
 8009746:	d016      	beq.n	8009776 <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800974e:	689b      	ldr	r3, [r3, #8]
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	4798      	blx	r3
 8009754:	4603      	mov	r3, r0
 8009756:	2b00      	cmp	r3, #0
 8009758:	d109      	bne.n	800976e <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2206      	movs	r2, #6
 800975e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009766:	2103      	movs	r1, #3
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800976c:	e073      	b.n	8009856 <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	220d      	movs	r2, #13
 8009772:	701a      	strb	r2, [r3, #0]
      break;
 8009774:	e06f      	b.n	8009856 <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	220d      	movs	r2, #13
 800977a:	701a      	strb	r2, [r3, #0]
      break;
 800977c:	e06b      	b.n	8009856 <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009784:	2b00      	cmp	r3, #0
 8009786:	d017      	beq.n	80097b8 <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800978e:	691b      	ldr	r3, [r3, #16]
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	4798      	blx	r3
 8009794:	4603      	mov	r3, r0
 8009796:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009798:	7bbb      	ldrb	r3, [r7, #14]
 800979a:	b2db      	uxtb	r3, r3
 800979c:	2b00      	cmp	r3, #0
 800979e:	d103      	bne.n	80097a8 <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	220b      	movs	r2, #11
 80097a4:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80097a6:	e058      	b.n	800985a <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 80097a8:	7bbb      	ldrb	r3, [r7, #14]
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	2b02      	cmp	r3, #2
 80097ae:	d154      	bne.n	800985a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	220d      	movs	r2, #13
 80097b4:	701a      	strb	r2, [r3, #0]
      break;
 80097b6:	e050      	b.n	800985a <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	220d      	movs	r2, #13
 80097bc:	701a      	strb	r2, [r3, #0]
      break;
 80097be:	e04c      	b.n	800985a <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d049      	beq.n	800985e <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097d0:	695b      	ldr	r3, [r3, #20]
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	4798      	blx	r3
      }
      break;
 80097d6:	e042      	b.n	800985e <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f7ff fd4b 	bl	800927c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d009      	beq.n	8009804 <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097f6:	68db      	ldr	r3, [r3, #12]
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2200      	movs	r2, #0
 8009800:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800980a:	2b00      	cmp	r3, #0
 800980c:	d005      	beq.n	800981a <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009814:	2105      	movs	r1, #5
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8009820:	b2db      	uxtb	r3, r3
 8009822:	2b01      	cmp	r3, #1
 8009824:	d107      	bne.n	8009836 <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2200      	movs	r2, #0
 800982a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f7ff fe21 	bl	8009476 <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009834:	e014      	b.n	8009860 <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f001 fb20 	bl	800ae7c <USBH_LL_Start>
      break;
 800983c:	e010      	b.n	8009860 <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800983e:	bf00      	nop
 8009840:	e00e      	b.n	8009860 <USBH_Process+0x3c8>
      break;
 8009842:	bf00      	nop
 8009844:	e00c      	b.n	8009860 <USBH_Process+0x3c8>
      break;
 8009846:	bf00      	nop
 8009848:	e00a      	b.n	8009860 <USBH_Process+0x3c8>
    break;
 800984a:	bf00      	nop
 800984c:	e008      	b.n	8009860 <USBH_Process+0x3c8>
      break;
 800984e:	bf00      	nop
 8009850:	e006      	b.n	8009860 <USBH_Process+0x3c8>
      break;
 8009852:	bf00      	nop
 8009854:	e004      	b.n	8009860 <USBH_Process+0x3c8>
      break;
 8009856:	bf00      	nop
 8009858:	e002      	b.n	8009860 <USBH_Process+0x3c8>
      break;
 800985a:	bf00      	nop
 800985c:	e000      	b.n	8009860 <USBH_Process+0x3c8>
      break;
 800985e:	bf00      	nop
  }
  return USBH_OK;
 8009860:	2300      	movs	r3, #0
}
 8009862:	4618      	mov	r0, r3
 8009864:	3710      	adds	r7, #16
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop

0800986c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b088      	sub	sp, #32
 8009870:	af04      	add	r7, sp, #16
 8009872:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009874:	2301      	movs	r3, #1
 8009876:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009878:	2301      	movs	r3, #1
 800987a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	785b      	ldrb	r3, [r3, #1]
 8009880:	2b07      	cmp	r3, #7
 8009882:	f200 81bd 	bhi.w	8009c00 <USBH_HandleEnum+0x394>
 8009886:	a201      	add	r2, pc, #4	@ (adr r2, 800988c <USBH_HandleEnum+0x20>)
 8009888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800988c:	080098ad 	.word	0x080098ad
 8009890:	08009967 	.word	0x08009967
 8009894:	080099d1 	.word	0x080099d1
 8009898:	08009a5b 	.word	0x08009a5b
 800989c:	08009ac5 	.word	0x08009ac5
 80098a0:	08009b35 	.word	0x08009b35
 80098a4:	08009b7b 	.word	0x08009b7b
 80098a8:	08009bc1 	.word	0x08009bc1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80098ac:	2108      	movs	r1, #8
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f000 fa50 	bl	8009d54 <USBH_Get_DevDesc>
 80098b4:	4603      	mov	r3, r0
 80098b6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80098b8:	7bbb      	ldrb	r3, [r7, #14]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d12e      	bne.n	800991c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2201      	movs	r2, #1
 80098cc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	7919      	ldrb	r1, [r3, #4]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80098de:	687a      	ldr	r2, [r7, #4]
 80098e0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80098e2:	9202      	str	r2, [sp, #8]
 80098e4:	2200      	movs	r2, #0
 80098e6:	9201      	str	r2, [sp, #4]
 80098e8:	9300      	str	r3, [sp, #0]
 80098ea:	4603      	mov	r3, r0
 80098ec:	2280      	movs	r2, #128	@ 0x80
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f001 f8e2 	bl	800aab8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	7959      	ldrb	r1, [r3, #5]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009908:	9202      	str	r2, [sp, #8]
 800990a:	2200      	movs	r2, #0
 800990c:	9201      	str	r2, [sp, #4]
 800990e:	9300      	str	r3, [sp, #0]
 8009910:	4603      	mov	r3, r0
 8009912:	2200      	movs	r2, #0
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f001 f8cf 	bl	800aab8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800991a:	e173      	b.n	8009c04 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800991c:	7bbb      	ldrb	r3, [r7, #14]
 800991e:	2b03      	cmp	r3, #3
 8009920:	f040 8170 	bne.w	8009c04 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800992a:	3301      	adds	r3, #1
 800992c:	b2da      	uxtb	r2, r3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800993a:	2b03      	cmp	r3, #3
 800993c:	d903      	bls.n	8009946 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	220d      	movs	r2, #13
 8009942:	701a      	strb	r2, [r3, #0]
      break;
 8009944:	e15e      	b.n	8009c04 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	795b      	ldrb	r3, [r3, #5]
 800994a:	4619      	mov	r1, r3
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f001 f903 	bl	800ab58 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	791b      	ldrb	r3, [r3, #4]
 8009956:	4619      	mov	r1, r3
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f001 f8fd 	bl	800ab58 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2200      	movs	r2, #0
 8009962:	701a      	strb	r2, [r3, #0]
      break;
 8009964:	e14e      	b.n	8009c04 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009966:	2112      	movs	r1, #18
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f000 f9f3 	bl	8009d54 <USBH_Get_DevDesc>
 800996e:	4603      	mov	r3, r0
 8009970:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009972:	7bbb      	ldrb	r3, [r7, #14]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d103      	bne.n	8009980 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2202      	movs	r2, #2
 800997c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800997e:	e143      	b.n	8009c08 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009980:	7bbb      	ldrb	r3, [r7, #14]
 8009982:	2b03      	cmp	r3, #3
 8009984:	f040 8140 	bne.w	8009c08 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800998e:	3301      	adds	r3, #1
 8009990:	b2da      	uxtb	r2, r3
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800999e:	2b03      	cmp	r3, #3
 80099a0:	d903      	bls.n	80099aa <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	220d      	movs	r2, #13
 80099a6:	701a      	strb	r2, [r3, #0]
      break;
 80099a8:	e12e      	b.n	8009c08 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	795b      	ldrb	r3, [r3, #5]
 80099ae:	4619      	mov	r1, r3
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f001 f8d1 	bl	800ab58 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	791b      	ldrb	r3, [r3, #4]
 80099ba:	4619      	mov	r1, r3
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f001 f8cb 	bl	800ab58 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2200      	movs	r2, #0
 80099c6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2200      	movs	r2, #0
 80099cc:	701a      	strb	r2, [r3, #0]
      break;
 80099ce:	e11b      	b.n	8009c08 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80099d0:	2101      	movs	r1, #1
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 fa7d 	bl	8009ed2 <USBH_SetAddress>
 80099d8:	4603      	mov	r3, r0
 80099da:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80099dc:	7bbb      	ldrb	r3, [r7, #14]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d130      	bne.n	8009a44 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80099e2:	2002      	movs	r0, #2
 80099e4:	f001 fbb1 	bl	800b14a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2201      	movs	r2, #1
 80099ec:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2203      	movs	r2, #3
 80099f4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	7919      	ldrb	r1, [r3, #4]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009a06:	687a      	ldr	r2, [r7, #4]
 8009a08:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009a0a:	9202      	str	r2, [sp, #8]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	9201      	str	r2, [sp, #4]
 8009a10:	9300      	str	r3, [sp, #0]
 8009a12:	4603      	mov	r3, r0
 8009a14:	2280      	movs	r2, #128	@ 0x80
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f001 f84e 	bl	800aab8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	7959      	ldrb	r1, [r3, #5]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009a30:	9202      	str	r2, [sp, #8]
 8009a32:	2200      	movs	r2, #0
 8009a34:	9201      	str	r2, [sp, #4]
 8009a36:	9300      	str	r3, [sp, #0]
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f001 f83b 	bl	800aab8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009a42:	e0e3      	b.n	8009c0c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a44:	7bbb      	ldrb	r3, [r7, #14]
 8009a46:	2b03      	cmp	r3, #3
 8009a48:	f040 80e0 	bne.w	8009c0c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	220d      	movs	r2, #13
 8009a50:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2200      	movs	r2, #0
 8009a56:	705a      	strb	r2, [r3, #1]
      break;
 8009a58:	e0d8      	b.n	8009c0c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009a5a:	2109      	movs	r1, #9
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 f9a5 	bl	8009dac <USBH_Get_CfgDesc>
 8009a62:	4603      	mov	r3, r0
 8009a64:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009a66:	7bbb      	ldrb	r3, [r7, #14]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d103      	bne.n	8009a74 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2204      	movs	r2, #4
 8009a70:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009a72:	e0cd      	b.n	8009c10 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a74:	7bbb      	ldrb	r3, [r7, #14]
 8009a76:	2b03      	cmp	r3, #3
 8009a78:	f040 80ca 	bne.w	8009c10 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009a82:	3301      	adds	r3, #1
 8009a84:	b2da      	uxtb	r2, r3
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009a92:	2b03      	cmp	r3, #3
 8009a94:	d903      	bls.n	8009a9e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	220d      	movs	r2, #13
 8009a9a:	701a      	strb	r2, [r3, #0]
      break;
 8009a9c:	e0b8      	b.n	8009c10 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	795b      	ldrb	r3, [r3, #5]
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f001 f857 	bl	800ab58 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	791b      	ldrb	r3, [r3, #4]
 8009aae:	4619      	mov	r1, r3
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f001 f851 	bl	800ab58 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	701a      	strb	r2, [r3, #0]
      break;
 8009ac2:	e0a5      	b.n	8009c10 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8009aca:	4619      	mov	r1, r3
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 f96d 	bl	8009dac <USBH_Get_CfgDesc>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009ad6:	7bbb      	ldrb	r3, [r7, #14]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d103      	bne.n	8009ae4 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2205      	movs	r2, #5
 8009ae0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009ae2:	e097      	b.n	8009c14 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ae4:	7bbb      	ldrb	r3, [r7, #14]
 8009ae6:	2b03      	cmp	r3, #3
 8009ae8:	f040 8094 	bne.w	8009c14 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009af2:	3301      	adds	r3, #1
 8009af4:	b2da      	uxtb	r2, r3
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009b02:	2b03      	cmp	r3, #3
 8009b04:	d903      	bls.n	8009b0e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	220d      	movs	r2, #13
 8009b0a:	701a      	strb	r2, [r3, #0]
      break;
 8009b0c:	e082      	b.n	8009c14 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	795b      	ldrb	r3, [r3, #5]
 8009b12:	4619      	mov	r1, r3
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f001 f81f 	bl	800ab58 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	791b      	ldrb	r3, [r3, #4]
 8009b1e:	4619      	mov	r1, r3
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f001 f819 	bl	800ab58 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	701a      	strb	r2, [r3, #0]
      break;
 8009b32:	e06f      	b.n	8009c14 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d019      	beq.n	8009b72 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009b4a:	23ff      	movs	r3, #255	@ 0xff
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f000 f957 	bl	8009e00 <USBH_Get_StringDesc>
 8009b52:	4603      	mov	r3, r0
 8009b54:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009b56:	7bbb      	ldrb	r3, [r7, #14]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d103      	bne.n	8009b64 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2206      	movs	r2, #6
 8009b60:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8009b62:	e059      	b.n	8009c18 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b64:	7bbb      	ldrb	r3, [r7, #14]
 8009b66:	2b03      	cmp	r3, #3
 8009b68:	d156      	bne.n	8009c18 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2206      	movs	r2, #6
 8009b6e:	705a      	strb	r2, [r3, #1]
      break;
 8009b70:	e052      	b.n	8009c18 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2206      	movs	r2, #6
 8009b76:	705a      	strb	r2, [r3, #1]
      break;
 8009b78:	e04e      	b.n	8009c18 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d019      	beq.n	8009bb8 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009b90:	23ff      	movs	r3, #255	@ 0xff
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 f934 	bl	8009e00 <USBH_Get_StringDesc>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009b9c:	7bbb      	ldrb	r3, [r7, #14]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d103      	bne.n	8009baa <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2207      	movs	r2, #7
 8009ba6:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8009ba8:	e038      	b.n	8009c1c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009baa:	7bbb      	ldrb	r3, [r7, #14]
 8009bac:	2b03      	cmp	r3, #3
 8009bae:	d135      	bne.n	8009c1c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2207      	movs	r2, #7
 8009bb4:	705a      	strb	r2, [r3, #1]
      break;
 8009bb6:	e031      	b.n	8009c1c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2207      	movs	r2, #7
 8009bbc:	705a      	strb	r2, [r3, #1]
      break;
 8009bbe:	e02d      	b.n	8009c1c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d017      	beq.n	8009bfa <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009bd6:	23ff      	movs	r3, #255	@ 0xff
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 f911 	bl	8009e00 <USBH_Get_StringDesc>
 8009bde:	4603      	mov	r3, r0
 8009be0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009be2:	7bbb      	ldrb	r3, [r7, #14]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d102      	bne.n	8009bee <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009be8:	2300      	movs	r3, #0
 8009bea:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009bec:	e018      	b.n	8009c20 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009bee:	7bbb      	ldrb	r3, [r7, #14]
 8009bf0:	2b03      	cmp	r3, #3
 8009bf2:	d115      	bne.n	8009c20 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8009bf8:	e012      	b.n	8009c20 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	73fb      	strb	r3, [r7, #15]
      break;
 8009bfe:	e00f      	b.n	8009c20 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8009c00:	bf00      	nop
 8009c02:	e00e      	b.n	8009c22 <USBH_HandleEnum+0x3b6>
      break;
 8009c04:	bf00      	nop
 8009c06:	e00c      	b.n	8009c22 <USBH_HandleEnum+0x3b6>
      break;
 8009c08:	bf00      	nop
 8009c0a:	e00a      	b.n	8009c22 <USBH_HandleEnum+0x3b6>
      break;
 8009c0c:	bf00      	nop
 8009c0e:	e008      	b.n	8009c22 <USBH_HandleEnum+0x3b6>
      break;
 8009c10:	bf00      	nop
 8009c12:	e006      	b.n	8009c22 <USBH_HandleEnum+0x3b6>
      break;
 8009c14:	bf00      	nop
 8009c16:	e004      	b.n	8009c22 <USBH_HandleEnum+0x3b6>
      break;
 8009c18:	bf00      	nop
 8009c1a:	e002      	b.n	8009c22 <USBH_HandleEnum+0x3b6>
      break;
 8009c1c:	bf00      	nop
 8009c1e:	e000      	b.n	8009c22 <USBH_HandleEnum+0x3b6>
      break;
 8009c20:	bf00      	nop
  }
  return Status;
 8009c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3710      	adds	r7, #16
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b083      	sub	sp, #12
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	683a      	ldr	r2, [r7, #0]
 8009c3a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8009c3e:	bf00      	nop
 8009c40:	370c      	adds	r7, #12
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr

08009c4a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009c4a:	b580      	push	{r7, lr}
 8009c4c:	b082      	sub	sp, #8
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009c58:	1c5a      	adds	r2, r3, #1
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f000 f804 	bl	8009c6e <USBH_HandleSof>
}
 8009c66:	bf00      	nop
 8009c68:	3708      	adds	r7, #8
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}

08009c6e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009c6e:	b580      	push	{r7, lr}
 8009c70:	b082      	sub	sp, #8
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	781b      	ldrb	r3, [r3, #0]
 8009c7a:	b2db      	uxtb	r3, r3
 8009c7c:	2b0b      	cmp	r3, #11
 8009c7e:	d10a      	bne.n	8009c96 <USBH_HandleSof+0x28>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d005      	beq.n	8009c96 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c90:	699b      	ldr	r3, [r3, #24]
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	4798      	blx	r3
  }
}
 8009c96:	bf00      	nop
 8009c98:	3708      	adds	r7, #8
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}

08009c9e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009c9e:	b480      	push	{r7}
 8009ca0:	b083      	sub	sp, #12
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2201      	movs	r2, #1
 8009caa:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 8009cae:	bf00      	nop
}
 8009cb0:	370c      	adds	r7, #12
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb8:	4770      	bx	lr

08009cba <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009cba:	b480      	push	{r7}
 8009cbc:	b083      	sub	sp, #12
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8009cd2:	bf00      	nop
}
 8009cd4:	370c      	adds	r7, #12
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr

08009cde <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009cde:	b480      	push	{r7}
 8009ce0:	b083      	sub	sp, #12
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2201      	movs	r2, #1
 8009cea:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8009cfe:	2300      	movs	r3, #0
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	370c      	adds	r7, #12
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr

08009d0c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2201      	movs	r2, #1
 8009d18:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2200      	movs	r2, #0
 8009d28:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f001 f8c0 	bl	800aeb2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	791b      	ldrb	r3, [r3, #4]
 8009d36:	4619      	mov	r1, r3
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f000 ff0d 	bl	800ab58 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	795b      	ldrb	r3, [r3, #5]
 8009d42:	4619      	mov	r1, r3
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f000 ff07 	bl	800ab58 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8009d4a:	2300      	movs	r3, #0
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3708      	adds	r7, #8
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b086      	sub	sp, #24
 8009d58:	af02      	add	r7, sp, #8
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009d60:	887b      	ldrh	r3, [r7, #2]
 8009d62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d66:	d901      	bls.n	8009d6c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009d68:	2303      	movs	r3, #3
 8009d6a:	e01b      	b.n	8009da4 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009d72:	887b      	ldrh	r3, [r7, #2]
 8009d74:	9300      	str	r3, [sp, #0]
 8009d76:	4613      	mov	r3, r2
 8009d78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009d7c:	2100      	movs	r1, #0
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 f872 	bl	8009e68 <USBH_GetDescriptor>
 8009d84:	4603      	mov	r3, r0
 8009d86:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009d88:	7bfb      	ldrb	r3, [r7, #15]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d109      	bne.n	8009da2 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009d94:	887a      	ldrh	r2, [r7, #2]
 8009d96:	4619      	mov	r1, r3
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 f929 	bl	8009ff0 <USBH_ParseDevDesc>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3710      	adds	r7, #16
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b086      	sub	sp, #24
 8009db0:	af02      	add	r7, sp, #8
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	460b      	mov	r3, r1
 8009db6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	331c      	adds	r3, #28
 8009dbc:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8009dbe:	887b      	ldrh	r3, [r7, #2]
 8009dc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009dc4:	d901      	bls.n	8009dca <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009dc6:	2303      	movs	r3, #3
 8009dc8:	e016      	b.n	8009df8 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009dca:	887b      	ldrh	r3, [r7, #2]
 8009dcc:	9300      	str	r3, [sp, #0]
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009dd4:	2100      	movs	r1, #0
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 f846 	bl	8009e68 <USBH_GetDescriptor>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009de0:	7bfb      	ldrb	r3, [r7, #15]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d107      	bne.n	8009df6 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009de6:	887b      	ldrh	r3, [r7, #2]
 8009de8:	461a      	mov	r2, r3
 8009dea:	68b9      	ldr	r1, [r7, #8]
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 f9af 	bl	800a150 <USBH_ParseCfgDesc>
 8009df2:	4603      	mov	r3, r0
 8009df4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3710      	adds	r7, #16
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b088      	sub	sp, #32
 8009e04:	af02      	add	r7, sp, #8
 8009e06:	60f8      	str	r0, [r7, #12]
 8009e08:	607a      	str	r2, [r7, #4]
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	460b      	mov	r3, r1
 8009e0e:	72fb      	strb	r3, [r7, #11]
 8009e10:	4613      	mov	r3, r2
 8009e12:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009e14:	893b      	ldrh	r3, [r7, #8]
 8009e16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e1a:	d802      	bhi.n	8009e22 <USBH_Get_StringDesc+0x22>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d101      	bne.n	8009e26 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009e22:	2303      	movs	r3, #3
 8009e24:	e01c      	b.n	8009e60 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8009e26:	7afb      	ldrb	r3, [r7, #11]
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8009e2e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009e36:	893b      	ldrh	r3, [r7, #8]
 8009e38:	9300      	str	r3, [sp, #0]
 8009e3a:	460b      	mov	r3, r1
 8009e3c:	2100      	movs	r1, #0
 8009e3e:	68f8      	ldr	r0, [r7, #12]
 8009e40:	f000 f812 	bl	8009e68 <USBH_GetDescriptor>
 8009e44:	4603      	mov	r3, r0
 8009e46:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009e48:	7dfb      	ldrb	r3, [r7, #23]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d107      	bne.n	8009e5e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009e54:	893a      	ldrh	r2, [r7, #8]
 8009e56:	6879      	ldr	r1, [r7, #4]
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f000 fb8c 	bl	800a576 <USBH_ParseStringDesc>
  }

  return status;
 8009e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3718      	adds	r7, #24
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	607b      	str	r3, [r7, #4]
 8009e72:	460b      	mov	r3, r1
 8009e74:	72fb      	strb	r3, [r7, #11]
 8009e76:	4613      	mov	r3, r2
 8009e78:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	789b      	ldrb	r3, [r3, #2]
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d11c      	bne.n	8009ebc <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009e82:	7afb      	ldrb	r3, [r7, #11]
 8009e84:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009e88:	b2da      	uxtb	r2, r3
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2206      	movs	r2, #6
 8009e92:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	893a      	ldrh	r2, [r7, #8]
 8009e98:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009e9a:	893b      	ldrh	r3, [r7, #8]
 8009e9c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009ea0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ea4:	d104      	bne.n	8009eb0 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f240 4209 	movw	r2, #1033	@ 0x409
 8009eac:	829a      	strh	r2, [r3, #20]
 8009eae:	e002      	b.n	8009eb6 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	8b3a      	ldrh	r2, [r7, #24]
 8009eba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009ebc:	8b3b      	ldrh	r3, [r7, #24]
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	6879      	ldr	r1, [r7, #4]
 8009ec2:	68f8      	ldr	r0, [r7, #12]
 8009ec4:	f000 fba4 	bl	800a610 <USBH_CtlReq>
 8009ec8:	4603      	mov	r3, r0
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3710      	adds	r7, #16
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}

08009ed2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009ed2:	b580      	push	{r7, lr}
 8009ed4:	b082      	sub	sp, #8
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
 8009eda:	460b      	mov	r3, r1
 8009edc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	789b      	ldrb	r3, [r3, #2]
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d10f      	bne.n	8009f06 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2205      	movs	r2, #5
 8009ef0:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009ef2:	78fb      	ldrb	r3, [r7, #3]
 8009ef4:	b29a      	uxth	r2, r3
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2200      	movs	r2, #0
 8009efe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2200      	movs	r2, #0
 8009f04:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009f06:	2200      	movs	r2, #0
 8009f08:	2100      	movs	r1, #0
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f000 fb80 	bl	800a610 <USBH_CtlReq>
 8009f10:	4603      	mov	r3, r0
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3708      	adds	r7, #8
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}

08009f1a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009f1a:	b580      	push	{r7, lr}
 8009f1c:	b082      	sub	sp, #8
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	6078      	str	r0, [r7, #4]
 8009f22:	460b      	mov	r3, r1
 8009f24:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	789b      	ldrb	r3, [r3, #2]
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d10e      	bne.n	8009f4c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2200      	movs	r2, #0
 8009f32:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2209      	movs	r2, #9
 8009f38:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	887a      	ldrh	r2, [r7, #2]
 8009f3e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2200      	movs	r2, #0
 8009f44:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	2100      	movs	r1, #0
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 fb5d 	bl	800a610 <USBH_CtlReq>
 8009f56:	4603      	mov	r3, r0
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3708      	adds	r7, #8
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b082      	sub	sp, #8
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	460b      	mov	r3, r1
 8009f6a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	789b      	ldrb	r3, [r3, #2]
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	d10f      	bne.n	8009f94 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2203      	movs	r2, #3
 8009f7e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009f80:	78fb      	ldrb	r3, [r7, #3]
 8009f82:	b29a      	uxth	r2, r3
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2200      	movs	r2, #0
 8009f92:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009f94:	2200      	movs	r2, #0
 8009f96:	2100      	movs	r1, #0
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 fb39 	bl	800a610 <USBH_CtlReq>
 8009f9e:	4603      	mov	r3, r0
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3708      	adds	r7, #8
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	789b      	ldrb	r3, [r3, #2]
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d10f      	bne.n	8009fdc <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2202      	movs	r2, #2
 8009fc0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009fce:	78fb      	ldrb	r3, [r7, #3]
 8009fd0:	b29a      	uxth	r2, r3
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009fdc:	2200      	movs	r2, #0
 8009fde:	2100      	movs	r1, #0
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f000 fb15 	bl	800a610 <USBH_CtlReq>
 8009fe6:	4603      	mov	r3, r0
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3708      	adds	r7, #8
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b087      	sub	sp, #28
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	4613      	mov	r3, r2
 8009ffc:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a004:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800a006:	2300      	movs	r3, #0
 800a008:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d101      	bne.n	800a014 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800a010:	2302      	movs	r3, #2
 800a012:	e094      	b.n	800a13e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	781a      	ldrb	r2, [r3, #0]
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	785a      	ldrb	r2, [r3, #1]
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	3302      	adds	r3, #2
 800a028:	781b      	ldrb	r3, [r3, #0]
 800a02a:	461a      	mov	r2, r3
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	3303      	adds	r3, #3
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	021b      	lsls	r3, r3, #8
 800a034:	b29b      	uxth	r3, r3
 800a036:	4313      	orrs	r3, r2
 800a038:	b29a      	uxth	r2, r3
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	791a      	ldrb	r2, [r3, #4]
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	795a      	ldrb	r2, [r3, #5]
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	799a      	ldrb	r2, [r3, #6]
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	79da      	ldrb	r2, [r3, #7]
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a064:	2b00      	cmp	r3, #0
 800a066:	d004      	beq.n	800a072 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a06e:	2b01      	cmp	r3, #1
 800a070:	d11b      	bne.n	800a0aa <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	79db      	ldrb	r3, [r3, #7]
 800a076:	2b20      	cmp	r3, #32
 800a078:	dc0f      	bgt.n	800a09a <USBH_ParseDevDesc+0xaa>
 800a07a:	2b08      	cmp	r3, #8
 800a07c:	db0f      	blt.n	800a09e <USBH_ParseDevDesc+0xae>
 800a07e:	3b08      	subs	r3, #8
 800a080:	4a32      	ldr	r2, [pc, #200]	@ (800a14c <USBH_ParseDevDesc+0x15c>)
 800a082:	fa22 f303 	lsr.w	r3, r2, r3
 800a086:	f003 0301 	and.w	r3, r3, #1
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	bf14      	ite	ne
 800a08e:	2301      	movne	r3, #1
 800a090:	2300      	moveq	r3, #0
 800a092:	b2db      	uxtb	r3, r3
 800a094:	2b00      	cmp	r3, #0
 800a096:	d106      	bne.n	800a0a6 <USBH_ParseDevDesc+0xb6>
 800a098:	e001      	b.n	800a09e <USBH_ParseDevDesc+0xae>
 800a09a:	2b40      	cmp	r3, #64	@ 0x40
 800a09c:	d003      	beq.n	800a0a6 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	2208      	movs	r2, #8
 800a0a2:	71da      	strb	r2, [r3, #7]
        break;
 800a0a4:	e000      	b.n	800a0a8 <USBH_ParseDevDesc+0xb8>
        break;
 800a0a6:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800a0a8:	e00e      	b.n	800a0c8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a0b0:	2b02      	cmp	r3, #2
 800a0b2:	d107      	bne.n	800a0c4 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	79db      	ldrb	r3, [r3, #7]
 800a0b8:	2b08      	cmp	r3, #8
 800a0ba:	d005      	beq.n	800a0c8 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	2208      	movs	r2, #8
 800a0c0:	71da      	strb	r2, [r3, #7]
 800a0c2:	e001      	b.n	800a0c8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a0c4:	2303      	movs	r3, #3
 800a0c6:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800a0c8:	88fb      	ldrh	r3, [r7, #6]
 800a0ca:	2b08      	cmp	r3, #8
 800a0cc:	d936      	bls.n	800a13c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	3308      	adds	r3, #8
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	461a      	mov	r2, r3
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	3309      	adds	r3, #9
 800a0da:	781b      	ldrb	r3, [r3, #0]
 800a0dc:	021b      	lsls	r3, r3, #8
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	b29a      	uxth	r2, r3
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	330a      	adds	r3, #10
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	330b      	adds	r3, #11
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	021b      	lsls	r3, r3, #8
 800a0f8:	b29b      	uxth	r3, r3
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	b29a      	uxth	r2, r3
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	330c      	adds	r3, #12
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	461a      	mov	r2, r3
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	330d      	adds	r3, #13
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	021b      	lsls	r3, r3, #8
 800a112:	b29b      	uxth	r3, r3
 800a114:	4313      	orrs	r3, r2
 800a116:	b29a      	uxth	r2, r3
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	7b9a      	ldrb	r2, [r3, #14]
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	7bda      	ldrb	r2, [r3, #15]
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	7c1a      	ldrb	r2, [r3, #16]
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	7c5a      	ldrb	r2, [r3, #17]
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800a13c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a13e:	4618      	mov	r0, r3
 800a140:	371c      	adds	r7, #28
 800a142:	46bd      	mov	sp, r7
 800a144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a148:	4770      	bx	lr
 800a14a:	bf00      	nop
 800a14c:	01000101 	.word	0x01000101

0800a150 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b08c      	sub	sp, #48	@ 0x30
 800a154:	af00      	add	r7, sp, #0
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	60b9      	str	r1, [r7, #8]
 800a15a:	4613      	mov	r3, r2
 800a15c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a164:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a166:	2300      	movs	r3, #0
 800a168:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a16c:	2300      	movs	r3, #0
 800a16e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800a172:	2300      	movs	r3, #0
 800a174:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d101      	bne.n	800a182 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800a17e:	2302      	movs	r3, #2
 800a180:	e0de      	b.n	800a340 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800a186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	2b09      	cmp	r3, #9
 800a18c:	d002      	beq.n	800a194 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a18e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a190:	2209      	movs	r2, #9
 800a192:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	781a      	ldrb	r2, [r3, #0]
 800a198:	6a3b      	ldr	r3, [r7, #32]
 800a19a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	785a      	ldrb	r2, [r3, #1]
 800a1a0:	6a3b      	ldr	r3, [r7, #32]
 800a1a2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	3302      	adds	r3, #2
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	3303      	adds	r3, #3
 800a1b0:	781b      	ldrb	r3, [r3, #0]
 800a1b2:	021b      	lsls	r3, r3, #8
 800a1b4:	b29b      	uxth	r3, r3
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1be:	bf28      	it	cs
 800a1c0:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800a1c4:	b29a      	uxth	r2, r3
 800a1c6:	6a3b      	ldr	r3, [r7, #32]
 800a1c8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	791a      	ldrb	r2, [r3, #4]
 800a1ce:	6a3b      	ldr	r3, [r7, #32]
 800a1d0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	795a      	ldrb	r2, [r3, #5]
 800a1d6:	6a3b      	ldr	r3, [r7, #32]
 800a1d8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	799a      	ldrb	r2, [r3, #6]
 800a1de:	6a3b      	ldr	r3, [r7, #32]
 800a1e0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	79da      	ldrb	r2, [r3, #7]
 800a1e6:	6a3b      	ldr	r3, [r7, #32]
 800a1e8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	7a1a      	ldrb	r2, [r3, #8]
 800a1ee:	6a3b      	ldr	r3, [r7, #32]
 800a1f0:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a1f2:	88fb      	ldrh	r3, [r7, #6]
 800a1f4:	2b09      	cmp	r3, #9
 800a1f6:	f240 80a1 	bls.w	800a33c <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 800a1fa:	2309      	movs	r3, #9
 800a1fc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a1fe:	2300      	movs	r3, #0
 800a200:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a202:	e085      	b.n	800a310 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a204:	f107 0316 	add.w	r3, r7, #22
 800a208:	4619      	mov	r1, r3
 800a20a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a20c:	f000 f9e6 	bl	800a5dc <USBH_GetNextDesc>
 800a210:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a214:	785b      	ldrb	r3, [r3, #1]
 800a216:	2b04      	cmp	r3, #4
 800a218:	d17a      	bne.n	800a310 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a21a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	2b09      	cmp	r3, #9
 800a220:	d002      	beq.n	800a228 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a224:	2209      	movs	r2, #9
 800a226:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a228:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a22c:	221a      	movs	r2, #26
 800a22e:	fb02 f303 	mul.w	r3, r2, r3
 800a232:	3308      	adds	r3, #8
 800a234:	6a3a      	ldr	r2, [r7, #32]
 800a236:	4413      	add	r3, r2
 800a238:	3302      	adds	r3, #2
 800a23a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a23c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a23e:	69f8      	ldr	r0, [r7, #28]
 800a240:	f000 f882 	bl	800a348 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a244:	2300      	movs	r3, #0
 800a246:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a24a:	2300      	movs	r3, #0
 800a24c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a24e:	e043      	b.n	800a2d8 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a250:	f107 0316 	add.w	r3, r7, #22
 800a254:	4619      	mov	r1, r3
 800a256:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a258:	f000 f9c0 	bl	800a5dc <USBH_GetNextDesc>
 800a25c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a25e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a260:	785b      	ldrb	r3, [r3, #1]
 800a262:	2b05      	cmp	r3, #5
 800a264:	d138      	bne.n	800a2d8 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800a266:	69fb      	ldr	r3, [r7, #28]
 800a268:	795b      	ldrb	r3, [r3, #5]
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	d113      	bne.n	800a296 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a26e:	69fb      	ldr	r3, [r7, #28]
 800a270:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800a272:	2b02      	cmp	r3, #2
 800a274:	d003      	beq.n	800a27e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a276:	69fb      	ldr	r3, [r7, #28]
 800a278:	799b      	ldrb	r3, [r3, #6]
 800a27a:	2b03      	cmp	r3, #3
 800a27c:	d10b      	bne.n	800a296 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a27e:	69fb      	ldr	r3, [r7, #28]
 800a280:	79db      	ldrb	r3, [r3, #7]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d10b      	bne.n	800a29e <USBH_ParseCfgDesc+0x14e>
 800a286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a288:	781b      	ldrb	r3, [r3, #0]
 800a28a:	2b09      	cmp	r3, #9
 800a28c:	d007      	beq.n	800a29e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800a28e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a290:	2209      	movs	r2, #9
 800a292:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a294:	e003      	b.n	800a29e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a298:	2207      	movs	r2, #7
 800a29a:	701a      	strb	r2, [r3, #0]
 800a29c:	e000      	b.n	800a2a0 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a29e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a2a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a2a4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a2a8:	3201      	adds	r2, #1
 800a2aa:	00d2      	lsls	r2, r2, #3
 800a2ac:	211a      	movs	r1, #26
 800a2ae:	fb01 f303 	mul.w	r3, r1, r3
 800a2b2:	4413      	add	r3, r2
 800a2b4:	3308      	adds	r3, #8
 800a2b6:	6a3a      	ldr	r2, [r7, #32]
 800a2b8:	4413      	add	r3, r2
 800a2ba:	3304      	adds	r3, #4
 800a2bc:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a2be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a2c0:	69b9      	ldr	r1, [r7, #24]
 800a2c2:	68f8      	ldr	r0, [r7, #12]
 800a2c4:	f000 f86f 	bl	800a3a6 <USBH_ParseEPDesc>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800a2ce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a2d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d80a      	bhi.n	800a2f6 <USBH_ParseCfgDesc+0x1a6>
 800a2e0:	69fb      	ldr	r3, [r7, #28]
 800a2e2:	791b      	ldrb	r3, [r3, #4]
 800a2e4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d204      	bcs.n	800a2f6 <USBH_ParseCfgDesc+0x1a6>
 800a2ec:	6a3b      	ldr	r3, [r7, #32]
 800a2ee:	885a      	ldrh	r2, [r3, #2]
 800a2f0:	8afb      	ldrh	r3, [r7, #22]
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d8ac      	bhi.n	800a250 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a2f6:	69fb      	ldr	r3, [r7, #28]
 800a2f8:	791b      	ldrb	r3, [r3, #4]
 800a2fa:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d201      	bcs.n	800a306 <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 800a302:	2303      	movs	r3, #3
 800a304:	e01c      	b.n	800a340 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 800a306:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a30a:	3301      	adds	r3, #1
 800a30c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a310:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a314:	2b01      	cmp	r3, #1
 800a316:	d805      	bhi.n	800a324 <USBH_ParseCfgDesc+0x1d4>
 800a318:	6a3b      	ldr	r3, [r7, #32]
 800a31a:	885a      	ldrh	r2, [r3, #2]
 800a31c:	8afb      	ldrh	r3, [r7, #22]
 800a31e:	429a      	cmp	r2, r3
 800a320:	f63f af70 	bhi.w	800a204 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a324:	6a3b      	ldr	r3, [r7, #32]
 800a326:	791b      	ldrb	r3, [r3, #4]
 800a328:	2b02      	cmp	r3, #2
 800a32a:	bf28      	it	cs
 800a32c:	2302      	movcs	r3, #2
 800a32e:	b2db      	uxtb	r3, r3
 800a330:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a334:	429a      	cmp	r2, r3
 800a336:	d201      	bcs.n	800a33c <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 800a338:	2303      	movs	r3, #3
 800a33a:	e001      	b.n	800a340 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 800a33c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a340:	4618      	mov	r0, r3
 800a342:	3730      	adds	r7, #48	@ 0x30
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}

0800a348 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800a348:	b480      	push	{r7}
 800a34a:	b083      	sub	sp, #12
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	781a      	ldrb	r2, [r3, #0]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	785a      	ldrb	r2, [r3, #1]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	789a      	ldrb	r2, [r3, #2]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	78da      	ldrb	r2, [r3, #3]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	791a      	ldrb	r2, [r3, #4]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	795a      	ldrb	r2, [r3, #5]
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	799a      	ldrb	r2, [r3, #6]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	79da      	ldrb	r2, [r3, #7]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	7a1a      	ldrb	r2, [r3, #8]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	721a      	strb	r2, [r3, #8]
}
 800a39a:	bf00      	nop
 800a39c:	370c      	adds	r7, #12
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr

0800a3a6 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800a3a6:	b480      	push	{r7}
 800a3a8:	b087      	sub	sp, #28
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	60f8      	str	r0, [r7, #12]
 800a3ae:	60b9      	str	r1, [r7, #8]
 800a3b0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	781a      	ldrb	r2, [r3, #0]
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	785a      	ldrb	r2, [r3, #1]
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	789a      	ldrb	r2, [r3, #2]
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	78da      	ldrb	r2, [r3, #3]
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	3304      	adds	r3, #4
 800a3da:	781b      	ldrb	r3, [r3, #0]
 800a3dc:	461a      	mov	r2, r3
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	3305      	adds	r3, #5
 800a3e2:	781b      	ldrb	r3, [r3, #0]
 800a3e4:	021b      	lsls	r3, r3, #8
 800a3e6:	b29b      	uxth	r3, r3
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	b29a      	uxth	r2, r3
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	799a      	ldrb	r2, [r3, #6]
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	889b      	ldrh	r3, [r3, #4]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d009      	beq.n	800a414 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a404:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a408:	d804      	bhi.n	800a414 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a40e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a412:	d901      	bls.n	800a418 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800a414:	2303      	movs	r3, #3
 800a416:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d136      	bne.n	800a490 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	78db      	ldrb	r3, [r3, #3]
 800a426:	f003 0303 	and.w	r3, r3, #3
 800a42a:	2b02      	cmp	r3, #2
 800a42c:	d108      	bne.n	800a440 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	889b      	ldrh	r3, [r3, #4]
 800a432:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a436:	f240 8097 	bls.w	800a568 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a43a:	2303      	movs	r3, #3
 800a43c:	75fb      	strb	r3, [r7, #23]
 800a43e:	e093      	b.n	800a568 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	78db      	ldrb	r3, [r3, #3]
 800a444:	f003 0303 	and.w	r3, r3, #3
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d107      	bne.n	800a45c <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	889b      	ldrh	r3, [r3, #4]
 800a450:	2b40      	cmp	r3, #64	@ 0x40
 800a452:	f240 8089 	bls.w	800a568 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a456:	2303      	movs	r3, #3
 800a458:	75fb      	strb	r3, [r7, #23]
 800a45a:	e085      	b.n	800a568 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	78db      	ldrb	r3, [r3, #3]
 800a460:	f003 0303 	and.w	r3, r3, #3
 800a464:	2b01      	cmp	r3, #1
 800a466:	d005      	beq.n	800a474 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	78db      	ldrb	r3, [r3, #3]
 800a46c:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a470:	2b03      	cmp	r3, #3
 800a472:	d10a      	bne.n	800a48a <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	799b      	ldrb	r3, [r3, #6]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d003      	beq.n	800a484 <USBH_ParseEPDesc+0xde>
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	799b      	ldrb	r3, [r3, #6]
 800a480:	2b10      	cmp	r3, #16
 800a482:	d970      	bls.n	800a566 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800a484:	2303      	movs	r3, #3
 800a486:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a488:	e06d      	b.n	800a566 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a48a:	2303      	movs	r3, #3
 800a48c:	75fb      	strb	r3, [r7, #23]
 800a48e:	e06b      	b.n	800a568 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a496:	2b01      	cmp	r3, #1
 800a498:	d13c      	bne.n	800a514 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	78db      	ldrb	r3, [r3, #3]
 800a49e:	f003 0303 	and.w	r3, r3, #3
 800a4a2:	2b02      	cmp	r3, #2
 800a4a4:	d005      	beq.n	800a4b2 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	78db      	ldrb	r3, [r3, #3]
 800a4aa:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d106      	bne.n	800a4c0 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	889b      	ldrh	r3, [r3, #4]
 800a4b6:	2b40      	cmp	r3, #64	@ 0x40
 800a4b8:	d956      	bls.n	800a568 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a4ba:	2303      	movs	r3, #3
 800a4bc:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a4be:	e053      	b.n	800a568 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	78db      	ldrb	r3, [r3, #3]
 800a4c4:	f003 0303 	and.w	r3, r3, #3
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d10e      	bne.n	800a4ea <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	799b      	ldrb	r3, [r3, #6]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d007      	beq.n	800a4e4 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800a4d8:	2b10      	cmp	r3, #16
 800a4da:	d803      	bhi.n	800a4e4 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800a4e0:	2b40      	cmp	r3, #64	@ 0x40
 800a4e2:	d941      	bls.n	800a568 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a4e4:	2303      	movs	r3, #3
 800a4e6:	75fb      	strb	r3, [r7, #23]
 800a4e8:	e03e      	b.n	800a568 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	78db      	ldrb	r3, [r3, #3]
 800a4ee:	f003 0303 	and.w	r3, r3, #3
 800a4f2:	2b03      	cmp	r3, #3
 800a4f4:	d10b      	bne.n	800a50e <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	799b      	ldrb	r3, [r3, #6]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d004      	beq.n	800a508 <USBH_ParseEPDesc+0x162>
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	889b      	ldrh	r3, [r3, #4]
 800a502:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a506:	d32f      	bcc.n	800a568 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a508:	2303      	movs	r3, #3
 800a50a:	75fb      	strb	r3, [r7, #23]
 800a50c:	e02c      	b.n	800a568 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a50e:	2303      	movs	r3, #3
 800a510:	75fb      	strb	r3, [r7, #23]
 800a512:	e029      	b.n	800a568 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a51a:	2b02      	cmp	r3, #2
 800a51c:	d120      	bne.n	800a560 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	78db      	ldrb	r3, [r3, #3]
 800a522:	f003 0303 	and.w	r3, r3, #3
 800a526:	2b00      	cmp	r3, #0
 800a528:	d106      	bne.n	800a538 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	889b      	ldrh	r3, [r3, #4]
 800a52e:	2b08      	cmp	r3, #8
 800a530:	d01a      	beq.n	800a568 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a532:	2303      	movs	r3, #3
 800a534:	75fb      	strb	r3, [r7, #23]
 800a536:	e017      	b.n	800a568 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	78db      	ldrb	r3, [r3, #3]
 800a53c:	f003 0303 	and.w	r3, r3, #3
 800a540:	2b03      	cmp	r3, #3
 800a542:	d10a      	bne.n	800a55a <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	799b      	ldrb	r3, [r3, #6]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d003      	beq.n	800a554 <USBH_ParseEPDesc+0x1ae>
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	889b      	ldrh	r3, [r3, #4]
 800a550:	2b08      	cmp	r3, #8
 800a552:	d909      	bls.n	800a568 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a554:	2303      	movs	r3, #3
 800a556:	75fb      	strb	r3, [r7, #23]
 800a558:	e006      	b.n	800a568 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a55a:	2303      	movs	r3, #3
 800a55c:	75fb      	strb	r3, [r7, #23]
 800a55e:	e003      	b.n	800a568 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a560:	2303      	movs	r3, #3
 800a562:	75fb      	strb	r3, [r7, #23]
 800a564:	e000      	b.n	800a568 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a566:	bf00      	nop
  }

  return status;
 800a568:	7dfb      	ldrb	r3, [r7, #23]
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	371c      	adds	r7, #28
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr

0800a576 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a576:	b480      	push	{r7}
 800a578:	b087      	sub	sp, #28
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	60f8      	str	r0, [r7, #12]
 800a57e:	60b9      	str	r1, [r7, #8]
 800a580:	4613      	mov	r3, r2
 800a582:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	3301      	adds	r3, #1
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	2b03      	cmp	r3, #3
 800a58c:	d120      	bne.n	800a5d0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	1e9a      	subs	r2, r3, #2
 800a594:	88fb      	ldrh	r3, [r7, #6]
 800a596:	4293      	cmp	r3, r2
 800a598:	bf28      	it	cs
 800a59a:	4613      	movcs	r3, r2
 800a59c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	3302      	adds	r3, #2
 800a5a2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	82fb      	strh	r3, [r7, #22]
 800a5a8:	e00b      	b.n	800a5c2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a5aa:	8afb      	ldrh	r3, [r7, #22]
 800a5ac:	68fa      	ldr	r2, [r7, #12]
 800a5ae:	4413      	add	r3, r2
 800a5b0:	781a      	ldrb	r2, [r3, #0]
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	3301      	adds	r3, #1
 800a5ba:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a5bc:	8afb      	ldrh	r3, [r7, #22]
 800a5be:	3302      	adds	r3, #2
 800a5c0:	82fb      	strh	r3, [r7, #22]
 800a5c2:	8afa      	ldrh	r2, [r7, #22]
 800a5c4:	8abb      	ldrh	r3, [r7, #20]
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d3ef      	bcc.n	800a5aa <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	701a      	strb	r2, [r3, #0]
  }
}
 800a5d0:	bf00      	nop
 800a5d2:	371c      	adds	r7, #28
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b085      	sub	sp, #20
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	881b      	ldrh	r3, [r3, #0]
 800a5ea:	687a      	ldr	r2, [r7, #4]
 800a5ec:	7812      	ldrb	r2, [r2, #0]
 800a5ee:	4413      	add	r3, r2
 800a5f0:	b29a      	uxth	r2, r3
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	781b      	ldrb	r3, [r3, #0]
 800a5fa:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	4413      	add	r3, r2
 800a600:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a602:	68fb      	ldr	r3, [r7, #12]
}
 800a604:	4618      	mov	r0, r3
 800a606:	3714      	adds	r7, #20
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr

0800a610 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b086      	sub	sp, #24
 800a614:	af00      	add	r7, sp, #0
 800a616:	60f8      	str	r0, [r7, #12]
 800a618:	60b9      	str	r1, [r7, #8]
 800a61a:	4613      	mov	r3, r2
 800a61c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a61e:	2301      	movs	r3, #1
 800a620:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	789b      	ldrb	r3, [r3, #2]
 800a626:	2b01      	cmp	r3, #1
 800a628:	d002      	beq.n	800a630 <USBH_CtlReq+0x20>
 800a62a:	2b02      	cmp	r3, #2
 800a62c:	d00f      	beq.n	800a64e <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 800a62e:	e027      	b.n	800a680 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	68ba      	ldr	r2, [r7, #8]
 800a634:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	88fa      	ldrh	r2, [r7, #6]
 800a63a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2201      	movs	r2, #1
 800a640:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2202      	movs	r2, #2
 800a646:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a648:	2301      	movs	r3, #1
 800a64a:	75fb      	strb	r3, [r7, #23]
      break;
 800a64c:	e018      	b.n	800a680 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a64e:	68f8      	ldr	r0, [r7, #12]
 800a650:	f000 f81c 	bl	800a68c <USBH_HandleControl>
 800a654:	4603      	mov	r3, r0
 800a656:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a658:	7dfb      	ldrb	r3, [r7, #23]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d002      	beq.n	800a664 <USBH_CtlReq+0x54>
 800a65e:	7dfb      	ldrb	r3, [r7, #23]
 800a660:	2b03      	cmp	r3, #3
 800a662:	d106      	bne.n	800a672 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2201      	movs	r2, #1
 800a668:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2200      	movs	r2, #0
 800a66e:	761a      	strb	r2, [r3, #24]
      break;
 800a670:	e005      	b.n	800a67e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a672:	7dfb      	ldrb	r3, [r7, #23]
 800a674:	2b02      	cmp	r3, #2
 800a676:	d102      	bne.n	800a67e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2201      	movs	r2, #1
 800a67c:	709a      	strb	r2, [r3, #2]
      break;
 800a67e:	bf00      	nop
  }
  return status;
 800a680:	7dfb      	ldrb	r3, [r7, #23]
}
 800a682:	4618      	mov	r0, r3
 800a684:	3718      	adds	r7, #24
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}
	...

0800a68c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b086      	sub	sp, #24
 800a690:	af02      	add	r7, sp, #8
 800a692:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a694:	2301      	movs	r3, #1
 800a696:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a698:	2300      	movs	r3, #0
 800a69a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	7e1b      	ldrb	r3, [r3, #24]
 800a6a0:	3b01      	subs	r3, #1
 800a6a2:	2b0a      	cmp	r3, #10
 800a6a4:	f200 8157 	bhi.w	800a956 <USBH_HandleControl+0x2ca>
 800a6a8:	a201      	add	r2, pc, #4	@ (adr r2, 800a6b0 <USBH_HandleControl+0x24>)
 800a6aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ae:	bf00      	nop
 800a6b0:	0800a6dd 	.word	0x0800a6dd
 800a6b4:	0800a6f7 	.word	0x0800a6f7
 800a6b8:	0800a761 	.word	0x0800a761
 800a6bc:	0800a787 	.word	0x0800a787
 800a6c0:	0800a7c1 	.word	0x0800a7c1
 800a6c4:	0800a7eb 	.word	0x0800a7eb
 800a6c8:	0800a83d 	.word	0x0800a83d
 800a6cc:	0800a85f 	.word	0x0800a85f
 800a6d0:	0800a89b 	.word	0x0800a89b
 800a6d4:	0800a8c1 	.word	0x0800a8c1
 800a6d8:	0800a8ff 	.word	0x0800a8ff
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f103 0110 	add.w	r1, r3, #16
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	795b      	ldrb	r3, [r3, #5]
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 f945 	bl	800a978 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2202      	movs	r2, #2
 800a6f2:	761a      	strb	r2, [r3, #24]
      break;
 800a6f4:	e13a      	b.n	800a96c <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	795b      	ldrb	r3, [r3, #5]
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 fcc7 	bl	800b090 <USBH_LL_GetURBState>
 800a702:	4603      	mov	r3, r0
 800a704:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a706:	7bbb      	ldrb	r3, [r7, #14]
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d11e      	bne.n	800a74a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	7c1b      	ldrb	r3, [r3, #16]
 800a710:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a714:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	8adb      	ldrh	r3, [r3, #22]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d00a      	beq.n	800a734 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a71e:	7b7b      	ldrb	r3, [r7, #13]
 800a720:	2b80      	cmp	r3, #128	@ 0x80
 800a722:	d103      	bne.n	800a72c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2203      	movs	r2, #3
 800a728:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800a72a:	e116      	b.n	800a95a <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2205      	movs	r2, #5
 800a730:	761a      	strb	r2, [r3, #24]
      break;
 800a732:	e112      	b.n	800a95a <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 800a734:	7b7b      	ldrb	r3, [r7, #13]
 800a736:	2b80      	cmp	r3, #128	@ 0x80
 800a738:	d103      	bne.n	800a742 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2209      	movs	r2, #9
 800a73e:	761a      	strb	r2, [r3, #24]
      break;
 800a740:	e10b      	b.n	800a95a <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2207      	movs	r2, #7
 800a746:	761a      	strb	r2, [r3, #24]
      break;
 800a748:	e107      	b.n	800a95a <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a74a:	7bbb      	ldrb	r3, [r7, #14]
 800a74c:	2b04      	cmp	r3, #4
 800a74e:	d003      	beq.n	800a758 <USBH_HandleControl+0xcc>
 800a750:	7bbb      	ldrb	r3, [r7, #14]
 800a752:	2b02      	cmp	r3, #2
 800a754:	f040 8101 	bne.w	800a95a <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	220b      	movs	r2, #11
 800a75c:	761a      	strb	r2, [r3, #24]
      break;
 800a75e:	e0fc      	b.n	800a95a <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a766:	b29a      	uxth	r2, r3
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6899      	ldr	r1, [r3, #8]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	899a      	ldrh	r2, [r3, #12]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	791b      	ldrb	r3, [r3, #4]
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f000 f93c 	bl	800a9f6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2204      	movs	r2, #4
 800a782:	761a      	strb	r2, [r3, #24]
      break;
 800a784:	e0f2      	b.n	800a96c <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	791b      	ldrb	r3, [r3, #4]
 800a78a:	4619      	mov	r1, r3
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 fc7f 	bl	800b090 <USBH_LL_GetURBState>
 800a792:	4603      	mov	r3, r0
 800a794:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a796:	7bbb      	ldrb	r3, [r7, #14]
 800a798:	2b01      	cmp	r3, #1
 800a79a:	d103      	bne.n	800a7a4 <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2209      	movs	r2, #9
 800a7a0:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800a7a2:	e0dc      	b.n	800a95e <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 800a7a4:	7bbb      	ldrb	r3, [r7, #14]
 800a7a6:	2b05      	cmp	r3, #5
 800a7a8:	d102      	bne.n	800a7b0 <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 800a7aa:	2303      	movs	r3, #3
 800a7ac:	73fb      	strb	r3, [r7, #15]
      break;
 800a7ae:	e0d6      	b.n	800a95e <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 800a7b0:	7bbb      	ldrb	r3, [r7, #14]
 800a7b2:	2b04      	cmp	r3, #4
 800a7b4:	f040 80d3 	bne.w	800a95e <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	220b      	movs	r2, #11
 800a7bc:	761a      	strb	r2, [r3, #24]
      break;
 800a7be:	e0ce      	b.n	800a95e <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6899      	ldr	r1, [r3, #8]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	899a      	ldrh	r2, [r3, #12]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	795b      	ldrb	r3, [r3, #5]
 800a7cc:	2001      	movs	r0, #1
 800a7ce:	9000      	str	r0, [sp, #0]
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f000 f8eb 	bl	800a9ac <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a7dc:	b29a      	uxth	r2, r3
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2206      	movs	r2, #6
 800a7e6:	761a      	strb	r2, [r3, #24]
      break;
 800a7e8:	e0c0      	b.n	800a96c <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	795b      	ldrb	r3, [r3, #5]
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f000 fc4d 	bl	800b090 <USBH_LL_GetURBState>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a7fa:	7bbb      	ldrb	r3, [r7, #14]
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d103      	bne.n	800a808 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2207      	movs	r2, #7
 800a804:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800a806:	e0ac      	b.n	800a962 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 800a808:	7bbb      	ldrb	r3, [r7, #14]
 800a80a:	2b05      	cmp	r3, #5
 800a80c:	d105      	bne.n	800a81a <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	220c      	movs	r2, #12
 800a812:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a814:	2303      	movs	r3, #3
 800a816:	73fb      	strb	r3, [r7, #15]
      break;
 800a818:	e0a3      	b.n	800a962 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a81a:	7bbb      	ldrb	r3, [r7, #14]
 800a81c:	2b02      	cmp	r3, #2
 800a81e:	d103      	bne.n	800a828 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2205      	movs	r2, #5
 800a824:	761a      	strb	r2, [r3, #24]
      break;
 800a826:	e09c      	b.n	800a962 <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 800a828:	7bbb      	ldrb	r3, [r7, #14]
 800a82a:	2b04      	cmp	r3, #4
 800a82c:	f040 8099 	bne.w	800a962 <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	220b      	movs	r2, #11
 800a834:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a836:	2302      	movs	r3, #2
 800a838:	73fb      	strb	r3, [r7, #15]
      break;
 800a83a:	e092      	b.n	800a962 <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	791b      	ldrb	r3, [r3, #4]
 800a840:	2200      	movs	r2, #0
 800a842:	2100      	movs	r1, #0
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 f8d6 	bl	800a9f6 <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a850:	b29a      	uxth	r2, r3
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2208      	movs	r2, #8
 800a85a:	761a      	strb	r2, [r3, #24]

      break;
 800a85c:	e086      	b.n	800a96c <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	791b      	ldrb	r3, [r3, #4]
 800a862:	4619      	mov	r1, r3
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f000 fc13 	bl	800b090 <USBH_LL_GetURBState>
 800a86a:	4603      	mov	r3, r0
 800a86c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a86e:	7bbb      	ldrb	r3, [r7, #14]
 800a870:	2b01      	cmp	r3, #1
 800a872:	d105      	bne.n	800a880 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	220d      	movs	r2, #13
 800a878:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a87a:	2300      	movs	r3, #0
 800a87c:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800a87e:	e072      	b.n	800a966 <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 800a880:	7bbb      	ldrb	r3, [r7, #14]
 800a882:	2b04      	cmp	r3, #4
 800a884:	d103      	bne.n	800a88e <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	220b      	movs	r2, #11
 800a88a:	761a      	strb	r2, [r3, #24]
      break;
 800a88c:	e06b      	b.n	800a966 <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 800a88e:	7bbb      	ldrb	r3, [r7, #14]
 800a890:	2b05      	cmp	r3, #5
 800a892:	d168      	bne.n	800a966 <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 800a894:	2303      	movs	r3, #3
 800a896:	73fb      	strb	r3, [r7, #15]
      break;
 800a898:	e065      	b.n	800a966 <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	795b      	ldrb	r3, [r3, #5]
 800a89e:	2201      	movs	r2, #1
 800a8a0:	9200      	str	r2, [sp, #0]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	2100      	movs	r1, #0
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f000 f880 	bl	800a9ac <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a8b2:	b29a      	uxth	r2, r3
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	220a      	movs	r2, #10
 800a8bc:	761a      	strb	r2, [r3, #24]
      break;
 800a8be:	e055      	b.n	800a96c <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	795b      	ldrb	r3, [r3, #5]
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f000 fbe2 	bl	800b090 <USBH_LL_GetURBState>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a8d0:	7bbb      	ldrb	r3, [r7, #14]
 800a8d2:	2b01      	cmp	r3, #1
 800a8d4:	d105      	bne.n	800a8e2 <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	220d      	movs	r2, #13
 800a8de:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800a8e0:	e043      	b.n	800a96a <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a8e2:	7bbb      	ldrb	r3, [r7, #14]
 800a8e4:	2b02      	cmp	r3, #2
 800a8e6:	d103      	bne.n	800a8f0 <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2209      	movs	r2, #9
 800a8ec:	761a      	strb	r2, [r3, #24]
      break;
 800a8ee:	e03c      	b.n	800a96a <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 800a8f0:	7bbb      	ldrb	r3, [r7, #14]
 800a8f2:	2b04      	cmp	r3, #4
 800a8f4:	d139      	bne.n	800a96a <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	220b      	movs	r2, #11
 800a8fa:	761a      	strb	r2, [r3, #24]
      break;
 800a8fc:	e035      	b.n	800a96a <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	7e5b      	ldrb	r3, [r3, #25]
 800a902:	3301      	adds	r3, #1
 800a904:	b2da      	uxtb	r2, r3
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	765a      	strb	r2, [r3, #25]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	7e5b      	ldrb	r3, [r3, #25]
 800a90e:	2b02      	cmp	r3, #2
 800a910:	d806      	bhi.n	800a920 <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2201      	movs	r2, #1
 800a916:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2201      	movs	r2, #1
 800a91c:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a91e:	e025      	b.n	800a96c <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a926:	2106      	movs	r1, #6
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2200      	movs	r2, #0
 800a930:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	795b      	ldrb	r3, [r3, #5]
 800a936:	4619      	mov	r1, r3
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 f90d 	bl	800ab58 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	791b      	ldrb	r3, [r3, #4]
 800a942:	4619      	mov	r1, r3
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f000 f907 	bl	800ab58 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2200      	movs	r2, #0
 800a94e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a950:	2302      	movs	r3, #2
 800a952:	73fb      	strb	r3, [r7, #15]
      break;
 800a954:	e00a      	b.n	800a96c <USBH_HandleControl+0x2e0>

    default:
      break;
 800a956:	bf00      	nop
 800a958:	e008      	b.n	800a96c <USBH_HandleControl+0x2e0>
      break;
 800a95a:	bf00      	nop
 800a95c:	e006      	b.n	800a96c <USBH_HandleControl+0x2e0>
      break;
 800a95e:	bf00      	nop
 800a960:	e004      	b.n	800a96c <USBH_HandleControl+0x2e0>
      break;
 800a962:	bf00      	nop
 800a964:	e002      	b.n	800a96c <USBH_HandleControl+0x2e0>
      break;
 800a966:	bf00      	nop
 800a968:	e000      	b.n	800a96c <USBH_HandleControl+0x2e0>
      break;
 800a96a:	bf00      	nop
  }

  return status;
 800a96c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3710      	adds	r7, #16
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop

0800a978 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b088      	sub	sp, #32
 800a97c:	af04      	add	r7, sp, #16
 800a97e:	60f8      	str	r0, [r7, #12]
 800a980:	60b9      	str	r1, [r7, #8]
 800a982:	4613      	mov	r3, r2
 800a984:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a986:	79f9      	ldrb	r1, [r7, #7]
 800a988:	2300      	movs	r3, #0
 800a98a:	9303      	str	r3, [sp, #12]
 800a98c:	2308      	movs	r3, #8
 800a98e:	9302      	str	r3, [sp, #8]
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	9301      	str	r3, [sp, #4]
 800a994:	2300      	movs	r3, #0
 800a996:	9300      	str	r3, [sp, #0]
 800a998:	2300      	movs	r3, #0
 800a99a:	2200      	movs	r2, #0
 800a99c:	68f8      	ldr	r0, [r7, #12]
 800a99e:	f000 fb46 	bl	800b02e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a9a2:	2300      	movs	r3, #0
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3710      	adds	r7, #16
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b088      	sub	sp, #32
 800a9b0:	af04      	add	r7, sp, #16
 800a9b2:	60f8      	str	r0, [r7, #12]
 800a9b4:	60b9      	str	r1, [r7, #8]
 800a9b6:	4611      	mov	r1, r2
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	460b      	mov	r3, r1
 800a9bc:	80fb      	strh	r3, [r7, #6]
 800a9be:	4613      	mov	r3, r2
 800a9c0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d001      	beq.n	800a9d0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a9d0:	7979      	ldrb	r1, [r7, #5]
 800a9d2:	7e3b      	ldrb	r3, [r7, #24]
 800a9d4:	9303      	str	r3, [sp, #12]
 800a9d6:	88fb      	ldrh	r3, [r7, #6]
 800a9d8:	9302      	str	r3, [sp, #8]
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	9301      	str	r3, [sp, #4]
 800a9de:	2301      	movs	r3, #1
 800a9e0:	9300      	str	r3, [sp, #0]
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	68f8      	ldr	r0, [r7, #12]
 800a9e8:	f000 fb21 	bl	800b02e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a9ec:	2300      	movs	r3, #0
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3710      	adds	r7, #16
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}

0800a9f6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a9f6:	b580      	push	{r7, lr}
 800a9f8:	b088      	sub	sp, #32
 800a9fa:	af04      	add	r7, sp, #16
 800a9fc:	60f8      	str	r0, [r7, #12]
 800a9fe:	60b9      	str	r1, [r7, #8]
 800aa00:	4611      	mov	r1, r2
 800aa02:	461a      	mov	r2, r3
 800aa04:	460b      	mov	r3, r1
 800aa06:	80fb      	strh	r3, [r7, #6]
 800aa08:	4613      	mov	r3, r2
 800aa0a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aa0c:	7979      	ldrb	r1, [r7, #5]
 800aa0e:	2300      	movs	r3, #0
 800aa10:	9303      	str	r3, [sp, #12]
 800aa12:	88fb      	ldrh	r3, [r7, #6]
 800aa14:	9302      	str	r3, [sp, #8]
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	9301      	str	r3, [sp, #4]
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	9300      	str	r3, [sp, #0]
 800aa1e:	2300      	movs	r3, #0
 800aa20:	2201      	movs	r2, #1
 800aa22:	68f8      	ldr	r0, [r7, #12]
 800aa24:	f000 fb03 	bl	800b02e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800aa28:	2300      	movs	r3, #0

}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3710      	adds	r7, #16
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}

0800aa32 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800aa32:	b580      	push	{r7, lr}
 800aa34:	b088      	sub	sp, #32
 800aa36:	af04      	add	r7, sp, #16
 800aa38:	60f8      	str	r0, [r7, #12]
 800aa3a:	60b9      	str	r1, [r7, #8]
 800aa3c:	4611      	mov	r1, r2
 800aa3e:	461a      	mov	r2, r3
 800aa40:	460b      	mov	r3, r1
 800aa42:	80fb      	strh	r3, [r7, #6]
 800aa44:	4613      	mov	r3, r2
 800aa46:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d001      	beq.n	800aa56 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800aa52:	2300      	movs	r3, #0
 800aa54:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aa56:	7979      	ldrb	r1, [r7, #5]
 800aa58:	7e3b      	ldrb	r3, [r7, #24]
 800aa5a:	9303      	str	r3, [sp, #12]
 800aa5c:	88fb      	ldrh	r3, [r7, #6]
 800aa5e:	9302      	str	r3, [sp, #8]
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	9301      	str	r3, [sp, #4]
 800aa64:	2301      	movs	r3, #1
 800aa66:	9300      	str	r3, [sp, #0]
 800aa68:	2302      	movs	r3, #2
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	68f8      	ldr	r0, [r7, #12]
 800aa6e:	f000 fade 	bl	800b02e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800aa72:	2300      	movs	r3, #0
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3710      	adds	r7, #16
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b088      	sub	sp, #32
 800aa80:	af04      	add	r7, sp, #16
 800aa82:	60f8      	str	r0, [r7, #12]
 800aa84:	60b9      	str	r1, [r7, #8]
 800aa86:	4611      	mov	r1, r2
 800aa88:	461a      	mov	r2, r3
 800aa8a:	460b      	mov	r3, r1
 800aa8c:	80fb      	strh	r3, [r7, #6]
 800aa8e:	4613      	mov	r3, r2
 800aa90:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aa92:	7979      	ldrb	r1, [r7, #5]
 800aa94:	2300      	movs	r3, #0
 800aa96:	9303      	str	r3, [sp, #12]
 800aa98:	88fb      	ldrh	r3, [r7, #6]
 800aa9a:	9302      	str	r3, [sp, #8]
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	9301      	str	r3, [sp, #4]
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	9300      	str	r3, [sp, #0]
 800aaa4:	2302      	movs	r3, #2
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	68f8      	ldr	r0, [r7, #12]
 800aaaa:	f000 fac0 	bl	800b02e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800aaae:	2300      	movs	r3, #0
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3710      	adds	r7, #16
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b086      	sub	sp, #24
 800aabc:	af04      	add	r7, sp, #16
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	4608      	mov	r0, r1
 800aac2:	4611      	mov	r1, r2
 800aac4:	461a      	mov	r2, r3
 800aac6:	4603      	mov	r3, r0
 800aac8:	70fb      	strb	r3, [r7, #3]
 800aaca:	460b      	mov	r3, r1
 800aacc:	70bb      	strb	r3, [r7, #2]
 800aace:	4613      	mov	r3, r2
 800aad0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800aad2:	7878      	ldrb	r0, [r7, #1]
 800aad4:	78ba      	ldrb	r2, [r7, #2]
 800aad6:	78f9      	ldrb	r1, [r7, #3]
 800aad8:	8b3b      	ldrh	r3, [r7, #24]
 800aada:	9302      	str	r3, [sp, #8]
 800aadc:	7d3b      	ldrb	r3, [r7, #20]
 800aade:	9301      	str	r3, [sp, #4]
 800aae0:	7c3b      	ldrb	r3, [r7, #16]
 800aae2:	9300      	str	r3, [sp, #0]
 800aae4:	4603      	mov	r3, r0
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f000 fa53 	bl	800af92 <USBH_LL_OpenPipe>

  return USBH_OK;
 800aaec:	2300      	movs	r3, #0
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3708      	adds	r7, #8
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}

0800aaf6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800aaf6:	b580      	push	{r7, lr}
 800aaf8:	b082      	sub	sp, #8
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	6078      	str	r0, [r7, #4]
 800aafe:	460b      	mov	r3, r1
 800ab00:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800ab02:	78fb      	ldrb	r3, [r7, #3]
 800ab04:	4619      	mov	r1, r3
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f000 fa72 	bl	800aff0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800ab0c:	2300      	movs	r3, #0
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3708      	adds	r7, #8
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}

0800ab16 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ab16:	b580      	push	{r7, lr}
 800ab18:	b084      	sub	sp, #16
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	6078      	str	r0, [r7, #4]
 800ab1e:	460b      	mov	r3, r1
 800ab20:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f000 f836 	bl	800ab94 <USBH_GetFreePipe>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ab2c:	89fb      	ldrh	r3, [r7, #14]
 800ab2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d00a      	beq.n	800ab4c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800ab36:	78fa      	ldrb	r2, [r7, #3]
 800ab38:	89fb      	ldrh	r3, [r7, #14]
 800ab3a:	f003 030f 	and.w	r3, r3, #15
 800ab3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ab42:	6879      	ldr	r1, [r7, #4]
 800ab44:	33e0      	adds	r3, #224	@ 0xe0
 800ab46:	009b      	lsls	r3, r3, #2
 800ab48:	440b      	add	r3, r1
 800ab4a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ab4c:	89fb      	ldrh	r3, [r7, #14]
 800ab4e:	b2db      	uxtb	r3, r3
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3710      	adds	r7, #16
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b083      	sub	sp, #12
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	460b      	mov	r3, r1
 800ab62:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800ab64:	78fb      	ldrb	r3, [r7, #3]
 800ab66:	2b0f      	cmp	r3, #15
 800ab68:	d80d      	bhi.n	800ab86 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ab6a:	78fb      	ldrb	r3, [r7, #3]
 800ab6c:	687a      	ldr	r2, [r7, #4]
 800ab6e:	33e0      	adds	r3, #224	@ 0xe0
 800ab70:	009b      	lsls	r3, r3, #2
 800ab72:	4413      	add	r3, r2
 800ab74:	685a      	ldr	r2, [r3, #4]
 800ab76:	78fb      	ldrb	r3, [r7, #3]
 800ab78:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ab7c:	6879      	ldr	r1, [r7, #4]
 800ab7e:	33e0      	adds	r3, #224	@ 0xe0
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	440b      	add	r3, r1
 800ab84:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ab86:	2300      	movs	r3, #0
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	370c      	adds	r7, #12
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr

0800ab94 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b085      	sub	sp, #20
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800aba0:	2300      	movs	r3, #0
 800aba2:	73fb      	strb	r3, [r7, #15]
 800aba4:	e00f      	b.n	800abc6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800aba6:	7bfb      	ldrb	r3, [r7, #15]
 800aba8:	687a      	ldr	r2, [r7, #4]
 800abaa:	33e0      	adds	r3, #224	@ 0xe0
 800abac:	009b      	lsls	r3, r3, #2
 800abae:	4413      	add	r3, r2
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d102      	bne.n	800abc0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800abba:	7bfb      	ldrb	r3, [r7, #15]
 800abbc:	b29b      	uxth	r3, r3
 800abbe:	e007      	b.n	800abd0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800abc0:	7bfb      	ldrb	r3, [r7, #15]
 800abc2:	3301      	adds	r3, #1
 800abc4:	73fb      	strb	r3, [r7, #15]
 800abc6:	7bfb      	ldrb	r3, [r7, #15]
 800abc8:	2b0f      	cmp	r3, #15
 800abca:	d9ec      	bls.n	800aba6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800abcc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3714      	adds	r7, #20
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr

0800abdc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800abe0:	2201      	movs	r2, #1
 800abe2:	490e      	ldr	r1, [pc, #56]	@ (800ac1c <MX_USB_HOST_Init+0x40>)
 800abe4:	480e      	ldr	r0, [pc, #56]	@ (800ac20 <MX_USB_HOST_Init+0x44>)
 800abe6:	f7fe fb0f 	bl	8009208 <USBH_Init>
 800abea:	4603      	mov	r3, r0
 800abec:	2b00      	cmp	r3, #0
 800abee:	d001      	beq.n	800abf4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800abf0:	f7f6 fde4 	bl	80017bc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800abf4:	490b      	ldr	r1, [pc, #44]	@ (800ac24 <MX_USB_HOST_Init+0x48>)
 800abf6:	480a      	ldr	r0, [pc, #40]	@ (800ac20 <MX_USB_HOST_Init+0x44>)
 800abf8:	f7fe fbb1 	bl	800935e <USBH_RegisterClass>
 800abfc:	4603      	mov	r3, r0
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d001      	beq.n	800ac06 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ac02:	f7f6 fddb 	bl	80017bc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ac06:	4806      	ldr	r0, [pc, #24]	@ (800ac20 <MX_USB_HOST_Init+0x44>)
 800ac08:	f7fe fc35 	bl	8009476 <USBH_Start>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d001      	beq.n	800ac16 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ac12:	f7f6 fdd3 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ac16:	bf00      	nop
 800ac18:	bd80      	pop	{r7, pc}
 800ac1a:	bf00      	nop
 800ac1c:	0800ac3d 	.word	0x0800ac3d
 800ac20:	20000448 	.word	0x20000448
 800ac24:	2000000c 	.word	0x2000000c

0800ac28 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800ac2c:	4802      	ldr	r0, [pc, #8]	@ (800ac38 <MX_USB_HOST_Process+0x10>)
 800ac2e:	f7fe fc33 	bl	8009498 <USBH_Process>
}
 800ac32:	bf00      	nop
 800ac34:	bd80      	pop	{r7, pc}
 800ac36:	bf00      	nop
 800ac38:	20000448 	.word	0x20000448

0800ac3c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b083      	sub	sp, #12
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	460b      	mov	r3, r1
 800ac46:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ac48:	78fb      	ldrb	r3, [r7, #3]
 800ac4a:	3b01      	subs	r3, #1
 800ac4c:	2b04      	cmp	r3, #4
 800ac4e:	d819      	bhi.n	800ac84 <USBH_UserProcess+0x48>
 800ac50:	a201      	add	r2, pc, #4	@ (adr r2, 800ac58 <USBH_UserProcess+0x1c>)
 800ac52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac56:	bf00      	nop
 800ac58:	0800ac85 	.word	0x0800ac85
 800ac5c:	0800ac75 	.word	0x0800ac75
 800ac60:	0800ac85 	.word	0x0800ac85
 800ac64:	0800ac7d 	.word	0x0800ac7d
 800ac68:	0800ac6d 	.word	0x0800ac6d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ac6c:	4b09      	ldr	r3, [pc, #36]	@ (800ac94 <USBH_UserProcess+0x58>)
 800ac6e:	2203      	movs	r2, #3
 800ac70:	701a      	strb	r2, [r3, #0]
  break;
 800ac72:	e008      	b.n	800ac86 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ac74:	4b07      	ldr	r3, [pc, #28]	@ (800ac94 <USBH_UserProcess+0x58>)
 800ac76:	2202      	movs	r2, #2
 800ac78:	701a      	strb	r2, [r3, #0]
  break;
 800ac7a:	e004      	b.n	800ac86 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ac7c:	4b05      	ldr	r3, [pc, #20]	@ (800ac94 <USBH_UserProcess+0x58>)
 800ac7e:	2201      	movs	r2, #1
 800ac80:	701a      	strb	r2, [r3, #0]
  break;
 800ac82:	e000      	b.n	800ac86 <USBH_UserProcess+0x4a>

  default:
  break;
 800ac84:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ac86:	bf00      	nop
 800ac88:	370c      	adds	r7, #12
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac90:	4770      	bx	lr
 800ac92:	bf00      	nop
 800ac94:	20000820 	.word	0x20000820

0800ac98 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b08a      	sub	sp, #40	@ 0x28
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aca0:	f107 0314 	add.w	r3, r7, #20
 800aca4:	2200      	movs	r2, #0
 800aca6:	601a      	str	r2, [r3, #0]
 800aca8:	605a      	str	r2, [r3, #4]
 800acaa:	609a      	str	r2, [r3, #8]
 800acac:	60da      	str	r2, [r3, #12]
 800acae:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800acb8:	d147      	bne.n	800ad4a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800acba:	2300      	movs	r3, #0
 800acbc:	613b      	str	r3, [r7, #16]
 800acbe:	4b25      	ldr	r3, [pc, #148]	@ (800ad54 <HAL_HCD_MspInit+0xbc>)
 800acc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acc2:	4a24      	ldr	r2, [pc, #144]	@ (800ad54 <HAL_HCD_MspInit+0xbc>)
 800acc4:	f043 0301 	orr.w	r3, r3, #1
 800acc8:	6313      	str	r3, [r2, #48]	@ 0x30
 800acca:	4b22      	ldr	r3, [pc, #136]	@ (800ad54 <HAL_HCD_MspInit+0xbc>)
 800accc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acce:	f003 0301 	and.w	r3, r3, #1
 800acd2:	613b      	str	r3, [r7, #16]
 800acd4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800acd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800acda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800acdc:	2300      	movs	r3, #0
 800acde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ace0:	2300      	movs	r3, #0
 800ace2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ace4:	f107 0314 	add.w	r3, r7, #20
 800ace8:	4619      	mov	r1, r3
 800acea:	481b      	ldr	r0, [pc, #108]	@ (800ad58 <HAL_HCD_MspInit+0xc0>)
 800acec:	f7f7 fc1e 	bl	800252c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800acf0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800acf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800acf6:	2302      	movs	r3, #2
 800acf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acfa:	2300      	movs	r3, #0
 800acfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800acfe:	2300      	movs	r3, #0
 800ad00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ad02:	230a      	movs	r3, #10
 800ad04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad06:	f107 0314 	add.w	r3, r7, #20
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	4812      	ldr	r0, [pc, #72]	@ (800ad58 <HAL_HCD_MspInit+0xc0>)
 800ad0e:	f7f7 fc0d 	bl	800252c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ad12:	4b10      	ldr	r3, [pc, #64]	@ (800ad54 <HAL_HCD_MspInit+0xbc>)
 800ad14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad16:	4a0f      	ldr	r2, [pc, #60]	@ (800ad54 <HAL_HCD_MspInit+0xbc>)
 800ad18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad1c:	6353      	str	r3, [r2, #52]	@ 0x34
 800ad1e:	2300      	movs	r3, #0
 800ad20:	60fb      	str	r3, [r7, #12]
 800ad22:	4b0c      	ldr	r3, [pc, #48]	@ (800ad54 <HAL_HCD_MspInit+0xbc>)
 800ad24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad26:	4a0b      	ldr	r2, [pc, #44]	@ (800ad54 <HAL_HCD_MspInit+0xbc>)
 800ad28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ad2c:	6453      	str	r3, [r2, #68]	@ 0x44
 800ad2e:	4b09      	ldr	r3, [pc, #36]	@ (800ad54 <HAL_HCD_MspInit+0xbc>)
 800ad30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ad36:	60fb      	str	r3, [r7, #12]
 800ad38:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	2100      	movs	r1, #0
 800ad3e:	2043      	movs	r0, #67	@ 0x43
 800ad40:	f7f7 f8d3 	bl	8001eea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ad44:	2043      	movs	r0, #67	@ 0x43
 800ad46:	f7f7 f8ec 	bl	8001f22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ad4a:	bf00      	nop
 800ad4c:	3728      	adds	r7, #40	@ 0x28
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
 800ad52:	bf00      	nop
 800ad54:	40023800 	.word	0x40023800
 800ad58:	40020000 	.word	0x40020000

0800ad5c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b082      	sub	sp, #8
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f7fe ff6d 	bl	8009c4a <USBH_LL_IncTimer>
}
 800ad70:	bf00      	nop
 800ad72:	3708      	adds	r7, #8
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}

0800ad78 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b082      	sub	sp, #8
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ad86:	4618      	mov	r0, r3
 800ad88:	f7fe ffa9 	bl	8009cde <USBH_LL_Connect>
}
 800ad8c:	bf00      	nop
 800ad8e:	3708      	adds	r7, #8
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b082      	sub	sp, #8
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ada2:	4618      	mov	r0, r3
 800ada4:	f7fe ffb2 	bl	8009d0c <USBH_LL_Disconnect>
}
 800ada8:	bf00      	nop
 800adaa:	3708      	adds	r7, #8
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b083      	sub	sp, #12
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	460b      	mov	r3, r1
 800adba:	70fb      	strb	r3, [r7, #3]
 800adbc:	4613      	mov	r3, r2
 800adbe:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800adc0:	bf00      	nop
 800adc2:	370c      	adds	r7, #12
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr

0800adcc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b082      	sub	sp, #8
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800adda:	4618      	mov	r0, r3
 800addc:	f7fe ff5f 	bl	8009c9e <USBH_LL_PortEnabled>
}
 800ade0:	bf00      	nop
 800ade2:	3708      	adds	r7, #8
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}

0800ade8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b082      	sub	sp, #8
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7fe ff5f 	bl	8009cba <USBH_LL_PortDisabled>
}
 800adfc:	bf00      	nop
 800adfe:	3708      	adds	r7, #8
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b082      	sub	sp, #8
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800ae12:	2b01      	cmp	r3, #1
 800ae14:	d12a      	bne.n	800ae6c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ae16:	4a18      	ldr	r2, [pc, #96]	@ (800ae78 <USBH_LL_Init+0x74>)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	4a15      	ldr	r2, [pc, #84]	@ (800ae78 <USBH_LL_Init+0x74>)
 800ae22:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ae26:	4b14      	ldr	r3, [pc, #80]	@ (800ae78 <USBH_LL_Init+0x74>)
 800ae28:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ae2c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ae2e:	4b12      	ldr	r3, [pc, #72]	@ (800ae78 <USBH_LL_Init+0x74>)
 800ae30:	2208      	movs	r2, #8
 800ae32:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ae34:	4b10      	ldr	r3, [pc, #64]	@ (800ae78 <USBH_LL_Init+0x74>)
 800ae36:	2201      	movs	r2, #1
 800ae38:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ae3a:	4b0f      	ldr	r3, [pc, #60]	@ (800ae78 <USBH_LL_Init+0x74>)
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ae40:	4b0d      	ldr	r3, [pc, #52]	@ (800ae78 <USBH_LL_Init+0x74>)
 800ae42:	2202      	movs	r2, #2
 800ae44:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ae46:	4b0c      	ldr	r3, [pc, #48]	@ (800ae78 <USBH_LL_Init+0x74>)
 800ae48:	2200      	movs	r2, #0
 800ae4a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ae4c:	480a      	ldr	r0, [pc, #40]	@ (800ae78 <USBH_LL_Init+0x74>)
 800ae4e:	f7f7 fd54 	bl	80028fa <HAL_HCD_Init>
 800ae52:	4603      	mov	r3, r0
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d001      	beq.n	800ae5c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ae58:	f7f6 fcb0 	bl	80017bc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ae5c:	4806      	ldr	r0, [pc, #24]	@ (800ae78 <USBH_LL_Init+0x74>)
 800ae5e:	f7f8 f9b5 	bl	80031cc <HAL_HCD_GetCurrentFrame>
 800ae62:	4603      	mov	r3, r0
 800ae64:	4619      	mov	r1, r3
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f7fe fee0 	bl	8009c2c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ae6c:	2300      	movs	r3, #0
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3708      	adds	r7, #8
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}
 800ae76:	bf00      	nop
 800ae78:	20000824 	.word	0x20000824

0800ae7c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b084      	sub	sp, #16
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae84:	2300      	movs	r3, #0
 800ae86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ae92:	4618      	mov	r0, r3
 800ae94:	f7f8 f922 	bl	80030dc <HAL_HCD_Start>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ae9c:	7bfb      	ldrb	r3, [r7, #15]
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f000 f95e 	bl	800b160 <USBH_Get_USB_Status>
 800aea4:	4603      	mov	r3, r0
 800aea6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aea8:	7bbb      	ldrb	r3, [r7, #14]
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3710      	adds	r7, #16
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}

0800aeb2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800aeb2:	b580      	push	{r7, lr}
 800aeb4:	b084      	sub	sp, #16
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aeba:	2300      	movs	r3, #0
 800aebc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aebe:	2300      	movs	r3, #0
 800aec0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aec8:	4618      	mov	r0, r3
 800aeca:	f7f8 f92a 	bl	8003122 <HAL_HCD_Stop>
 800aece:	4603      	mov	r3, r0
 800aed0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aed2:	7bfb      	ldrb	r3, [r7, #15]
 800aed4:	4618      	mov	r0, r3
 800aed6:	f000 f943 	bl	800b160 <USBH_Get_USB_Status>
 800aeda:	4603      	mov	r3, r0
 800aedc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aede:	7bbb      	ldrb	r3, [r7, #14]
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3710      	adds	r7, #16
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b084      	sub	sp, #16
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800aef0:	2301      	movs	r3, #1
 800aef2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7f8 f974 	bl	80031e8 <HAL_HCD_GetCurrentSpeed>
 800af00:	4603      	mov	r3, r0
 800af02:	2b02      	cmp	r3, #2
 800af04:	d00c      	beq.n	800af20 <USBH_LL_GetSpeed+0x38>
 800af06:	2b02      	cmp	r3, #2
 800af08:	d80d      	bhi.n	800af26 <USBH_LL_GetSpeed+0x3e>
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d002      	beq.n	800af14 <USBH_LL_GetSpeed+0x2c>
 800af0e:	2b01      	cmp	r3, #1
 800af10:	d003      	beq.n	800af1a <USBH_LL_GetSpeed+0x32>
 800af12:	e008      	b.n	800af26 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800af14:	2300      	movs	r3, #0
 800af16:	73fb      	strb	r3, [r7, #15]
    break;
 800af18:	e008      	b.n	800af2c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800af1a:	2301      	movs	r3, #1
 800af1c:	73fb      	strb	r3, [r7, #15]
    break;
 800af1e:	e005      	b.n	800af2c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800af20:	2302      	movs	r3, #2
 800af22:	73fb      	strb	r3, [r7, #15]
    break;
 800af24:	e002      	b.n	800af2c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800af26:	2301      	movs	r3, #1
 800af28:	73fb      	strb	r3, [r7, #15]
    break;
 800af2a:	bf00      	nop
  }
  return  speed;
 800af2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3710      	adds	r7, #16
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}

0800af36 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800af36:	b580      	push	{r7, lr}
 800af38:	b084      	sub	sp, #16
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af3e:	2300      	movs	r3, #0
 800af40:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af42:	2300      	movs	r3, #0
 800af44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800af4c:	4618      	mov	r0, r3
 800af4e:	f7f8 f905 	bl	800315c <HAL_HCD_ResetPort>
 800af52:	4603      	mov	r3, r0
 800af54:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800af56:	7bfb      	ldrb	r3, [r7, #15]
 800af58:	4618      	mov	r0, r3
 800af5a:	f000 f901 	bl	800b160 <USBH_Get_USB_Status>
 800af5e:	4603      	mov	r3, r0
 800af60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af62:	7bbb      	ldrb	r3, [r7, #14]
}
 800af64:	4618      	mov	r0, r3
 800af66:	3710      	adds	r7, #16
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b082      	sub	sp, #8
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	460b      	mov	r3, r1
 800af76:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800af7e:	78fa      	ldrb	r2, [r7, #3]
 800af80:	4611      	mov	r1, r2
 800af82:	4618      	mov	r0, r3
 800af84:	f7f8 f90d 	bl	80031a2 <HAL_HCD_HC_GetXferCount>
 800af88:	4603      	mov	r3, r0
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3708      	adds	r7, #8
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}

0800af92 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800af92:	b590      	push	{r4, r7, lr}
 800af94:	b089      	sub	sp, #36	@ 0x24
 800af96:	af04      	add	r7, sp, #16
 800af98:	6078      	str	r0, [r7, #4]
 800af9a:	4608      	mov	r0, r1
 800af9c:	4611      	mov	r1, r2
 800af9e:	461a      	mov	r2, r3
 800afa0:	4603      	mov	r3, r0
 800afa2:	70fb      	strb	r3, [r7, #3]
 800afa4:	460b      	mov	r3, r1
 800afa6:	70bb      	strb	r3, [r7, #2]
 800afa8:	4613      	mov	r3, r2
 800afaa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afac:	2300      	movs	r3, #0
 800afae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800afb0:	2300      	movs	r3, #0
 800afb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800afba:	787c      	ldrb	r4, [r7, #1]
 800afbc:	78ba      	ldrb	r2, [r7, #2]
 800afbe:	78f9      	ldrb	r1, [r7, #3]
 800afc0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800afc2:	9302      	str	r3, [sp, #8]
 800afc4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800afc8:	9301      	str	r3, [sp, #4]
 800afca:	f897 3020 	ldrb.w	r3, [r7, #32]
 800afce:	9300      	str	r3, [sp, #0]
 800afd0:	4623      	mov	r3, r4
 800afd2:	f7f7 fcf9 	bl	80029c8 <HAL_HCD_HC_Init>
 800afd6:	4603      	mov	r3, r0
 800afd8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800afda:	7bfb      	ldrb	r3, [r7, #15]
 800afdc:	4618      	mov	r0, r3
 800afde:	f000 f8bf 	bl	800b160 <USBH_Get_USB_Status>
 800afe2:	4603      	mov	r3, r0
 800afe4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afe6:	7bbb      	ldrb	r3, [r7, #14]
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3714      	adds	r7, #20
 800afec:	46bd      	mov	sp, r7
 800afee:	bd90      	pop	{r4, r7, pc}

0800aff0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	460b      	mov	r3, r1
 800affa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800affc:	2300      	movs	r3, #0
 800affe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b000:	2300      	movs	r3, #0
 800b002:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b00a:	78fa      	ldrb	r2, [r7, #3]
 800b00c:	4611      	mov	r1, r2
 800b00e:	4618      	mov	r0, r3
 800b010:	f7f7 fd92 	bl	8002b38 <HAL_HCD_HC_Halt>
 800b014:	4603      	mov	r3, r0
 800b016:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b018:	7bfb      	ldrb	r3, [r7, #15]
 800b01a:	4618      	mov	r0, r3
 800b01c:	f000 f8a0 	bl	800b160 <USBH_Get_USB_Status>
 800b020:	4603      	mov	r3, r0
 800b022:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b024:	7bbb      	ldrb	r3, [r7, #14]
}
 800b026:	4618      	mov	r0, r3
 800b028:	3710      	adds	r7, #16
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}

0800b02e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b02e:	b590      	push	{r4, r7, lr}
 800b030:	b089      	sub	sp, #36	@ 0x24
 800b032:	af04      	add	r7, sp, #16
 800b034:	6078      	str	r0, [r7, #4]
 800b036:	4608      	mov	r0, r1
 800b038:	4611      	mov	r1, r2
 800b03a:	461a      	mov	r2, r3
 800b03c:	4603      	mov	r3, r0
 800b03e:	70fb      	strb	r3, [r7, #3]
 800b040:	460b      	mov	r3, r1
 800b042:	70bb      	strb	r3, [r7, #2]
 800b044:	4613      	mov	r3, r2
 800b046:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b048:	2300      	movs	r3, #0
 800b04a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b04c:	2300      	movs	r3, #0
 800b04e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b056:	787c      	ldrb	r4, [r7, #1]
 800b058:	78ba      	ldrb	r2, [r7, #2]
 800b05a:	78f9      	ldrb	r1, [r7, #3]
 800b05c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b060:	9303      	str	r3, [sp, #12]
 800b062:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b064:	9302      	str	r3, [sp, #8]
 800b066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b068:	9301      	str	r3, [sp, #4]
 800b06a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b06e:	9300      	str	r3, [sp, #0]
 800b070:	4623      	mov	r3, r4
 800b072:	f7f7 fd85 	bl	8002b80 <HAL_HCD_HC_SubmitRequest>
 800b076:	4603      	mov	r3, r0
 800b078:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b07a:	7bfb      	ldrb	r3, [r7, #15]
 800b07c:	4618      	mov	r0, r3
 800b07e:	f000 f86f 	bl	800b160 <USBH_Get_USB_Status>
 800b082:	4603      	mov	r3, r0
 800b084:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b086:	7bbb      	ldrb	r3, [r7, #14]
}
 800b088:	4618      	mov	r0, r3
 800b08a:	3714      	adds	r7, #20
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd90      	pop	{r4, r7, pc}

0800b090 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b082      	sub	sp, #8
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	460b      	mov	r3, r1
 800b09a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b0a2:	78fa      	ldrb	r2, [r7, #3]
 800b0a4:	4611      	mov	r1, r2
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f7f8 f866 	bl	8003178 <HAL_HCD_HC_GetURBState>
 800b0ac:	4603      	mov	r3, r0
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3708      	adds	r7, #8
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}

0800b0b6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b0b6:	b580      	push	{r7, lr}
 800b0b8:	b082      	sub	sp, #8
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	6078      	str	r0, [r7, #4]
 800b0be:	460b      	mov	r3, r1
 800b0c0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	d103      	bne.n	800b0d4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b0cc:	78fb      	ldrb	r3, [r7, #3]
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f000 f872 	bl	800b1b8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b0d4:	20c8      	movs	r0, #200	@ 0xc8
 800b0d6:	f7f6 fe09 	bl	8001cec <HAL_Delay>
  return USBH_OK;
 800b0da:	2300      	movs	r3, #0
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3708      	adds	r7, #8
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b085      	sub	sp, #20
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	460b      	mov	r3, r1
 800b0ee:	70fb      	strb	r3, [r7, #3]
 800b0f0:	4613      	mov	r3, r2
 800b0f2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b0fa:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b0fc:	78fa      	ldrb	r2, [r7, #3]
 800b0fe:	68f9      	ldr	r1, [r7, #12]
 800b100:	4613      	mov	r3, r2
 800b102:	011b      	lsls	r3, r3, #4
 800b104:	1a9b      	subs	r3, r3, r2
 800b106:	009b      	lsls	r3, r3, #2
 800b108:	440b      	add	r3, r1
 800b10a:	3317      	adds	r3, #23
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d00a      	beq.n	800b128 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b112:	78fa      	ldrb	r2, [r7, #3]
 800b114:	68f9      	ldr	r1, [r7, #12]
 800b116:	4613      	mov	r3, r2
 800b118:	011b      	lsls	r3, r3, #4
 800b11a:	1a9b      	subs	r3, r3, r2
 800b11c:	009b      	lsls	r3, r3, #2
 800b11e:	440b      	add	r3, r1
 800b120:	333c      	adds	r3, #60	@ 0x3c
 800b122:	78ba      	ldrb	r2, [r7, #2]
 800b124:	701a      	strb	r2, [r3, #0]
 800b126:	e009      	b.n	800b13c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b128:	78fa      	ldrb	r2, [r7, #3]
 800b12a:	68f9      	ldr	r1, [r7, #12]
 800b12c:	4613      	mov	r3, r2
 800b12e:	011b      	lsls	r3, r3, #4
 800b130:	1a9b      	subs	r3, r3, r2
 800b132:	009b      	lsls	r3, r3, #2
 800b134:	440b      	add	r3, r1
 800b136:	333d      	adds	r3, #61	@ 0x3d
 800b138:	78ba      	ldrb	r2, [r7, #2]
 800b13a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b13c:	2300      	movs	r3, #0
}
 800b13e:	4618      	mov	r0, r3
 800b140:	3714      	adds	r7, #20
 800b142:	46bd      	mov	sp, r7
 800b144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b148:	4770      	bx	lr

0800b14a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b14a:	b580      	push	{r7, lr}
 800b14c:	b082      	sub	sp, #8
 800b14e:	af00      	add	r7, sp, #0
 800b150:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f7f6 fdca 	bl	8001cec <HAL_Delay>
}
 800b158:	bf00      	nop
 800b15a:	3708      	adds	r7, #8
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}

0800b160 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b160:	b480      	push	{r7}
 800b162:	b085      	sub	sp, #20
 800b164:	af00      	add	r7, sp, #0
 800b166:	4603      	mov	r3, r0
 800b168:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b16a:	2300      	movs	r3, #0
 800b16c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b16e:	79fb      	ldrb	r3, [r7, #7]
 800b170:	2b03      	cmp	r3, #3
 800b172:	d817      	bhi.n	800b1a4 <USBH_Get_USB_Status+0x44>
 800b174:	a201      	add	r2, pc, #4	@ (adr r2, 800b17c <USBH_Get_USB_Status+0x1c>)
 800b176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b17a:	bf00      	nop
 800b17c:	0800b18d 	.word	0x0800b18d
 800b180:	0800b193 	.word	0x0800b193
 800b184:	0800b199 	.word	0x0800b199
 800b188:	0800b19f 	.word	0x0800b19f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b18c:	2300      	movs	r3, #0
 800b18e:	73fb      	strb	r3, [r7, #15]
    break;
 800b190:	e00b      	b.n	800b1aa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b192:	2302      	movs	r3, #2
 800b194:	73fb      	strb	r3, [r7, #15]
    break;
 800b196:	e008      	b.n	800b1aa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b198:	2301      	movs	r3, #1
 800b19a:	73fb      	strb	r3, [r7, #15]
    break;
 800b19c:	e005      	b.n	800b1aa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b19e:	2302      	movs	r3, #2
 800b1a0:	73fb      	strb	r3, [r7, #15]
    break;
 800b1a2:	e002      	b.n	800b1aa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b1a4:	2302      	movs	r3, #2
 800b1a6:	73fb      	strb	r3, [r7, #15]
    break;
 800b1a8:	bf00      	nop
  }
  return usb_status;
 800b1aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3714      	adds	r7, #20
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr

0800b1b8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b084      	sub	sp, #16
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	4603      	mov	r3, r0
 800b1c0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b1c2:	79fb      	ldrb	r3, [r7, #7]
 800b1c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b1c6:	79fb      	ldrb	r3, [r7, #7]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d102      	bne.n	800b1d2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	73fb      	strb	r3, [r7, #15]
 800b1d0:	e001      	b.n	800b1d6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b1d6:	7bfb      	ldrb	r3, [r7, #15]
 800b1d8:	461a      	mov	r2, r3
 800b1da:	2101      	movs	r1, #1
 800b1dc:	4803      	ldr	r0, [pc, #12]	@ (800b1ec <MX_DriverVbusFS+0x34>)
 800b1de:	f7f7 fb59 	bl	8002894 <HAL_GPIO_WritePin>
}
 800b1e2:	bf00      	nop
 800b1e4:	3710      	adds	r7, #16
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	40020800 	.word	0x40020800

0800b1f0 <malloc>:
 800b1f0:	4b02      	ldr	r3, [pc, #8]	@ (800b1fc <malloc+0xc>)
 800b1f2:	4601      	mov	r1, r0
 800b1f4:	6818      	ldr	r0, [r3, #0]
 800b1f6:	f000 b82d 	b.w	800b254 <_malloc_r>
 800b1fa:	bf00      	nop
 800b1fc:	20000038 	.word	0x20000038

0800b200 <free>:
 800b200:	4b02      	ldr	r3, [pc, #8]	@ (800b20c <free+0xc>)
 800b202:	4601      	mov	r1, r0
 800b204:	6818      	ldr	r0, [r3, #0]
 800b206:	f000 ba55 	b.w	800b6b4 <_free_r>
 800b20a:	bf00      	nop
 800b20c:	20000038 	.word	0x20000038

0800b210 <sbrk_aligned>:
 800b210:	b570      	push	{r4, r5, r6, lr}
 800b212:	4e0f      	ldr	r6, [pc, #60]	@ (800b250 <sbrk_aligned+0x40>)
 800b214:	460c      	mov	r4, r1
 800b216:	6831      	ldr	r1, [r6, #0]
 800b218:	4605      	mov	r5, r0
 800b21a:	b911      	cbnz	r1, 800b222 <sbrk_aligned+0x12>
 800b21c:	f000 f9fa 	bl	800b614 <_sbrk_r>
 800b220:	6030      	str	r0, [r6, #0]
 800b222:	4621      	mov	r1, r4
 800b224:	4628      	mov	r0, r5
 800b226:	f000 f9f5 	bl	800b614 <_sbrk_r>
 800b22a:	1c43      	adds	r3, r0, #1
 800b22c:	d103      	bne.n	800b236 <sbrk_aligned+0x26>
 800b22e:	f04f 34ff 	mov.w	r4, #4294967295
 800b232:	4620      	mov	r0, r4
 800b234:	bd70      	pop	{r4, r5, r6, pc}
 800b236:	1cc4      	adds	r4, r0, #3
 800b238:	f024 0403 	bic.w	r4, r4, #3
 800b23c:	42a0      	cmp	r0, r4
 800b23e:	d0f8      	beq.n	800b232 <sbrk_aligned+0x22>
 800b240:	1a21      	subs	r1, r4, r0
 800b242:	4628      	mov	r0, r5
 800b244:	f000 f9e6 	bl	800b614 <_sbrk_r>
 800b248:	3001      	adds	r0, #1
 800b24a:	d1f2      	bne.n	800b232 <sbrk_aligned+0x22>
 800b24c:	e7ef      	b.n	800b22e <sbrk_aligned+0x1e>
 800b24e:	bf00      	nop
 800b250:	20000c04 	.word	0x20000c04

0800b254 <_malloc_r>:
 800b254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b258:	1ccd      	adds	r5, r1, #3
 800b25a:	f025 0503 	bic.w	r5, r5, #3
 800b25e:	3508      	adds	r5, #8
 800b260:	2d0c      	cmp	r5, #12
 800b262:	bf38      	it	cc
 800b264:	250c      	movcc	r5, #12
 800b266:	2d00      	cmp	r5, #0
 800b268:	4606      	mov	r6, r0
 800b26a:	db01      	blt.n	800b270 <_malloc_r+0x1c>
 800b26c:	42a9      	cmp	r1, r5
 800b26e:	d904      	bls.n	800b27a <_malloc_r+0x26>
 800b270:	230c      	movs	r3, #12
 800b272:	6033      	str	r3, [r6, #0]
 800b274:	2000      	movs	r0, #0
 800b276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b27a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b350 <_malloc_r+0xfc>
 800b27e:	f000 f869 	bl	800b354 <__malloc_lock>
 800b282:	f8d8 3000 	ldr.w	r3, [r8]
 800b286:	461c      	mov	r4, r3
 800b288:	bb44      	cbnz	r4, 800b2dc <_malloc_r+0x88>
 800b28a:	4629      	mov	r1, r5
 800b28c:	4630      	mov	r0, r6
 800b28e:	f7ff ffbf 	bl	800b210 <sbrk_aligned>
 800b292:	1c43      	adds	r3, r0, #1
 800b294:	4604      	mov	r4, r0
 800b296:	d158      	bne.n	800b34a <_malloc_r+0xf6>
 800b298:	f8d8 4000 	ldr.w	r4, [r8]
 800b29c:	4627      	mov	r7, r4
 800b29e:	2f00      	cmp	r7, #0
 800b2a0:	d143      	bne.n	800b32a <_malloc_r+0xd6>
 800b2a2:	2c00      	cmp	r4, #0
 800b2a4:	d04b      	beq.n	800b33e <_malloc_r+0xea>
 800b2a6:	6823      	ldr	r3, [r4, #0]
 800b2a8:	4639      	mov	r1, r7
 800b2aa:	4630      	mov	r0, r6
 800b2ac:	eb04 0903 	add.w	r9, r4, r3
 800b2b0:	f000 f9b0 	bl	800b614 <_sbrk_r>
 800b2b4:	4581      	cmp	r9, r0
 800b2b6:	d142      	bne.n	800b33e <_malloc_r+0xea>
 800b2b8:	6821      	ldr	r1, [r4, #0]
 800b2ba:	1a6d      	subs	r5, r5, r1
 800b2bc:	4629      	mov	r1, r5
 800b2be:	4630      	mov	r0, r6
 800b2c0:	f7ff ffa6 	bl	800b210 <sbrk_aligned>
 800b2c4:	3001      	adds	r0, #1
 800b2c6:	d03a      	beq.n	800b33e <_malloc_r+0xea>
 800b2c8:	6823      	ldr	r3, [r4, #0]
 800b2ca:	442b      	add	r3, r5
 800b2cc:	6023      	str	r3, [r4, #0]
 800b2ce:	f8d8 3000 	ldr.w	r3, [r8]
 800b2d2:	685a      	ldr	r2, [r3, #4]
 800b2d4:	bb62      	cbnz	r2, 800b330 <_malloc_r+0xdc>
 800b2d6:	f8c8 7000 	str.w	r7, [r8]
 800b2da:	e00f      	b.n	800b2fc <_malloc_r+0xa8>
 800b2dc:	6822      	ldr	r2, [r4, #0]
 800b2de:	1b52      	subs	r2, r2, r5
 800b2e0:	d420      	bmi.n	800b324 <_malloc_r+0xd0>
 800b2e2:	2a0b      	cmp	r2, #11
 800b2e4:	d917      	bls.n	800b316 <_malloc_r+0xc2>
 800b2e6:	1961      	adds	r1, r4, r5
 800b2e8:	42a3      	cmp	r3, r4
 800b2ea:	6025      	str	r5, [r4, #0]
 800b2ec:	bf18      	it	ne
 800b2ee:	6059      	strne	r1, [r3, #4]
 800b2f0:	6863      	ldr	r3, [r4, #4]
 800b2f2:	bf08      	it	eq
 800b2f4:	f8c8 1000 	streq.w	r1, [r8]
 800b2f8:	5162      	str	r2, [r4, r5]
 800b2fa:	604b      	str	r3, [r1, #4]
 800b2fc:	4630      	mov	r0, r6
 800b2fe:	f000 f82f 	bl	800b360 <__malloc_unlock>
 800b302:	f104 000b 	add.w	r0, r4, #11
 800b306:	1d23      	adds	r3, r4, #4
 800b308:	f020 0007 	bic.w	r0, r0, #7
 800b30c:	1ac2      	subs	r2, r0, r3
 800b30e:	bf1c      	itt	ne
 800b310:	1a1b      	subne	r3, r3, r0
 800b312:	50a3      	strne	r3, [r4, r2]
 800b314:	e7af      	b.n	800b276 <_malloc_r+0x22>
 800b316:	6862      	ldr	r2, [r4, #4]
 800b318:	42a3      	cmp	r3, r4
 800b31a:	bf0c      	ite	eq
 800b31c:	f8c8 2000 	streq.w	r2, [r8]
 800b320:	605a      	strne	r2, [r3, #4]
 800b322:	e7eb      	b.n	800b2fc <_malloc_r+0xa8>
 800b324:	4623      	mov	r3, r4
 800b326:	6864      	ldr	r4, [r4, #4]
 800b328:	e7ae      	b.n	800b288 <_malloc_r+0x34>
 800b32a:	463c      	mov	r4, r7
 800b32c:	687f      	ldr	r7, [r7, #4]
 800b32e:	e7b6      	b.n	800b29e <_malloc_r+0x4a>
 800b330:	461a      	mov	r2, r3
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	42a3      	cmp	r3, r4
 800b336:	d1fb      	bne.n	800b330 <_malloc_r+0xdc>
 800b338:	2300      	movs	r3, #0
 800b33a:	6053      	str	r3, [r2, #4]
 800b33c:	e7de      	b.n	800b2fc <_malloc_r+0xa8>
 800b33e:	230c      	movs	r3, #12
 800b340:	6033      	str	r3, [r6, #0]
 800b342:	4630      	mov	r0, r6
 800b344:	f000 f80c 	bl	800b360 <__malloc_unlock>
 800b348:	e794      	b.n	800b274 <_malloc_r+0x20>
 800b34a:	6005      	str	r5, [r0, #0]
 800b34c:	e7d6      	b.n	800b2fc <_malloc_r+0xa8>
 800b34e:	bf00      	nop
 800b350:	20000c08 	.word	0x20000c08

0800b354 <__malloc_lock>:
 800b354:	4801      	ldr	r0, [pc, #4]	@ (800b35c <__malloc_lock+0x8>)
 800b356:	f000 b9aa 	b.w	800b6ae <__retarget_lock_acquire_recursive>
 800b35a:	bf00      	nop
 800b35c:	20000d4c 	.word	0x20000d4c

0800b360 <__malloc_unlock>:
 800b360:	4801      	ldr	r0, [pc, #4]	@ (800b368 <__malloc_unlock+0x8>)
 800b362:	f000 b9a5 	b.w	800b6b0 <__retarget_lock_release_recursive>
 800b366:	bf00      	nop
 800b368:	20000d4c 	.word	0x20000d4c

0800b36c <std>:
 800b36c:	2300      	movs	r3, #0
 800b36e:	b510      	push	{r4, lr}
 800b370:	4604      	mov	r4, r0
 800b372:	e9c0 3300 	strd	r3, r3, [r0]
 800b376:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b37a:	6083      	str	r3, [r0, #8]
 800b37c:	8181      	strh	r1, [r0, #12]
 800b37e:	6643      	str	r3, [r0, #100]	@ 0x64
 800b380:	81c2      	strh	r2, [r0, #14]
 800b382:	6183      	str	r3, [r0, #24]
 800b384:	4619      	mov	r1, r3
 800b386:	2208      	movs	r2, #8
 800b388:	305c      	adds	r0, #92	@ 0x5c
 800b38a:	f000 f906 	bl	800b59a <memset>
 800b38e:	4b0d      	ldr	r3, [pc, #52]	@ (800b3c4 <std+0x58>)
 800b390:	6263      	str	r3, [r4, #36]	@ 0x24
 800b392:	4b0d      	ldr	r3, [pc, #52]	@ (800b3c8 <std+0x5c>)
 800b394:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b396:	4b0d      	ldr	r3, [pc, #52]	@ (800b3cc <std+0x60>)
 800b398:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b39a:	4b0d      	ldr	r3, [pc, #52]	@ (800b3d0 <std+0x64>)
 800b39c:	6323      	str	r3, [r4, #48]	@ 0x30
 800b39e:	4b0d      	ldr	r3, [pc, #52]	@ (800b3d4 <std+0x68>)
 800b3a0:	6224      	str	r4, [r4, #32]
 800b3a2:	429c      	cmp	r4, r3
 800b3a4:	d006      	beq.n	800b3b4 <std+0x48>
 800b3a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b3aa:	4294      	cmp	r4, r2
 800b3ac:	d002      	beq.n	800b3b4 <std+0x48>
 800b3ae:	33d0      	adds	r3, #208	@ 0xd0
 800b3b0:	429c      	cmp	r4, r3
 800b3b2:	d105      	bne.n	800b3c0 <std+0x54>
 800b3b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b3b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3bc:	f000 b976 	b.w	800b6ac <__retarget_lock_init_recursive>
 800b3c0:	bd10      	pop	{r4, pc}
 800b3c2:	bf00      	nop
 800b3c4:	0800b515 	.word	0x0800b515
 800b3c8:	0800b537 	.word	0x0800b537
 800b3cc:	0800b56f 	.word	0x0800b56f
 800b3d0:	0800b593 	.word	0x0800b593
 800b3d4:	20000c0c 	.word	0x20000c0c

0800b3d8 <stdio_exit_handler>:
 800b3d8:	4a02      	ldr	r2, [pc, #8]	@ (800b3e4 <stdio_exit_handler+0xc>)
 800b3da:	4903      	ldr	r1, [pc, #12]	@ (800b3e8 <stdio_exit_handler+0x10>)
 800b3dc:	4803      	ldr	r0, [pc, #12]	@ (800b3ec <stdio_exit_handler+0x14>)
 800b3de:	f000 b869 	b.w	800b4b4 <_fwalk_sglue>
 800b3e2:	bf00      	nop
 800b3e4:	2000002c 	.word	0x2000002c
 800b3e8:	0800bdf1 	.word	0x0800bdf1
 800b3ec:	2000003c 	.word	0x2000003c

0800b3f0 <cleanup_stdio>:
 800b3f0:	6841      	ldr	r1, [r0, #4]
 800b3f2:	4b0c      	ldr	r3, [pc, #48]	@ (800b424 <cleanup_stdio+0x34>)
 800b3f4:	4299      	cmp	r1, r3
 800b3f6:	b510      	push	{r4, lr}
 800b3f8:	4604      	mov	r4, r0
 800b3fa:	d001      	beq.n	800b400 <cleanup_stdio+0x10>
 800b3fc:	f000 fcf8 	bl	800bdf0 <_fflush_r>
 800b400:	68a1      	ldr	r1, [r4, #8]
 800b402:	4b09      	ldr	r3, [pc, #36]	@ (800b428 <cleanup_stdio+0x38>)
 800b404:	4299      	cmp	r1, r3
 800b406:	d002      	beq.n	800b40e <cleanup_stdio+0x1e>
 800b408:	4620      	mov	r0, r4
 800b40a:	f000 fcf1 	bl	800bdf0 <_fflush_r>
 800b40e:	68e1      	ldr	r1, [r4, #12]
 800b410:	4b06      	ldr	r3, [pc, #24]	@ (800b42c <cleanup_stdio+0x3c>)
 800b412:	4299      	cmp	r1, r3
 800b414:	d004      	beq.n	800b420 <cleanup_stdio+0x30>
 800b416:	4620      	mov	r0, r4
 800b418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b41c:	f000 bce8 	b.w	800bdf0 <_fflush_r>
 800b420:	bd10      	pop	{r4, pc}
 800b422:	bf00      	nop
 800b424:	20000c0c 	.word	0x20000c0c
 800b428:	20000c74 	.word	0x20000c74
 800b42c:	20000cdc 	.word	0x20000cdc

0800b430 <global_stdio_init.part.0>:
 800b430:	b510      	push	{r4, lr}
 800b432:	4b0b      	ldr	r3, [pc, #44]	@ (800b460 <global_stdio_init.part.0+0x30>)
 800b434:	4c0b      	ldr	r4, [pc, #44]	@ (800b464 <global_stdio_init.part.0+0x34>)
 800b436:	4a0c      	ldr	r2, [pc, #48]	@ (800b468 <global_stdio_init.part.0+0x38>)
 800b438:	601a      	str	r2, [r3, #0]
 800b43a:	4620      	mov	r0, r4
 800b43c:	2200      	movs	r2, #0
 800b43e:	2104      	movs	r1, #4
 800b440:	f7ff ff94 	bl	800b36c <std>
 800b444:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b448:	2201      	movs	r2, #1
 800b44a:	2109      	movs	r1, #9
 800b44c:	f7ff ff8e 	bl	800b36c <std>
 800b450:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b454:	2202      	movs	r2, #2
 800b456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b45a:	2112      	movs	r1, #18
 800b45c:	f7ff bf86 	b.w	800b36c <std>
 800b460:	20000d44 	.word	0x20000d44
 800b464:	20000c0c 	.word	0x20000c0c
 800b468:	0800b3d9 	.word	0x0800b3d9

0800b46c <__sfp_lock_acquire>:
 800b46c:	4801      	ldr	r0, [pc, #4]	@ (800b474 <__sfp_lock_acquire+0x8>)
 800b46e:	f000 b91e 	b.w	800b6ae <__retarget_lock_acquire_recursive>
 800b472:	bf00      	nop
 800b474:	20000d4d 	.word	0x20000d4d

0800b478 <__sfp_lock_release>:
 800b478:	4801      	ldr	r0, [pc, #4]	@ (800b480 <__sfp_lock_release+0x8>)
 800b47a:	f000 b919 	b.w	800b6b0 <__retarget_lock_release_recursive>
 800b47e:	bf00      	nop
 800b480:	20000d4d 	.word	0x20000d4d

0800b484 <__sinit>:
 800b484:	b510      	push	{r4, lr}
 800b486:	4604      	mov	r4, r0
 800b488:	f7ff fff0 	bl	800b46c <__sfp_lock_acquire>
 800b48c:	6a23      	ldr	r3, [r4, #32]
 800b48e:	b11b      	cbz	r3, 800b498 <__sinit+0x14>
 800b490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b494:	f7ff bff0 	b.w	800b478 <__sfp_lock_release>
 800b498:	4b04      	ldr	r3, [pc, #16]	@ (800b4ac <__sinit+0x28>)
 800b49a:	6223      	str	r3, [r4, #32]
 800b49c:	4b04      	ldr	r3, [pc, #16]	@ (800b4b0 <__sinit+0x2c>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d1f5      	bne.n	800b490 <__sinit+0xc>
 800b4a4:	f7ff ffc4 	bl	800b430 <global_stdio_init.part.0>
 800b4a8:	e7f2      	b.n	800b490 <__sinit+0xc>
 800b4aa:	bf00      	nop
 800b4ac:	0800b3f1 	.word	0x0800b3f1
 800b4b0:	20000d44 	.word	0x20000d44

0800b4b4 <_fwalk_sglue>:
 800b4b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4b8:	4607      	mov	r7, r0
 800b4ba:	4688      	mov	r8, r1
 800b4bc:	4614      	mov	r4, r2
 800b4be:	2600      	movs	r6, #0
 800b4c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b4c4:	f1b9 0901 	subs.w	r9, r9, #1
 800b4c8:	d505      	bpl.n	800b4d6 <_fwalk_sglue+0x22>
 800b4ca:	6824      	ldr	r4, [r4, #0]
 800b4cc:	2c00      	cmp	r4, #0
 800b4ce:	d1f7      	bne.n	800b4c0 <_fwalk_sglue+0xc>
 800b4d0:	4630      	mov	r0, r6
 800b4d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4d6:	89ab      	ldrh	r3, [r5, #12]
 800b4d8:	2b01      	cmp	r3, #1
 800b4da:	d907      	bls.n	800b4ec <_fwalk_sglue+0x38>
 800b4dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b4e0:	3301      	adds	r3, #1
 800b4e2:	d003      	beq.n	800b4ec <_fwalk_sglue+0x38>
 800b4e4:	4629      	mov	r1, r5
 800b4e6:	4638      	mov	r0, r7
 800b4e8:	47c0      	blx	r8
 800b4ea:	4306      	orrs	r6, r0
 800b4ec:	3568      	adds	r5, #104	@ 0x68
 800b4ee:	e7e9      	b.n	800b4c4 <_fwalk_sglue+0x10>

0800b4f0 <iprintf>:
 800b4f0:	b40f      	push	{r0, r1, r2, r3}
 800b4f2:	b507      	push	{r0, r1, r2, lr}
 800b4f4:	4906      	ldr	r1, [pc, #24]	@ (800b510 <iprintf+0x20>)
 800b4f6:	ab04      	add	r3, sp, #16
 800b4f8:	6808      	ldr	r0, [r1, #0]
 800b4fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4fe:	6881      	ldr	r1, [r0, #8]
 800b500:	9301      	str	r3, [sp, #4]
 800b502:	f000 f94b 	bl	800b79c <_vfiprintf_r>
 800b506:	b003      	add	sp, #12
 800b508:	f85d eb04 	ldr.w	lr, [sp], #4
 800b50c:	b004      	add	sp, #16
 800b50e:	4770      	bx	lr
 800b510:	20000038 	.word	0x20000038

0800b514 <__sread>:
 800b514:	b510      	push	{r4, lr}
 800b516:	460c      	mov	r4, r1
 800b518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b51c:	f000 f868 	bl	800b5f0 <_read_r>
 800b520:	2800      	cmp	r0, #0
 800b522:	bfab      	itete	ge
 800b524:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b526:	89a3      	ldrhlt	r3, [r4, #12]
 800b528:	181b      	addge	r3, r3, r0
 800b52a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b52e:	bfac      	ite	ge
 800b530:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b532:	81a3      	strhlt	r3, [r4, #12]
 800b534:	bd10      	pop	{r4, pc}

0800b536 <__swrite>:
 800b536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b53a:	461f      	mov	r7, r3
 800b53c:	898b      	ldrh	r3, [r1, #12]
 800b53e:	05db      	lsls	r3, r3, #23
 800b540:	4605      	mov	r5, r0
 800b542:	460c      	mov	r4, r1
 800b544:	4616      	mov	r6, r2
 800b546:	d505      	bpl.n	800b554 <__swrite+0x1e>
 800b548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b54c:	2302      	movs	r3, #2
 800b54e:	2200      	movs	r2, #0
 800b550:	f000 f83c 	bl	800b5cc <_lseek_r>
 800b554:	89a3      	ldrh	r3, [r4, #12]
 800b556:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b55a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b55e:	81a3      	strh	r3, [r4, #12]
 800b560:	4632      	mov	r2, r6
 800b562:	463b      	mov	r3, r7
 800b564:	4628      	mov	r0, r5
 800b566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b56a:	f000 b863 	b.w	800b634 <_write_r>

0800b56e <__sseek>:
 800b56e:	b510      	push	{r4, lr}
 800b570:	460c      	mov	r4, r1
 800b572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b576:	f000 f829 	bl	800b5cc <_lseek_r>
 800b57a:	1c43      	adds	r3, r0, #1
 800b57c:	89a3      	ldrh	r3, [r4, #12]
 800b57e:	bf15      	itete	ne
 800b580:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b582:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b586:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b58a:	81a3      	strheq	r3, [r4, #12]
 800b58c:	bf18      	it	ne
 800b58e:	81a3      	strhne	r3, [r4, #12]
 800b590:	bd10      	pop	{r4, pc}

0800b592 <__sclose>:
 800b592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b596:	f000 b809 	b.w	800b5ac <_close_r>

0800b59a <memset>:
 800b59a:	4402      	add	r2, r0
 800b59c:	4603      	mov	r3, r0
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d100      	bne.n	800b5a4 <memset+0xa>
 800b5a2:	4770      	bx	lr
 800b5a4:	f803 1b01 	strb.w	r1, [r3], #1
 800b5a8:	e7f9      	b.n	800b59e <memset+0x4>
	...

0800b5ac <_close_r>:
 800b5ac:	b538      	push	{r3, r4, r5, lr}
 800b5ae:	4d06      	ldr	r5, [pc, #24]	@ (800b5c8 <_close_r+0x1c>)
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	4604      	mov	r4, r0
 800b5b4:	4608      	mov	r0, r1
 800b5b6:	602b      	str	r3, [r5, #0]
 800b5b8:	f7f6 fa0d 	bl	80019d6 <_close>
 800b5bc:	1c43      	adds	r3, r0, #1
 800b5be:	d102      	bne.n	800b5c6 <_close_r+0x1a>
 800b5c0:	682b      	ldr	r3, [r5, #0]
 800b5c2:	b103      	cbz	r3, 800b5c6 <_close_r+0x1a>
 800b5c4:	6023      	str	r3, [r4, #0]
 800b5c6:	bd38      	pop	{r3, r4, r5, pc}
 800b5c8:	20000d48 	.word	0x20000d48

0800b5cc <_lseek_r>:
 800b5cc:	b538      	push	{r3, r4, r5, lr}
 800b5ce:	4d07      	ldr	r5, [pc, #28]	@ (800b5ec <_lseek_r+0x20>)
 800b5d0:	4604      	mov	r4, r0
 800b5d2:	4608      	mov	r0, r1
 800b5d4:	4611      	mov	r1, r2
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	602a      	str	r2, [r5, #0]
 800b5da:	461a      	mov	r2, r3
 800b5dc:	f7f6 fa22 	bl	8001a24 <_lseek>
 800b5e0:	1c43      	adds	r3, r0, #1
 800b5e2:	d102      	bne.n	800b5ea <_lseek_r+0x1e>
 800b5e4:	682b      	ldr	r3, [r5, #0]
 800b5e6:	b103      	cbz	r3, 800b5ea <_lseek_r+0x1e>
 800b5e8:	6023      	str	r3, [r4, #0]
 800b5ea:	bd38      	pop	{r3, r4, r5, pc}
 800b5ec:	20000d48 	.word	0x20000d48

0800b5f0 <_read_r>:
 800b5f0:	b538      	push	{r3, r4, r5, lr}
 800b5f2:	4d07      	ldr	r5, [pc, #28]	@ (800b610 <_read_r+0x20>)
 800b5f4:	4604      	mov	r4, r0
 800b5f6:	4608      	mov	r0, r1
 800b5f8:	4611      	mov	r1, r2
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	602a      	str	r2, [r5, #0]
 800b5fe:	461a      	mov	r2, r3
 800b600:	f7f6 f9cc 	bl	800199c <_read>
 800b604:	1c43      	adds	r3, r0, #1
 800b606:	d102      	bne.n	800b60e <_read_r+0x1e>
 800b608:	682b      	ldr	r3, [r5, #0]
 800b60a:	b103      	cbz	r3, 800b60e <_read_r+0x1e>
 800b60c:	6023      	str	r3, [r4, #0]
 800b60e:	bd38      	pop	{r3, r4, r5, pc}
 800b610:	20000d48 	.word	0x20000d48

0800b614 <_sbrk_r>:
 800b614:	b538      	push	{r3, r4, r5, lr}
 800b616:	4d06      	ldr	r5, [pc, #24]	@ (800b630 <_sbrk_r+0x1c>)
 800b618:	2300      	movs	r3, #0
 800b61a:	4604      	mov	r4, r0
 800b61c:	4608      	mov	r0, r1
 800b61e:	602b      	str	r3, [r5, #0]
 800b620:	f7f6 fa0e 	bl	8001a40 <_sbrk>
 800b624:	1c43      	adds	r3, r0, #1
 800b626:	d102      	bne.n	800b62e <_sbrk_r+0x1a>
 800b628:	682b      	ldr	r3, [r5, #0]
 800b62a:	b103      	cbz	r3, 800b62e <_sbrk_r+0x1a>
 800b62c:	6023      	str	r3, [r4, #0]
 800b62e:	bd38      	pop	{r3, r4, r5, pc}
 800b630:	20000d48 	.word	0x20000d48

0800b634 <_write_r>:
 800b634:	b538      	push	{r3, r4, r5, lr}
 800b636:	4d07      	ldr	r5, [pc, #28]	@ (800b654 <_write_r+0x20>)
 800b638:	4604      	mov	r4, r0
 800b63a:	4608      	mov	r0, r1
 800b63c:	4611      	mov	r1, r2
 800b63e:	2200      	movs	r2, #0
 800b640:	602a      	str	r2, [r5, #0]
 800b642:	461a      	mov	r2, r3
 800b644:	f7f6 f818 	bl	8001678 <_write>
 800b648:	1c43      	adds	r3, r0, #1
 800b64a:	d102      	bne.n	800b652 <_write_r+0x1e>
 800b64c:	682b      	ldr	r3, [r5, #0]
 800b64e:	b103      	cbz	r3, 800b652 <_write_r+0x1e>
 800b650:	6023      	str	r3, [r4, #0]
 800b652:	bd38      	pop	{r3, r4, r5, pc}
 800b654:	20000d48 	.word	0x20000d48

0800b658 <__errno>:
 800b658:	4b01      	ldr	r3, [pc, #4]	@ (800b660 <__errno+0x8>)
 800b65a:	6818      	ldr	r0, [r3, #0]
 800b65c:	4770      	bx	lr
 800b65e:	bf00      	nop
 800b660:	20000038 	.word	0x20000038

0800b664 <__libc_init_array>:
 800b664:	b570      	push	{r4, r5, r6, lr}
 800b666:	4d0d      	ldr	r5, [pc, #52]	@ (800b69c <__libc_init_array+0x38>)
 800b668:	4c0d      	ldr	r4, [pc, #52]	@ (800b6a0 <__libc_init_array+0x3c>)
 800b66a:	1b64      	subs	r4, r4, r5
 800b66c:	10a4      	asrs	r4, r4, #2
 800b66e:	2600      	movs	r6, #0
 800b670:	42a6      	cmp	r6, r4
 800b672:	d109      	bne.n	800b688 <__libc_init_array+0x24>
 800b674:	4d0b      	ldr	r5, [pc, #44]	@ (800b6a4 <__libc_init_array+0x40>)
 800b676:	4c0c      	ldr	r4, [pc, #48]	@ (800b6a8 <__libc_init_array+0x44>)
 800b678:	f001 fd2a 	bl	800d0d0 <_init>
 800b67c:	1b64      	subs	r4, r4, r5
 800b67e:	10a4      	asrs	r4, r4, #2
 800b680:	2600      	movs	r6, #0
 800b682:	42a6      	cmp	r6, r4
 800b684:	d105      	bne.n	800b692 <__libc_init_array+0x2e>
 800b686:	bd70      	pop	{r4, r5, r6, pc}
 800b688:	f855 3b04 	ldr.w	r3, [r5], #4
 800b68c:	4798      	blx	r3
 800b68e:	3601      	adds	r6, #1
 800b690:	e7ee      	b.n	800b670 <__libc_init_array+0xc>
 800b692:	f855 3b04 	ldr.w	r3, [r5], #4
 800b696:	4798      	blx	r3
 800b698:	3601      	adds	r6, #1
 800b69a:	e7f2      	b.n	800b682 <__libc_init_array+0x1e>
 800b69c:	0800d388 	.word	0x0800d388
 800b6a0:	0800d388 	.word	0x0800d388
 800b6a4:	0800d388 	.word	0x0800d388
 800b6a8:	0800d38c 	.word	0x0800d38c

0800b6ac <__retarget_lock_init_recursive>:
 800b6ac:	4770      	bx	lr

0800b6ae <__retarget_lock_acquire_recursive>:
 800b6ae:	4770      	bx	lr

0800b6b0 <__retarget_lock_release_recursive>:
 800b6b0:	4770      	bx	lr
	...

0800b6b4 <_free_r>:
 800b6b4:	b538      	push	{r3, r4, r5, lr}
 800b6b6:	4605      	mov	r5, r0
 800b6b8:	2900      	cmp	r1, #0
 800b6ba:	d041      	beq.n	800b740 <_free_r+0x8c>
 800b6bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6c0:	1f0c      	subs	r4, r1, #4
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	bfb8      	it	lt
 800b6c6:	18e4      	addlt	r4, r4, r3
 800b6c8:	f7ff fe44 	bl	800b354 <__malloc_lock>
 800b6cc:	4a1d      	ldr	r2, [pc, #116]	@ (800b744 <_free_r+0x90>)
 800b6ce:	6813      	ldr	r3, [r2, #0]
 800b6d0:	b933      	cbnz	r3, 800b6e0 <_free_r+0x2c>
 800b6d2:	6063      	str	r3, [r4, #4]
 800b6d4:	6014      	str	r4, [r2, #0]
 800b6d6:	4628      	mov	r0, r5
 800b6d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6dc:	f7ff be40 	b.w	800b360 <__malloc_unlock>
 800b6e0:	42a3      	cmp	r3, r4
 800b6e2:	d908      	bls.n	800b6f6 <_free_r+0x42>
 800b6e4:	6820      	ldr	r0, [r4, #0]
 800b6e6:	1821      	adds	r1, r4, r0
 800b6e8:	428b      	cmp	r3, r1
 800b6ea:	bf01      	itttt	eq
 800b6ec:	6819      	ldreq	r1, [r3, #0]
 800b6ee:	685b      	ldreq	r3, [r3, #4]
 800b6f0:	1809      	addeq	r1, r1, r0
 800b6f2:	6021      	streq	r1, [r4, #0]
 800b6f4:	e7ed      	b.n	800b6d2 <_free_r+0x1e>
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	685b      	ldr	r3, [r3, #4]
 800b6fa:	b10b      	cbz	r3, 800b700 <_free_r+0x4c>
 800b6fc:	42a3      	cmp	r3, r4
 800b6fe:	d9fa      	bls.n	800b6f6 <_free_r+0x42>
 800b700:	6811      	ldr	r1, [r2, #0]
 800b702:	1850      	adds	r0, r2, r1
 800b704:	42a0      	cmp	r0, r4
 800b706:	d10b      	bne.n	800b720 <_free_r+0x6c>
 800b708:	6820      	ldr	r0, [r4, #0]
 800b70a:	4401      	add	r1, r0
 800b70c:	1850      	adds	r0, r2, r1
 800b70e:	4283      	cmp	r3, r0
 800b710:	6011      	str	r1, [r2, #0]
 800b712:	d1e0      	bne.n	800b6d6 <_free_r+0x22>
 800b714:	6818      	ldr	r0, [r3, #0]
 800b716:	685b      	ldr	r3, [r3, #4]
 800b718:	6053      	str	r3, [r2, #4]
 800b71a:	4408      	add	r0, r1
 800b71c:	6010      	str	r0, [r2, #0]
 800b71e:	e7da      	b.n	800b6d6 <_free_r+0x22>
 800b720:	d902      	bls.n	800b728 <_free_r+0x74>
 800b722:	230c      	movs	r3, #12
 800b724:	602b      	str	r3, [r5, #0]
 800b726:	e7d6      	b.n	800b6d6 <_free_r+0x22>
 800b728:	6820      	ldr	r0, [r4, #0]
 800b72a:	1821      	adds	r1, r4, r0
 800b72c:	428b      	cmp	r3, r1
 800b72e:	bf04      	itt	eq
 800b730:	6819      	ldreq	r1, [r3, #0]
 800b732:	685b      	ldreq	r3, [r3, #4]
 800b734:	6063      	str	r3, [r4, #4]
 800b736:	bf04      	itt	eq
 800b738:	1809      	addeq	r1, r1, r0
 800b73a:	6021      	streq	r1, [r4, #0]
 800b73c:	6054      	str	r4, [r2, #4]
 800b73e:	e7ca      	b.n	800b6d6 <_free_r+0x22>
 800b740:	bd38      	pop	{r3, r4, r5, pc}
 800b742:	bf00      	nop
 800b744:	20000c08 	.word	0x20000c08

0800b748 <__sfputc_r>:
 800b748:	6893      	ldr	r3, [r2, #8]
 800b74a:	3b01      	subs	r3, #1
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	b410      	push	{r4}
 800b750:	6093      	str	r3, [r2, #8]
 800b752:	da08      	bge.n	800b766 <__sfputc_r+0x1e>
 800b754:	6994      	ldr	r4, [r2, #24]
 800b756:	42a3      	cmp	r3, r4
 800b758:	db01      	blt.n	800b75e <__sfputc_r+0x16>
 800b75a:	290a      	cmp	r1, #10
 800b75c:	d103      	bne.n	800b766 <__sfputc_r+0x1e>
 800b75e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b762:	f000 bb6d 	b.w	800be40 <__swbuf_r>
 800b766:	6813      	ldr	r3, [r2, #0]
 800b768:	1c58      	adds	r0, r3, #1
 800b76a:	6010      	str	r0, [r2, #0]
 800b76c:	7019      	strb	r1, [r3, #0]
 800b76e:	4608      	mov	r0, r1
 800b770:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b774:	4770      	bx	lr

0800b776 <__sfputs_r>:
 800b776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b778:	4606      	mov	r6, r0
 800b77a:	460f      	mov	r7, r1
 800b77c:	4614      	mov	r4, r2
 800b77e:	18d5      	adds	r5, r2, r3
 800b780:	42ac      	cmp	r4, r5
 800b782:	d101      	bne.n	800b788 <__sfputs_r+0x12>
 800b784:	2000      	movs	r0, #0
 800b786:	e007      	b.n	800b798 <__sfputs_r+0x22>
 800b788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b78c:	463a      	mov	r2, r7
 800b78e:	4630      	mov	r0, r6
 800b790:	f7ff ffda 	bl	800b748 <__sfputc_r>
 800b794:	1c43      	adds	r3, r0, #1
 800b796:	d1f3      	bne.n	800b780 <__sfputs_r+0xa>
 800b798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b79c <_vfiprintf_r>:
 800b79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7a0:	460d      	mov	r5, r1
 800b7a2:	b09d      	sub	sp, #116	@ 0x74
 800b7a4:	4614      	mov	r4, r2
 800b7a6:	4698      	mov	r8, r3
 800b7a8:	4606      	mov	r6, r0
 800b7aa:	b118      	cbz	r0, 800b7b4 <_vfiprintf_r+0x18>
 800b7ac:	6a03      	ldr	r3, [r0, #32]
 800b7ae:	b90b      	cbnz	r3, 800b7b4 <_vfiprintf_r+0x18>
 800b7b0:	f7ff fe68 	bl	800b484 <__sinit>
 800b7b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b7b6:	07d9      	lsls	r1, r3, #31
 800b7b8:	d405      	bmi.n	800b7c6 <_vfiprintf_r+0x2a>
 800b7ba:	89ab      	ldrh	r3, [r5, #12]
 800b7bc:	059a      	lsls	r2, r3, #22
 800b7be:	d402      	bmi.n	800b7c6 <_vfiprintf_r+0x2a>
 800b7c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7c2:	f7ff ff74 	bl	800b6ae <__retarget_lock_acquire_recursive>
 800b7c6:	89ab      	ldrh	r3, [r5, #12]
 800b7c8:	071b      	lsls	r3, r3, #28
 800b7ca:	d501      	bpl.n	800b7d0 <_vfiprintf_r+0x34>
 800b7cc:	692b      	ldr	r3, [r5, #16]
 800b7ce:	b99b      	cbnz	r3, 800b7f8 <_vfiprintf_r+0x5c>
 800b7d0:	4629      	mov	r1, r5
 800b7d2:	4630      	mov	r0, r6
 800b7d4:	f000 fb72 	bl	800bebc <__swsetup_r>
 800b7d8:	b170      	cbz	r0, 800b7f8 <_vfiprintf_r+0x5c>
 800b7da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b7dc:	07dc      	lsls	r4, r3, #31
 800b7de:	d504      	bpl.n	800b7ea <_vfiprintf_r+0x4e>
 800b7e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b7e4:	b01d      	add	sp, #116	@ 0x74
 800b7e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ea:	89ab      	ldrh	r3, [r5, #12]
 800b7ec:	0598      	lsls	r0, r3, #22
 800b7ee:	d4f7      	bmi.n	800b7e0 <_vfiprintf_r+0x44>
 800b7f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7f2:	f7ff ff5d 	bl	800b6b0 <__retarget_lock_release_recursive>
 800b7f6:	e7f3      	b.n	800b7e0 <_vfiprintf_r+0x44>
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7fc:	2320      	movs	r3, #32
 800b7fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b802:	f8cd 800c 	str.w	r8, [sp, #12]
 800b806:	2330      	movs	r3, #48	@ 0x30
 800b808:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b9b8 <_vfiprintf_r+0x21c>
 800b80c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b810:	f04f 0901 	mov.w	r9, #1
 800b814:	4623      	mov	r3, r4
 800b816:	469a      	mov	sl, r3
 800b818:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b81c:	b10a      	cbz	r2, 800b822 <_vfiprintf_r+0x86>
 800b81e:	2a25      	cmp	r2, #37	@ 0x25
 800b820:	d1f9      	bne.n	800b816 <_vfiprintf_r+0x7a>
 800b822:	ebba 0b04 	subs.w	fp, sl, r4
 800b826:	d00b      	beq.n	800b840 <_vfiprintf_r+0xa4>
 800b828:	465b      	mov	r3, fp
 800b82a:	4622      	mov	r2, r4
 800b82c:	4629      	mov	r1, r5
 800b82e:	4630      	mov	r0, r6
 800b830:	f7ff ffa1 	bl	800b776 <__sfputs_r>
 800b834:	3001      	adds	r0, #1
 800b836:	f000 80a7 	beq.w	800b988 <_vfiprintf_r+0x1ec>
 800b83a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b83c:	445a      	add	r2, fp
 800b83e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b840:	f89a 3000 	ldrb.w	r3, [sl]
 800b844:	2b00      	cmp	r3, #0
 800b846:	f000 809f 	beq.w	800b988 <_vfiprintf_r+0x1ec>
 800b84a:	2300      	movs	r3, #0
 800b84c:	f04f 32ff 	mov.w	r2, #4294967295
 800b850:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b854:	f10a 0a01 	add.w	sl, sl, #1
 800b858:	9304      	str	r3, [sp, #16]
 800b85a:	9307      	str	r3, [sp, #28]
 800b85c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b860:	931a      	str	r3, [sp, #104]	@ 0x68
 800b862:	4654      	mov	r4, sl
 800b864:	2205      	movs	r2, #5
 800b866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b86a:	4853      	ldr	r0, [pc, #332]	@ (800b9b8 <_vfiprintf_r+0x21c>)
 800b86c:	f7f4 fcb0 	bl	80001d0 <memchr>
 800b870:	9a04      	ldr	r2, [sp, #16]
 800b872:	b9d8      	cbnz	r0, 800b8ac <_vfiprintf_r+0x110>
 800b874:	06d1      	lsls	r1, r2, #27
 800b876:	bf44      	itt	mi
 800b878:	2320      	movmi	r3, #32
 800b87a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b87e:	0713      	lsls	r3, r2, #28
 800b880:	bf44      	itt	mi
 800b882:	232b      	movmi	r3, #43	@ 0x2b
 800b884:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b888:	f89a 3000 	ldrb.w	r3, [sl]
 800b88c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b88e:	d015      	beq.n	800b8bc <_vfiprintf_r+0x120>
 800b890:	9a07      	ldr	r2, [sp, #28]
 800b892:	4654      	mov	r4, sl
 800b894:	2000      	movs	r0, #0
 800b896:	f04f 0c0a 	mov.w	ip, #10
 800b89a:	4621      	mov	r1, r4
 800b89c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8a0:	3b30      	subs	r3, #48	@ 0x30
 800b8a2:	2b09      	cmp	r3, #9
 800b8a4:	d94b      	bls.n	800b93e <_vfiprintf_r+0x1a2>
 800b8a6:	b1b0      	cbz	r0, 800b8d6 <_vfiprintf_r+0x13a>
 800b8a8:	9207      	str	r2, [sp, #28]
 800b8aa:	e014      	b.n	800b8d6 <_vfiprintf_r+0x13a>
 800b8ac:	eba0 0308 	sub.w	r3, r0, r8
 800b8b0:	fa09 f303 	lsl.w	r3, r9, r3
 800b8b4:	4313      	orrs	r3, r2
 800b8b6:	9304      	str	r3, [sp, #16]
 800b8b8:	46a2      	mov	sl, r4
 800b8ba:	e7d2      	b.n	800b862 <_vfiprintf_r+0xc6>
 800b8bc:	9b03      	ldr	r3, [sp, #12]
 800b8be:	1d19      	adds	r1, r3, #4
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	9103      	str	r1, [sp, #12]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	bfbb      	ittet	lt
 800b8c8:	425b      	neglt	r3, r3
 800b8ca:	f042 0202 	orrlt.w	r2, r2, #2
 800b8ce:	9307      	strge	r3, [sp, #28]
 800b8d0:	9307      	strlt	r3, [sp, #28]
 800b8d2:	bfb8      	it	lt
 800b8d4:	9204      	strlt	r2, [sp, #16]
 800b8d6:	7823      	ldrb	r3, [r4, #0]
 800b8d8:	2b2e      	cmp	r3, #46	@ 0x2e
 800b8da:	d10a      	bne.n	800b8f2 <_vfiprintf_r+0x156>
 800b8dc:	7863      	ldrb	r3, [r4, #1]
 800b8de:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8e0:	d132      	bne.n	800b948 <_vfiprintf_r+0x1ac>
 800b8e2:	9b03      	ldr	r3, [sp, #12]
 800b8e4:	1d1a      	adds	r2, r3, #4
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	9203      	str	r2, [sp, #12]
 800b8ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b8ee:	3402      	adds	r4, #2
 800b8f0:	9305      	str	r3, [sp, #20]
 800b8f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b9c8 <_vfiprintf_r+0x22c>
 800b8f6:	7821      	ldrb	r1, [r4, #0]
 800b8f8:	2203      	movs	r2, #3
 800b8fa:	4650      	mov	r0, sl
 800b8fc:	f7f4 fc68 	bl	80001d0 <memchr>
 800b900:	b138      	cbz	r0, 800b912 <_vfiprintf_r+0x176>
 800b902:	9b04      	ldr	r3, [sp, #16]
 800b904:	eba0 000a 	sub.w	r0, r0, sl
 800b908:	2240      	movs	r2, #64	@ 0x40
 800b90a:	4082      	lsls	r2, r0
 800b90c:	4313      	orrs	r3, r2
 800b90e:	3401      	adds	r4, #1
 800b910:	9304      	str	r3, [sp, #16]
 800b912:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b916:	4829      	ldr	r0, [pc, #164]	@ (800b9bc <_vfiprintf_r+0x220>)
 800b918:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b91c:	2206      	movs	r2, #6
 800b91e:	f7f4 fc57 	bl	80001d0 <memchr>
 800b922:	2800      	cmp	r0, #0
 800b924:	d03f      	beq.n	800b9a6 <_vfiprintf_r+0x20a>
 800b926:	4b26      	ldr	r3, [pc, #152]	@ (800b9c0 <_vfiprintf_r+0x224>)
 800b928:	bb1b      	cbnz	r3, 800b972 <_vfiprintf_r+0x1d6>
 800b92a:	9b03      	ldr	r3, [sp, #12]
 800b92c:	3307      	adds	r3, #7
 800b92e:	f023 0307 	bic.w	r3, r3, #7
 800b932:	3308      	adds	r3, #8
 800b934:	9303      	str	r3, [sp, #12]
 800b936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b938:	443b      	add	r3, r7
 800b93a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b93c:	e76a      	b.n	800b814 <_vfiprintf_r+0x78>
 800b93e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b942:	460c      	mov	r4, r1
 800b944:	2001      	movs	r0, #1
 800b946:	e7a8      	b.n	800b89a <_vfiprintf_r+0xfe>
 800b948:	2300      	movs	r3, #0
 800b94a:	3401      	adds	r4, #1
 800b94c:	9305      	str	r3, [sp, #20]
 800b94e:	4619      	mov	r1, r3
 800b950:	f04f 0c0a 	mov.w	ip, #10
 800b954:	4620      	mov	r0, r4
 800b956:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b95a:	3a30      	subs	r2, #48	@ 0x30
 800b95c:	2a09      	cmp	r2, #9
 800b95e:	d903      	bls.n	800b968 <_vfiprintf_r+0x1cc>
 800b960:	2b00      	cmp	r3, #0
 800b962:	d0c6      	beq.n	800b8f2 <_vfiprintf_r+0x156>
 800b964:	9105      	str	r1, [sp, #20]
 800b966:	e7c4      	b.n	800b8f2 <_vfiprintf_r+0x156>
 800b968:	fb0c 2101 	mla	r1, ip, r1, r2
 800b96c:	4604      	mov	r4, r0
 800b96e:	2301      	movs	r3, #1
 800b970:	e7f0      	b.n	800b954 <_vfiprintf_r+0x1b8>
 800b972:	ab03      	add	r3, sp, #12
 800b974:	9300      	str	r3, [sp, #0]
 800b976:	462a      	mov	r2, r5
 800b978:	4b12      	ldr	r3, [pc, #72]	@ (800b9c4 <_vfiprintf_r+0x228>)
 800b97a:	a904      	add	r1, sp, #16
 800b97c:	4630      	mov	r0, r6
 800b97e:	f3af 8000 	nop.w
 800b982:	4607      	mov	r7, r0
 800b984:	1c78      	adds	r0, r7, #1
 800b986:	d1d6      	bne.n	800b936 <_vfiprintf_r+0x19a>
 800b988:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b98a:	07d9      	lsls	r1, r3, #31
 800b98c:	d405      	bmi.n	800b99a <_vfiprintf_r+0x1fe>
 800b98e:	89ab      	ldrh	r3, [r5, #12]
 800b990:	059a      	lsls	r2, r3, #22
 800b992:	d402      	bmi.n	800b99a <_vfiprintf_r+0x1fe>
 800b994:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b996:	f7ff fe8b 	bl	800b6b0 <__retarget_lock_release_recursive>
 800b99a:	89ab      	ldrh	r3, [r5, #12]
 800b99c:	065b      	lsls	r3, r3, #25
 800b99e:	f53f af1f 	bmi.w	800b7e0 <_vfiprintf_r+0x44>
 800b9a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b9a4:	e71e      	b.n	800b7e4 <_vfiprintf_r+0x48>
 800b9a6:	ab03      	add	r3, sp, #12
 800b9a8:	9300      	str	r3, [sp, #0]
 800b9aa:	462a      	mov	r2, r5
 800b9ac:	4b05      	ldr	r3, [pc, #20]	@ (800b9c4 <_vfiprintf_r+0x228>)
 800b9ae:	a904      	add	r1, sp, #16
 800b9b0:	4630      	mov	r0, r6
 800b9b2:	f000 f879 	bl	800baa8 <_printf_i>
 800b9b6:	e7e4      	b.n	800b982 <_vfiprintf_r+0x1e6>
 800b9b8:	0800d170 	.word	0x0800d170
 800b9bc:	0800d17a 	.word	0x0800d17a
 800b9c0:	00000000 	.word	0x00000000
 800b9c4:	0800b777 	.word	0x0800b777
 800b9c8:	0800d176 	.word	0x0800d176

0800b9cc <_printf_common>:
 800b9cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9d0:	4616      	mov	r6, r2
 800b9d2:	4698      	mov	r8, r3
 800b9d4:	688a      	ldr	r2, [r1, #8]
 800b9d6:	690b      	ldr	r3, [r1, #16]
 800b9d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	bfb8      	it	lt
 800b9e0:	4613      	movlt	r3, r2
 800b9e2:	6033      	str	r3, [r6, #0]
 800b9e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b9e8:	4607      	mov	r7, r0
 800b9ea:	460c      	mov	r4, r1
 800b9ec:	b10a      	cbz	r2, 800b9f2 <_printf_common+0x26>
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	6033      	str	r3, [r6, #0]
 800b9f2:	6823      	ldr	r3, [r4, #0]
 800b9f4:	0699      	lsls	r1, r3, #26
 800b9f6:	bf42      	ittt	mi
 800b9f8:	6833      	ldrmi	r3, [r6, #0]
 800b9fa:	3302      	addmi	r3, #2
 800b9fc:	6033      	strmi	r3, [r6, #0]
 800b9fe:	6825      	ldr	r5, [r4, #0]
 800ba00:	f015 0506 	ands.w	r5, r5, #6
 800ba04:	d106      	bne.n	800ba14 <_printf_common+0x48>
 800ba06:	f104 0a19 	add.w	sl, r4, #25
 800ba0a:	68e3      	ldr	r3, [r4, #12]
 800ba0c:	6832      	ldr	r2, [r6, #0]
 800ba0e:	1a9b      	subs	r3, r3, r2
 800ba10:	42ab      	cmp	r3, r5
 800ba12:	dc26      	bgt.n	800ba62 <_printf_common+0x96>
 800ba14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ba18:	6822      	ldr	r2, [r4, #0]
 800ba1a:	3b00      	subs	r3, #0
 800ba1c:	bf18      	it	ne
 800ba1e:	2301      	movne	r3, #1
 800ba20:	0692      	lsls	r2, r2, #26
 800ba22:	d42b      	bmi.n	800ba7c <_printf_common+0xb0>
 800ba24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ba28:	4641      	mov	r1, r8
 800ba2a:	4638      	mov	r0, r7
 800ba2c:	47c8      	blx	r9
 800ba2e:	3001      	adds	r0, #1
 800ba30:	d01e      	beq.n	800ba70 <_printf_common+0xa4>
 800ba32:	6823      	ldr	r3, [r4, #0]
 800ba34:	6922      	ldr	r2, [r4, #16]
 800ba36:	f003 0306 	and.w	r3, r3, #6
 800ba3a:	2b04      	cmp	r3, #4
 800ba3c:	bf02      	ittt	eq
 800ba3e:	68e5      	ldreq	r5, [r4, #12]
 800ba40:	6833      	ldreq	r3, [r6, #0]
 800ba42:	1aed      	subeq	r5, r5, r3
 800ba44:	68a3      	ldr	r3, [r4, #8]
 800ba46:	bf0c      	ite	eq
 800ba48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba4c:	2500      	movne	r5, #0
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	bfc4      	itt	gt
 800ba52:	1a9b      	subgt	r3, r3, r2
 800ba54:	18ed      	addgt	r5, r5, r3
 800ba56:	2600      	movs	r6, #0
 800ba58:	341a      	adds	r4, #26
 800ba5a:	42b5      	cmp	r5, r6
 800ba5c:	d11a      	bne.n	800ba94 <_printf_common+0xc8>
 800ba5e:	2000      	movs	r0, #0
 800ba60:	e008      	b.n	800ba74 <_printf_common+0xa8>
 800ba62:	2301      	movs	r3, #1
 800ba64:	4652      	mov	r2, sl
 800ba66:	4641      	mov	r1, r8
 800ba68:	4638      	mov	r0, r7
 800ba6a:	47c8      	blx	r9
 800ba6c:	3001      	adds	r0, #1
 800ba6e:	d103      	bne.n	800ba78 <_printf_common+0xac>
 800ba70:	f04f 30ff 	mov.w	r0, #4294967295
 800ba74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba78:	3501      	adds	r5, #1
 800ba7a:	e7c6      	b.n	800ba0a <_printf_common+0x3e>
 800ba7c:	18e1      	adds	r1, r4, r3
 800ba7e:	1c5a      	adds	r2, r3, #1
 800ba80:	2030      	movs	r0, #48	@ 0x30
 800ba82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ba86:	4422      	add	r2, r4
 800ba88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ba8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ba90:	3302      	adds	r3, #2
 800ba92:	e7c7      	b.n	800ba24 <_printf_common+0x58>
 800ba94:	2301      	movs	r3, #1
 800ba96:	4622      	mov	r2, r4
 800ba98:	4641      	mov	r1, r8
 800ba9a:	4638      	mov	r0, r7
 800ba9c:	47c8      	blx	r9
 800ba9e:	3001      	adds	r0, #1
 800baa0:	d0e6      	beq.n	800ba70 <_printf_common+0xa4>
 800baa2:	3601      	adds	r6, #1
 800baa4:	e7d9      	b.n	800ba5a <_printf_common+0x8e>
	...

0800baa8 <_printf_i>:
 800baa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800baac:	7e0f      	ldrb	r7, [r1, #24]
 800baae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bab0:	2f78      	cmp	r7, #120	@ 0x78
 800bab2:	4691      	mov	r9, r2
 800bab4:	4680      	mov	r8, r0
 800bab6:	460c      	mov	r4, r1
 800bab8:	469a      	mov	sl, r3
 800baba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800babe:	d807      	bhi.n	800bad0 <_printf_i+0x28>
 800bac0:	2f62      	cmp	r7, #98	@ 0x62
 800bac2:	d80a      	bhi.n	800bada <_printf_i+0x32>
 800bac4:	2f00      	cmp	r7, #0
 800bac6:	f000 80d2 	beq.w	800bc6e <_printf_i+0x1c6>
 800baca:	2f58      	cmp	r7, #88	@ 0x58
 800bacc:	f000 80b9 	beq.w	800bc42 <_printf_i+0x19a>
 800bad0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bad4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bad8:	e03a      	b.n	800bb50 <_printf_i+0xa8>
 800bada:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bade:	2b15      	cmp	r3, #21
 800bae0:	d8f6      	bhi.n	800bad0 <_printf_i+0x28>
 800bae2:	a101      	add	r1, pc, #4	@ (adr r1, 800bae8 <_printf_i+0x40>)
 800bae4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bae8:	0800bb41 	.word	0x0800bb41
 800baec:	0800bb55 	.word	0x0800bb55
 800baf0:	0800bad1 	.word	0x0800bad1
 800baf4:	0800bad1 	.word	0x0800bad1
 800baf8:	0800bad1 	.word	0x0800bad1
 800bafc:	0800bad1 	.word	0x0800bad1
 800bb00:	0800bb55 	.word	0x0800bb55
 800bb04:	0800bad1 	.word	0x0800bad1
 800bb08:	0800bad1 	.word	0x0800bad1
 800bb0c:	0800bad1 	.word	0x0800bad1
 800bb10:	0800bad1 	.word	0x0800bad1
 800bb14:	0800bc55 	.word	0x0800bc55
 800bb18:	0800bb7f 	.word	0x0800bb7f
 800bb1c:	0800bc0f 	.word	0x0800bc0f
 800bb20:	0800bad1 	.word	0x0800bad1
 800bb24:	0800bad1 	.word	0x0800bad1
 800bb28:	0800bc77 	.word	0x0800bc77
 800bb2c:	0800bad1 	.word	0x0800bad1
 800bb30:	0800bb7f 	.word	0x0800bb7f
 800bb34:	0800bad1 	.word	0x0800bad1
 800bb38:	0800bad1 	.word	0x0800bad1
 800bb3c:	0800bc17 	.word	0x0800bc17
 800bb40:	6833      	ldr	r3, [r6, #0]
 800bb42:	1d1a      	adds	r2, r3, #4
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	6032      	str	r2, [r6, #0]
 800bb48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bb4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bb50:	2301      	movs	r3, #1
 800bb52:	e09d      	b.n	800bc90 <_printf_i+0x1e8>
 800bb54:	6833      	ldr	r3, [r6, #0]
 800bb56:	6820      	ldr	r0, [r4, #0]
 800bb58:	1d19      	adds	r1, r3, #4
 800bb5a:	6031      	str	r1, [r6, #0]
 800bb5c:	0606      	lsls	r6, r0, #24
 800bb5e:	d501      	bpl.n	800bb64 <_printf_i+0xbc>
 800bb60:	681d      	ldr	r5, [r3, #0]
 800bb62:	e003      	b.n	800bb6c <_printf_i+0xc4>
 800bb64:	0645      	lsls	r5, r0, #25
 800bb66:	d5fb      	bpl.n	800bb60 <_printf_i+0xb8>
 800bb68:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bb6c:	2d00      	cmp	r5, #0
 800bb6e:	da03      	bge.n	800bb78 <_printf_i+0xd0>
 800bb70:	232d      	movs	r3, #45	@ 0x2d
 800bb72:	426d      	negs	r5, r5
 800bb74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb78:	4859      	ldr	r0, [pc, #356]	@ (800bce0 <_printf_i+0x238>)
 800bb7a:	230a      	movs	r3, #10
 800bb7c:	e011      	b.n	800bba2 <_printf_i+0xfa>
 800bb7e:	6821      	ldr	r1, [r4, #0]
 800bb80:	6833      	ldr	r3, [r6, #0]
 800bb82:	0608      	lsls	r0, r1, #24
 800bb84:	f853 5b04 	ldr.w	r5, [r3], #4
 800bb88:	d402      	bmi.n	800bb90 <_printf_i+0xe8>
 800bb8a:	0649      	lsls	r1, r1, #25
 800bb8c:	bf48      	it	mi
 800bb8e:	b2ad      	uxthmi	r5, r5
 800bb90:	2f6f      	cmp	r7, #111	@ 0x6f
 800bb92:	4853      	ldr	r0, [pc, #332]	@ (800bce0 <_printf_i+0x238>)
 800bb94:	6033      	str	r3, [r6, #0]
 800bb96:	bf14      	ite	ne
 800bb98:	230a      	movne	r3, #10
 800bb9a:	2308      	moveq	r3, #8
 800bb9c:	2100      	movs	r1, #0
 800bb9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bba2:	6866      	ldr	r6, [r4, #4]
 800bba4:	60a6      	str	r6, [r4, #8]
 800bba6:	2e00      	cmp	r6, #0
 800bba8:	bfa2      	ittt	ge
 800bbaa:	6821      	ldrge	r1, [r4, #0]
 800bbac:	f021 0104 	bicge.w	r1, r1, #4
 800bbb0:	6021      	strge	r1, [r4, #0]
 800bbb2:	b90d      	cbnz	r5, 800bbb8 <_printf_i+0x110>
 800bbb4:	2e00      	cmp	r6, #0
 800bbb6:	d04b      	beq.n	800bc50 <_printf_i+0x1a8>
 800bbb8:	4616      	mov	r6, r2
 800bbba:	fbb5 f1f3 	udiv	r1, r5, r3
 800bbbe:	fb03 5711 	mls	r7, r3, r1, r5
 800bbc2:	5dc7      	ldrb	r7, [r0, r7]
 800bbc4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bbc8:	462f      	mov	r7, r5
 800bbca:	42bb      	cmp	r3, r7
 800bbcc:	460d      	mov	r5, r1
 800bbce:	d9f4      	bls.n	800bbba <_printf_i+0x112>
 800bbd0:	2b08      	cmp	r3, #8
 800bbd2:	d10b      	bne.n	800bbec <_printf_i+0x144>
 800bbd4:	6823      	ldr	r3, [r4, #0]
 800bbd6:	07df      	lsls	r7, r3, #31
 800bbd8:	d508      	bpl.n	800bbec <_printf_i+0x144>
 800bbda:	6923      	ldr	r3, [r4, #16]
 800bbdc:	6861      	ldr	r1, [r4, #4]
 800bbde:	4299      	cmp	r1, r3
 800bbe0:	bfde      	ittt	le
 800bbe2:	2330      	movle	r3, #48	@ 0x30
 800bbe4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bbe8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bbec:	1b92      	subs	r2, r2, r6
 800bbee:	6122      	str	r2, [r4, #16]
 800bbf0:	f8cd a000 	str.w	sl, [sp]
 800bbf4:	464b      	mov	r3, r9
 800bbf6:	aa03      	add	r2, sp, #12
 800bbf8:	4621      	mov	r1, r4
 800bbfa:	4640      	mov	r0, r8
 800bbfc:	f7ff fee6 	bl	800b9cc <_printf_common>
 800bc00:	3001      	adds	r0, #1
 800bc02:	d14a      	bne.n	800bc9a <_printf_i+0x1f2>
 800bc04:	f04f 30ff 	mov.w	r0, #4294967295
 800bc08:	b004      	add	sp, #16
 800bc0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc0e:	6823      	ldr	r3, [r4, #0]
 800bc10:	f043 0320 	orr.w	r3, r3, #32
 800bc14:	6023      	str	r3, [r4, #0]
 800bc16:	4833      	ldr	r0, [pc, #204]	@ (800bce4 <_printf_i+0x23c>)
 800bc18:	2778      	movs	r7, #120	@ 0x78
 800bc1a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bc1e:	6823      	ldr	r3, [r4, #0]
 800bc20:	6831      	ldr	r1, [r6, #0]
 800bc22:	061f      	lsls	r7, r3, #24
 800bc24:	f851 5b04 	ldr.w	r5, [r1], #4
 800bc28:	d402      	bmi.n	800bc30 <_printf_i+0x188>
 800bc2a:	065f      	lsls	r7, r3, #25
 800bc2c:	bf48      	it	mi
 800bc2e:	b2ad      	uxthmi	r5, r5
 800bc30:	6031      	str	r1, [r6, #0]
 800bc32:	07d9      	lsls	r1, r3, #31
 800bc34:	bf44      	itt	mi
 800bc36:	f043 0320 	orrmi.w	r3, r3, #32
 800bc3a:	6023      	strmi	r3, [r4, #0]
 800bc3c:	b11d      	cbz	r5, 800bc46 <_printf_i+0x19e>
 800bc3e:	2310      	movs	r3, #16
 800bc40:	e7ac      	b.n	800bb9c <_printf_i+0xf4>
 800bc42:	4827      	ldr	r0, [pc, #156]	@ (800bce0 <_printf_i+0x238>)
 800bc44:	e7e9      	b.n	800bc1a <_printf_i+0x172>
 800bc46:	6823      	ldr	r3, [r4, #0]
 800bc48:	f023 0320 	bic.w	r3, r3, #32
 800bc4c:	6023      	str	r3, [r4, #0]
 800bc4e:	e7f6      	b.n	800bc3e <_printf_i+0x196>
 800bc50:	4616      	mov	r6, r2
 800bc52:	e7bd      	b.n	800bbd0 <_printf_i+0x128>
 800bc54:	6833      	ldr	r3, [r6, #0]
 800bc56:	6825      	ldr	r5, [r4, #0]
 800bc58:	6961      	ldr	r1, [r4, #20]
 800bc5a:	1d18      	adds	r0, r3, #4
 800bc5c:	6030      	str	r0, [r6, #0]
 800bc5e:	062e      	lsls	r6, r5, #24
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	d501      	bpl.n	800bc68 <_printf_i+0x1c0>
 800bc64:	6019      	str	r1, [r3, #0]
 800bc66:	e002      	b.n	800bc6e <_printf_i+0x1c6>
 800bc68:	0668      	lsls	r0, r5, #25
 800bc6a:	d5fb      	bpl.n	800bc64 <_printf_i+0x1bc>
 800bc6c:	8019      	strh	r1, [r3, #0]
 800bc6e:	2300      	movs	r3, #0
 800bc70:	6123      	str	r3, [r4, #16]
 800bc72:	4616      	mov	r6, r2
 800bc74:	e7bc      	b.n	800bbf0 <_printf_i+0x148>
 800bc76:	6833      	ldr	r3, [r6, #0]
 800bc78:	1d1a      	adds	r2, r3, #4
 800bc7a:	6032      	str	r2, [r6, #0]
 800bc7c:	681e      	ldr	r6, [r3, #0]
 800bc7e:	6862      	ldr	r2, [r4, #4]
 800bc80:	2100      	movs	r1, #0
 800bc82:	4630      	mov	r0, r6
 800bc84:	f7f4 faa4 	bl	80001d0 <memchr>
 800bc88:	b108      	cbz	r0, 800bc8e <_printf_i+0x1e6>
 800bc8a:	1b80      	subs	r0, r0, r6
 800bc8c:	6060      	str	r0, [r4, #4]
 800bc8e:	6863      	ldr	r3, [r4, #4]
 800bc90:	6123      	str	r3, [r4, #16]
 800bc92:	2300      	movs	r3, #0
 800bc94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc98:	e7aa      	b.n	800bbf0 <_printf_i+0x148>
 800bc9a:	6923      	ldr	r3, [r4, #16]
 800bc9c:	4632      	mov	r2, r6
 800bc9e:	4649      	mov	r1, r9
 800bca0:	4640      	mov	r0, r8
 800bca2:	47d0      	blx	sl
 800bca4:	3001      	adds	r0, #1
 800bca6:	d0ad      	beq.n	800bc04 <_printf_i+0x15c>
 800bca8:	6823      	ldr	r3, [r4, #0]
 800bcaa:	079b      	lsls	r3, r3, #30
 800bcac:	d413      	bmi.n	800bcd6 <_printf_i+0x22e>
 800bcae:	68e0      	ldr	r0, [r4, #12]
 800bcb0:	9b03      	ldr	r3, [sp, #12]
 800bcb2:	4298      	cmp	r0, r3
 800bcb4:	bfb8      	it	lt
 800bcb6:	4618      	movlt	r0, r3
 800bcb8:	e7a6      	b.n	800bc08 <_printf_i+0x160>
 800bcba:	2301      	movs	r3, #1
 800bcbc:	4632      	mov	r2, r6
 800bcbe:	4649      	mov	r1, r9
 800bcc0:	4640      	mov	r0, r8
 800bcc2:	47d0      	blx	sl
 800bcc4:	3001      	adds	r0, #1
 800bcc6:	d09d      	beq.n	800bc04 <_printf_i+0x15c>
 800bcc8:	3501      	adds	r5, #1
 800bcca:	68e3      	ldr	r3, [r4, #12]
 800bccc:	9903      	ldr	r1, [sp, #12]
 800bcce:	1a5b      	subs	r3, r3, r1
 800bcd0:	42ab      	cmp	r3, r5
 800bcd2:	dcf2      	bgt.n	800bcba <_printf_i+0x212>
 800bcd4:	e7eb      	b.n	800bcae <_printf_i+0x206>
 800bcd6:	2500      	movs	r5, #0
 800bcd8:	f104 0619 	add.w	r6, r4, #25
 800bcdc:	e7f5      	b.n	800bcca <_printf_i+0x222>
 800bcde:	bf00      	nop
 800bce0:	0800d181 	.word	0x0800d181
 800bce4:	0800d192 	.word	0x0800d192

0800bce8 <__sflush_r>:
 800bce8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bcec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcf0:	0716      	lsls	r6, r2, #28
 800bcf2:	4605      	mov	r5, r0
 800bcf4:	460c      	mov	r4, r1
 800bcf6:	d454      	bmi.n	800bda2 <__sflush_r+0xba>
 800bcf8:	684b      	ldr	r3, [r1, #4]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	dc02      	bgt.n	800bd04 <__sflush_r+0x1c>
 800bcfe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	dd48      	ble.n	800bd96 <__sflush_r+0xae>
 800bd04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bd06:	2e00      	cmp	r6, #0
 800bd08:	d045      	beq.n	800bd96 <__sflush_r+0xae>
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bd10:	682f      	ldr	r7, [r5, #0]
 800bd12:	6a21      	ldr	r1, [r4, #32]
 800bd14:	602b      	str	r3, [r5, #0]
 800bd16:	d030      	beq.n	800bd7a <__sflush_r+0x92>
 800bd18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bd1a:	89a3      	ldrh	r3, [r4, #12]
 800bd1c:	0759      	lsls	r1, r3, #29
 800bd1e:	d505      	bpl.n	800bd2c <__sflush_r+0x44>
 800bd20:	6863      	ldr	r3, [r4, #4]
 800bd22:	1ad2      	subs	r2, r2, r3
 800bd24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bd26:	b10b      	cbz	r3, 800bd2c <__sflush_r+0x44>
 800bd28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bd2a:	1ad2      	subs	r2, r2, r3
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bd30:	6a21      	ldr	r1, [r4, #32]
 800bd32:	4628      	mov	r0, r5
 800bd34:	47b0      	blx	r6
 800bd36:	1c43      	adds	r3, r0, #1
 800bd38:	89a3      	ldrh	r3, [r4, #12]
 800bd3a:	d106      	bne.n	800bd4a <__sflush_r+0x62>
 800bd3c:	6829      	ldr	r1, [r5, #0]
 800bd3e:	291d      	cmp	r1, #29
 800bd40:	d82b      	bhi.n	800bd9a <__sflush_r+0xb2>
 800bd42:	4a2a      	ldr	r2, [pc, #168]	@ (800bdec <__sflush_r+0x104>)
 800bd44:	410a      	asrs	r2, r1
 800bd46:	07d6      	lsls	r6, r2, #31
 800bd48:	d427      	bmi.n	800bd9a <__sflush_r+0xb2>
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	6062      	str	r2, [r4, #4]
 800bd4e:	04d9      	lsls	r1, r3, #19
 800bd50:	6922      	ldr	r2, [r4, #16]
 800bd52:	6022      	str	r2, [r4, #0]
 800bd54:	d504      	bpl.n	800bd60 <__sflush_r+0x78>
 800bd56:	1c42      	adds	r2, r0, #1
 800bd58:	d101      	bne.n	800bd5e <__sflush_r+0x76>
 800bd5a:	682b      	ldr	r3, [r5, #0]
 800bd5c:	b903      	cbnz	r3, 800bd60 <__sflush_r+0x78>
 800bd5e:	6560      	str	r0, [r4, #84]	@ 0x54
 800bd60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd62:	602f      	str	r7, [r5, #0]
 800bd64:	b1b9      	cbz	r1, 800bd96 <__sflush_r+0xae>
 800bd66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd6a:	4299      	cmp	r1, r3
 800bd6c:	d002      	beq.n	800bd74 <__sflush_r+0x8c>
 800bd6e:	4628      	mov	r0, r5
 800bd70:	f7ff fca0 	bl	800b6b4 <_free_r>
 800bd74:	2300      	movs	r3, #0
 800bd76:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd78:	e00d      	b.n	800bd96 <__sflush_r+0xae>
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	4628      	mov	r0, r5
 800bd7e:	47b0      	blx	r6
 800bd80:	4602      	mov	r2, r0
 800bd82:	1c50      	adds	r0, r2, #1
 800bd84:	d1c9      	bne.n	800bd1a <__sflush_r+0x32>
 800bd86:	682b      	ldr	r3, [r5, #0]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d0c6      	beq.n	800bd1a <__sflush_r+0x32>
 800bd8c:	2b1d      	cmp	r3, #29
 800bd8e:	d001      	beq.n	800bd94 <__sflush_r+0xac>
 800bd90:	2b16      	cmp	r3, #22
 800bd92:	d11e      	bne.n	800bdd2 <__sflush_r+0xea>
 800bd94:	602f      	str	r7, [r5, #0]
 800bd96:	2000      	movs	r0, #0
 800bd98:	e022      	b.n	800bde0 <__sflush_r+0xf8>
 800bd9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd9e:	b21b      	sxth	r3, r3
 800bda0:	e01b      	b.n	800bdda <__sflush_r+0xf2>
 800bda2:	690f      	ldr	r7, [r1, #16]
 800bda4:	2f00      	cmp	r7, #0
 800bda6:	d0f6      	beq.n	800bd96 <__sflush_r+0xae>
 800bda8:	0793      	lsls	r3, r2, #30
 800bdaa:	680e      	ldr	r6, [r1, #0]
 800bdac:	bf08      	it	eq
 800bdae:	694b      	ldreq	r3, [r1, #20]
 800bdb0:	600f      	str	r7, [r1, #0]
 800bdb2:	bf18      	it	ne
 800bdb4:	2300      	movne	r3, #0
 800bdb6:	eba6 0807 	sub.w	r8, r6, r7
 800bdba:	608b      	str	r3, [r1, #8]
 800bdbc:	f1b8 0f00 	cmp.w	r8, #0
 800bdc0:	dde9      	ble.n	800bd96 <__sflush_r+0xae>
 800bdc2:	6a21      	ldr	r1, [r4, #32]
 800bdc4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bdc6:	4643      	mov	r3, r8
 800bdc8:	463a      	mov	r2, r7
 800bdca:	4628      	mov	r0, r5
 800bdcc:	47b0      	blx	r6
 800bdce:	2800      	cmp	r0, #0
 800bdd0:	dc08      	bgt.n	800bde4 <__sflush_r+0xfc>
 800bdd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdda:	81a3      	strh	r3, [r4, #12]
 800bddc:	f04f 30ff 	mov.w	r0, #4294967295
 800bde0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bde4:	4407      	add	r7, r0
 800bde6:	eba8 0800 	sub.w	r8, r8, r0
 800bdea:	e7e7      	b.n	800bdbc <__sflush_r+0xd4>
 800bdec:	dfbffffe 	.word	0xdfbffffe

0800bdf0 <_fflush_r>:
 800bdf0:	b538      	push	{r3, r4, r5, lr}
 800bdf2:	690b      	ldr	r3, [r1, #16]
 800bdf4:	4605      	mov	r5, r0
 800bdf6:	460c      	mov	r4, r1
 800bdf8:	b913      	cbnz	r3, 800be00 <_fflush_r+0x10>
 800bdfa:	2500      	movs	r5, #0
 800bdfc:	4628      	mov	r0, r5
 800bdfe:	bd38      	pop	{r3, r4, r5, pc}
 800be00:	b118      	cbz	r0, 800be0a <_fflush_r+0x1a>
 800be02:	6a03      	ldr	r3, [r0, #32]
 800be04:	b90b      	cbnz	r3, 800be0a <_fflush_r+0x1a>
 800be06:	f7ff fb3d 	bl	800b484 <__sinit>
 800be0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d0f3      	beq.n	800bdfa <_fflush_r+0xa>
 800be12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800be14:	07d0      	lsls	r0, r2, #31
 800be16:	d404      	bmi.n	800be22 <_fflush_r+0x32>
 800be18:	0599      	lsls	r1, r3, #22
 800be1a:	d402      	bmi.n	800be22 <_fflush_r+0x32>
 800be1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be1e:	f7ff fc46 	bl	800b6ae <__retarget_lock_acquire_recursive>
 800be22:	4628      	mov	r0, r5
 800be24:	4621      	mov	r1, r4
 800be26:	f7ff ff5f 	bl	800bce8 <__sflush_r>
 800be2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800be2c:	07da      	lsls	r2, r3, #31
 800be2e:	4605      	mov	r5, r0
 800be30:	d4e4      	bmi.n	800bdfc <_fflush_r+0xc>
 800be32:	89a3      	ldrh	r3, [r4, #12]
 800be34:	059b      	lsls	r3, r3, #22
 800be36:	d4e1      	bmi.n	800bdfc <_fflush_r+0xc>
 800be38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be3a:	f7ff fc39 	bl	800b6b0 <__retarget_lock_release_recursive>
 800be3e:	e7dd      	b.n	800bdfc <_fflush_r+0xc>

0800be40 <__swbuf_r>:
 800be40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be42:	460e      	mov	r6, r1
 800be44:	4614      	mov	r4, r2
 800be46:	4605      	mov	r5, r0
 800be48:	b118      	cbz	r0, 800be52 <__swbuf_r+0x12>
 800be4a:	6a03      	ldr	r3, [r0, #32]
 800be4c:	b90b      	cbnz	r3, 800be52 <__swbuf_r+0x12>
 800be4e:	f7ff fb19 	bl	800b484 <__sinit>
 800be52:	69a3      	ldr	r3, [r4, #24]
 800be54:	60a3      	str	r3, [r4, #8]
 800be56:	89a3      	ldrh	r3, [r4, #12]
 800be58:	071a      	lsls	r2, r3, #28
 800be5a:	d501      	bpl.n	800be60 <__swbuf_r+0x20>
 800be5c:	6923      	ldr	r3, [r4, #16]
 800be5e:	b943      	cbnz	r3, 800be72 <__swbuf_r+0x32>
 800be60:	4621      	mov	r1, r4
 800be62:	4628      	mov	r0, r5
 800be64:	f000 f82a 	bl	800bebc <__swsetup_r>
 800be68:	b118      	cbz	r0, 800be72 <__swbuf_r+0x32>
 800be6a:	f04f 37ff 	mov.w	r7, #4294967295
 800be6e:	4638      	mov	r0, r7
 800be70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be72:	6823      	ldr	r3, [r4, #0]
 800be74:	6922      	ldr	r2, [r4, #16]
 800be76:	1a98      	subs	r0, r3, r2
 800be78:	6963      	ldr	r3, [r4, #20]
 800be7a:	b2f6      	uxtb	r6, r6
 800be7c:	4283      	cmp	r3, r0
 800be7e:	4637      	mov	r7, r6
 800be80:	dc05      	bgt.n	800be8e <__swbuf_r+0x4e>
 800be82:	4621      	mov	r1, r4
 800be84:	4628      	mov	r0, r5
 800be86:	f7ff ffb3 	bl	800bdf0 <_fflush_r>
 800be8a:	2800      	cmp	r0, #0
 800be8c:	d1ed      	bne.n	800be6a <__swbuf_r+0x2a>
 800be8e:	68a3      	ldr	r3, [r4, #8]
 800be90:	3b01      	subs	r3, #1
 800be92:	60a3      	str	r3, [r4, #8]
 800be94:	6823      	ldr	r3, [r4, #0]
 800be96:	1c5a      	adds	r2, r3, #1
 800be98:	6022      	str	r2, [r4, #0]
 800be9a:	701e      	strb	r6, [r3, #0]
 800be9c:	6962      	ldr	r2, [r4, #20]
 800be9e:	1c43      	adds	r3, r0, #1
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d004      	beq.n	800beae <__swbuf_r+0x6e>
 800bea4:	89a3      	ldrh	r3, [r4, #12]
 800bea6:	07db      	lsls	r3, r3, #31
 800bea8:	d5e1      	bpl.n	800be6e <__swbuf_r+0x2e>
 800beaa:	2e0a      	cmp	r6, #10
 800beac:	d1df      	bne.n	800be6e <__swbuf_r+0x2e>
 800beae:	4621      	mov	r1, r4
 800beb0:	4628      	mov	r0, r5
 800beb2:	f7ff ff9d 	bl	800bdf0 <_fflush_r>
 800beb6:	2800      	cmp	r0, #0
 800beb8:	d0d9      	beq.n	800be6e <__swbuf_r+0x2e>
 800beba:	e7d6      	b.n	800be6a <__swbuf_r+0x2a>

0800bebc <__swsetup_r>:
 800bebc:	b538      	push	{r3, r4, r5, lr}
 800bebe:	4b29      	ldr	r3, [pc, #164]	@ (800bf64 <__swsetup_r+0xa8>)
 800bec0:	4605      	mov	r5, r0
 800bec2:	6818      	ldr	r0, [r3, #0]
 800bec4:	460c      	mov	r4, r1
 800bec6:	b118      	cbz	r0, 800bed0 <__swsetup_r+0x14>
 800bec8:	6a03      	ldr	r3, [r0, #32]
 800beca:	b90b      	cbnz	r3, 800bed0 <__swsetup_r+0x14>
 800becc:	f7ff fada 	bl	800b484 <__sinit>
 800bed0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bed4:	0719      	lsls	r1, r3, #28
 800bed6:	d422      	bmi.n	800bf1e <__swsetup_r+0x62>
 800bed8:	06da      	lsls	r2, r3, #27
 800beda:	d407      	bmi.n	800beec <__swsetup_r+0x30>
 800bedc:	2209      	movs	r2, #9
 800bede:	602a      	str	r2, [r5, #0]
 800bee0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bee4:	81a3      	strh	r3, [r4, #12]
 800bee6:	f04f 30ff 	mov.w	r0, #4294967295
 800beea:	e033      	b.n	800bf54 <__swsetup_r+0x98>
 800beec:	0758      	lsls	r0, r3, #29
 800beee:	d512      	bpl.n	800bf16 <__swsetup_r+0x5a>
 800bef0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bef2:	b141      	cbz	r1, 800bf06 <__swsetup_r+0x4a>
 800bef4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bef8:	4299      	cmp	r1, r3
 800befa:	d002      	beq.n	800bf02 <__swsetup_r+0x46>
 800befc:	4628      	mov	r0, r5
 800befe:	f7ff fbd9 	bl	800b6b4 <_free_r>
 800bf02:	2300      	movs	r3, #0
 800bf04:	6363      	str	r3, [r4, #52]	@ 0x34
 800bf06:	89a3      	ldrh	r3, [r4, #12]
 800bf08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bf0c:	81a3      	strh	r3, [r4, #12]
 800bf0e:	2300      	movs	r3, #0
 800bf10:	6063      	str	r3, [r4, #4]
 800bf12:	6923      	ldr	r3, [r4, #16]
 800bf14:	6023      	str	r3, [r4, #0]
 800bf16:	89a3      	ldrh	r3, [r4, #12]
 800bf18:	f043 0308 	orr.w	r3, r3, #8
 800bf1c:	81a3      	strh	r3, [r4, #12]
 800bf1e:	6923      	ldr	r3, [r4, #16]
 800bf20:	b94b      	cbnz	r3, 800bf36 <__swsetup_r+0x7a>
 800bf22:	89a3      	ldrh	r3, [r4, #12]
 800bf24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bf28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bf2c:	d003      	beq.n	800bf36 <__swsetup_r+0x7a>
 800bf2e:	4621      	mov	r1, r4
 800bf30:	4628      	mov	r0, r5
 800bf32:	f000 f83f 	bl	800bfb4 <__smakebuf_r>
 800bf36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf3a:	f013 0201 	ands.w	r2, r3, #1
 800bf3e:	d00a      	beq.n	800bf56 <__swsetup_r+0x9a>
 800bf40:	2200      	movs	r2, #0
 800bf42:	60a2      	str	r2, [r4, #8]
 800bf44:	6962      	ldr	r2, [r4, #20]
 800bf46:	4252      	negs	r2, r2
 800bf48:	61a2      	str	r2, [r4, #24]
 800bf4a:	6922      	ldr	r2, [r4, #16]
 800bf4c:	b942      	cbnz	r2, 800bf60 <__swsetup_r+0xa4>
 800bf4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bf52:	d1c5      	bne.n	800bee0 <__swsetup_r+0x24>
 800bf54:	bd38      	pop	{r3, r4, r5, pc}
 800bf56:	0799      	lsls	r1, r3, #30
 800bf58:	bf58      	it	pl
 800bf5a:	6962      	ldrpl	r2, [r4, #20]
 800bf5c:	60a2      	str	r2, [r4, #8]
 800bf5e:	e7f4      	b.n	800bf4a <__swsetup_r+0x8e>
 800bf60:	2000      	movs	r0, #0
 800bf62:	e7f7      	b.n	800bf54 <__swsetup_r+0x98>
 800bf64:	20000038 	.word	0x20000038

0800bf68 <__swhatbuf_r>:
 800bf68:	b570      	push	{r4, r5, r6, lr}
 800bf6a:	460c      	mov	r4, r1
 800bf6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf70:	2900      	cmp	r1, #0
 800bf72:	b096      	sub	sp, #88	@ 0x58
 800bf74:	4615      	mov	r5, r2
 800bf76:	461e      	mov	r6, r3
 800bf78:	da0d      	bge.n	800bf96 <__swhatbuf_r+0x2e>
 800bf7a:	89a3      	ldrh	r3, [r4, #12]
 800bf7c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bf80:	f04f 0100 	mov.w	r1, #0
 800bf84:	bf14      	ite	ne
 800bf86:	2340      	movne	r3, #64	@ 0x40
 800bf88:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bf8c:	2000      	movs	r0, #0
 800bf8e:	6031      	str	r1, [r6, #0]
 800bf90:	602b      	str	r3, [r5, #0]
 800bf92:	b016      	add	sp, #88	@ 0x58
 800bf94:	bd70      	pop	{r4, r5, r6, pc}
 800bf96:	466a      	mov	r2, sp
 800bf98:	f000 f848 	bl	800c02c <_fstat_r>
 800bf9c:	2800      	cmp	r0, #0
 800bf9e:	dbec      	blt.n	800bf7a <__swhatbuf_r+0x12>
 800bfa0:	9901      	ldr	r1, [sp, #4]
 800bfa2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bfa6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bfaa:	4259      	negs	r1, r3
 800bfac:	4159      	adcs	r1, r3
 800bfae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bfb2:	e7eb      	b.n	800bf8c <__swhatbuf_r+0x24>

0800bfb4 <__smakebuf_r>:
 800bfb4:	898b      	ldrh	r3, [r1, #12]
 800bfb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bfb8:	079d      	lsls	r5, r3, #30
 800bfba:	4606      	mov	r6, r0
 800bfbc:	460c      	mov	r4, r1
 800bfbe:	d507      	bpl.n	800bfd0 <__smakebuf_r+0x1c>
 800bfc0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bfc4:	6023      	str	r3, [r4, #0]
 800bfc6:	6123      	str	r3, [r4, #16]
 800bfc8:	2301      	movs	r3, #1
 800bfca:	6163      	str	r3, [r4, #20]
 800bfcc:	b003      	add	sp, #12
 800bfce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfd0:	ab01      	add	r3, sp, #4
 800bfd2:	466a      	mov	r2, sp
 800bfd4:	f7ff ffc8 	bl	800bf68 <__swhatbuf_r>
 800bfd8:	9f00      	ldr	r7, [sp, #0]
 800bfda:	4605      	mov	r5, r0
 800bfdc:	4639      	mov	r1, r7
 800bfde:	4630      	mov	r0, r6
 800bfe0:	f7ff f938 	bl	800b254 <_malloc_r>
 800bfe4:	b948      	cbnz	r0, 800bffa <__smakebuf_r+0x46>
 800bfe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfea:	059a      	lsls	r2, r3, #22
 800bfec:	d4ee      	bmi.n	800bfcc <__smakebuf_r+0x18>
 800bfee:	f023 0303 	bic.w	r3, r3, #3
 800bff2:	f043 0302 	orr.w	r3, r3, #2
 800bff6:	81a3      	strh	r3, [r4, #12]
 800bff8:	e7e2      	b.n	800bfc0 <__smakebuf_r+0xc>
 800bffa:	89a3      	ldrh	r3, [r4, #12]
 800bffc:	6020      	str	r0, [r4, #0]
 800bffe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c002:	81a3      	strh	r3, [r4, #12]
 800c004:	9b01      	ldr	r3, [sp, #4]
 800c006:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c00a:	b15b      	cbz	r3, 800c024 <__smakebuf_r+0x70>
 800c00c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c010:	4630      	mov	r0, r6
 800c012:	f000 f81d 	bl	800c050 <_isatty_r>
 800c016:	b128      	cbz	r0, 800c024 <__smakebuf_r+0x70>
 800c018:	89a3      	ldrh	r3, [r4, #12]
 800c01a:	f023 0303 	bic.w	r3, r3, #3
 800c01e:	f043 0301 	orr.w	r3, r3, #1
 800c022:	81a3      	strh	r3, [r4, #12]
 800c024:	89a3      	ldrh	r3, [r4, #12]
 800c026:	431d      	orrs	r5, r3
 800c028:	81a5      	strh	r5, [r4, #12]
 800c02a:	e7cf      	b.n	800bfcc <__smakebuf_r+0x18>

0800c02c <_fstat_r>:
 800c02c:	b538      	push	{r3, r4, r5, lr}
 800c02e:	4d07      	ldr	r5, [pc, #28]	@ (800c04c <_fstat_r+0x20>)
 800c030:	2300      	movs	r3, #0
 800c032:	4604      	mov	r4, r0
 800c034:	4608      	mov	r0, r1
 800c036:	4611      	mov	r1, r2
 800c038:	602b      	str	r3, [r5, #0]
 800c03a:	f7f5 fcd8 	bl	80019ee <_fstat>
 800c03e:	1c43      	adds	r3, r0, #1
 800c040:	d102      	bne.n	800c048 <_fstat_r+0x1c>
 800c042:	682b      	ldr	r3, [r5, #0]
 800c044:	b103      	cbz	r3, 800c048 <_fstat_r+0x1c>
 800c046:	6023      	str	r3, [r4, #0]
 800c048:	bd38      	pop	{r3, r4, r5, pc}
 800c04a:	bf00      	nop
 800c04c:	20000d48 	.word	0x20000d48

0800c050 <_isatty_r>:
 800c050:	b538      	push	{r3, r4, r5, lr}
 800c052:	4d06      	ldr	r5, [pc, #24]	@ (800c06c <_isatty_r+0x1c>)
 800c054:	2300      	movs	r3, #0
 800c056:	4604      	mov	r4, r0
 800c058:	4608      	mov	r0, r1
 800c05a:	602b      	str	r3, [r5, #0]
 800c05c:	f7f5 fcd7 	bl	8001a0e <_isatty>
 800c060:	1c43      	adds	r3, r0, #1
 800c062:	d102      	bne.n	800c06a <_isatty_r+0x1a>
 800c064:	682b      	ldr	r3, [r5, #0]
 800c066:	b103      	cbz	r3, 800c06a <_isatty_r+0x1a>
 800c068:	6023      	str	r3, [r4, #0]
 800c06a:	bd38      	pop	{r3, r4, r5, pc}
 800c06c:	20000d48 	.word	0x20000d48

0800c070 <sin>:
 800c070:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c072:	ec53 2b10 	vmov	r2, r3, d0
 800c076:	4826      	ldr	r0, [pc, #152]	@ (800c110 <sin+0xa0>)
 800c078:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c07c:	4281      	cmp	r1, r0
 800c07e:	d807      	bhi.n	800c090 <sin+0x20>
 800c080:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800c108 <sin+0x98>
 800c084:	2000      	movs	r0, #0
 800c086:	b005      	add	sp, #20
 800c088:	f85d eb04 	ldr.w	lr, [sp], #4
 800c08c:	f000 b90c 	b.w	800c2a8 <__kernel_sin>
 800c090:	4820      	ldr	r0, [pc, #128]	@ (800c114 <sin+0xa4>)
 800c092:	4281      	cmp	r1, r0
 800c094:	d908      	bls.n	800c0a8 <sin+0x38>
 800c096:	4610      	mov	r0, r2
 800c098:	4619      	mov	r1, r3
 800c09a:	f7f4 f8ed 	bl	8000278 <__aeabi_dsub>
 800c09e:	ec41 0b10 	vmov	d0, r0, r1
 800c0a2:	b005      	add	sp, #20
 800c0a4:	f85d fb04 	ldr.w	pc, [sp], #4
 800c0a8:	4668      	mov	r0, sp
 800c0aa:	f000 f9b9 	bl	800c420 <__ieee754_rem_pio2>
 800c0ae:	f000 0003 	and.w	r0, r0, #3
 800c0b2:	2801      	cmp	r0, #1
 800c0b4:	d00c      	beq.n	800c0d0 <sin+0x60>
 800c0b6:	2802      	cmp	r0, #2
 800c0b8:	d011      	beq.n	800c0de <sin+0x6e>
 800c0ba:	b9e8      	cbnz	r0, 800c0f8 <sin+0x88>
 800c0bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c0c0:	ed9d 0b00 	vldr	d0, [sp]
 800c0c4:	2001      	movs	r0, #1
 800c0c6:	f000 f8ef 	bl	800c2a8 <__kernel_sin>
 800c0ca:	ec51 0b10 	vmov	r0, r1, d0
 800c0ce:	e7e6      	b.n	800c09e <sin+0x2e>
 800c0d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c0d4:	ed9d 0b00 	vldr	d0, [sp]
 800c0d8:	f000 f81e 	bl	800c118 <__kernel_cos>
 800c0dc:	e7f5      	b.n	800c0ca <sin+0x5a>
 800c0de:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c0e2:	ed9d 0b00 	vldr	d0, [sp]
 800c0e6:	2001      	movs	r0, #1
 800c0e8:	f000 f8de 	bl	800c2a8 <__kernel_sin>
 800c0ec:	ec53 2b10 	vmov	r2, r3, d0
 800c0f0:	4610      	mov	r0, r2
 800c0f2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800c0f6:	e7d2      	b.n	800c09e <sin+0x2e>
 800c0f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c0fc:	ed9d 0b00 	vldr	d0, [sp]
 800c100:	f000 f80a 	bl	800c118 <__kernel_cos>
 800c104:	e7f2      	b.n	800c0ec <sin+0x7c>
 800c106:	bf00      	nop
	...
 800c110:	3fe921fb 	.word	0x3fe921fb
 800c114:	7fefffff 	.word	0x7fefffff

0800c118 <__kernel_cos>:
 800c118:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c11c:	ec57 6b10 	vmov	r6, r7, d0
 800c120:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800c124:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800c128:	ed8d 1b00 	vstr	d1, [sp]
 800c12c:	d206      	bcs.n	800c13c <__kernel_cos+0x24>
 800c12e:	4630      	mov	r0, r6
 800c130:	4639      	mov	r1, r7
 800c132:	f7f4 fcf3 	bl	8000b1c <__aeabi_d2iz>
 800c136:	2800      	cmp	r0, #0
 800c138:	f000 8088 	beq.w	800c24c <__kernel_cos+0x134>
 800c13c:	4632      	mov	r2, r6
 800c13e:	463b      	mov	r3, r7
 800c140:	4630      	mov	r0, r6
 800c142:	4639      	mov	r1, r7
 800c144:	f7f4 fa50 	bl	80005e8 <__aeabi_dmul>
 800c148:	4b51      	ldr	r3, [pc, #324]	@ (800c290 <__kernel_cos+0x178>)
 800c14a:	2200      	movs	r2, #0
 800c14c:	4604      	mov	r4, r0
 800c14e:	460d      	mov	r5, r1
 800c150:	f7f4 fa4a 	bl	80005e8 <__aeabi_dmul>
 800c154:	a340      	add	r3, pc, #256	@ (adr r3, 800c258 <__kernel_cos+0x140>)
 800c156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15a:	4682      	mov	sl, r0
 800c15c:	468b      	mov	fp, r1
 800c15e:	4620      	mov	r0, r4
 800c160:	4629      	mov	r1, r5
 800c162:	f7f4 fa41 	bl	80005e8 <__aeabi_dmul>
 800c166:	a33e      	add	r3, pc, #248	@ (adr r3, 800c260 <__kernel_cos+0x148>)
 800c168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c16c:	f7f4 f886 	bl	800027c <__adddf3>
 800c170:	4622      	mov	r2, r4
 800c172:	462b      	mov	r3, r5
 800c174:	f7f4 fa38 	bl	80005e8 <__aeabi_dmul>
 800c178:	a33b      	add	r3, pc, #236	@ (adr r3, 800c268 <__kernel_cos+0x150>)
 800c17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c17e:	f7f4 f87b 	bl	8000278 <__aeabi_dsub>
 800c182:	4622      	mov	r2, r4
 800c184:	462b      	mov	r3, r5
 800c186:	f7f4 fa2f 	bl	80005e8 <__aeabi_dmul>
 800c18a:	a339      	add	r3, pc, #228	@ (adr r3, 800c270 <__kernel_cos+0x158>)
 800c18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c190:	f7f4 f874 	bl	800027c <__adddf3>
 800c194:	4622      	mov	r2, r4
 800c196:	462b      	mov	r3, r5
 800c198:	f7f4 fa26 	bl	80005e8 <__aeabi_dmul>
 800c19c:	a336      	add	r3, pc, #216	@ (adr r3, 800c278 <__kernel_cos+0x160>)
 800c19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a2:	f7f4 f869 	bl	8000278 <__aeabi_dsub>
 800c1a6:	4622      	mov	r2, r4
 800c1a8:	462b      	mov	r3, r5
 800c1aa:	f7f4 fa1d 	bl	80005e8 <__aeabi_dmul>
 800c1ae:	a334      	add	r3, pc, #208	@ (adr r3, 800c280 <__kernel_cos+0x168>)
 800c1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1b4:	f7f4 f862 	bl	800027c <__adddf3>
 800c1b8:	4622      	mov	r2, r4
 800c1ba:	462b      	mov	r3, r5
 800c1bc:	f7f4 fa14 	bl	80005e8 <__aeabi_dmul>
 800c1c0:	4622      	mov	r2, r4
 800c1c2:	462b      	mov	r3, r5
 800c1c4:	f7f4 fa10 	bl	80005e8 <__aeabi_dmul>
 800c1c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1cc:	4604      	mov	r4, r0
 800c1ce:	460d      	mov	r5, r1
 800c1d0:	4630      	mov	r0, r6
 800c1d2:	4639      	mov	r1, r7
 800c1d4:	f7f4 fa08 	bl	80005e8 <__aeabi_dmul>
 800c1d8:	460b      	mov	r3, r1
 800c1da:	4602      	mov	r2, r0
 800c1dc:	4629      	mov	r1, r5
 800c1de:	4620      	mov	r0, r4
 800c1e0:	f7f4 f84a 	bl	8000278 <__aeabi_dsub>
 800c1e4:	4b2b      	ldr	r3, [pc, #172]	@ (800c294 <__kernel_cos+0x17c>)
 800c1e6:	4598      	cmp	r8, r3
 800c1e8:	4606      	mov	r6, r0
 800c1ea:	460f      	mov	r7, r1
 800c1ec:	d810      	bhi.n	800c210 <__kernel_cos+0xf8>
 800c1ee:	4602      	mov	r2, r0
 800c1f0:	460b      	mov	r3, r1
 800c1f2:	4650      	mov	r0, sl
 800c1f4:	4659      	mov	r1, fp
 800c1f6:	f7f4 f83f 	bl	8000278 <__aeabi_dsub>
 800c1fa:	460b      	mov	r3, r1
 800c1fc:	4926      	ldr	r1, [pc, #152]	@ (800c298 <__kernel_cos+0x180>)
 800c1fe:	4602      	mov	r2, r0
 800c200:	2000      	movs	r0, #0
 800c202:	f7f4 f839 	bl	8000278 <__aeabi_dsub>
 800c206:	ec41 0b10 	vmov	d0, r0, r1
 800c20a:	b003      	add	sp, #12
 800c20c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c210:	4b22      	ldr	r3, [pc, #136]	@ (800c29c <__kernel_cos+0x184>)
 800c212:	4921      	ldr	r1, [pc, #132]	@ (800c298 <__kernel_cos+0x180>)
 800c214:	4598      	cmp	r8, r3
 800c216:	bf8c      	ite	hi
 800c218:	4d21      	ldrhi	r5, [pc, #132]	@ (800c2a0 <__kernel_cos+0x188>)
 800c21a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800c21e:	2400      	movs	r4, #0
 800c220:	4622      	mov	r2, r4
 800c222:	462b      	mov	r3, r5
 800c224:	2000      	movs	r0, #0
 800c226:	f7f4 f827 	bl	8000278 <__aeabi_dsub>
 800c22a:	4622      	mov	r2, r4
 800c22c:	4680      	mov	r8, r0
 800c22e:	4689      	mov	r9, r1
 800c230:	462b      	mov	r3, r5
 800c232:	4650      	mov	r0, sl
 800c234:	4659      	mov	r1, fp
 800c236:	f7f4 f81f 	bl	8000278 <__aeabi_dsub>
 800c23a:	4632      	mov	r2, r6
 800c23c:	463b      	mov	r3, r7
 800c23e:	f7f4 f81b 	bl	8000278 <__aeabi_dsub>
 800c242:	4602      	mov	r2, r0
 800c244:	460b      	mov	r3, r1
 800c246:	4640      	mov	r0, r8
 800c248:	4649      	mov	r1, r9
 800c24a:	e7da      	b.n	800c202 <__kernel_cos+0xea>
 800c24c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800c288 <__kernel_cos+0x170>
 800c250:	e7db      	b.n	800c20a <__kernel_cos+0xf2>
 800c252:	bf00      	nop
 800c254:	f3af 8000 	nop.w
 800c258:	be8838d4 	.word	0xbe8838d4
 800c25c:	bda8fae9 	.word	0xbda8fae9
 800c260:	bdb4b1c4 	.word	0xbdb4b1c4
 800c264:	3e21ee9e 	.word	0x3e21ee9e
 800c268:	809c52ad 	.word	0x809c52ad
 800c26c:	3e927e4f 	.word	0x3e927e4f
 800c270:	19cb1590 	.word	0x19cb1590
 800c274:	3efa01a0 	.word	0x3efa01a0
 800c278:	16c15177 	.word	0x16c15177
 800c27c:	3f56c16c 	.word	0x3f56c16c
 800c280:	5555554c 	.word	0x5555554c
 800c284:	3fa55555 	.word	0x3fa55555
 800c288:	00000000 	.word	0x00000000
 800c28c:	3ff00000 	.word	0x3ff00000
 800c290:	3fe00000 	.word	0x3fe00000
 800c294:	3fd33332 	.word	0x3fd33332
 800c298:	3ff00000 	.word	0x3ff00000
 800c29c:	3fe90000 	.word	0x3fe90000
 800c2a0:	3fd20000 	.word	0x3fd20000
 800c2a4:	00000000 	.word	0x00000000

0800c2a8 <__kernel_sin>:
 800c2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ac:	ec55 4b10 	vmov	r4, r5, d0
 800c2b0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c2b4:	b085      	sub	sp, #20
 800c2b6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800c2ba:	ed8d 1b02 	vstr	d1, [sp, #8]
 800c2be:	4680      	mov	r8, r0
 800c2c0:	d205      	bcs.n	800c2ce <__kernel_sin+0x26>
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	4629      	mov	r1, r5
 800c2c6:	f7f4 fc29 	bl	8000b1c <__aeabi_d2iz>
 800c2ca:	2800      	cmp	r0, #0
 800c2cc:	d052      	beq.n	800c374 <__kernel_sin+0xcc>
 800c2ce:	4622      	mov	r2, r4
 800c2d0:	462b      	mov	r3, r5
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	4629      	mov	r1, r5
 800c2d6:	f7f4 f987 	bl	80005e8 <__aeabi_dmul>
 800c2da:	4682      	mov	sl, r0
 800c2dc:	468b      	mov	fp, r1
 800c2de:	4602      	mov	r2, r0
 800c2e0:	460b      	mov	r3, r1
 800c2e2:	4620      	mov	r0, r4
 800c2e4:	4629      	mov	r1, r5
 800c2e6:	f7f4 f97f 	bl	80005e8 <__aeabi_dmul>
 800c2ea:	a342      	add	r3, pc, #264	@ (adr r3, 800c3f4 <__kernel_sin+0x14c>)
 800c2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f0:	e9cd 0100 	strd	r0, r1, [sp]
 800c2f4:	4650      	mov	r0, sl
 800c2f6:	4659      	mov	r1, fp
 800c2f8:	f7f4 f976 	bl	80005e8 <__aeabi_dmul>
 800c2fc:	a33f      	add	r3, pc, #252	@ (adr r3, 800c3fc <__kernel_sin+0x154>)
 800c2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c302:	f7f3 ffb9 	bl	8000278 <__aeabi_dsub>
 800c306:	4652      	mov	r2, sl
 800c308:	465b      	mov	r3, fp
 800c30a:	f7f4 f96d 	bl	80005e8 <__aeabi_dmul>
 800c30e:	a33d      	add	r3, pc, #244	@ (adr r3, 800c404 <__kernel_sin+0x15c>)
 800c310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c314:	f7f3 ffb2 	bl	800027c <__adddf3>
 800c318:	4652      	mov	r2, sl
 800c31a:	465b      	mov	r3, fp
 800c31c:	f7f4 f964 	bl	80005e8 <__aeabi_dmul>
 800c320:	a33a      	add	r3, pc, #232	@ (adr r3, 800c40c <__kernel_sin+0x164>)
 800c322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c326:	f7f3 ffa7 	bl	8000278 <__aeabi_dsub>
 800c32a:	4652      	mov	r2, sl
 800c32c:	465b      	mov	r3, fp
 800c32e:	f7f4 f95b 	bl	80005e8 <__aeabi_dmul>
 800c332:	a338      	add	r3, pc, #224	@ (adr r3, 800c414 <__kernel_sin+0x16c>)
 800c334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c338:	f7f3 ffa0 	bl	800027c <__adddf3>
 800c33c:	4606      	mov	r6, r0
 800c33e:	460f      	mov	r7, r1
 800c340:	f1b8 0f00 	cmp.w	r8, #0
 800c344:	d11b      	bne.n	800c37e <__kernel_sin+0xd6>
 800c346:	4602      	mov	r2, r0
 800c348:	460b      	mov	r3, r1
 800c34a:	4650      	mov	r0, sl
 800c34c:	4659      	mov	r1, fp
 800c34e:	f7f4 f94b 	bl	80005e8 <__aeabi_dmul>
 800c352:	a325      	add	r3, pc, #148	@ (adr r3, 800c3e8 <__kernel_sin+0x140>)
 800c354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c358:	f7f3 ff8e 	bl	8000278 <__aeabi_dsub>
 800c35c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c360:	f7f4 f942 	bl	80005e8 <__aeabi_dmul>
 800c364:	4602      	mov	r2, r0
 800c366:	460b      	mov	r3, r1
 800c368:	4620      	mov	r0, r4
 800c36a:	4629      	mov	r1, r5
 800c36c:	f7f3 ff86 	bl	800027c <__adddf3>
 800c370:	4604      	mov	r4, r0
 800c372:	460d      	mov	r5, r1
 800c374:	ec45 4b10 	vmov	d0, r4, r5
 800c378:	b005      	add	sp, #20
 800c37a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c37e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c382:	4b1b      	ldr	r3, [pc, #108]	@ (800c3f0 <__kernel_sin+0x148>)
 800c384:	2200      	movs	r2, #0
 800c386:	f7f4 f92f 	bl	80005e8 <__aeabi_dmul>
 800c38a:	4632      	mov	r2, r6
 800c38c:	4680      	mov	r8, r0
 800c38e:	4689      	mov	r9, r1
 800c390:	463b      	mov	r3, r7
 800c392:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c396:	f7f4 f927 	bl	80005e8 <__aeabi_dmul>
 800c39a:	4602      	mov	r2, r0
 800c39c:	460b      	mov	r3, r1
 800c39e:	4640      	mov	r0, r8
 800c3a0:	4649      	mov	r1, r9
 800c3a2:	f7f3 ff69 	bl	8000278 <__aeabi_dsub>
 800c3a6:	4652      	mov	r2, sl
 800c3a8:	465b      	mov	r3, fp
 800c3aa:	f7f4 f91d 	bl	80005e8 <__aeabi_dmul>
 800c3ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3b2:	f7f3 ff61 	bl	8000278 <__aeabi_dsub>
 800c3b6:	a30c      	add	r3, pc, #48	@ (adr r3, 800c3e8 <__kernel_sin+0x140>)
 800c3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3bc:	4606      	mov	r6, r0
 800c3be:	460f      	mov	r7, r1
 800c3c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c3c4:	f7f4 f910 	bl	80005e8 <__aeabi_dmul>
 800c3c8:	4602      	mov	r2, r0
 800c3ca:	460b      	mov	r3, r1
 800c3cc:	4630      	mov	r0, r6
 800c3ce:	4639      	mov	r1, r7
 800c3d0:	f7f3 ff54 	bl	800027c <__adddf3>
 800c3d4:	4602      	mov	r2, r0
 800c3d6:	460b      	mov	r3, r1
 800c3d8:	4620      	mov	r0, r4
 800c3da:	4629      	mov	r1, r5
 800c3dc:	f7f3 ff4c 	bl	8000278 <__aeabi_dsub>
 800c3e0:	e7c6      	b.n	800c370 <__kernel_sin+0xc8>
 800c3e2:	bf00      	nop
 800c3e4:	f3af 8000 	nop.w
 800c3e8:	55555549 	.word	0x55555549
 800c3ec:	3fc55555 	.word	0x3fc55555
 800c3f0:	3fe00000 	.word	0x3fe00000
 800c3f4:	5acfd57c 	.word	0x5acfd57c
 800c3f8:	3de5d93a 	.word	0x3de5d93a
 800c3fc:	8a2b9ceb 	.word	0x8a2b9ceb
 800c400:	3e5ae5e6 	.word	0x3e5ae5e6
 800c404:	57b1fe7d 	.word	0x57b1fe7d
 800c408:	3ec71de3 	.word	0x3ec71de3
 800c40c:	19c161d5 	.word	0x19c161d5
 800c410:	3f2a01a0 	.word	0x3f2a01a0
 800c414:	1110f8a6 	.word	0x1110f8a6
 800c418:	3f811111 	.word	0x3f811111
 800c41c:	00000000 	.word	0x00000000

0800c420 <__ieee754_rem_pio2>:
 800c420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c424:	ec57 6b10 	vmov	r6, r7, d0
 800c428:	4bc5      	ldr	r3, [pc, #788]	@ (800c740 <__ieee754_rem_pio2+0x320>)
 800c42a:	b08d      	sub	sp, #52	@ 0x34
 800c42c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800c430:	4598      	cmp	r8, r3
 800c432:	4604      	mov	r4, r0
 800c434:	9704      	str	r7, [sp, #16]
 800c436:	d807      	bhi.n	800c448 <__ieee754_rem_pio2+0x28>
 800c438:	2200      	movs	r2, #0
 800c43a:	2300      	movs	r3, #0
 800c43c:	ed80 0b00 	vstr	d0, [r0]
 800c440:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c444:	2500      	movs	r5, #0
 800c446:	e028      	b.n	800c49a <__ieee754_rem_pio2+0x7a>
 800c448:	4bbe      	ldr	r3, [pc, #760]	@ (800c744 <__ieee754_rem_pio2+0x324>)
 800c44a:	4598      	cmp	r8, r3
 800c44c:	d878      	bhi.n	800c540 <__ieee754_rem_pio2+0x120>
 800c44e:	9b04      	ldr	r3, [sp, #16]
 800c450:	4dbd      	ldr	r5, [pc, #756]	@ (800c748 <__ieee754_rem_pio2+0x328>)
 800c452:	2b00      	cmp	r3, #0
 800c454:	4630      	mov	r0, r6
 800c456:	a3ac      	add	r3, pc, #688	@ (adr r3, 800c708 <__ieee754_rem_pio2+0x2e8>)
 800c458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c45c:	4639      	mov	r1, r7
 800c45e:	dd38      	ble.n	800c4d2 <__ieee754_rem_pio2+0xb2>
 800c460:	f7f3 ff0a 	bl	8000278 <__aeabi_dsub>
 800c464:	45a8      	cmp	r8, r5
 800c466:	4606      	mov	r6, r0
 800c468:	460f      	mov	r7, r1
 800c46a:	d01a      	beq.n	800c4a2 <__ieee754_rem_pio2+0x82>
 800c46c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800c710 <__ieee754_rem_pio2+0x2f0>)
 800c46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c472:	f7f3 ff01 	bl	8000278 <__aeabi_dsub>
 800c476:	4602      	mov	r2, r0
 800c478:	460b      	mov	r3, r1
 800c47a:	4680      	mov	r8, r0
 800c47c:	4689      	mov	r9, r1
 800c47e:	4630      	mov	r0, r6
 800c480:	4639      	mov	r1, r7
 800c482:	f7f3 fef9 	bl	8000278 <__aeabi_dsub>
 800c486:	a3a2      	add	r3, pc, #648	@ (adr r3, 800c710 <__ieee754_rem_pio2+0x2f0>)
 800c488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c48c:	f7f3 fef4 	bl	8000278 <__aeabi_dsub>
 800c490:	e9c4 8900 	strd	r8, r9, [r4]
 800c494:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c498:	2501      	movs	r5, #1
 800c49a:	4628      	mov	r0, r5
 800c49c:	b00d      	add	sp, #52	@ 0x34
 800c49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4a2:	a39d      	add	r3, pc, #628	@ (adr r3, 800c718 <__ieee754_rem_pio2+0x2f8>)
 800c4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a8:	f7f3 fee6 	bl	8000278 <__aeabi_dsub>
 800c4ac:	a39c      	add	r3, pc, #624	@ (adr r3, 800c720 <__ieee754_rem_pio2+0x300>)
 800c4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b2:	4606      	mov	r6, r0
 800c4b4:	460f      	mov	r7, r1
 800c4b6:	f7f3 fedf 	bl	8000278 <__aeabi_dsub>
 800c4ba:	4602      	mov	r2, r0
 800c4bc:	460b      	mov	r3, r1
 800c4be:	4680      	mov	r8, r0
 800c4c0:	4689      	mov	r9, r1
 800c4c2:	4630      	mov	r0, r6
 800c4c4:	4639      	mov	r1, r7
 800c4c6:	f7f3 fed7 	bl	8000278 <__aeabi_dsub>
 800c4ca:	a395      	add	r3, pc, #596	@ (adr r3, 800c720 <__ieee754_rem_pio2+0x300>)
 800c4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d0:	e7dc      	b.n	800c48c <__ieee754_rem_pio2+0x6c>
 800c4d2:	f7f3 fed3 	bl	800027c <__adddf3>
 800c4d6:	45a8      	cmp	r8, r5
 800c4d8:	4606      	mov	r6, r0
 800c4da:	460f      	mov	r7, r1
 800c4dc:	d018      	beq.n	800c510 <__ieee754_rem_pio2+0xf0>
 800c4de:	a38c      	add	r3, pc, #560	@ (adr r3, 800c710 <__ieee754_rem_pio2+0x2f0>)
 800c4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e4:	f7f3 feca 	bl	800027c <__adddf3>
 800c4e8:	4602      	mov	r2, r0
 800c4ea:	460b      	mov	r3, r1
 800c4ec:	4680      	mov	r8, r0
 800c4ee:	4689      	mov	r9, r1
 800c4f0:	4630      	mov	r0, r6
 800c4f2:	4639      	mov	r1, r7
 800c4f4:	f7f3 fec0 	bl	8000278 <__aeabi_dsub>
 800c4f8:	a385      	add	r3, pc, #532	@ (adr r3, 800c710 <__ieee754_rem_pio2+0x2f0>)
 800c4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4fe:	f7f3 febd 	bl	800027c <__adddf3>
 800c502:	f04f 35ff 	mov.w	r5, #4294967295
 800c506:	e9c4 8900 	strd	r8, r9, [r4]
 800c50a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c50e:	e7c4      	b.n	800c49a <__ieee754_rem_pio2+0x7a>
 800c510:	a381      	add	r3, pc, #516	@ (adr r3, 800c718 <__ieee754_rem_pio2+0x2f8>)
 800c512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c516:	f7f3 feb1 	bl	800027c <__adddf3>
 800c51a:	a381      	add	r3, pc, #516	@ (adr r3, 800c720 <__ieee754_rem_pio2+0x300>)
 800c51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c520:	4606      	mov	r6, r0
 800c522:	460f      	mov	r7, r1
 800c524:	f7f3 feaa 	bl	800027c <__adddf3>
 800c528:	4602      	mov	r2, r0
 800c52a:	460b      	mov	r3, r1
 800c52c:	4680      	mov	r8, r0
 800c52e:	4689      	mov	r9, r1
 800c530:	4630      	mov	r0, r6
 800c532:	4639      	mov	r1, r7
 800c534:	f7f3 fea0 	bl	8000278 <__aeabi_dsub>
 800c538:	a379      	add	r3, pc, #484	@ (adr r3, 800c720 <__ieee754_rem_pio2+0x300>)
 800c53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c53e:	e7de      	b.n	800c4fe <__ieee754_rem_pio2+0xde>
 800c540:	4b82      	ldr	r3, [pc, #520]	@ (800c74c <__ieee754_rem_pio2+0x32c>)
 800c542:	4598      	cmp	r8, r3
 800c544:	f200 80d1 	bhi.w	800c6ea <__ieee754_rem_pio2+0x2ca>
 800c548:	f000 f966 	bl	800c818 <fabs>
 800c54c:	ec57 6b10 	vmov	r6, r7, d0
 800c550:	a375      	add	r3, pc, #468	@ (adr r3, 800c728 <__ieee754_rem_pio2+0x308>)
 800c552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c556:	4630      	mov	r0, r6
 800c558:	4639      	mov	r1, r7
 800c55a:	f7f4 f845 	bl	80005e8 <__aeabi_dmul>
 800c55e:	4b7c      	ldr	r3, [pc, #496]	@ (800c750 <__ieee754_rem_pio2+0x330>)
 800c560:	2200      	movs	r2, #0
 800c562:	f7f3 fe8b 	bl	800027c <__adddf3>
 800c566:	f7f4 fad9 	bl	8000b1c <__aeabi_d2iz>
 800c56a:	4605      	mov	r5, r0
 800c56c:	f7f3 ffd2 	bl	8000514 <__aeabi_i2d>
 800c570:	4602      	mov	r2, r0
 800c572:	460b      	mov	r3, r1
 800c574:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c578:	a363      	add	r3, pc, #396	@ (adr r3, 800c708 <__ieee754_rem_pio2+0x2e8>)
 800c57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c57e:	f7f4 f833 	bl	80005e8 <__aeabi_dmul>
 800c582:	4602      	mov	r2, r0
 800c584:	460b      	mov	r3, r1
 800c586:	4630      	mov	r0, r6
 800c588:	4639      	mov	r1, r7
 800c58a:	f7f3 fe75 	bl	8000278 <__aeabi_dsub>
 800c58e:	a360      	add	r3, pc, #384	@ (adr r3, 800c710 <__ieee754_rem_pio2+0x2f0>)
 800c590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c594:	4682      	mov	sl, r0
 800c596:	468b      	mov	fp, r1
 800c598:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c59c:	f7f4 f824 	bl	80005e8 <__aeabi_dmul>
 800c5a0:	2d1f      	cmp	r5, #31
 800c5a2:	4606      	mov	r6, r0
 800c5a4:	460f      	mov	r7, r1
 800c5a6:	dc0c      	bgt.n	800c5c2 <__ieee754_rem_pio2+0x1a2>
 800c5a8:	4b6a      	ldr	r3, [pc, #424]	@ (800c754 <__ieee754_rem_pio2+0x334>)
 800c5aa:	1e6a      	subs	r2, r5, #1
 800c5ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5b0:	4543      	cmp	r3, r8
 800c5b2:	d006      	beq.n	800c5c2 <__ieee754_rem_pio2+0x1a2>
 800c5b4:	4632      	mov	r2, r6
 800c5b6:	463b      	mov	r3, r7
 800c5b8:	4650      	mov	r0, sl
 800c5ba:	4659      	mov	r1, fp
 800c5bc:	f7f3 fe5c 	bl	8000278 <__aeabi_dsub>
 800c5c0:	e00e      	b.n	800c5e0 <__ieee754_rem_pio2+0x1c0>
 800c5c2:	463b      	mov	r3, r7
 800c5c4:	4632      	mov	r2, r6
 800c5c6:	4650      	mov	r0, sl
 800c5c8:	4659      	mov	r1, fp
 800c5ca:	f7f3 fe55 	bl	8000278 <__aeabi_dsub>
 800c5ce:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c5d2:	9305      	str	r3, [sp, #20]
 800c5d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c5d8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800c5dc:	2b10      	cmp	r3, #16
 800c5de:	dc02      	bgt.n	800c5e6 <__ieee754_rem_pio2+0x1c6>
 800c5e0:	e9c4 0100 	strd	r0, r1, [r4]
 800c5e4:	e039      	b.n	800c65a <__ieee754_rem_pio2+0x23a>
 800c5e6:	a34c      	add	r3, pc, #304	@ (adr r3, 800c718 <__ieee754_rem_pio2+0x2f8>)
 800c5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5f0:	f7f3 fffa 	bl	80005e8 <__aeabi_dmul>
 800c5f4:	4606      	mov	r6, r0
 800c5f6:	460f      	mov	r7, r1
 800c5f8:	4602      	mov	r2, r0
 800c5fa:	460b      	mov	r3, r1
 800c5fc:	4650      	mov	r0, sl
 800c5fe:	4659      	mov	r1, fp
 800c600:	f7f3 fe3a 	bl	8000278 <__aeabi_dsub>
 800c604:	4602      	mov	r2, r0
 800c606:	460b      	mov	r3, r1
 800c608:	4680      	mov	r8, r0
 800c60a:	4689      	mov	r9, r1
 800c60c:	4650      	mov	r0, sl
 800c60e:	4659      	mov	r1, fp
 800c610:	f7f3 fe32 	bl	8000278 <__aeabi_dsub>
 800c614:	4632      	mov	r2, r6
 800c616:	463b      	mov	r3, r7
 800c618:	f7f3 fe2e 	bl	8000278 <__aeabi_dsub>
 800c61c:	a340      	add	r3, pc, #256	@ (adr r3, 800c720 <__ieee754_rem_pio2+0x300>)
 800c61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c622:	4606      	mov	r6, r0
 800c624:	460f      	mov	r7, r1
 800c626:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c62a:	f7f3 ffdd 	bl	80005e8 <__aeabi_dmul>
 800c62e:	4632      	mov	r2, r6
 800c630:	463b      	mov	r3, r7
 800c632:	f7f3 fe21 	bl	8000278 <__aeabi_dsub>
 800c636:	4602      	mov	r2, r0
 800c638:	460b      	mov	r3, r1
 800c63a:	4606      	mov	r6, r0
 800c63c:	460f      	mov	r7, r1
 800c63e:	4640      	mov	r0, r8
 800c640:	4649      	mov	r1, r9
 800c642:	f7f3 fe19 	bl	8000278 <__aeabi_dsub>
 800c646:	9a05      	ldr	r2, [sp, #20]
 800c648:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c64c:	1ad3      	subs	r3, r2, r3
 800c64e:	2b31      	cmp	r3, #49	@ 0x31
 800c650:	dc20      	bgt.n	800c694 <__ieee754_rem_pio2+0x274>
 800c652:	e9c4 0100 	strd	r0, r1, [r4]
 800c656:	46c2      	mov	sl, r8
 800c658:	46cb      	mov	fp, r9
 800c65a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c65e:	4650      	mov	r0, sl
 800c660:	4642      	mov	r2, r8
 800c662:	464b      	mov	r3, r9
 800c664:	4659      	mov	r1, fp
 800c666:	f7f3 fe07 	bl	8000278 <__aeabi_dsub>
 800c66a:	463b      	mov	r3, r7
 800c66c:	4632      	mov	r2, r6
 800c66e:	f7f3 fe03 	bl	8000278 <__aeabi_dsub>
 800c672:	9b04      	ldr	r3, [sp, #16]
 800c674:	2b00      	cmp	r3, #0
 800c676:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c67a:	f6bf af0e 	bge.w	800c49a <__ieee754_rem_pio2+0x7a>
 800c67e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800c682:	6063      	str	r3, [r4, #4]
 800c684:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c688:	f8c4 8000 	str.w	r8, [r4]
 800c68c:	60a0      	str	r0, [r4, #8]
 800c68e:	60e3      	str	r3, [r4, #12]
 800c690:	426d      	negs	r5, r5
 800c692:	e702      	b.n	800c49a <__ieee754_rem_pio2+0x7a>
 800c694:	a326      	add	r3, pc, #152	@ (adr r3, 800c730 <__ieee754_rem_pio2+0x310>)
 800c696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c69a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c69e:	f7f3 ffa3 	bl	80005e8 <__aeabi_dmul>
 800c6a2:	4606      	mov	r6, r0
 800c6a4:	460f      	mov	r7, r1
 800c6a6:	4602      	mov	r2, r0
 800c6a8:	460b      	mov	r3, r1
 800c6aa:	4640      	mov	r0, r8
 800c6ac:	4649      	mov	r1, r9
 800c6ae:	f7f3 fde3 	bl	8000278 <__aeabi_dsub>
 800c6b2:	4602      	mov	r2, r0
 800c6b4:	460b      	mov	r3, r1
 800c6b6:	4682      	mov	sl, r0
 800c6b8:	468b      	mov	fp, r1
 800c6ba:	4640      	mov	r0, r8
 800c6bc:	4649      	mov	r1, r9
 800c6be:	f7f3 fddb 	bl	8000278 <__aeabi_dsub>
 800c6c2:	4632      	mov	r2, r6
 800c6c4:	463b      	mov	r3, r7
 800c6c6:	f7f3 fdd7 	bl	8000278 <__aeabi_dsub>
 800c6ca:	a31b      	add	r3, pc, #108	@ (adr r3, 800c738 <__ieee754_rem_pio2+0x318>)
 800c6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d0:	4606      	mov	r6, r0
 800c6d2:	460f      	mov	r7, r1
 800c6d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6d8:	f7f3 ff86 	bl	80005e8 <__aeabi_dmul>
 800c6dc:	4632      	mov	r2, r6
 800c6de:	463b      	mov	r3, r7
 800c6e0:	f7f3 fdca 	bl	8000278 <__aeabi_dsub>
 800c6e4:	4606      	mov	r6, r0
 800c6e6:	460f      	mov	r7, r1
 800c6e8:	e764      	b.n	800c5b4 <__ieee754_rem_pio2+0x194>
 800c6ea:	4b1b      	ldr	r3, [pc, #108]	@ (800c758 <__ieee754_rem_pio2+0x338>)
 800c6ec:	4598      	cmp	r8, r3
 800c6ee:	d935      	bls.n	800c75c <__ieee754_rem_pio2+0x33c>
 800c6f0:	4632      	mov	r2, r6
 800c6f2:	463b      	mov	r3, r7
 800c6f4:	4630      	mov	r0, r6
 800c6f6:	4639      	mov	r1, r7
 800c6f8:	f7f3 fdbe 	bl	8000278 <__aeabi_dsub>
 800c6fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c700:	e9c4 0100 	strd	r0, r1, [r4]
 800c704:	e69e      	b.n	800c444 <__ieee754_rem_pio2+0x24>
 800c706:	bf00      	nop
 800c708:	54400000 	.word	0x54400000
 800c70c:	3ff921fb 	.word	0x3ff921fb
 800c710:	1a626331 	.word	0x1a626331
 800c714:	3dd0b461 	.word	0x3dd0b461
 800c718:	1a600000 	.word	0x1a600000
 800c71c:	3dd0b461 	.word	0x3dd0b461
 800c720:	2e037073 	.word	0x2e037073
 800c724:	3ba3198a 	.word	0x3ba3198a
 800c728:	6dc9c883 	.word	0x6dc9c883
 800c72c:	3fe45f30 	.word	0x3fe45f30
 800c730:	2e000000 	.word	0x2e000000
 800c734:	3ba3198a 	.word	0x3ba3198a
 800c738:	252049c1 	.word	0x252049c1
 800c73c:	397b839a 	.word	0x397b839a
 800c740:	3fe921fb 	.word	0x3fe921fb
 800c744:	4002d97b 	.word	0x4002d97b
 800c748:	3ff921fb 	.word	0x3ff921fb
 800c74c:	413921fb 	.word	0x413921fb
 800c750:	3fe00000 	.word	0x3fe00000
 800c754:	0800d1a4 	.word	0x0800d1a4
 800c758:	7fefffff 	.word	0x7fefffff
 800c75c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800c760:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800c764:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800c768:	4630      	mov	r0, r6
 800c76a:	460f      	mov	r7, r1
 800c76c:	f7f4 f9d6 	bl	8000b1c <__aeabi_d2iz>
 800c770:	f7f3 fed0 	bl	8000514 <__aeabi_i2d>
 800c774:	4602      	mov	r2, r0
 800c776:	460b      	mov	r3, r1
 800c778:	4630      	mov	r0, r6
 800c77a:	4639      	mov	r1, r7
 800c77c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c780:	f7f3 fd7a 	bl	8000278 <__aeabi_dsub>
 800c784:	4b22      	ldr	r3, [pc, #136]	@ (800c810 <__ieee754_rem_pio2+0x3f0>)
 800c786:	2200      	movs	r2, #0
 800c788:	f7f3 ff2e 	bl	80005e8 <__aeabi_dmul>
 800c78c:	460f      	mov	r7, r1
 800c78e:	4606      	mov	r6, r0
 800c790:	f7f4 f9c4 	bl	8000b1c <__aeabi_d2iz>
 800c794:	f7f3 febe 	bl	8000514 <__aeabi_i2d>
 800c798:	4602      	mov	r2, r0
 800c79a:	460b      	mov	r3, r1
 800c79c:	4630      	mov	r0, r6
 800c79e:	4639      	mov	r1, r7
 800c7a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c7a4:	f7f3 fd68 	bl	8000278 <__aeabi_dsub>
 800c7a8:	4b19      	ldr	r3, [pc, #100]	@ (800c810 <__ieee754_rem_pio2+0x3f0>)
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	f7f3 ff1c 	bl	80005e8 <__aeabi_dmul>
 800c7b0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800c7b4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800c7b8:	f04f 0803 	mov.w	r8, #3
 800c7bc:	2600      	movs	r6, #0
 800c7be:	2700      	movs	r7, #0
 800c7c0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800c7c4:	4632      	mov	r2, r6
 800c7c6:	463b      	mov	r3, r7
 800c7c8:	46c2      	mov	sl, r8
 800c7ca:	f108 38ff 	add.w	r8, r8, #4294967295
 800c7ce:	f7f4 f973 	bl	8000ab8 <__aeabi_dcmpeq>
 800c7d2:	2800      	cmp	r0, #0
 800c7d4:	d1f4      	bne.n	800c7c0 <__ieee754_rem_pio2+0x3a0>
 800c7d6:	4b0f      	ldr	r3, [pc, #60]	@ (800c814 <__ieee754_rem_pio2+0x3f4>)
 800c7d8:	9301      	str	r3, [sp, #4]
 800c7da:	2302      	movs	r3, #2
 800c7dc:	9300      	str	r3, [sp, #0]
 800c7de:	462a      	mov	r2, r5
 800c7e0:	4653      	mov	r3, sl
 800c7e2:	4621      	mov	r1, r4
 800c7e4:	a806      	add	r0, sp, #24
 800c7e6:	f000 f81f 	bl	800c828 <__kernel_rem_pio2>
 800c7ea:	9b04      	ldr	r3, [sp, #16]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	4605      	mov	r5, r0
 800c7f0:	f6bf ae53 	bge.w	800c49a <__ieee754_rem_pio2+0x7a>
 800c7f4:	e9d4 2100 	ldrd	r2, r1, [r4]
 800c7f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c7fc:	e9c4 2300 	strd	r2, r3, [r4]
 800c800:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800c804:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c808:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c80c:	e740      	b.n	800c690 <__ieee754_rem_pio2+0x270>
 800c80e:	bf00      	nop
 800c810:	41700000 	.word	0x41700000
 800c814:	0800d224 	.word	0x0800d224

0800c818 <fabs>:
 800c818:	ec51 0b10 	vmov	r0, r1, d0
 800c81c:	4602      	mov	r2, r0
 800c81e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c822:	ec43 2b10 	vmov	d0, r2, r3
 800c826:	4770      	bx	lr

0800c828 <__kernel_rem_pio2>:
 800c828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c82c:	ed2d 8b02 	vpush	{d8}
 800c830:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800c834:	f112 0f14 	cmn.w	r2, #20
 800c838:	9306      	str	r3, [sp, #24]
 800c83a:	9104      	str	r1, [sp, #16]
 800c83c:	4bbe      	ldr	r3, [pc, #760]	@ (800cb38 <__kernel_rem_pio2+0x310>)
 800c83e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800c840:	9008      	str	r0, [sp, #32]
 800c842:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c846:	9300      	str	r3, [sp, #0]
 800c848:	9b06      	ldr	r3, [sp, #24]
 800c84a:	f103 33ff 	add.w	r3, r3, #4294967295
 800c84e:	bfa8      	it	ge
 800c850:	1ed4      	subge	r4, r2, #3
 800c852:	9305      	str	r3, [sp, #20]
 800c854:	bfb2      	itee	lt
 800c856:	2400      	movlt	r4, #0
 800c858:	2318      	movge	r3, #24
 800c85a:	fb94 f4f3 	sdivge	r4, r4, r3
 800c85e:	f06f 0317 	mvn.w	r3, #23
 800c862:	fb04 3303 	mla	r3, r4, r3, r3
 800c866:	eb03 0b02 	add.w	fp, r3, r2
 800c86a:	9b00      	ldr	r3, [sp, #0]
 800c86c:	9a05      	ldr	r2, [sp, #20]
 800c86e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800cb28 <__kernel_rem_pio2+0x300>
 800c872:	eb03 0802 	add.w	r8, r3, r2
 800c876:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800c878:	1aa7      	subs	r7, r4, r2
 800c87a:	ae20      	add	r6, sp, #128	@ 0x80
 800c87c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c880:	2500      	movs	r5, #0
 800c882:	4545      	cmp	r5, r8
 800c884:	dd13      	ble.n	800c8ae <__kernel_rem_pio2+0x86>
 800c886:	9b06      	ldr	r3, [sp, #24]
 800c888:	aa20      	add	r2, sp, #128	@ 0x80
 800c88a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c88e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800c892:	f04f 0800 	mov.w	r8, #0
 800c896:	9b00      	ldr	r3, [sp, #0]
 800c898:	4598      	cmp	r8, r3
 800c89a:	dc31      	bgt.n	800c900 <__kernel_rem_pio2+0xd8>
 800c89c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800cb28 <__kernel_rem_pio2+0x300>
 800c8a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c8a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c8a8:	462f      	mov	r7, r5
 800c8aa:	2600      	movs	r6, #0
 800c8ac:	e01b      	b.n	800c8e6 <__kernel_rem_pio2+0xbe>
 800c8ae:	42ef      	cmn	r7, r5
 800c8b0:	d407      	bmi.n	800c8c2 <__kernel_rem_pio2+0x9a>
 800c8b2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c8b6:	f7f3 fe2d 	bl	8000514 <__aeabi_i2d>
 800c8ba:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c8be:	3501      	adds	r5, #1
 800c8c0:	e7df      	b.n	800c882 <__kernel_rem_pio2+0x5a>
 800c8c2:	ec51 0b18 	vmov	r0, r1, d8
 800c8c6:	e7f8      	b.n	800c8ba <__kernel_rem_pio2+0x92>
 800c8c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8cc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c8d0:	f7f3 fe8a 	bl	80005e8 <__aeabi_dmul>
 800c8d4:	4602      	mov	r2, r0
 800c8d6:	460b      	mov	r3, r1
 800c8d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8dc:	f7f3 fcce 	bl	800027c <__adddf3>
 800c8e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c8e4:	3601      	adds	r6, #1
 800c8e6:	9b05      	ldr	r3, [sp, #20]
 800c8e8:	429e      	cmp	r6, r3
 800c8ea:	f1a7 0708 	sub.w	r7, r7, #8
 800c8ee:	ddeb      	ble.n	800c8c8 <__kernel_rem_pio2+0xa0>
 800c8f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c8f4:	f108 0801 	add.w	r8, r8, #1
 800c8f8:	ecaa 7b02 	vstmia	sl!, {d7}
 800c8fc:	3508      	adds	r5, #8
 800c8fe:	e7ca      	b.n	800c896 <__kernel_rem_pio2+0x6e>
 800c900:	9b00      	ldr	r3, [sp, #0]
 800c902:	f8dd 8000 	ldr.w	r8, [sp]
 800c906:	aa0c      	add	r2, sp, #48	@ 0x30
 800c908:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c90c:	930a      	str	r3, [sp, #40]	@ 0x28
 800c90e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800c910:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c914:	9309      	str	r3, [sp, #36]	@ 0x24
 800c916:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800c91a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c91c:	ab98      	add	r3, sp, #608	@ 0x260
 800c91e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c922:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800c926:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c92a:	ac0c      	add	r4, sp, #48	@ 0x30
 800c92c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800c92e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800c932:	46a1      	mov	r9, r4
 800c934:	46c2      	mov	sl, r8
 800c936:	f1ba 0f00 	cmp.w	sl, #0
 800c93a:	f1a5 0508 	sub.w	r5, r5, #8
 800c93e:	dc77      	bgt.n	800ca30 <__kernel_rem_pio2+0x208>
 800c940:	4658      	mov	r0, fp
 800c942:	ed9d 0b02 	vldr	d0, [sp, #8]
 800c946:	f000 fac7 	bl	800ced8 <scalbn>
 800c94a:	ec57 6b10 	vmov	r6, r7, d0
 800c94e:	2200      	movs	r2, #0
 800c950:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800c954:	4630      	mov	r0, r6
 800c956:	4639      	mov	r1, r7
 800c958:	f7f3 fe46 	bl	80005e8 <__aeabi_dmul>
 800c95c:	ec41 0b10 	vmov	d0, r0, r1
 800c960:	f000 fb3a 	bl	800cfd8 <floor>
 800c964:	4b75      	ldr	r3, [pc, #468]	@ (800cb3c <__kernel_rem_pio2+0x314>)
 800c966:	ec51 0b10 	vmov	r0, r1, d0
 800c96a:	2200      	movs	r2, #0
 800c96c:	f7f3 fe3c 	bl	80005e8 <__aeabi_dmul>
 800c970:	4602      	mov	r2, r0
 800c972:	460b      	mov	r3, r1
 800c974:	4630      	mov	r0, r6
 800c976:	4639      	mov	r1, r7
 800c978:	f7f3 fc7e 	bl	8000278 <__aeabi_dsub>
 800c97c:	460f      	mov	r7, r1
 800c97e:	4606      	mov	r6, r0
 800c980:	f7f4 f8cc 	bl	8000b1c <__aeabi_d2iz>
 800c984:	9002      	str	r0, [sp, #8]
 800c986:	f7f3 fdc5 	bl	8000514 <__aeabi_i2d>
 800c98a:	4602      	mov	r2, r0
 800c98c:	460b      	mov	r3, r1
 800c98e:	4630      	mov	r0, r6
 800c990:	4639      	mov	r1, r7
 800c992:	f7f3 fc71 	bl	8000278 <__aeabi_dsub>
 800c996:	f1bb 0f00 	cmp.w	fp, #0
 800c99a:	4606      	mov	r6, r0
 800c99c:	460f      	mov	r7, r1
 800c99e:	dd6c      	ble.n	800ca7a <__kernel_rem_pio2+0x252>
 800c9a0:	f108 31ff 	add.w	r1, r8, #4294967295
 800c9a4:	ab0c      	add	r3, sp, #48	@ 0x30
 800c9a6:	9d02      	ldr	r5, [sp, #8]
 800c9a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c9ac:	f1cb 0018 	rsb	r0, fp, #24
 800c9b0:	fa43 f200 	asr.w	r2, r3, r0
 800c9b4:	4415      	add	r5, r2
 800c9b6:	4082      	lsls	r2, r0
 800c9b8:	1a9b      	subs	r3, r3, r2
 800c9ba:	aa0c      	add	r2, sp, #48	@ 0x30
 800c9bc:	9502      	str	r5, [sp, #8]
 800c9be:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c9c2:	f1cb 0217 	rsb	r2, fp, #23
 800c9c6:	fa43 f902 	asr.w	r9, r3, r2
 800c9ca:	f1b9 0f00 	cmp.w	r9, #0
 800c9ce:	dd64      	ble.n	800ca9a <__kernel_rem_pio2+0x272>
 800c9d0:	9b02      	ldr	r3, [sp, #8]
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	3301      	adds	r3, #1
 800c9d6:	9302      	str	r3, [sp, #8]
 800c9d8:	4615      	mov	r5, r2
 800c9da:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800c9de:	4590      	cmp	r8, r2
 800c9e0:	f300 80b8 	bgt.w	800cb54 <__kernel_rem_pio2+0x32c>
 800c9e4:	f1bb 0f00 	cmp.w	fp, #0
 800c9e8:	dd07      	ble.n	800c9fa <__kernel_rem_pio2+0x1d2>
 800c9ea:	f1bb 0f01 	cmp.w	fp, #1
 800c9ee:	f000 80bf 	beq.w	800cb70 <__kernel_rem_pio2+0x348>
 800c9f2:	f1bb 0f02 	cmp.w	fp, #2
 800c9f6:	f000 80c6 	beq.w	800cb86 <__kernel_rem_pio2+0x35e>
 800c9fa:	f1b9 0f02 	cmp.w	r9, #2
 800c9fe:	d14c      	bne.n	800ca9a <__kernel_rem_pio2+0x272>
 800ca00:	4632      	mov	r2, r6
 800ca02:	463b      	mov	r3, r7
 800ca04:	494e      	ldr	r1, [pc, #312]	@ (800cb40 <__kernel_rem_pio2+0x318>)
 800ca06:	2000      	movs	r0, #0
 800ca08:	f7f3 fc36 	bl	8000278 <__aeabi_dsub>
 800ca0c:	4606      	mov	r6, r0
 800ca0e:	460f      	mov	r7, r1
 800ca10:	2d00      	cmp	r5, #0
 800ca12:	d042      	beq.n	800ca9a <__kernel_rem_pio2+0x272>
 800ca14:	4658      	mov	r0, fp
 800ca16:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800cb30 <__kernel_rem_pio2+0x308>
 800ca1a:	f000 fa5d 	bl	800ced8 <scalbn>
 800ca1e:	4630      	mov	r0, r6
 800ca20:	4639      	mov	r1, r7
 800ca22:	ec53 2b10 	vmov	r2, r3, d0
 800ca26:	f7f3 fc27 	bl	8000278 <__aeabi_dsub>
 800ca2a:	4606      	mov	r6, r0
 800ca2c:	460f      	mov	r7, r1
 800ca2e:	e034      	b.n	800ca9a <__kernel_rem_pio2+0x272>
 800ca30:	4b44      	ldr	r3, [pc, #272]	@ (800cb44 <__kernel_rem_pio2+0x31c>)
 800ca32:	2200      	movs	r2, #0
 800ca34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca38:	f7f3 fdd6 	bl	80005e8 <__aeabi_dmul>
 800ca3c:	f7f4 f86e 	bl	8000b1c <__aeabi_d2iz>
 800ca40:	f7f3 fd68 	bl	8000514 <__aeabi_i2d>
 800ca44:	4b40      	ldr	r3, [pc, #256]	@ (800cb48 <__kernel_rem_pio2+0x320>)
 800ca46:	2200      	movs	r2, #0
 800ca48:	4606      	mov	r6, r0
 800ca4a:	460f      	mov	r7, r1
 800ca4c:	f7f3 fdcc 	bl	80005e8 <__aeabi_dmul>
 800ca50:	4602      	mov	r2, r0
 800ca52:	460b      	mov	r3, r1
 800ca54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca58:	f7f3 fc0e 	bl	8000278 <__aeabi_dsub>
 800ca5c:	f7f4 f85e 	bl	8000b1c <__aeabi_d2iz>
 800ca60:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ca64:	f849 0b04 	str.w	r0, [r9], #4
 800ca68:	4639      	mov	r1, r7
 800ca6a:	4630      	mov	r0, r6
 800ca6c:	f7f3 fc06 	bl	800027c <__adddf3>
 800ca70:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ca74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca78:	e75d      	b.n	800c936 <__kernel_rem_pio2+0x10e>
 800ca7a:	d107      	bne.n	800ca8c <__kernel_rem_pio2+0x264>
 800ca7c:	f108 33ff 	add.w	r3, r8, #4294967295
 800ca80:	aa0c      	add	r2, sp, #48	@ 0x30
 800ca82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca86:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800ca8a:	e79e      	b.n	800c9ca <__kernel_rem_pio2+0x1a2>
 800ca8c:	4b2f      	ldr	r3, [pc, #188]	@ (800cb4c <__kernel_rem_pio2+0x324>)
 800ca8e:	2200      	movs	r2, #0
 800ca90:	f7f4 f830 	bl	8000af4 <__aeabi_dcmpge>
 800ca94:	2800      	cmp	r0, #0
 800ca96:	d143      	bne.n	800cb20 <__kernel_rem_pio2+0x2f8>
 800ca98:	4681      	mov	r9, r0
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	4630      	mov	r0, r6
 800caa0:	4639      	mov	r1, r7
 800caa2:	f7f4 f809 	bl	8000ab8 <__aeabi_dcmpeq>
 800caa6:	2800      	cmp	r0, #0
 800caa8:	f000 80bf 	beq.w	800cc2a <__kernel_rem_pio2+0x402>
 800caac:	f108 33ff 	add.w	r3, r8, #4294967295
 800cab0:	2200      	movs	r2, #0
 800cab2:	9900      	ldr	r1, [sp, #0]
 800cab4:	428b      	cmp	r3, r1
 800cab6:	da6e      	bge.n	800cb96 <__kernel_rem_pio2+0x36e>
 800cab8:	2a00      	cmp	r2, #0
 800caba:	f000 8089 	beq.w	800cbd0 <__kernel_rem_pio2+0x3a8>
 800cabe:	f108 38ff 	add.w	r8, r8, #4294967295
 800cac2:	ab0c      	add	r3, sp, #48	@ 0x30
 800cac4:	f1ab 0b18 	sub.w	fp, fp, #24
 800cac8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d0f6      	beq.n	800cabe <__kernel_rem_pio2+0x296>
 800cad0:	4658      	mov	r0, fp
 800cad2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800cb30 <__kernel_rem_pio2+0x308>
 800cad6:	f000 f9ff 	bl	800ced8 <scalbn>
 800cada:	f108 0301 	add.w	r3, r8, #1
 800cade:	00da      	lsls	r2, r3, #3
 800cae0:	9205      	str	r2, [sp, #20]
 800cae2:	ec55 4b10 	vmov	r4, r5, d0
 800cae6:	aa70      	add	r2, sp, #448	@ 0x1c0
 800cae8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800cb44 <__kernel_rem_pio2+0x31c>
 800caec:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800caf0:	4646      	mov	r6, r8
 800caf2:	f04f 0a00 	mov.w	sl, #0
 800caf6:	2e00      	cmp	r6, #0
 800caf8:	f280 80cf 	bge.w	800cc9a <__kernel_rem_pio2+0x472>
 800cafc:	4644      	mov	r4, r8
 800cafe:	2c00      	cmp	r4, #0
 800cb00:	f2c0 80fd 	blt.w	800ccfe <__kernel_rem_pio2+0x4d6>
 800cb04:	4b12      	ldr	r3, [pc, #72]	@ (800cb50 <__kernel_rem_pio2+0x328>)
 800cb06:	461f      	mov	r7, r3
 800cb08:	ab70      	add	r3, sp, #448	@ 0x1c0
 800cb0a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cb0e:	9306      	str	r3, [sp, #24]
 800cb10:	f04f 0a00 	mov.w	sl, #0
 800cb14:	f04f 0b00 	mov.w	fp, #0
 800cb18:	2600      	movs	r6, #0
 800cb1a:	eba8 0504 	sub.w	r5, r8, r4
 800cb1e:	e0e2      	b.n	800cce6 <__kernel_rem_pio2+0x4be>
 800cb20:	f04f 0902 	mov.w	r9, #2
 800cb24:	e754      	b.n	800c9d0 <__kernel_rem_pio2+0x1a8>
 800cb26:	bf00      	nop
	...
 800cb34:	3ff00000 	.word	0x3ff00000
 800cb38:	0800d370 	.word	0x0800d370
 800cb3c:	40200000 	.word	0x40200000
 800cb40:	3ff00000 	.word	0x3ff00000
 800cb44:	3e700000 	.word	0x3e700000
 800cb48:	41700000 	.word	0x41700000
 800cb4c:	3fe00000 	.word	0x3fe00000
 800cb50:	0800d330 	.word	0x0800d330
 800cb54:	f854 3b04 	ldr.w	r3, [r4], #4
 800cb58:	b945      	cbnz	r5, 800cb6c <__kernel_rem_pio2+0x344>
 800cb5a:	b123      	cbz	r3, 800cb66 <__kernel_rem_pio2+0x33e>
 800cb5c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800cb60:	f844 3c04 	str.w	r3, [r4, #-4]
 800cb64:	2301      	movs	r3, #1
 800cb66:	3201      	adds	r2, #1
 800cb68:	461d      	mov	r5, r3
 800cb6a:	e738      	b.n	800c9de <__kernel_rem_pio2+0x1b6>
 800cb6c:	1acb      	subs	r3, r1, r3
 800cb6e:	e7f7      	b.n	800cb60 <__kernel_rem_pio2+0x338>
 800cb70:	f108 32ff 	add.w	r2, r8, #4294967295
 800cb74:	ab0c      	add	r3, sp, #48	@ 0x30
 800cb76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb7a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800cb7e:	a90c      	add	r1, sp, #48	@ 0x30
 800cb80:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800cb84:	e739      	b.n	800c9fa <__kernel_rem_pio2+0x1d2>
 800cb86:	f108 32ff 	add.w	r2, r8, #4294967295
 800cb8a:	ab0c      	add	r3, sp, #48	@ 0x30
 800cb8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb90:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cb94:	e7f3      	b.n	800cb7e <__kernel_rem_pio2+0x356>
 800cb96:	a90c      	add	r1, sp, #48	@ 0x30
 800cb98:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800cb9c:	3b01      	subs	r3, #1
 800cb9e:	430a      	orrs	r2, r1
 800cba0:	e787      	b.n	800cab2 <__kernel_rem_pio2+0x28a>
 800cba2:	3401      	adds	r4, #1
 800cba4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cba8:	2a00      	cmp	r2, #0
 800cbaa:	d0fa      	beq.n	800cba2 <__kernel_rem_pio2+0x37a>
 800cbac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cbae:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800cbb2:	eb0d 0503 	add.w	r5, sp, r3
 800cbb6:	9b06      	ldr	r3, [sp, #24]
 800cbb8:	aa20      	add	r2, sp, #128	@ 0x80
 800cbba:	4443      	add	r3, r8
 800cbbc:	f108 0701 	add.w	r7, r8, #1
 800cbc0:	3d98      	subs	r5, #152	@ 0x98
 800cbc2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800cbc6:	4444      	add	r4, r8
 800cbc8:	42bc      	cmp	r4, r7
 800cbca:	da04      	bge.n	800cbd6 <__kernel_rem_pio2+0x3ae>
 800cbcc:	46a0      	mov	r8, r4
 800cbce:	e6a2      	b.n	800c916 <__kernel_rem_pio2+0xee>
 800cbd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cbd2:	2401      	movs	r4, #1
 800cbd4:	e7e6      	b.n	800cba4 <__kernel_rem_pio2+0x37c>
 800cbd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbd8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800cbdc:	f7f3 fc9a 	bl	8000514 <__aeabi_i2d>
 800cbe0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800cea8 <__kernel_rem_pio2+0x680>
 800cbe4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800cbe8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cbec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cbf0:	46b2      	mov	sl, r6
 800cbf2:	f04f 0800 	mov.w	r8, #0
 800cbf6:	9b05      	ldr	r3, [sp, #20]
 800cbf8:	4598      	cmp	r8, r3
 800cbfa:	dd05      	ble.n	800cc08 <__kernel_rem_pio2+0x3e0>
 800cbfc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cc00:	3701      	adds	r7, #1
 800cc02:	eca5 7b02 	vstmia	r5!, {d7}
 800cc06:	e7df      	b.n	800cbc8 <__kernel_rem_pio2+0x3a0>
 800cc08:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800cc0c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800cc10:	f7f3 fcea 	bl	80005e8 <__aeabi_dmul>
 800cc14:	4602      	mov	r2, r0
 800cc16:	460b      	mov	r3, r1
 800cc18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc1c:	f7f3 fb2e 	bl	800027c <__adddf3>
 800cc20:	f108 0801 	add.w	r8, r8, #1
 800cc24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc28:	e7e5      	b.n	800cbf6 <__kernel_rem_pio2+0x3ce>
 800cc2a:	f1cb 0000 	rsb	r0, fp, #0
 800cc2e:	ec47 6b10 	vmov	d0, r6, r7
 800cc32:	f000 f951 	bl	800ced8 <scalbn>
 800cc36:	ec55 4b10 	vmov	r4, r5, d0
 800cc3a:	4b9d      	ldr	r3, [pc, #628]	@ (800ceb0 <__kernel_rem_pio2+0x688>)
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	4620      	mov	r0, r4
 800cc40:	4629      	mov	r1, r5
 800cc42:	f7f3 ff57 	bl	8000af4 <__aeabi_dcmpge>
 800cc46:	b300      	cbz	r0, 800cc8a <__kernel_rem_pio2+0x462>
 800cc48:	4b9a      	ldr	r3, [pc, #616]	@ (800ceb4 <__kernel_rem_pio2+0x68c>)
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	4620      	mov	r0, r4
 800cc4e:	4629      	mov	r1, r5
 800cc50:	f7f3 fcca 	bl	80005e8 <__aeabi_dmul>
 800cc54:	f7f3 ff62 	bl	8000b1c <__aeabi_d2iz>
 800cc58:	4606      	mov	r6, r0
 800cc5a:	f7f3 fc5b 	bl	8000514 <__aeabi_i2d>
 800cc5e:	4b94      	ldr	r3, [pc, #592]	@ (800ceb0 <__kernel_rem_pio2+0x688>)
 800cc60:	2200      	movs	r2, #0
 800cc62:	f7f3 fcc1 	bl	80005e8 <__aeabi_dmul>
 800cc66:	460b      	mov	r3, r1
 800cc68:	4602      	mov	r2, r0
 800cc6a:	4629      	mov	r1, r5
 800cc6c:	4620      	mov	r0, r4
 800cc6e:	f7f3 fb03 	bl	8000278 <__aeabi_dsub>
 800cc72:	f7f3 ff53 	bl	8000b1c <__aeabi_d2iz>
 800cc76:	ab0c      	add	r3, sp, #48	@ 0x30
 800cc78:	f10b 0b18 	add.w	fp, fp, #24
 800cc7c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800cc80:	f108 0801 	add.w	r8, r8, #1
 800cc84:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800cc88:	e722      	b.n	800cad0 <__kernel_rem_pio2+0x2a8>
 800cc8a:	4620      	mov	r0, r4
 800cc8c:	4629      	mov	r1, r5
 800cc8e:	f7f3 ff45 	bl	8000b1c <__aeabi_d2iz>
 800cc92:	ab0c      	add	r3, sp, #48	@ 0x30
 800cc94:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800cc98:	e71a      	b.n	800cad0 <__kernel_rem_pio2+0x2a8>
 800cc9a:	ab0c      	add	r3, sp, #48	@ 0x30
 800cc9c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800cca0:	f7f3 fc38 	bl	8000514 <__aeabi_i2d>
 800cca4:	4622      	mov	r2, r4
 800cca6:	462b      	mov	r3, r5
 800cca8:	f7f3 fc9e 	bl	80005e8 <__aeabi_dmul>
 800ccac:	4652      	mov	r2, sl
 800ccae:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800ccb2:	465b      	mov	r3, fp
 800ccb4:	4620      	mov	r0, r4
 800ccb6:	4629      	mov	r1, r5
 800ccb8:	f7f3 fc96 	bl	80005e8 <__aeabi_dmul>
 800ccbc:	3e01      	subs	r6, #1
 800ccbe:	4604      	mov	r4, r0
 800ccc0:	460d      	mov	r5, r1
 800ccc2:	e718      	b.n	800caf6 <__kernel_rem_pio2+0x2ce>
 800ccc4:	9906      	ldr	r1, [sp, #24]
 800ccc6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800ccca:	9106      	str	r1, [sp, #24]
 800cccc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800ccd0:	f7f3 fc8a 	bl	80005e8 <__aeabi_dmul>
 800ccd4:	4602      	mov	r2, r0
 800ccd6:	460b      	mov	r3, r1
 800ccd8:	4650      	mov	r0, sl
 800ccda:	4659      	mov	r1, fp
 800ccdc:	f7f3 face 	bl	800027c <__adddf3>
 800cce0:	3601      	adds	r6, #1
 800cce2:	4682      	mov	sl, r0
 800cce4:	468b      	mov	fp, r1
 800cce6:	9b00      	ldr	r3, [sp, #0]
 800cce8:	429e      	cmp	r6, r3
 800ccea:	dc01      	bgt.n	800ccf0 <__kernel_rem_pio2+0x4c8>
 800ccec:	42b5      	cmp	r5, r6
 800ccee:	dae9      	bge.n	800ccc4 <__kernel_rem_pio2+0x49c>
 800ccf0:	ab48      	add	r3, sp, #288	@ 0x120
 800ccf2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ccf6:	e9c5 ab00 	strd	sl, fp, [r5]
 800ccfa:	3c01      	subs	r4, #1
 800ccfc:	e6ff      	b.n	800cafe <__kernel_rem_pio2+0x2d6>
 800ccfe:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800cd00:	2b02      	cmp	r3, #2
 800cd02:	dc0b      	bgt.n	800cd1c <__kernel_rem_pio2+0x4f4>
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	dc39      	bgt.n	800cd7c <__kernel_rem_pio2+0x554>
 800cd08:	d05d      	beq.n	800cdc6 <__kernel_rem_pio2+0x59e>
 800cd0a:	9b02      	ldr	r3, [sp, #8]
 800cd0c:	f003 0007 	and.w	r0, r3, #7
 800cd10:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800cd14:	ecbd 8b02 	vpop	{d8}
 800cd18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd1c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800cd1e:	2b03      	cmp	r3, #3
 800cd20:	d1f3      	bne.n	800cd0a <__kernel_rem_pio2+0x4e2>
 800cd22:	9b05      	ldr	r3, [sp, #20]
 800cd24:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800cd28:	eb0d 0403 	add.w	r4, sp, r3
 800cd2c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800cd30:	4625      	mov	r5, r4
 800cd32:	46c2      	mov	sl, r8
 800cd34:	f1ba 0f00 	cmp.w	sl, #0
 800cd38:	f1a5 0508 	sub.w	r5, r5, #8
 800cd3c:	dc6b      	bgt.n	800ce16 <__kernel_rem_pio2+0x5ee>
 800cd3e:	4645      	mov	r5, r8
 800cd40:	2d01      	cmp	r5, #1
 800cd42:	f1a4 0408 	sub.w	r4, r4, #8
 800cd46:	f300 8087 	bgt.w	800ce58 <__kernel_rem_pio2+0x630>
 800cd4a:	9c05      	ldr	r4, [sp, #20]
 800cd4c:	ab48      	add	r3, sp, #288	@ 0x120
 800cd4e:	441c      	add	r4, r3
 800cd50:	2000      	movs	r0, #0
 800cd52:	2100      	movs	r1, #0
 800cd54:	f1b8 0f01 	cmp.w	r8, #1
 800cd58:	f300 809c 	bgt.w	800ce94 <__kernel_rem_pio2+0x66c>
 800cd5c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800cd60:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800cd64:	f1b9 0f00 	cmp.w	r9, #0
 800cd68:	f040 80a6 	bne.w	800ceb8 <__kernel_rem_pio2+0x690>
 800cd6c:	9b04      	ldr	r3, [sp, #16]
 800cd6e:	e9c3 7800 	strd	r7, r8, [r3]
 800cd72:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800cd76:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800cd7a:	e7c6      	b.n	800cd0a <__kernel_rem_pio2+0x4e2>
 800cd7c:	9d05      	ldr	r5, [sp, #20]
 800cd7e:	ab48      	add	r3, sp, #288	@ 0x120
 800cd80:	441d      	add	r5, r3
 800cd82:	4644      	mov	r4, r8
 800cd84:	2000      	movs	r0, #0
 800cd86:	2100      	movs	r1, #0
 800cd88:	2c00      	cmp	r4, #0
 800cd8a:	da35      	bge.n	800cdf8 <__kernel_rem_pio2+0x5d0>
 800cd8c:	f1b9 0f00 	cmp.w	r9, #0
 800cd90:	d038      	beq.n	800ce04 <__kernel_rem_pio2+0x5dc>
 800cd92:	4602      	mov	r2, r0
 800cd94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cd98:	9c04      	ldr	r4, [sp, #16]
 800cd9a:	e9c4 2300 	strd	r2, r3, [r4]
 800cd9e:	4602      	mov	r2, r0
 800cda0:	460b      	mov	r3, r1
 800cda2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800cda6:	f7f3 fa67 	bl	8000278 <__aeabi_dsub>
 800cdaa:	ad4a      	add	r5, sp, #296	@ 0x128
 800cdac:	2401      	movs	r4, #1
 800cdae:	45a0      	cmp	r8, r4
 800cdb0:	da2b      	bge.n	800ce0a <__kernel_rem_pio2+0x5e2>
 800cdb2:	f1b9 0f00 	cmp.w	r9, #0
 800cdb6:	d002      	beq.n	800cdbe <__kernel_rem_pio2+0x596>
 800cdb8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cdbc:	4619      	mov	r1, r3
 800cdbe:	9b04      	ldr	r3, [sp, #16]
 800cdc0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800cdc4:	e7a1      	b.n	800cd0a <__kernel_rem_pio2+0x4e2>
 800cdc6:	9c05      	ldr	r4, [sp, #20]
 800cdc8:	ab48      	add	r3, sp, #288	@ 0x120
 800cdca:	441c      	add	r4, r3
 800cdcc:	2000      	movs	r0, #0
 800cdce:	2100      	movs	r1, #0
 800cdd0:	f1b8 0f00 	cmp.w	r8, #0
 800cdd4:	da09      	bge.n	800cdea <__kernel_rem_pio2+0x5c2>
 800cdd6:	f1b9 0f00 	cmp.w	r9, #0
 800cdda:	d002      	beq.n	800cde2 <__kernel_rem_pio2+0x5ba>
 800cddc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cde0:	4619      	mov	r1, r3
 800cde2:	9b04      	ldr	r3, [sp, #16]
 800cde4:	e9c3 0100 	strd	r0, r1, [r3]
 800cde8:	e78f      	b.n	800cd0a <__kernel_rem_pio2+0x4e2>
 800cdea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cdee:	f7f3 fa45 	bl	800027c <__adddf3>
 800cdf2:	f108 38ff 	add.w	r8, r8, #4294967295
 800cdf6:	e7eb      	b.n	800cdd0 <__kernel_rem_pio2+0x5a8>
 800cdf8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800cdfc:	f7f3 fa3e 	bl	800027c <__adddf3>
 800ce00:	3c01      	subs	r4, #1
 800ce02:	e7c1      	b.n	800cd88 <__kernel_rem_pio2+0x560>
 800ce04:	4602      	mov	r2, r0
 800ce06:	460b      	mov	r3, r1
 800ce08:	e7c6      	b.n	800cd98 <__kernel_rem_pio2+0x570>
 800ce0a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800ce0e:	f7f3 fa35 	bl	800027c <__adddf3>
 800ce12:	3401      	adds	r4, #1
 800ce14:	e7cb      	b.n	800cdae <__kernel_rem_pio2+0x586>
 800ce16:	ed95 7b00 	vldr	d7, [r5]
 800ce1a:	ed8d 7b00 	vstr	d7, [sp]
 800ce1e:	ed95 7b02 	vldr	d7, [r5, #8]
 800ce22:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce26:	ec53 2b17 	vmov	r2, r3, d7
 800ce2a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ce2e:	f7f3 fa25 	bl	800027c <__adddf3>
 800ce32:	4602      	mov	r2, r0
 800ce34:	460b      	mov	r3, r1
 800ce36:	4606      	mov	r6, r0
 800ce38:	460f      	mov	r7, r1
 800ce3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce3e:	f7f3 fa1b 	bl	8000278 <__aeabi_dsub>
 800ce42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ce46:	f7f3 fa19 	bl	800027c <__adddf3>
 800ce4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ce4e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800ce52:	e9c5 6700 	strd	r6, r7, [r5]
 800ce56:	e76d      	b.n	800cd34 <__kernel_rem_pio2+0x50c>
 800ce58:	ed94 7b00 	vldr	d7, [r4]
 800ce5c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800ce60:	ec51 0b17 	vmov	r0, r1, d7
 800ce64:	4652      	mov	r2, sl
 800ce66:	465b      	mov	r3, fp
 800ce68:	ed8d 7b00 	vstr	d7, [sp]
 800ce6c:	f7f3 fa06 	bl	800027c <__adddf3>
 800ce70:	4602      	mov	r2, r0
 800ce72:	460b      	mov	r3, r1
 800ce74:	4606      	mov	r6, r0
 800ce76:	460f      	mov	r7, r1
 800ce78:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce7c:	f7f3 f9fc 	bl	8000278 <__aeabi_dsub>
 800ce80:	4652      	mov	r2, sl
 800ce82:	465b      	mov	r3, fp
 800ce84:	f7f3 f9fa 	bl	800027c <__adddf3>
 800ce88:	3d01      	subs	r5, #1
 800ce8a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ce8e:	e9c4 6700 	strd	r6, r7, [r4]
 800ce92:	e755      	b.n	800cd40 <__kernel_rem_pio2+0x518>
 800ce94:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ce98:	f7f3 f9f0 	bl	800027c <__adddf3>
 800ce9c:	f108 38ff 	add.w	r8, r8, #4294967295
 800cea0:	e758      	b.n	800cd54 <__kernel_rem_pio2+0x52c>
 800cea2:	bf00      	nop
 800cea4:	f3af 8000 	nop.w
	...
 800ceb0:	41700000 	.word	0x41700000
 800ceb4:	3e700000 	.word	0x3e700000
 800ceb8:	9b04      	ldr	r3, [sp, #16]
 800ceba:	9a04      	ldr	r2, [sp, #16]
 800cebc:	601f      	str	r7, [r3, #0]
 800cebe:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800cec2:	605c      	str	r4, [r3, #4]
 800cec4:	609d      	str	r5, [r3, #8]
 800cec6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ceca:	60d3      	str	r3, [r2, #12]
 800cecc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ced0:	6110      	str	r0, [r2, #16]
 800ced2:	6153      	str	r3, [r2, #20]
 800ced4:	e719      	b.n	800cd0a <__kernel_rem_pio2+0x4e2>
 800ced6:	bf00      	nop

0800ced8 <scalbn>:
 800ced8:	b570      	push	{r4, r5, r6, lr}
 800ceda:	ec55 4b10 	vmov	r4, r5, d0
 800cede:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800cee2:	4606      	mov	r6, r0
 800cee4:	462b      	mov	r3, r5
 800cee6:	b991      	cbnz	r1, 800cf0e <scalbn+0x36>
 800cee8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800ceec:	4323      	orrs	r3, r4
 800ceee:	d03d      	beq.n	800cf6c <scalbn+0x94>
 800cef0:	4b35      	ldr	r3, [pc, #212]	@ (800cfc8 <scalbn+0xf0>)
 800cef2:	4620      	mov	r0, r4
 800cef4:	4629      	mov	r1, r5
 800cef6:	2200      	movs	r2, #0
 800cef8:	f7f3 fb76 	bl	80005e8 <__aeabi_dmul>
 800cefc:	4b33      	ldr	r3, [pc, #204]	@ (800cfcc <scalbn+0xf4>)
 800cefe:	429e      	cmp	r6, r3
 800cf00:	4604      	mov	r4, r0
 800cf02:	460d      	mov	r5, r1
 800cf04:	da0f      	bge.n	800cf26 <scalbn+0x4e>
 800cf06:	a328      	add	r3, pc, #160	@ (adr r3, 800cfa8 <scalbn+0xd0>)
 800cf08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf0c:	e01e      	b.n	800cf4c <scalbn+0x74>
 800cf0e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800cf12:	4291      	cmp	r1, r2
 800cf14:	d10b      	bne.n	800cf2e <scalbn+0x56>
 800cf16:	4622      	mov	r2, r4
 800cf18:	4620      	mov	r0, r4
 800cf1a:	4629      	mov	r1, r5
 800cf1c:	f7f3 f9ae 	bl	800027c <__adddf3>
 800cf20:	4604      	mov	r4, r0
 800cf22:	460d      	mov	r5, r1
 800cf24:	e022      	b.n	800cf6c <scalbn+0x94>
 800cf26:	460b      	mov	r3, r1
 800cf28:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800cf2c:	3936      	subs	r1, #54	@ 0x36
 800cf2e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800cf32:	4296      	cmp	r6, r2
 800cf34:	dd0d      	ble.n	800cf52 <scalbn+0x7a>
 800cf36:	2d00      	cmp	r5, #0
 800cf38:	a11d      	add	r1, pc, #116	@ (adr r1, 800cfb0 <scalbn+0xd8>)
 800cf3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf3e:	da02      	bge.n	800cf46 <scalbn+0x6e>
 800cf40:	a11d      	add	r1, pc, #116	@ (adr r1, 800cfb8 <scalbn+0xe0>)
 800cf42:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf46:	a31a      	add	r3, pc, #104	@ (adr r3, 800cfb0 <scalbn+0xd8>)
 800cf48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf4c:	f7f3 fb4c 	bl	80005e8 <__aeabi_dmul>
 800cf50:	e7e6      	b.n	800cf20 <scalbn+0x48>
 800cf52:	1872      	adds	r2, r6, r1
 800cf54:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800cf58:	428a      	cmp	r2, r1
 800cf5a:	dcec      	bgt.n	800cf36 <scalbn+0x5e>
 800cf5c:	2a00      	cmp	r2, #0
 800cf5e:	dd08      	ble.n	800cf72 <scalbn+0x9a>
 800cf60:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800cf64:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800cf68:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cf6c:	ec45 4b10 	vmov	d0, r4, r5
 800cf70:	bd70      	pop	{r4, r5, r6, pc}
 800cf72:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800cf76:	da08      	bge.n	800cf8a <scalbn+0xb2>
 800cf78:	2d00      	cmp	r5, #0
 800cf7a:	a10b      	add	r1, pc, #44	@ (adr r1, 800cfa8 <scalbn+0xd0>)
 800cf7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf80:	dac1      	bge.n	800cf06 <scalbn+0x2e>
 800cf82:	a10f      	add	r1, pc, #60	@ (adr r1, 800cfc0 <scalbn+0xe8>)
 800cf84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf88:	e7bd      	b.n	800cf06 <scalbn+0x2e>
 800cf8a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800cf8e:	3236      	adds	r2, #54	@ 0x36
 800cf90:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800cf94:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cf98:	4620      	mov	r0, r4
 800cf9a:	4b0d      	ldr	r3, [pc, #52]	@ (800cfd0 <scalbn+0xf8>)
 800cf9c:	4629      	mov	r1, r5
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	e7d4      	b.n	800cf4c <scalbn+0x74>
 800cfa2:	bf00      	nop
 800cfa4:	f3af 8000 	nop.w
 800cfa8:	c2f8f359 	.word	0xc2f8f359
 800cfac:	01a56e1f 	.word	0x01a56e1f
 800cfb0:	8800759c 	.word	0x8800759c
 800cfb4:	7e37e43c 	.word	0x7e37e43c
 800cfb8:	8800759c 	.word	0x8800759c
 800cfbc:	fe37e43c 	.word	0xfe37e43c
 800cfc0:	c2f8f359 	.word	0xc2f8f359
 800cfc4:	81a56e1f 	.word	0x81a56e1f
 800cfc8:	43500000 	.word	0x43500000
 800cfcc:	ffff3cb0 	.word	0xffff3cb0
 800cfd0:	3c900000 	.word	0x3c900000
 800cfd4:	00000000 	.word	0x00000000

0800cfd8 <floor>:
 800cfd8:	ec51 0b10 	vmov	r0, r1, d0
 800cfdc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cfe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfe4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800cfe8:	2e13      	cmp	r6, #19
 800cfea:	460c      	mov	r4, r1
 800cfec:	4605      	mov	r5, r0
 800cfee:	4680      	mov	r8, r0
 800cff0:	dc34      	bgt.n	800d05c <floor+0x84>
 800cff2:	2e00      	cmp	r6, #0
 800cff4:	da17      	bge.n	800d026 <floor+0x4e>
 800cff6:	a332      	add	r3, pc, #200	@ (adr r3, 800d0c0 <floor+0xe8>)
 800cff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cffc:	f7f3 f93e 	bl	800027c <__adddf3>
 800d000:	2200      	movs	r2, #0
 800d002:	2300      	movs	r3, #0
 800d004:	f7f3 fd80 	bl	8000b08 <__aeabi_dcmpgt>
 800d008:	b150      	cbz	r0, 800d020 <floor+0x48>
 800d00a:	2c00      	cmp	r4, #0
 800d00c:	da55      	bge.n	800d0ba <floor+0xe2>
 800d00e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800d012:	432c      	orrs	r4, r5
 800d014:	2500      	movs	r5, #0
 800d016:	42ac      	cmp	r4, r5
 800d018:	4c2b      	ldr	r4, [pc, #172]	@ (800d0c8 <floor+0xf0>)
 800d01a:	bf08      	it	eq
 800d01c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800d020:	4621      	mov	r1, r4
 800d022:	4628      	mov	r0, r5
 800d024:	e023      	b.n	800d06e <floor+0x96>
 800d026:	4f29      	ldr	r7, [pc, #164]	@ (800d0cc <floor+0xf4>)
 800d028:	4137      	asrs	r7, r6
 800d02a:	ea01 0307 	and.w	r3, r1, r7
 800d02e:	4303      	orrs	r3, r0
 800d030:	d01d      	beq.n	800d06e <floor+0x96>
 800d032:	a323      	add	r3, pc, #140	@ (adr r3, 800d0c0 <floor+0xe8>)
 800d034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d038:	f7f3 f920 	bl	800027c <__adddf3>
 800d03c:	2200      	movs	r2, #0
 800d03e:	2300      	movs	r3, #0
 800d040:	f7f3 fd62 	bl	8000b08 <__aeabi_dcmpgt>
 800d044:	2800      	cmp	r0, #0
 800d046:	d0eb      	beq.n	800d020 <floor+0x48>
 800d048:	2c00      	cmp	r4, #0
 800d04a:	bfbe      	ittt	lt
 800d04c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800d050:	4133      	asrlt	r3, r6
 800d052:	18e4      	addlt	r4, r4, r3
 800d054:	ea24 0407 	bic.w	r4, r4, r7
 800d058:	2500      	movs	r5, #0
 800d05a:	e7e1      	b.n	800d020 <floor+0x48>
 800d05c:	2e33      	cmp	r6, #51	@ 0x33
 800d05e:	dd0a      	ble.n	800d076 <floor+0x9e>
 800d060:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800d064:	d103      	bne.n	800d06e <floor+0x96>
 800d066:	4602      	mov	r2, r0
 800d068:	460b      	mov	r3, r1
 800d06a:	f7f3 f907 	bl	800027c <__adddf3>
 800d06e:	ec41 0b10 	vmov	d0, r0, r1
 800d072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d076:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800d07a:	f04f 37ff 	mov.w	r7, #4294967295
 800d07e:	40df      	lsrs	r7, r3
 800d080:	4207      	tst	r7, r0
 800d082:	d0f4      	beq.n	800d06e <floor+0x96>
 800d084:	a30e      	add	r3, pc, #56	@ (adr r3, 800d0c0 <floor+0xe8>)
 800d086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d08a:	f7f3 f8f7 	bl	800027c <__adddf3>
 800d08e:	2200      	movs	r2, #0
 800d090:	2300      	movs	r3, #0
 800d092:	f7f3 fd39 	bl	8000b08 <__aeabi_dcmpgt>
 800d096:	2800      	cmp	r0, #0
 800d098:	d0c2      	beq.n	800d020 <floor+0x48>
 800d09a:	2c00      	cmp	r4, #0
 800d09c:	da0a      	bge.n	800d0b4 <floor+0xdc>
 800d09e:	2e14      	cmp	r6, #20
 800d0a0:	d101      	bne.n	800d0a6 <floor+0xce>
 800d0a2:	3401      	adds	r4, #1
 800d0a4:	e006      	b.n	800d0b4 <floor+0xdc>
 800d0a6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	40b3      	lsls	r3, r6
 800d0ae:	441d      	add	r5, r3
 800d0b0:	4545      	cmp	r5, r8
 800d0b2:	d3f6      	bcc.n	800d0a2 <floor+0xca>
 800d0b4:	ea25 0507 	bic.w	r5, r5, r7
 800d0b8:	e7b2      	b.n	800d020 <floor+0x48>
 800d0ba:	2500      	movs	r5, #0
 800d0bc:	462c      	mov	r4, r5
 800d0be:	e7af      	b.n	800d020 <floor+0x48>
 800d0c0:	8800759c 	.word	0x8800759c
 800d0c4:	7e37e43c 	.word	0x7e37e43c
 800d0c8:	bff00000 	.word	0xbff00000
 800d0cc:	000fffff 	.word	0x000fffff

0800d0d0 <_init>:
 800d0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0d2:	bf00      	nop
 800d0d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0d6:	bc08      	pop	{r3}
 800d0d8:	469e      	mov	lr, r3
 800d0da:	4770      	bx	lr

0800d0dc <_fini>:
 800d0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0de:	bf00      	nop
 800d0e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0e2:	bc08      	pop	{r3}
 800d0e4:	469e      	mov	lr, r3
 800d0e6:	4770      	bx	lr
